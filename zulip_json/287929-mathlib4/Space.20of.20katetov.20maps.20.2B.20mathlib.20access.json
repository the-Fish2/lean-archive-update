[
    {
        "content": "<p>I defined the space of Katetov maps on a metric space and related instances, and I think it's worth trying to PR it : )  Could I have mathlib access? My github is luigi-massacci</p>\n<p>here is the content if anyone wants to give some comments in the meantime.</p>\n<p>Definition and FunLike mumbo-jumbo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Compactification.OnePoint</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Archimedean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Separation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.PseudoMetric</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsKatetov</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Proposition that `f` is 1-Lipschitz -/</span>\n  <span class=\"n\">abs_sub_le_dist</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"sd\">/-- Second defining inequality of a Katetov map  -/</span>\n  <span class=\"n\">dist_le_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsKatetov_def</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsKatetov</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">h.abs_sub_le_dist</span><span class=\"o\">,</span> <span class=\"n\">h.dist_le_add</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">KatetovMap</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The function `X → ℝ` -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"sd\">/-- Proposition that `toFun` is a Katetov map -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">IsKatetovtoFun</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"E(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">KatetovMap</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">KatetovMapClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">X</span>  <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_katetov</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">KatetovMapClass</span> <span class=\"o\">(</span><span class=\"n\">map_katetov</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">KatetovMapClass</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">X</span>  <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">KatetovMapClass</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">toKatetovMap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_katetov</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">toKatetovMap</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">KatetovMapClass</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">KatetovMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">funLike</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">KatetovMap.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">toKatetovMapClass</span> <span class=\"o\">:</span> <span class=\"n\">KatetovMapClass</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_katetov</span> <span class=\"o\">:=</span> <span class=\"n\">KatetovMap.IsKatetovtoFun</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toFun_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CanLift</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">DFunLike.coe</span> <span class=\"n\">IsKatetov</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Simps.apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">KatetovMap</span> <span class=\"o\">(</span><span class=\"n\">toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_coe</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">KatetovMapClass</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">DFunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span>\n  <span class=\"n\">IsKatetovtoFun</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.IsKatetovtoFun</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">copy_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFunLike.ext'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">katetov_set_coe</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f.1.IsKatetovtoFun</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Function.Injective</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">KatetovMap</span>\n</code></pre></div>\n<p>MetricSpace and CompleteSpace instances: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_sub_dist_le</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">abs_le.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"o\">[(</span><span class=\"n\">map_katetov</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dist_le_add</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">le_of_abs_le</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">map_katetov</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs_sub_le_dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bounded_dist_set</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">›</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">abs_sub_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_dist_le</span> <span class=\"n\">x₀</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_dist_le</span> <span class=\"n\">x₀</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩)⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_zero_of_sSup_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsup</span> <span class=\"o\">:</span> <span class=\"n\">sSup</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">↦</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hsup</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_csSup</span> <span class=\"n\">hb</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snonneg</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">katetov_nonneg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dist_self</span> <span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">map_katetov</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dist_le_add</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nonneg_add_self_iff.mp</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">empty_sSup_of_empty</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">Set.Nonempty</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IsEmpty.false</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">dist</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"n\">dist_self</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">sSup</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">empty_sSup_of_empty</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">abs_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">,</span> <span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">dist_comm</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Real.sSup_le</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">val</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">csSup_add</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">abs_sub_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"n\">apply</span> <span class=\"n\">le_csSup</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">BddAbove.add</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">bounded_dist_set</span><span class=\"o\">)</span>\n          <span class=\"n\">refine</span> <span class=\"n\">Set.mem_add.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)⟩</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">›</span>\n          <span class=\"n\">use</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">bounded_dist_set</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">›</span>\n          <span class=\"n\">use</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x₀</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">bounded_dist_set</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">add_nonneg</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Real.sSup_nonneg</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">val</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">abs_nonneg</span><span class=\"o\">}</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">sSup</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">hfh</span> <span class=\"o\">:=</span> <span class=\"n\">empty_sSup_of_empty</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">hfg</span> <span class=\"o\">:=</span> <span class=\"n\">empty_sSup_of_empty</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n      <span class=\"k\">have</span> <span class=\"n\">hgh</span><span class=\"o\">:=</span> <span class=\"n\">empty_sSup_of_empty</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">]</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_sSup_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">abs_eq_zero.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">bounded_dist_set</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span>\n  <span class=\"n\">edist_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">ENNReal.coe_nnreal_eq</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dist_coe_le_dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">le_csSup</span> <span class=\"n\">bounded_dist_set</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">])</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dist_le</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)):</span>\n  <span class=\"n\">dist</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">dist_coe_le_dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Real.sSup_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Metric.complete_of_cauchySeq_tendsto</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">CauchySeq</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cauchySeq_iff_le_tendsto_0.1</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">b_bound</span><span class=\"o\">,</span> <span class=\"n\">b_lim</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">u_bdd</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">N</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">dist_coe_le_dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_bound</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">N</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">ux_cau</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">CauchySeq</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cauchySeq_iff_le_tendsto_0.2</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">u_bdd</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b_lim</span><span class=\"o\">⟩</span>\n    <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">using</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cauchySeq_tendsto_of_complete</span> <span class=\"o\">(</span><span class=\"n\">ux_cau</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">fF_bdd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_of_tendsto</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_nhds.dist</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">Filter.eventually_atTop.2</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u_bdd</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">⟩)</span>\n    <span class=\"k\">have</span> <span class=\"n\">kat_f</span> <span class=\"o\">:</span> <span class=\"n\">IsKatetov</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">Metric.tendsto_atTop.mp</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">Nx</span><span class=\"o\">,</span> <span class=\"n\">hNx</span><span class=\"o\">⟩</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">Metric.tendsto_atTop.mp</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">Ny</span><span class=\"o\">,</span> <span class=\"n\">hNy</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">set</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">Nx</span> <span class=\"n\">Ny</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">hNx</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">hNy</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">)]</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">|</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">abs_add</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">;</span> <span class=\"n\">gcongr</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">exact</span> <span class=\"n\">abs_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n              <span class=\"n\">linarith</span> <span class=\"o\">[(</span><span class=\"n\">map_katetov</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">abs_sub_le_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">map_katetov</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">dist_le_add</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_abs_lt</span> <span class=\"n\">hNx</span><span class=\"o\">),</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_abs_lt</span> <span class=\"n\">hNy</span><span class=\"o\">)]</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">le_of_forall_pos_le_add</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n          <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">εpos</span><span class=\"o\">)]}</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">kat_f</span><span class=\"o\">⟩</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">tendsto_iff_dist_tendsto_zero.2</span> <span class=\"o\">(</span><span class=\"n\">sq</span>\n</code></pre></div>",
        "id": 424965125,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709676064
    },
    {
        "content": "<p>Could you tell us a bit where this notion appears? It seems pretty arcane to me.</p>",
        "id": 424967655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709677105
    },
    {
        "content": "<p>In the definition, why don’t you using our theory of Lipschitz map? This would probably save you a lot of work down the road.</p>",
        "id": 424967778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709677167
    },
    {
        "content": "<p>I don’t know whether we currently have a way to autogenerate the first theorem but clearly you can use the same proof for both implications: <code>fun ⟨h₁, h₂⟩ ↦ ⟨h₁, h₂⟩</code>.</p>",
        "id": 424967935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709677227
    },
    {
        "content": "<p>The metric space instance could very probably reuse existing things from Mathlib.</p>",
        "id": 424968318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709677381
    },
    {
        "content": "<p>and same for completeness</p>",
        "id": 424968398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709677414
    },
    {
        "content": "<p>Yes of course. In reverse order:</p>\n<ul>\n<li>I'm sure there are, I just didn't find them. Especially for handling sSup I think there must be, but it was never quite right</li>\n<li>That was dumb of me I didn't even notice. As for autogeneration, I saw explicit instances were provided in a bunch of places (including Lipschitz) and just went along for the sake of conformity.</li>\n<li>It made life more complicated because of all the multiplications by 1. Might be a problem of defective user though</li>\n</ul>",
        "id": 424971022,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709678612
    },
    {
        "content": "<p>As for their use, it's a very practical way to construct <a href=\"https://en.wikipedia.org/wiki/Urysohn_universal_space\">this</a> and similar objects, and talk about them, and in the perspective of doing continuous logic in lean, they are useful for the continuous analogue of the Fraisse Theorem</p>",
        "id": 424971879,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709678866
    },
    {
        "content": "<p>It seems you already have access</p>",
        "id": 424972025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709678936
    },
    {
        "content": "<p>and here is the rest since I surpassed the character limit of Zulip: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">KatetovKuratowskiEmbedding</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instKatetovMapOfEmpty</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_isometric_embedding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Isometry</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">])</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">abs_dist_sub_le</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">x</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Isometry.of_dist_eq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">le_antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Real.sSup_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">dist_nonneg</span>\n          <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff</span><span class=\"o\">]</span>\n            <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">abs_dist_sub_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Real.le_sSup_iff</span> <span class=\"n\">bounded_dist_set</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>  <span class=\"bp\">?</span><span class=\"n\">_</span>\n          <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">›</span>\n            <span class=\"n\">use</span> <span class=\"bp\">|</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₀</span> <span class=\"bp\">-</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n          <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">KatetovMap.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span>\n            <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">abs_neg</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">dist_nonneg</span><span class=\"o\">)]</span>\n            <span class=\"n\">exact</span> <span class=\"n\">add_lt_of_neg_right</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">εpos</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">instKatetovMapOfEmpty</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">KatetovKuratowskiEmbedding</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">KatetovKuratowskiEmbedding</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">katetovKuratowskiEmbedding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">exists_isometric_embedding</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h.injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">katetovKuratowskiEmbedding.isometry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Isometry</span> <span class=\"o\">(</span><span class=\"n\">katetovKuratowskiEmbedding</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">exists_isometric_embedding</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 424972098,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709678970
    },
    {
        "content": "<p>You can generate <code>IsKatetov_def</code> by tagging <code>IsKatetov</code> with <code>mk_iff</code></p>",
        "id": 425026675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709712390
    }
]