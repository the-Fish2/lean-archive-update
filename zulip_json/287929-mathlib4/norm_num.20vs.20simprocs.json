[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates/near/431707144\">said</a>:</p>\n<blockquote>\n<p>and norm num appears to have its own version of simprocs such as the one for <a href=\"https://github.com/leanprover-community/mathlib4/blob/a8a6713b92e1dc246a2d2a5255bb2d1846e88fe2/Mathlib/Tactic/NormNum/Eq.lean#L39\">equality</a> solving this.</p>\n</blockquote>\n<p>My understanding is that the key difference between norm_num and simprocs is that <code>norm_num</code> maintains an internal representation across pattern matches that is shared between all norm_num extensions, whereas <code>simproc</code>s have to reparse everything from scratch each time</p>",
        "id": 431709701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441563
    },
    {
        "content": "<p>(which is presumably important for performance)</p>",
        "id": 431709719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441587
    },
    {
        "content": "<p>Maybe this is a use-case for <code>Expr.mdata</code> nodes?</p>",
        "id": 431709732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441604
    },
    {
        "content": "<p>I'm curious how the design of <code>norm_num</code> will evolve now that there are simprocs. The main idea is that <code>norm_num</code> puts numeric literals into a normal form (<a href=\"https://github.com/leanprover-community/mathlib4/blob/a8a6713b92e1dc246a2d2a5255bb2d1846e88fe2/Mathlib/Tactic/NormNum/Result.lean#L240-L251\">https://github.com/leanprover-community/mathlib4/blob/a8a6713b92e1dc246a2d2a5255bb2d1846e88fe2/Mathlib/Tactic/NormNum/Result.lean#L240-L251</a>), and it's all Qq-enabled so that you can make sure your proofs are type correct.</p>\n<p>Potentially, a simproc version of <code>norm_num</code> would be to have <code>derive</code> be a recognizer that either sees the expression is in normal form or causes the simproc to fail, and then <code>norm_num</code> could be a simp set.</p>",
        "id": 431709748,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712441635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I haven't seen evidence that this is true. The <code>derive</code> function recognizes expressions from scratch and produces a <code>Result</code></p>",
        "id": 431709801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712441659
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormNum.Result#doc\">docs#NormNum.Result</a> is that representation I'm referring to, whereas my impression was that <code>simproc</code>s could only return a substitute expression</p>",
        "id": 431709920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441779
    },
    {
        "content": "<p>So for instance, if I have <code>mul (add 1 2) (add 3 4)</code>, then norm_num calls the <code>mul</code> handler, which gets the rich information about the result of the <code>add</code> handlers it dispatches to via <code>derive</code>. With <code>simproc</code>, the <code>add</code> handler runs, produces expressions, and the <code>mul</code> handler then parses those expressions</p>",
        "id": 431709973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441851
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"428973\" href=\"/#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates\">#nightly-testing &gt; Mathlib status updates</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 431710050,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712441912
    },
    {
        "content": "<p>Yeah, though <code>norm_num</code> extensions don't take any <code>Result</code>s as input. There's <em>some</em> possibility for avoiding re-recognition, but that relies on the fact that extensions run <code>derive</code> on arguments. This comes at the risk though, since <code>derive</code> runs the whole <code>norm_num</code> procedure on each argument, so you could be evaluating it many more times than needed.</p>",
        "id": 431710058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712441922
    },
    {
        "content": "<p>There are pre and post <code>norm_num</code> extensions, and even if it's a post extension, my understanding is that if you do <code>derive</code> on an argument, it will attempt to re-normalize that whole expression, even though it's already been visited.</p>",
        "id": 431710098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712441991
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> <a href=\"#narrow/stream/287929-mathlib4/topic/norm_num.20vs.20simprocs/near/431709748\">this comment</a> a few up was meant to relate to your comment regarding <code>norm_num</code> vs simprocs in the other thread.)</p>",
        "id": 431710214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712442084
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  for moving the thread.</p>\n<p>With regards to the simproc comment, my suggestion was just limited to ensuring simp simprocs are invoked when <code>norm_num</code> falls back to <code>simp</code>.   I didn't mean to suggest that norm num should replace it's own version with the Lean simprocs.   I only looked into <code>norm_num</code> enough to understand how changes to Lean simp lemmas impact it.</p>\n<p>If one were to look into migrating, I'd recommend seeing if it is feasible to maintain a cache from Lean expressions to <code>NormNum.Result</code> so you can preserve the auxillary information.</p>",
        "id": 431710811,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712442750
    },
    {
        "content": "<p>(Oops, I misread \"A larger fix would be to support Lean core simprocs so <code>norm_num</code>'s use of <code>simp</code> matches the <code>simp</code> elaborator.\" I think integrating better with simprocs would be interesting though!)</p>",
        "id": 431710894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712442883
    },
    {
        "content": "<p>I should have been more clear.  I looked at the simproc code in <code>simp</code> itself, and adding support is a large enough change that it should probably not be taken in a nightly-testing bump.</p>",
        "id": 431711496,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712443677
    }
]