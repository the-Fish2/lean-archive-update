[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>, you have removed all the uses of <code>classical!</code> in mathlib. I have a use of <code>classical!</code> in a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12207\">#12207</a>), so I would like to learn what is recommended. Its use is in the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">!;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iteratedFDeriv_aux</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>where replacing it with <code>classical</code> doesn't work, for purely syntactic reasons: I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">classical</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iteratedFDeriv_aux</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but I don't know how to keep it on a single line. Should I just switch to the multiline version?</p>",
        "id": 434325073,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713519570
    },
    {
        "content": "<p>I guess so. I'm never particularly concerned about newlines, so it doesn't seem much of a cost to me. Can you write <code>by classical { ... }</code>?</p>",
        "id": 434326956,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713520233
    },
    {
        "content": "<p>the one line version is <code>by classical simp [iteratedFDeriv_aux]</code></p>",
        "id": 434327582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713520468
    },
    {
        "content": "<p>In fact I don't care to have it on a single line or several lines. I guess my question is rather: can we fix <code>classical</code> so that it works on single lines, just like most other tactics? It would be good for coherence.</p>",
        "id": 434327621,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713520476
    },
    {
        "content": "<p>the reason it's not <code>by classical; simp</code> is because <code>classical</code> is a block tactic, like <code>try</code></p>",
        "id": 434327775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713520508
    },
    {
        "content": "<p>ok, thanks for the explanations. I've switched to <code>by classical simp [iteratedFDeriv_aux]</code>. Still a little bit surprising that <code>by classical!; simp</code> works but <code>by classical; simp</code> doesn't, but I can definitely live with that (although minimizing surprises for newcomers would probably be good, so if there's a way to get <code>by classical; simp</code> to work it might be worth it...)</p>",
        "id": 434329602,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713521125
    },
    {
        "content": "<p>And would you expect that to turn on classical for the entire proof or just for the <code>simp</code> line? I presume the point of making it a block tactic was precisely to stop it leaking out of an argument.</p>",
        "id": 434330532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713521488
    },
    {
        "content": "<p>If that's the argument then shouldn't <code>classical!</code> also be a block tactic?</p>",
        "id": 434330728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713521523
    },
    {
        "content": "<p>No, <code>classical!</code> should get lost :)</p>",
        "id": 434330850,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713521552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/remove.20classical!/near/434330728\">said</a>:</p>\n<blockquote>\n<p>If that's the argument then shouldn't <code>classical!</code> also be a block tactic?</p>\n</blockquote>\n<p>The operation of <code>classical!</code> is fundamentally leaky, so there was no point in presenting it as a block tactic because it doesn't stop working after the block</p>",
        "id": 434332120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713522035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/remove.20classical!/near/434329602\">said</a>:</p>\n<blockquote>\n<p>if there's a way to get <code>by classical; simp</code> to work it might be worth it...)</p>\n</blockquote>\n<p>I think all we'd need to do is add <code>\";\"?</code> like in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"classical\"</span> <span class=\"s2\">\";\"</span><span class=\"bp\">?</span> <span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">classical</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"n\">tacs</span>\n</code></pre></div>",
        "id": 434374341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713536842
    }
]