[
    {
        "content": "<p>The latest staging commit <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7513702216/job/20455754088\">https://github.com/leanprover-community/mathlib4/actions/runs/7513702216/job/20455754088</a> took <strong>48 minutes</strong> to build mathlib. At the rate we're adding new declarations to mathlib we could be exceeding 1 hour for build time alone before June this year.</p>\n<p>Can we use leaff to cut this time down or is it time to split topic-specific packages from mathlib?</p>",
        "id": 412729649,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705168706
    },
    {
        "content": "<p>This is not a serious comment, but 48 minutes is <em>awesome</em> compared to what we had in Lean 3 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412730790,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705169720
    },
    {
        "content": "<p>Only two months ago we were building in less than 30 minutes on the Hoskinson machines. I'm referring to the sheer number of declarations in mathlib right now, not any individual file performance</p>",
        "id": 412730892,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705169830
    },
    {
        "content": "<p>Right but Anatole is pointing out that mathlib3 would take a couple of hours to build and the world didn't end.</p>",
        "id": 412732952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705171793
    },
    {
        "content": "<p>Well, sort of. A couple hours of build time was pretty unsustainable.</p>",
        "id": 412733022,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705171828
    },
    {
        "content": "<p>It was six hours towards the end, FYI</p>",
        "id": 412733042,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1705171860
    },
    {
        "content": "<p>It made it very hard to do refactors low in the hierarchy that would cause lots of breakage.</p>",
        "id": 412733081,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705171902
    },
    {
        "content": "<p>But, as I think others are saying, we're not yet in the scenario that we need to consider splitting Mathlib.</p>",
        "id": 412733184,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705171981
    },
    {
        "content": "<p>There may yet be other ways of dealing with these issues. And also, note that wall clock time is not really a reliable measure.</p>",
        "id": 412733236,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705172043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> did you see <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>'s talk?</p>",
        "id": 412733322,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705172117
    },
    {
        "content": "<p>I haven't (and it's 3am right now)</p>",
        "id": 412734133,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705172834
    },
    {
        "content": "<p>build wall-clock is currently 17.5 minutes on speedcenter, so a ~3x speedup is possible with hardware upgrades (if it becomes necessary in the future)</p>",
        "id": 412736935,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705175866
    },
    {
        "content": "<p>Honestly, it's incredible how well the 7950X3D performs. I was expecting a threadripper.</p>",
        "id": 412737242,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705176111
    },
    {
        "content": "<p>Note that you need to rebuild the whole mathlib only in the following cases:</p>\n<ul>\n<li>you upgrade a dependency;</li>\n<li>you change a file deep inside the import tree.</li>\n</ul>\n<p>So, PRs that add new files can be compiled very quickly. I don't see how <code>leaff</code> can help here.<br>\nWe may want to restructure <code>import</code>s to allow Lean to compile more files in parallel.</p>",
        "id": 412747158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705181970
    },
    {
        "content": "<p>There is also a 20% speed up waiting <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.02klzzwxh.3A0000.03.20takes.200.2E25s.20to.20fail.21\">#mathlib4 &gt; <code>example (p : P) : Q := p</code> takes 0.25s to fail!</a></p>",
        "id": 412757620,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705189990
    },
    {
        "content": "<p>Regarding the topic line for this thread, is there actually evidence that quadratic terms in the build time (which certainly exist, e.g. time spent in <code>simp</code> will is presumably at least quadratic in the \"depth\" of Mathlib) are actually starting to dominate?</p>\n<p>One of my key takeaways from Sebastian's talk was that it mostly looks like we are still in the linear domain.</p>",
        "id": 412759618,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705191365
    },
    {
        "content": "<p>My initial read was that the other linear factor was the fact that we run builds regularly</p>",
        "id": 412759921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705191517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Quadratic.20slowdown.20in.20building.20mathlib/near/412759618\">said</a>:</p>\n<blockquote>\n<p>e.g. time spent in <code>simp</code> will is presumably at least quadratic in the \"depth\" of Mathlib</p>\n</blockquote>\n<p>this is one of the major differences between lean 3 and lean 4 and why it doesn't take 3-6 hours anymore: simp over the library is now O(n log n) not O(n^2)</p>",
        "id": 412760167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705191618
    },
    {
        "content": "<p>building environments is O(n^2) though (or rather O(n * files)), but it is very much not a dominant factor in build times</p>",
        "id": 412760303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705191685
    },
    {
        "content": "<p>This said, there are <em>huge</em> opportunities to improve the import structure of Mathlib, with benefits:</p>\n<ul>\n<li>faster build times for individual targets (e.g. you want to change X to see how it effects Y, but can leave everything else to CI)</li>\n<li>improving parallelism of the build, so CI and benchmarking machines can continue taking advantage of more cores</li>\n<li>better pedagogy: currently there are way too many instances of \"surely you don't need to know about A to understand B!\" in Mathlib</li>\n<li>easier de-Mathlibify of bugs</li>\n<li>allowing users who can't cope with all of Mathlib (we know these exist!) to more easily extract parts they need, either by hand or future automatic tools</li>\n<li>making possible future decisions to split the repository (either \"from the top\" or \"from the bottom\")</li>\n<li>it's also just kind of fun, like a form of gardening...?</li>\n</ul>\n<p>As a concrete example, <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span>'s PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7920\">#7920</a> two months ago split <code>MetricSpace.Basic</code>. Up until that point the mere <em>definition</em> of a <code>MetricSpace</code> happened on line number 2895(!!) of that file. Now it's the first declaration.</p>\n<p>But there's lots more that could be done here. For example, in <code>PseudoMetric</code> we have imports </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Order.Compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bornology.Constructions</span>\n</code></pre></div>\n<p>neither of which are needed until after line 1000 of that file.</p>\n<p>Lower down in the Mathlib hierarchy we often have a split between <code>X.Defs</code> and <code>X.Basic</code> files, where the <code>.Defs</code> files attempt to do the bare minimum of theory required to set up the definitions, postponing everything else to <code>.Basic</code>.  Here, for example, is the import hierarchy up to <code>Algebra.Field.Defs</code>:</p>\n<p><a href=\"/user_uploads/3121/kSP4ERRzV3vbMViabbzpeVWa/o.png\">o.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kSP4ERRzV3vbMViabbzpeVWa/o.png\" title=\"o.png\"><img src=\"/user_uploads/3121/kSP4ERRzV3vbMViabbzpeVWa/o.png\"></a></div><p>Std does this much more systematically, although there the split is called <code>.Basic</code> and <code>.Lemmas</code>. As this gets done more consistently, the <code>.Defs</code> files only need to depend on other <code>.Defs</code> files, and we considerably reduce the import path to the actual definition --- and I think this is a really good thing!</p>\n<p>In <code>PseudoMetric</code> we could certainly do exactly this: those imports I mentioned don't need to be in the <code>.Defs</code> file. But this happens essentially everywhere in Mathlib still.</p>",
        "id": 412764554,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705193532
    },
    {
        "content": "<p>I plan to split <code>Topology.Basic</code> so that the <strong>definitions</strong> of <code>TopologicalSpace</code>, <code>IsClosed</code>, and <code>Continuous</code> don't depend on, e.g., <code>Set.Countable</code> (and <code>Filter</code>s).</p>",
        "id": 412765684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194229
    },
    {
        "content": "<p>BTW, how can I generate the list of all dependencies of a given file (recursive)?</p>",
        "id": 412765791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194298
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I want to see how many dependencies I add to the closure of a file if I add one <code>import</code> line.</p>",
        "id": 412765835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194332
    },
    {
        "content": "<p>For this, I need to see the <code>diff</code> of 2 closures.</p>",
        "id": 412765848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194344
    },
    {
        "content": "<p><code>lake exe shake</code> does a lot of computations like that</p>",
        "id": 412765858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705194353
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9346\">#9346</a></p>",
        "id": 412765972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705194414
    },
    {
        "content": "<p>Even more precisely, I want to know how much I'll add to the closure of <code>Mathlib.Topology.Algebra.MulAction</code> if I make it import <code>Mathlib.GroupTheory.GroupAction.SubMulAction</code>.</p>",
        "id": 412766012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Quadratic.20slowdown.20in.20building.20mathlib/near/412765972\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9436\">#9436</a></p>\n</blockquote>\n<p>How is it related? \"implement group operations on nonsingular rational points for Jacobian coordinates\"</p>",
        "id": 412766048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194480
    },
    {
        "content": "<p>fixed</p>",
        "id": 412766109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705194503
    },
    {
        "content": "<p>I understand that both <code>lake exe graph</code> and <code>lake exe shake</code> have access to this information. How exactly do I extract it?</p>",
        "id": 412766184,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194568
    },
    {
        "content": "<p>you edit the code?</p>",
        "id": 412766303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705194640
    },
    {
        "content": "<p>Do you mean the code of <code>shake</code>? If yes, then could you please point me to a more specific location? Lean meta programming is not my strong side at the moment.</p>",
        "id": 412766387,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194707
    },
    {
        "content": "<p>well the possible space of things you might want to do is pretty open, so I don't see anything except a metaprogramming API being helpful to you</p>",
        "id": 412766631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705194883
    },
    {
        "content": "<p>I made <code>lake exe graph</code> output graphs in <code>dot</code> format, then used <code>sed</code> to list vertices and compared txt files with <code>vimdiff</code>...</p>",
        "id": 412766763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705194980
    },
    {
        "content": "<p>I know that this is not the lean way.</p>",
        "id": 412767071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705195224
    },
    {
        "content": "<p>here's a sliced and diced version of <code>lake exe shake</code> which works interactively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- We use `Nat` as a bitset for doing efficient set operations.</span>\n<span class=\"sd\">The bit indexes will usually be a module index. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Bitset</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"sd\">/-- The main state of the checker, containing information on all loaded modules. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Maps a module name to its index in the module list. -/</span>\n  <span class=\"n\">toIdx</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Name</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"sd\">/-- Maps a module index to the module name. -/</span>\n  <span class=\"n\">modNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"sd\">/-- Maps a module index to the module data. -/</span>\n  <span class=\"n\">mods</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ModuleData</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"sd\">/-- `j â deps[i]` if module `j` is a direct dependency of module `i` -/</span>\n  <span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bitset</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"sd\">/-- `j â transDeps[i]` is the reflexive transitive closure of `deps` -/</span>\n  <span class=\"n\">transDeps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bitset</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">loadModules</span> <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Import</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">State</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Bitset</span> <span class=\"bp\">Ã</span> <span class=\"n\">Bitset</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">imps</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">transImps</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">imp</span> <span class=\"k\">in</span> <span class=\"n\">imports</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">â</span> <span class=\"n\">get</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">s.toIdx.find</span><span class=\"bp\">?</span> <span class=\"n\">imp.module</span> <span class=\"k\">then</span>\n      <span class=\"n\">imps</span> <span class=\"o\">:=</span> <span class=\"n\">imps</span> <span class=\"bp\">|||</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i.toNat</span><span class=\"o\">)</span>\n      <span class=\"n\">transImps</span> <span class=\"o\">:=</span> <span class=\"n\">transImps</span> <span class=\"bp\">|||</span> <span class=\"n\">s.transDeps</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">mFile</span> <span class=\"bp\">â</span> <span class=\"n\">findOLean</span> <span class=\"n\">imp.module</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">mFile.pathExists</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"object file '{mFile}' of module {imp.module} does not exist\"</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mod</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">â</span> <span class=\"n\">readModuleData</span> <span class=\"n\">mFile</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">deps</span><span class=\"o\">,</span> <span class=\"n\">transDeps</span><span class=\"o\">)</span> <span class=\"bp\">â</span> <span class=\"n\">loadModules</span> <span class=\"n\">mod.imports</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">â</span> <span class=\"n\">get</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">s.mods.size.toUSize</span>\n      <span class=\"k\">let</span> <span class=\"n\">transDeps</span> <span class=\"o\">:=</span> <span class=\"n\">transDeps</span> <span class=\"bp\">|||</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span>\n      <span class=\"n\">imps</span> <span class=\"o\">:=</span> <span class=\"n\">imps</span> <span class=\"bp\">|||</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span>\n      <span class=\"n\">transImps</span> <span class=\"o\">:=</span> <span class=\"n\">transImps</span> <span class=\"bp\">|||</span> <span class=\"n\">transDeps</span>\n      <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Ï</span> <span class=\"o\">:=</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">toIdx</span> <span class=\"o\">:=</span> <span class=\"n\">s.toIdx.insert</span> <span class=\"n\">imp.module</span> <span class=\"n\">n</span>\n        <span class=\"n\">modNames</span> <span class=\"o\">:=</span> <span class=\"n\">s.modNames.push</span> <span class=\"n\">imp.module</span>\n        <span class=\"n\">mods</span> <span class=\"o\">:=</span> <span class=\"n\">s.mods.push</span> <span class=\"n\">mod</span>\n        <span class=\"n\">deps</span> <span class=\"o\">:=</span> <span class=\"n\">s.deps.push</span> <span class=\"n\">deps</span>\n        <span class=\"n\">transDeps</span> <span class=\"o\">:=</span> <span class=\"n\">s.transDeps.push</span> <span class=\"n\">transDeps</span>\n      <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">imps</span><span class=\"o\">,</span> <span class=\"n\">transImps</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">loadModules</span> <span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">root</span><span class=\"o\">}])</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">s.toIdx.find</span><span class=\"bp\">!</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Topology.Algebra.MulAction</span>\n  <span class=\"k\">let</span> <span class=\"n\">m2</span> <span class=\"o\">:=</span> <span class=\"n\">s.toIdx.find</span><span class=\"bp\">!</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.GroupTheory.GroupAction.SubMulAction</span>\n  <span class=\"k\">let</span> <span class=\"n\">newDeps</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.transDeps</span><span class=\"o\">[</span><span class=\"n\">m1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">|||</span> <span class=\"n\">s.transDeps</span><span class=\"o\">[</span><span class=\"n\">m2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">^^^</span> <span class=\"n\">s.transDeps</span><span class=\"o\">[</span><span class=\"n\">m1</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"c1\">-- count bits in newDeps</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">s.mods.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">newDeps</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"n\">count</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">count</span> <span class=\"c1\">-- 5</span>\n</code></pre></div>",
        "id": 412767234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705195355
    },
    {
        "content": "<p>so the answer to your question is that there are 5 new files</p>",
        "id": 412767266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705195388
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 412767761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705195701
    },
    {
        "content": "<p>Here's a better version for interactive use, which reuses the module datas from the environment instead of actually rereading mathlib every time the <code>#eval</code> is reevaluated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span> <span class=\"c1\">-- this is important, you have to import all modules you want to ask questions about</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">â</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">toIdx</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Name</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">env.header.moduleData.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">toIdx</span> <span class=\"o\">:=</span> <span class=\"n\">toIdx.insert</span> <span class=\"n\">env.header.moduleNames</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"n\">i.toUSize</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> `j â deps[i]` if module `j` is a direct dependency of module `i` -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> `j â transDeps[i]` is the reflexive transitive closure of `deps` -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">transDeps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">env.header.moduleData.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mod</span> <span class=\"o\">:=</span> <span class=\"n\">env.header.moduleData</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">imps</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">transImps</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i</span>\n    <span class=\"n\">for</span> <span class=\"n\">imp</span> <span class=\"k\">in</span> <span class=\"n\">mod.imports</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">toIdx.find</span><span class=\"bp\">!</span> <span class=\"n\">imp.module</span>\n      <span class=\"n\">imps</span> <span class=\"o\">:=</span> <span class=\"n\">imps</span> <span class=\"bp\">|||</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i.toNat</span><span class=\"o\">)</span>\n      <span class=\"n\">transImps</span> <span class=\"o\">:=</span> <span class=\"n\">transImps</span> <span class=\"bp\">|||</span> <span class=\"n\">transDeps</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"n\">deps</span> <span class=\"o\">:=</span> <span class=\"n\">deps.push</span> <span class=\"n\">imps</span>\n    <span class=\"n\">transDeps</span> <span class=\"o\">:=</span> <span class=\"n\">transDeps.push</span> <span class=\"n\">transImps</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">toIdx.find</span><span class=\"bp\">!</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Topology.Algebra.MulAction</span>\n  <span class=\"k\">let</span> <span class=\"n\">m2</span> <span class=\"o\">:=</span> <span class=\"n\">toIdx.find</span><span class=\"bp\">!</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.GroupTheory.GroupAction.SubMulAction</span>\n  <span class=\"k\">let</span> <span class=\"n\">newDeps</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">transDeps</span><span class=\"o\">[</span><span class=\"n\">m1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">|||</span> <span class=\"n\">transDeps</span><span class=\"o\">[</span><span class=\"n\">m2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">^^^</span> <span class=\"n\">transDeps</span><span class=\"o\">[</span><span class=\"n\">m1</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"c1\">-- count bits in newDeps</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">env.header.moduleNames.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">newDeps</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">env.header.moduleNames</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n\n<span class=\"c1\">-- Mathlib.Algebra.Field.IsField</span>\n<span class=\"c1\">-- Mathlib.Algebra.Ring.Equiv</span>\n<span class=\"c1\">-- Mathlib.Algebra.GroupRingAction.Basic</span>\n<span class=\"c1\">-- Mathlib.GroupTheory.GroupAction.Hom</span>\n<span class=\"c1\">-- Mathlib.GroupTheory.GroupAction.SubMulAction</span>\n</code></pre></div>",
        "id": 412770169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705197243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Quadratic.20slowdown.20in.20building.20mathlib/near/412759921\">said</a>:</p>\n<blockquote>\n<p>My initial read was that the other linear factor was the fact that we run builds regularly</p>\n</blockquote>\n<p>That's what I was referring to. The phrase \"quadratic slowdown\" was taken from a phenomenon in universal constructor cellular automata, where you've got a static tape that's read by a moving arm</p>",
        "id": 412780962,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705207334
    },
    {
        "content": "<p>this of course assumes that we increase the size of mathlib linearly as a function of time</p>",
        "id": 412781037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705207420
    },
    {
        "content": "<p>which seems unlikely in the long term</p>",
        "id": 412781058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705207441
    },
    {
        "content": "<p>and also that we keep the rate of builds constant</p>",
        "id": 412781133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705207493
    },
    {
        "content": "<p>It is a natural consequence of rising build times that the build rate slows down</p>",
        "id": 412781167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705207525
    },
    {
        "content": "<p>I expect that the growth rate will be more than linear (at least while we have lots of math out there to formalize) but we may want to semi-freeze low-level files some day (or not).</p>",
        "id": 412789385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705215824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Quadratic.20slowdown.20in.20building.20mathlib/near/412764554\">said</a>:</p>\n<blockquote>\n<p>This said, there are <em>huge</em> opportunities to improve the import structure of Mathlib, with benefits:</p>\n<ul>\n<li>faster build times for individual targets (e.g. you want to change X to see how it effects Y, but can leave everything else to CI)</li>\n<li>improving parallelism of the build, so CI and benchmarking machines can continue taking advantage of more cores</li>\n<li>better pedagogy: currently there are way too many instances of \"surely you don't need to know about A to understand B!\" in Mathlib</li>\n<li>easier de-Mathlibify of bugs</li>\n<li>allowing users who can't cope with all of Mathlib (we know these exist!) to more easily extract parts they need, either by hand or future automatic tools</li>\n<li>making possible future decisions to split the repository (either \"from the top\" or \"from the bottom\")</li>\n<li>it's also just kind of fun, like a form of gardening...?</li>\n</ul>\n<p>As a concrete example, <span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span>'s PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7920\">#7920</a> two months ago split <code>MetricSpace.Basic</code>. Up until that point the mere <em>definition</em> of a <code>MetricSpace</code> happened on line number 2895(!!) of that file. Now it's the first declaration.</p>\n<p>But there's lots more that could be done here. For example, in <code>PseudoMetric</code> we have imports </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Order.Compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bornology.Constructions</span>\n</code></pre></div>\n<p>neither of which are needed until after line 1000 of that file.</p>\n<p>Lower down in the Mathlib hierarchy we often have a split between <code>X.Defs</code> and <code>X.Basic</code> files, where the <code>.Defs</code> files attempt to do the bare minimum of theory required to set up the definitions, postponing everything else to <code>.Basic</code>.  Here, for example, is the import hierarchy up to <code>Algebra.Field.Defs</code>:</p>\n<p><a href=\"/user_uploads/3121/kSP4ERRzV3vbMViabbzpeVWa/o.png\">o.png</a></p>\n<p>Std does this much more systematically, although there the split is called <code>.Basic</code> and <code>.Lemmas</code>. As this gets done more consistently, the <code>.Defs</code> files only need to depend on other <code>.Defs</code> files, and we considerably reduce the import path to the actual definition --- and I think this is a really good thing!</p>\n<p>In <code>PseudoMetric</code> we could certainly do exactly this: those imports I mentioned don't need to be in the <code>.Defs</code> file. But this happens essentially everywhere in Mathlib still.</p>\n</blockquote>\n<p>FWIW, I just prototyped splitting <code>PseudoMetric</code> as described, it's at <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-pseudometric-split-compactness\">branch#MR-pseudometric-split-compactness</a>. Eyes on the split are very welcome.</p>",
        "id": 416047361,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705503418
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover-community/mathlib4/pull/9815\">#9815</a></p>",
        "id": 416048230,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705503626
    },
    {
        "content": "<p>Is it possible to instrument building mathlib4 in such a way that it could spit out speedups if each file is split up?  Roughly,</p>\n<ol>\n<li>Record how long each theorem takes, and what it depends on.</li>\n<li>Build the full dependency graph of individual lemmas (large, I suppose).</li>\n<li>Simulate building all of mathlib in parallel on a given number of threads, assuming one particular file is split entirely into one file per theorem (this is a rough upper bound on the speedup available if a given file is split).</li>\n</ol>",
        "id": 416074015,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705509622
    },
    {
        "content": "<p>Presumably (3) is fast enough (once the timing graph is cached) that you can do it for every file in mathlib.</p>",
        "id": 416074109,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705509657
    },
    {
        "content": "<p><code>shake</code> could do that if you relax the requirement for timing data and just settle for graph properties (e.g. number of files or constants on the critical path, graph diameter, etc)</p>",
        "id": 416483070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705545454
    },
    {
        "content": "<p>I'm splitting <a href=\"https://tqft.net/mathlib4files/Topology/Separation\">file#Topology/Separation</a> into files, 1 per separation axiom.</p>",
        "id": 416718258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705646965
    }
]