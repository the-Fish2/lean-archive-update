[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6262\">#6262</a> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> removed the default values for the fields <code>nsmul</code> and <code>zsmul</code>, and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and I have been unhappy about this. The PR description doesn't provide a good reason for doing so, but the PR does provide some nice speedups (was this because of giving a better value of these fields in some of the structures?)</p>\n<p>I am happy to have a linter in Mathlib that forces users to write these fields. I just think that when teaching new users about structures, it is a giant distraction to have to explain them why <code>nsmul</code> is a field of an abelian group and what <code>nsmulRec</code> is. I don't want to explain what diamond issues are minutes after I explained what type-class inference is.</p>\n<p>I'm starting a discussion here because of the open PR  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12608\">#12608</a>. Related links: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11262\">#11262</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/Broken.20CommRing\">Zulip thread</a></p>",
        "id": 439376560,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1716059367
    },
    {
        "content": "<p>The speedups are likely because previously default values for nsmul were computed in terms of other fields, and this meant the definition of <code>add</code> and <code>zero</code> ended up duplicated in every instance.</p>",
        "id": 439392931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716078220
    },
    {
        "content": "<p>If this is a burning issue causing immediate frustration in a course, I don't mind if we temporarily restore the default value while we work this out</p>",
        "id": 439393255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716078592
    },
    {
        "content": "<p>(but let's not revert the PR, since that also added some TODOs downstream of things we actually want to fix)</p>",
        "id": 439393325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716078637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/should.20nsmul.20have.20a.20default.20value.3F/near/439392931\">said</a>:</p>\n<blockquote>\n<p>the definition of <code>add</code> and <code>zero</code> ended up duplicated in every instance.</p>\n</blockquote>\n<p>A demo of that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">demo</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">demo</span> <span class=\"c1\">-- `2 + 3 + 4 + 5 + 6` is repeated</span>\n</code></pre></div>",
        "id": 439421666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716108177
    },
    {
        "content": "<p>Does that mean we need a structure <code>Group.Core</code>/<code>Group.MinimalAxioms</code> that does not contain any default field, and which is then extended by <code>Group</code>?</p>",
        "id": 439421990,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716108591
    },
    {
        "content": "<p>I suspect that makes things more confusing</p>",
        "id": 439422531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109173
    },
    {
        "content": "<p>What we could do is refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group.ofMinimalAxioms#doc\">docs#Group.ofMinimalAxioms</a> to be <code>instance Group.MinimalAxiomatization.toGroup</code>, with the idea that <code>instance : Group.MinimalAxiomatization G where ...</code> is much nicer notation-wise than <code>instance : Group G := Group.ofMinimalAxioms _ _ _ _</code></p>",
        "id": 439422622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109239
    },
    {
        "content": "<p>Actually nevermind my solution does not help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar.Core</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar.Core</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">demo</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">demo</span> <span class=\"c1\">-- `2 + 3 + 4 + 5 + 6` is repeated</span>\n</code></pre></div>",
        "id": 439422690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716109313
    },
    {
        "content": "<p>I think the gain arises from giving the repeated term a name, rather than elaborating it twice</p>",
        "id": 439422767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109378
    },
    {
        "content": "<p>In  <a href=\"https://github.com/leanprover-community/mathlib4/pull/6262\">#6262</a>, this manifests as declaring lots of <code>Zero</code> and <code>Add</code> instances before declaring the <code>AddMonoid</code> instance. It's possible this change is a performance improvement irrespective of whether a default is used for <code>nsmul</code>.</p>",
        "id": 439422813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109438
    },
    {
        "content": "<p>Certainly, restoring the default value will not affect performance in mathlib, as the performance increase was gained at the locations which <em>relied</em> upon this default; and all such locations no longer rely on it.</p>",
        "id": 439422976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109512
    },
    {
        "content": "<p>(it may of course result in worse future performance as new code is written to rely upon it again)</p>",
        "id": 439423026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/should.20nsmul.20have.20a.20default.20value.3F/near/439422767\">said</a>:</p>\n<blockquote>\n<p>I think the gain arises from giving the repeated term a name, rather than elaborating it twice</p>\n</blockquote>\n<p>Indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar.Core</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar.Core</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">demo</span> <span class=\"o\">:</span> <span class=\"n\">Bar.Core</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">demo2</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">demo</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">demo2</span> <span class=\"c1\">-- `2 + 3 + 4 + 5 + 6` is not repeated</span>\n</code></pre></div>",
        "id": 439423039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716109540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/should.20nsmul.20have.20a.20default.20value.3F/near/439422622\">said</a>:</p>\n<blockquote>\n<p>What we could do is refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group.ofMinimalAxioms#doc\">docs#Group.ofMinimalAxioms</a> to be <code>instance Group.MinimalAxiomatization.toGroup</code>, with the idea that <code>instance : Group.MinimalAxiomatization G where ...</code> is much nicer notation-wise than <code>instance : Group G := Group.ofMinimalAxioms _ _ _ _</code></p>\n</blockquote>\n<p>This sounds like a solution worth trying, except for the fact that</p>\n<ol>\n<li>We're effectively giving up on default field values (maybe not so bad given that their design seems fundamentally broken)</li>\n<li>This only works if there are not too many default fields in your structure. In general, if there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> default fields (added by the typeclass, ie that are not in parent typeclasses), you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> \"<code>MinimalAxioms</code>\" typeclasses</li>\n</ol>",
        "id": 439423416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716109837
    },
    {
        "content": "<p>I think my claim is that actually there are only two extremes we care about:</p>\n<ul>\n<li>Make things as simple as possible for pedagogical reasons (the minimal axioms)</li>\n<li>Make things as verbose as possible for instance coherence reasons (the mathlib \"what are all these fields for?\" approach)</li>\n</ul>",
        "id": 439423443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716109903
    },
    {
        "content": "<p>I tend to agree</p>",
        "id": 439423496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716109929
    },
    {
        "content": "<p>Obviously the ideal situation is that we only have one spelling for the two extremes, and a linter to enforce the strict one</p>",
        "id": 439423744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716110214
    }
]