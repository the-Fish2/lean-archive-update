[
    {
        "content": "<p>Over the last few days, the number of <code>refine'</code> in mathlib decreased from about 11k to approx 600.  One of the reasons behind the change is that <code>refine'</code> is considered a \"mathlib porting tactic\", converted from lean3, rather than \"developed natively\" in lean 4, like <code>refine</code>.</p>\n<p>Regardless, the removals have been almost exclusively obtained by removing the <code>'</code> and adding some <code>?</code> in front of the appropriate <code>_</code>.  This was an automated process, and there are probably still some of the remaining <code>refine'</code>s that could be similarly removed.</p>\n<p>If you come across a few of those and feel like you want to PR their replacement with a <code>refine</code>, please feel free to do so!  Alternatively/in addition, could you also post here about it, so that I can see whether I can extend the automation to catch these examples as well?</p>",
        "id": 441476632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717081171
    },
    {
        "content": "<p>Here are 20 more replacements, in <code>Topology</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13383\">#13383</a></p>",
        "id": 441477448,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717081348
    },
    {
        "content": "<p>Extremely wild guess: does your script catch proofs in structure fields?<br>\nSomehow, many of these still felt \"too easy\" - I'm not convinced yet the remaining ones all need to stay.)</p>",
        "id": 441477533,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717081367
    },
    {
        "content": "<p>Ah, no <code>structure</code>s I skipped.</p>",
        "id": 441477615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717081385
    },
    {
        "content": "<p>Time for another mass-replacement PR <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 441477748,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717081418
    },
    {
        "content": "<p>Hmmm, some of those are <code>def</code>s, though.  I did add <code>def</code>s to the script.</p>",
        "id": 441477960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717081462
    },
    {
        "content": "<p>Here's another small batch, in <code>Analysis</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a><br>\nAgain, about half of them were easy to remove, the other half has to stay for now. Perhaps there's some useful pattern in there.</p>",
        "id": 441482674,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717082486
    },
    {
        "content": "<p>I've done a couple of them in branch <code>RB/refine</code>. Do you think it is worth do investigate why your script didn't catch those?</p>",
        "id": 441483709,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717082713
    },
    {
        "content": "<p>(I am merging this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a>)</p>",
        "id": 441483835,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717082736
    },
    {
        "content": "<p>I think that rather than for the specific case of removing <code>refine'</code>, I would like to know what I should do to be more thorough in general.  I am planning to convert this into a \"generic replacement\" script, e.g. for deprecations/easy refactors.</p>",
        "id": 441484133,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717082789
    },
    {
        "content": "<p>So, the more robust, the better.  Catching \"all uses of <code>refine'</code> that can be easily replaced by <code>refine</code>\" seems like a reasonable robustness bar that I would like to achieve.</p>",
        "id": 441484328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717082826
    },
    {
        "content": "<p>I mean, we can do those by hand, it is very quick (the hardest problem is try to do it in the right order to not recompile everything several times).</p>",
        "id": 441484868,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717082932
    },
    {
        "content": "<p>Maybe we can work folder by folder? I can take for example <code>Mathlib/Algebra</code></p>",
        "id": 441485650,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717083084
    },
    {
        "content": "<p>For the moment, simply gathering data that could trigger the question \"if there was a script that scanned for these replacements, why were these not replaced already?\" is useful for me.</p>\n<p>And these examples are great for that.</p>",
        "id": 441485713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717083095
    },
    {
        "content": "<p>What do you think about <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385/commits/430cead096a79e3da179363f9908290f59a354f6\">this</a> commit?</p>",
        "id": 441487116,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717083377
    },
    {
        "content": "<p>It is an example where something had to be done by hand (replacing <code>rfl</code> by <code>by exact rfl</code>)</p>",
        "id": 441487188,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717083397
    },
    {
        "content": "<p>I find this example interesting for the details of how Lean works, but too subtle for the tool.  If the tool missed this, I would not think that I should fix the tool!</p>",
        "id": 441487484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717083465
    },
    {
        "content": "<p>However, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385/files#diff-73cf3c5c8531de274c1e1c76ab88ab0728eb86af1f02d4b877adaaca2a73975eR106\">this replacement</a> should really have been found by the tool</p>",
        "id": 441487813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717083527
    },
    {
        "content": "<p>My question was rather if we want to have it in this PR or we prefer to keep this PR for \"easy\" modification.</p>",
        "id": 441487952,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717083556
    },
    {
        "content": "<p>Oh, this is in Archive!  I only ran the tool on Mathlib!</p>",
        "id": 441487969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717083559
    },
    {
        "content": "<p>Feel free to keep in that PR: as long as the PR gets merged and does not get side-tracked by questions tangential to the replacement of <code>refine'</code> with <code>refine</code>, I like it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 441488331,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717083638
    },
    {
        "content": "<p>I find interesting that <code>refine</code> often does not work with <code>...closure_induction</code>, for example <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385/commits/52e130dbe84641171c7ecbb9c61bdd770b0268b2\">here</a> <code>refine</code> timeouts, but <code>apply</code> is very fast.</p>",
        "id": 441490654,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717084139
    },
    {
        "content": "<p>Getting metavariables right is really hard.</p>",
        "id": 441490927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717084197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/441484868\">said</a>:</p>\n<blockquote>\n<p>I mean, we can do those by hand, it is very quick (the hardest problem is try to do it in the right order to not recompile everything several times).</p>\n</blockquote>\n<p>My personal trick: open <code>n</code> files simultaneously, replace them, wait until they have compiled. <em>Do not save them yet.</em> Then open the next <code>n</code> files and repeat. Choosing <code>n</code> to high will make your computer run hot/bring it to a halt, so you might want to wait sometimes. Works surprisingly well, though.</p>",
        "id": 441496032,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717085265
    },
    {
        "content": "<p>Ah, nice trick!</p>",
        "id": 441497207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717085532
    },
    {
        "content": "<p>There are still 268 uses of <code>refine'</code> in 145 files as of my latest commits to the PR</p>",
        "id": 441554852,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717102345
    },
    {
        "content": "<p>And probably again that many in open PRs. We'll probably need to do another sweep in a few months anyway</p>",
        "id": 441555673,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717102579
    },
    {
        "content": "<p>Maybe we should ban <code>refine'</code> in new PRs?</p>",
        "id": 441556509,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717102833
    },
    {
        "content": "<p>I think we already have a linter that disallows certain imports in mathlib. I'd give it some time and then use that</p>",
        "id": 441558732,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717103561
    },
    {
        "content": "<p><code>refine'</code> is not a mathlibism, it's from core</p>",
        "id": 441558763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717103580
    },
    {
        "content": "<p>and it is also useful in some circumstances, both when writing proofs and also occasionally in really tricky unification proofs</p>",
        "id": 441558856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717103626
    },
    {
        "content": "<p>so I don't think it should be banned, a lint which can be overridden is sufficient</p>",
        "id": 441558954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717103656
    },
    {
        "content": "<blockquote>\n<p>a lint which can be overridden is sufficient</p>\n</blockquote>\n<p>Yeah that's what I was thinking of.<br>\nBut I'm curious about the \"some circumstances\" though. Are there any examples that cannot be replaced with <code>refine</code>?</p>",
        "id": 441559426,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717103853
    },
    {
        "content": "<p>I'm sure it happens when metavariable assignment is delicate</p>",
        "id": 441561056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717104432
    },
    {
        "content": "<p>Have we got a concrete example of this?</p>",
        "id": 441562451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717104914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/441558763\">said</a>:</p>\n<blockquote>\n<p><code>refine'</code> is not a mathlibism, it's from core</p>\n</blockquote>\n<p>That's true, but the history is a bit complicated. Originally Lean 4's <code>refine</code> was like Lean 3's <code>refine</code>, but then the metavariable handling was improved, and the old behavior was renamed to <code>refine!</code> (and later to <code>refine'</code>). I think it's always been meant as a Lean 3 backwards compatibility tactic. <a href=\"https://github.com/leanprover/lean4/commit/2f4340f63cd9bdb0c9e773745edbe201d012b29d\">https://github.com/leanprover/lean4/commit/2f4340f63cd9bdb0c9e773745edbe201d012b29d</a></p>\n<p>In the meantime, it's gotten even more complicated, since <a href=\"https://github.com/leanprover/lean4/commit/cf2ea445fe31bb727e9c65afa632def3686089e8\">https://github.com/leanprover/lean4/commit/cf2ea445fe31bb727e9c65afa632def3686089e8</a> made it so that <code>refine'</code> elaborates its <code>_</code> as synthetic opaque metavariables and makes synthetic opaque metavariables be assignable. These behave differently from <code>_</code>'s for <code>refine</code> (which elaborate as natural metavariables), both for elaboration under binders (due to creating delayed assignment metavariables) and for the defeq algorithm. Defeq performs ~worse for <code>_</code>'s in <code>refine'</code> than for <code>refine</code>, at least when they appear under binders.</p>",
        "id": 441593073,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717119554
    },
    {
        "content": "<p>Down to 48 in 32</p>",
        "id": 441615984,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717132067
    },
    {
        "content": "<p>You do the rest?</p>",
        "id": 441616238,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717132181
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a> there are now 25 <code>refine'</code> (plus two in a comment). None of those is trivial. I think we can bench and then the PR is ready for review.</p>",
        "id": 441663239,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717148760
    },
    {
        "content": "<p>Do we have a general strategy for things like?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">GroupFilterBasis</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine'</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">sets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{{</span><span class=\"mi\">1</span><span class=\"o\">}}</span>\n<span class=\"w\">      </span><span class=\"n\">nonempty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">singleton_nonempty</span><span class=\"w\"> </span><span class=\"bp\">_..</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">all_goals</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 441663410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717148800
    },
    {
        "content": "<p>Sadly no. It's one case where <code>refine'</code> has the edge over <code>refine</code>. I don't <code>apply</code> works either but you might want to try</p>",
        "id": 441663561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717148849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> now 9/8</p>",
        "id": 441668288,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717150209
    },
    {
        "content": "<p>Thanks!</p>\n<p>I think we can stop here for this PR, and deal with the \"problematic\" cases later</p>",
        "id": 441671854,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717151233
    },
    {
        "content": "<p>but we really need to bench everything before merging</p>",
        "id": 441672224,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717151336
    },
    {
        "content": "<p>I've done three more in branch <code>RB/refine_again</code></p>",
        "id": 441680962,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717153812
    },
    {
        "content": "<p>Since the benchmark was good I've included those 3 in the PR</p>",
        "id": 441683044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717154632
    },
    {
        "content": "<p>I've also done the two about <code>closure</code>. It is enough to give the motive by hand. I am pretty sure the same will work for the two about Clifford algebras.</p>",
        "id": 441684894,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717155383
    },
    {
        "content": "<p>But I have to stop now.</p>",
        "id": 441684986,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717155429
    },
    {
        "content": "<p>We definitely want to get the last <code>refine'</code> uses out before merging this</p>",
        "id": 441881812,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717234738
    },
    {
        "content": "<p>I had to deal with a new usage of <code>refine'</code> from one of <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>'s commits</p>",
        "id": 441882213,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717235002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/441881812\">said</a>:</p>\n<blockquote>\n<p>We definitely want to get the last <code>refine'</code> uses out before merging this</p>\n</blockquote>\n<p>Why not merge the stuff that builds, and deal with the remainder in a new PR?</p>",
        "id": 441882349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717235077
    },
    {
        "content": "<p>Better merge it sooner than later, then</p>",
        "id": 441882379,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717235103
    },
    {
        "content": "<p>I won't be in front of a computer until Monday, but there were quite a lot of comments by <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span></p>",
        "id": 441882463,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1717235152
    },
    {
        "content": "<p>I'm also away from a computer until Monday, but I'm very happy to see movement in this direction!</p>",
        "id": 441882867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717235368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> OK, here's the problem with the instances in <code>Algebra.Field.ULift</code>. When I try to use the same method as I did for replacing <code>refine'</code> as used to build instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">divisionSemiring</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionSemiring</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionSemiring</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ULift</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">down_injective</span><span class=\"bp\">.</span><span class=\"n\">divisionSemiring</span><span class=\"w\"> </span><span class=\"n\">down</span>\n</code></pre></div>\n<p>I get the error <code>expected structure</code>, which seems like it should not appear</p>",
        "id": 441923383,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717257071
    },
    {
        "content": "<p>When I put this instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">divisionSemiring</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionSemiring</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionSemiring</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ULift</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">left_distrib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">right_distrib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>I get stranger error messages like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">Possible</span><span class=\"w\"> </span><span class=\"n\">reasons</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">reflexive</span><span class=\"w\"> </span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">neither</span><span class=\"w\"> </span><span class=\"bp\">`=`</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kd\">@[</span><span class=\"n\">refl</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">equal</span><span class=\"bp\">.</span>\n<span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">reflexivitiy</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"n\">explicitly</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"ss\">`exact</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"bp\">`.</span>\n<span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ULift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionSemiring</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">NatCast</span><span class=\"bp\">.</span><span class=\"n\">natCast</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 441923580,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717257148
    },
    {
        "content": "<p><strong>There is only one use of <code>refine'</code> left</strong>, in <code>Data.Real.Basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">commRing</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">natCast</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">⟩</span>\n<span class=\"w\">            </span><span class=\"n\">intCast</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">⟩</span>\n<span class=\"w\">            </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">neg</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">            </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">            </span><span class=\"n\">npow</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">npowRec</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"w\">            </span><span class=\"n\">nsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">nsmulRec</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"w\">            </span><span class=\"n\">zsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">zsmulRec</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨@</span><span class=\"n\">Neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">_⟩</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nsmulRec</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n<span class=\"w\">            </span><span class=\"bp\">..</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">all_goals</span>\n<span class=\"w\">    </span><span class=\"n\">intros</span>\n<span class=\"w\">    </span><span class=\"n\">first</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">ext_cauchy</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">cauchy_add</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cauchy_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cauchy_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cauchy_neg</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cauchy_mul</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">cauchy_natCast</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cauchy_intCast</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">first</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">done</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">add_comm</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">left_distrib</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">right_distrib</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span>\n</code></pre></div>",
        "id": 442004638,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717303268
    },
    {
        "content": "<p><strong>I've got the last use of <code>refine'</code> out</strong></p>",
        "id": 442011063,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717307659
    },
    {
        "content": "<p>Should we merge this now?</p>",
        "id": 442027488,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717319436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/441663410\">said</a>:</p>\n<blockquote>\n<p>Do we have a general strategy for things like?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">GroupFilterBasis</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine'</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">sets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{{</span><span class=\"mi\">1</span><span class=\"o\">}}</span>\n<span class=\"w\">      </span><span class=\"n\">nonempty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">singleton_nonempty</span><span class=\"w\"> </span><span class=\"bp\">_..</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">all_goals</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I personally think this is a permissible usage of <code>refine'</code></p>",
        "id": 442029197,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717320618
    },
    {
        "content": "<p>We had <code>refine_struct</code> in Lean 3 for this use case</p>",
        "id": 442029227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717320646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442029197\">said</a>:</p>\n<blockquote>\n<p>I personally think this is a permissible usage of <code>refine'</code></p>\n</blockquote>\n<p>To me that syntax looks awful</p>",
        "id": 442029749,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717321030
    },
    {
        "content": "<p>It's a bit silly if you then have to handle each field separately anyway</p>",
        "id": 442029916,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717321138
    },
    {
        "content": "<p>Personally I've never been a big fan of the <code>refine_struct</code> syntax, but this</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBooleanAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BooleanAlgebra</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine'</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBiheytingAlgebra</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">..</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>looks better than</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBooleanAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BooleanAlgebra</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBiheytingAlgebra</span>\n<span class=\"w\">  </span><span class=\"n\">le_sup_inf</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"n\">inf_compl_le_bot</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">top_le_sup_compl</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 442031472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717322396
    },
    {
        "content": "<p>And again it's a bit of a shame having to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">instCompleteAtomicBooleanAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CompleteAtomicBooleanAlgebra</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBooleanAlgebra</span>\n<span class=\"w\">  </span><span class=\"n\">sSup</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">unit</span>\n<span class=\"w\">  </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">unit</span>\n<span class=\"w\">  </span><span class=\"n\">le_sSup</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">sSup_le</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">sInf_le</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">le_sInf</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">iInf_iSup_eq</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>to avoid <code>refine'</code></p>",
        "id": 442031588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717322443
    },
    {
        "content": "<p>Can you split the changes to former uses of <code>refine_struct</code> out of <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a> ? Then I believe <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a> will only contain non-objectionable changes.</p>",
        "id": 442031694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717322510
    },
    {
        "content": "<p>When I did the \"shameful\" thing to the <code>CommRing</code> instance in <code>Data.Real.Basic</code> the instructions decreased by just over a third. Shamefulness can be tolerated if we have performance gains like these – it's the tactic combinators used in some of these instances that are the real shame</p>",
        "id": 442032545,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717322964
    },
    {
        "content": "<p>I am personally not against merging the pr as is (after some reviewer take a look). Just that we should have a discussion on this when we write a linter against <code>refine'</code>.</p>",
        "id": 442032883,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717323166
    },
    {
        "content": "<p>Could we have syntax like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 442033115,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717323313
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">instCompleteAtomicBooleanAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CompleteAtomicBooleanAlgebra</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PUnit</span><span class=\"bp\">.</span><span class=\"n\">instBooleanAlgebra</span>\n<span class=\"w\">  </span><span class=\"n\">sSup</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">unit</span>\n<span class=\"w\">  </span><span class=\"n\">le_sSup</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sSup_le</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sInf_le</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">le_sInf</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">iInf_iSup_eq</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 442033686,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717323628
    },
    {
        "content": "<p>I quite like both options</p>",
        "id": 442033766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717323675
    },
    {
        "content": "<p>The first should probably be <code>?..</code>?</p>",
        "id": 442053607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717335307
    },
    {
        "content": "<p>Then <code>foo ?..</code> could also mean <code>foo ?_ ?_</code> etc, to match <code>foo ..</code> meaning <code>foo _ _</code></p>",
        "id": 442053645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717335332
    },
    {
        "content": "<p>(FYI, y'all are re-inventing <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> 's <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20refine_struct.20functionality.20via.20new.20.3F.2E.2E.20syntax\">proposal</a> for <code>?..</code> in structure literals)</p>",
        "id": 442066802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717343408
    },
    {
        "content": "<p>I did get as far as implementing it for structures, but the core PR died due to lack of interest, stage0 friction (iirc?), and core being more or less frozen at the time. I could revive it, but I’d only want to do so if there’s interest. :)</p>\n<p>(Note also that the function application <code>..</code> syntax is (or at least, when I last checked, was) pretty much unrelated on an implementation level to the structure instance syntax, so I’m guessing these would be two separate PRs. The function application version might even be simpler?)</p>",
        "id": 442090706,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717355300
    },
    {
        "content": "<p>Are there applications where <code>foo ..</code> should mean <code>foo _ _</code> rather than <code>foo ?_ ?_</code>?</p>",
        "id": 442092561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717356176
    },
    {
        "content": "<p>I think it's a bit dangerous to just use <code>foo ?_ ?_</code> because <code>?_</code> represents arguments that should <em>not</em> be inferred by unification and will give an error if unification forces them to be something in particular</p>",
        "id": 442092918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356356
    },
    {
        "content": "<p><code>refine'</code> has the nice property that it basically \"figures out\" whether a given hole should be <code>_</code> or <code>?_</code></p>",
        "id": 442093008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356388
    },
    {
        "content": "<p>if we were to use <code>?_</code> in more hidden locations, I think we would need to use this kind of \"figure it out\" hole instead of just <code>_</code> or <code>?_</code></p>",
        "id": 442093075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356425
    },
    {
        "content": "<p>What I mean is, where is <code>foo ..</code> used outside of patterns?</p>",
        "id": 442093083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717356427
    },
    {
        "content": "<p>I use <code>foo ..</code> all the time in exprs?</p>",
        "id": 442093111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356444
    },
    {
        "content": "<p>e.g. <code>have : x + y = y + x := Nat.add_comm ..</code></p>",
        "id": 442093232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356493
    },
    {
        "content": "<p>and this example is correctly using <code>_</code> holes</p>",
        "id": 442093289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356522
    },
    {
        "content": "<p>I see, you use it as a cheap <code>by apply Nat.add_comm</code></p>",
        "id": 442093298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717356526
    },
    {
        "content": "<p>if you made it use <code>?_</code> then it would be a type error</p>",
        "id": 442093316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717356535
    },
    {
        "content": "<p>Yeah, I understand. I only use it for <code>match</code> patterns myself, hence my question.</p>",
        "id": 442093343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717356551
    },
    {
        "content": "<p>I wonder if it would be possible to have a <code>??_</code> hole type, which would be somewhere between natural and synthetic opaque. Unlike synthetic opaque it would be assignable, but if there's a unification between a natural metavariable and <code>??_</code>, the natural metavariable would be the one that gets assigned. I think it ought to behave like synthetic opaques when being abstracted (e.g. in <code>mkLambdaFVars</code>) so that it behaves like <code>?_</code> in all respects but assignability.</p>\n<p>That way, <code>foo ..</code> could mean <code>foo ??_ ??_</code>, making it usable when some of the arguments can be inferred.</p>",
        "id": 442095455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717357597
    },
    {
        "content": "<p>I think there’s some UX usefulness in separating “variadic <code>_</code>” from “variadic <code>?_</code>”—we get to preserve the distinction people have already learned between <code>_</code> and <code>?_</code> without introducing a new concept!</p>\n<p>In the other direction, if there are two kinds of holes already, you’d kind of expect there would be two kinds of variadic versions too, right? Visually things would match up nicely and reinforce/reflect the learned distinction: <code>_</code> ↔︎ <code>..</code> and <code>?_</code> ↔︎ <code>?..</code></p>",
        "id": 442096262,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717357995
    },
    {
        "content": "<p>My line of questioning here is whether \"variadic '_'\" and \"variadic '?_'\" are themselves good UX. They each have some significant problems, and I think before introducing <code>?..</code> it would be good to collect the ways we use and want to use <code>..</code> and to see if we're missing anything here in the design space. While tempting, I don't think 'completing the 2x2 square' is sufficient reason to add <code>?..</code>.</p>\n<p>Here's a thought experiment: what if <code>refine f ..</code> was the same as <code>apply f</code>? Neither the current <code>..</code> nor the proposed <code>?..</code> would work to write an <code>apply</code> as a <code>refine</code>. (That said, whatever the choice for <code>..</code>, you wouldn't be able to replace all <code>apply f</code>'s with <code>refine f ..</code> since <code>apply f</code> can figure out how to partially apply a function using the expected type. I think it's still worth thinking about in the fully applied case though.)</p>",
        "id": 442099963,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717359795
    },
    {
        "content": "<p>I guess a big problem with <code>..</code> as \"variadic <code>??_</code>\" is that if you used it like in Mario's example, with <code>have : x + y = y + x := Nat.add_comm ..</code>, and for some reason there were arguments that couldn't be filled in, you'd get new goals, would would likely be an unwelcome surprise.</p>",
        "id": 442102173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717360867
    },
    {
        "content": "<p>I mean, I’m not tempted by completing the 2x2 square per se, or saying that that’s why we should use <code>?..</code>; I’m saying that from a <em>usability</em> perspective it’s easily learnable and <em>mentally</em> nearby, in a useful way, to existing design.</p>\n<p>The leading <code>?</code> here functions as a useful visual cue with a consistent meaning, and the visual similarity of <code>_</code> and <code>..</code> (with <code>..</code> looking like multiple <code>_</code>, squished, or at least being a simple mark near the baseline) makes its relationship to <code>_</code> memorable, meaningful, and simple. (Even if people don’t consciously identify this visual relationship, I think their brain probably does, and it helps keep them related without extra thought.)</p>\n<p>I’d say relationships like these help the user more easily keep a reliable understanding of the semantics; I’d be concerned that identifying <code>..</code> as occupying a new, distinct spot in the design space can translate to “new, distinct behavior the user has to learn”, instead of letting the user extend their understanding of existing behavior in a simple manner. </p>\n<p>Likewise, part of me thinks “if you want fancy behavior, use a fancy tactic” like <code>apply</code>.</p>",
        "id": 442102805,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717361201
    },
    {
        "content": "<p>But, to play devil’s advocate with myself a bit…</p>\n<p>Sometimes having something which “just does what you want” <em>is</em> better. It remains to be seen if <code>..</code>/<code>?..</code> are/would be actually close enough to what we typically find <em>useful</em>.</p>\n<p>And, even if we don’t want <code>..</code> to be apply-like, it would definitely be worth exploring what behavior is desired in related cases anyway, including differences between <code>apply</code> behavior and <code>refine</code> behavior; maybe there should be something that fills some gap.</p>",
        "id": 442103030,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717361332
    },
    {
        "content": "<p>I would be fine with lean having an option to treat <code>_</code> or <code>..</code> as \"fill in if you can, create a goal if you can't\", as it would make hacking on proofs a bit easier. But for code that needs to be maintained over time, I think explicit holes are much more preferable.</p>",
        "id": 442103099,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717361379
    },
    {
        "content": "<p>That's the <code>refine'</code> tactic, unless you mean something else?</p>",
        "id": 442103397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717361537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442033115\">said</a>:</p>\n<blockquote>\n<p>Could we have syntax like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I would prefer </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>since the main (mis-)use case here for <code>by refine'/by refine</code> is \"I don't want to repetitively fill arguments\"</p>",
        "id": 442104067,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717361896
    },
    {
        "content": "<p>Maybe we could have a syntax that could be used in <code>where</code> clauses too? Imagine a \"default field\" that could be used for every field not already specified.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The <code>*</code> isn't great. The main point is being able to escape the need to write the structure itself using tactics.</p>",
        "id": 442104654,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717362200
    },
    {
        "content": "<p>Well you can place <code>?_</code> or <code>_</code> in non <code>refine</code> tactics. For example, I believe you can write <code>rw [foo]</code>, <code>rw [foo _]</code>, and <code>rw [foo ?_]</code> which will all potentially create an extra goal.</p>",
        "id": 442104665,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717362206
    },
    {
        "content": "<p><code>* :=</code> is ugly, but honestly quite intuitive…to toss out some other options, we could use <code>_ := by …</code> like a fallback <code>match</code> alt, try to visually clean up/isolate <code>*</code> (e.g. <code>(*) := by …</code>) or use a dedented word token analogous to <code>decreasing_by</code>, such as <code>on_remaining</code> (though I don’t like that particular suggestion).</p>",
        "id": 442106381,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363148
    },
    {
        "content": "<p>It’s not just structures where you have this though. The <code>Function.Injective</code> instance constructors are another place you see this pattern</p>",
        "id": 442106436,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717363187
    },
    {
        "content": "<p>This could be taken care of with defaults though</p>",
        "id": 442106504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717363212
    },
    {
        "content": "<p>In that case I wonder if there should be a “term-mode <code>&lt;;&gt;</code>”, so you could write e.g. <code>foo .. &lt;;&gt; by rfl</code>?</p>",
        "id": 442106593,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363267
    },
    {
        "content": "<p>Yes</p>",
        "id": 442106609,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717363279
    },
    {
        "content": "<p>(I.e. with no <code>refine%</code> necessary)</p>",
        "id": 442106629,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363298
    },
    {
        "content": "<p>That would be fine with me. I’m not sure about the fine tuning for when you have different proofs. But I think the base case of hit em all comes up enough to warrant existence</p>",
        "id": 442106826,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717363416
    },
    {
        "content": "<p>Another option would be to extend the <code>*</code> notation to function arguments, e.g. <code>foo (* := by rfl)</code>, which would fit nicely if we go that route with <code>where</code></p>",
        "id": 442107226,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363639
    },
    {
        "content": "<p>Though, I’m not sure this would cover all cases you’re thinking of</p>",
        "id": 442107347,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363697
    },
    {
        "content": "<p>(If not maybe we’d want both, with a preference for <code>(* := …)</code> (or whatever the actual notation would be))</p>",
        "id": 442107426,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717363746
    },
    {
        "content": "<p>I am leaning towards the second proposal of mine, where fields proved with the same tactics are listed together</p>",
        "id": 442118866,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717372218
    },
    {
        "content": "<p>I like that too; it also seems compatible with the <code>*</code>-like approach. Likewise I wouldn’t be opposed to seeing it in function application as well (e.g. <code>foo (bar, baz := val)</code>)</p>",
        "id": 442124247,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717375758
    },
    {
        "content": "<p>A syntax issue there is that <code>x, y := v</code> right now means <code>x := x, y := v</code>. I don't think it's possible to use a comma for this new meaning</p>",
        "id": 442125461,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717376417
    },
    {
        "content": "<p>How about using <code>&amp;</code>?</p>",
        "id": 442126774,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717377237
    },
    {
        "content": "<p>or maybe <code>[x, y] := v</code>?</p>",
        "id": 442126990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717377357
    },
    {
        "content": "<p>with <code>[*] := v</code> or <code>[_] := v</code> for the wildcard?</p>",
        "id": 442127064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717377384
    },
    {
        "content": "<p><code>.. := by intros; rfl</code>could work as syntax for <code>where</code> clauses, right?</p>",
        "id": 442127875,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717377957
    },
    {
        "content": "<p>Just to exhaust all options, would <code>x; y := v</code> cause any conflicts? (Though maybe it would be odd having <code>;</code> indicate a tighter grouping than <code>,</code>…)</p>",
        "id": 442131193,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717380410
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib4/pull/13472\">#13472</a> which is <a href=\"https://github.com/leanprover-community/mathlib4/pull/13385\">#13385</a> up to <code>GroupTheory</code> and without the <code>refine_struct</code>-related changes</p>",
        "id": 442134190,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717382089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442126990\">said</a>:</p>\n<blockquote>\n<p>or maybe <code>[x, y] := v</code>?</p>\n</blockquote>\n<p>Yes, that is OK</p>",
        "id": 442138073,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717384249
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13474\">#13474</a> makes the remaining \"uncontroversial\" removals of <code>refine'</code></p>",
        "id": 442194324,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717406065
    },
    {
        "content": "<p>(It has been approved...)</p>",
        "id": 442302866,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717431577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442131193\">said</a>:</p>\n<blockquote>\n<p>Just to exhaust all options, would <code>x; y := v</code> cause any conflicts? (Though maybe it would be odd having <code>;</code> indicate a tighter grouping than <code>,</code>…)</p>\n</blockquote>\n<p>I think this is already valid and means <code>x = x; y = y</code>?</p>",
        "id": 442381645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717451838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442126990\">said</a>:</p>\n<blockquote>\n<p>or maybe <code>[x, y] := v</code>?</p>\n</blockquote>\n<p>Or <code>{x, y}</code> as I think this already works for destructed assignment?</p>",
        "id": 442381849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717451904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442381645\">said</a>:</p>\n<blockquote>\n<p>I think this is already valid and means <code>x = x; y = y</code>?</p>\n</blockquote>\n<p>Huh, really? I can’t get that to work; can you give an example?</p>",
        "id": 442383897,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717452668
    },
    {
        "content": "<p>Just to put it out there, another option is to prefix (or suffix) with some symbol, e.g. <code>*(x, y)</code> or <code>*[x, y]</code> or <code>*{x, y}</code>—whatever symbol might be used for wildcard case, to tie the two together. (Though it’s starting to look a little busy…)</p>",
        "id": 442387991,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717454147
    },
    {
        "content": "<p>Do we have a case where we need to list the names? I'm slightly worried we are over-engineering a solution.</p>",
        "id": 442388169,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717454199
    },
    {
        "content": "<p>I think it's usually a good idea to explore the design space to make sure you're not designing yourself into a corner, for future extensibility, even if it won't be used. It's like a fiction author who comes up with all the characters' backstories and the region's full history.</p>",
        "id": 442388510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717454328
    },
    {
        "content": "<p>Also, was the original example one such case, or was that for demonstration purposes?</p>",
        "id": 442388693,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717454392
    },
    {
        "content": "<p>Listing names came up because of Jeremy pointing out that different collections of fields might need different proofs: <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442033686\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Status.20of.20.60refine'.60/near/442033686</a></p>",
        "id": 442389272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717454587
    },
    {
        "content": "<p>There's another option of having structure instances have a <code>remaining_fields</code> clause with one goal per missing field</p>",
        "id": 442389357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717454619
    },
    {
        "content": "<p>I think it would be great for this notation to be compatible with function application somehow, given the earlier-stated need for non-structure cases</p>",
        "id": 442389936,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717454802
    },
    {
        "content": "<p>(Also ideally I think we shouldn’t “force the user into tactic mode” unnecessarily, so to speak)</p>",
        "id": 442390386,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717454944
    },
    {
        "content": "<p>Are there use cases for specifying a single value for the remaining fields? It seems to me that value fields tend to be rather heterogenous, vs proof fields that plausibly could use the same tactic script with different meanings.</p>\n<p>I suppose using <code>default</code> as a value isn't absurd.</p>",
        "id": 442391200,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717455230
    },
    {
        "content": "<p>Or e.g. <code>fun _ =&gt; rfl</code>, where all arguments (here, to <code>rfl</code>) and types are implicit</p>",
        "id": 442391454,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717455302
    },
    {
        "content": "<p>That is, sometimes proof fields are terms with implicit arguments, though <code>rfl</code> is the only one I can think of that would be widespread.</p>",
        "id": 442391780,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717455389
    },
    {
        "content": "<p>Oh, a technical argument against the <code>remaining_fields</code> clause is that it would not support the use case of replacing <code>refine_struct</code>. You can't do <code>remaining_fields exact ?_</code> since this metavariable has to be solved for within the tactic block.</p>",
        "id": 442392456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717455599
    },
    {
        "content": "<p>(Only tangentially related: <code>..</code> has some “expectable” usages which aren’t allowed yet, e.g. <code>fun .. =&gt;</code> as a term-mode <code>intros</code> (and likewise in match alts) and nonterminal <code>..</code> in function application. These seem “nice” and “obvious” to me, but I’m not sure if everyone would agree or think they’re worth the time/energy to implement. There also might be technical challenges, of course…)</p>",
        "id": 442394147,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717456150
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13490\">#13490</a> removes those remaining <code>refine'</code>s where doing so at least keeps the line count unchanged</p>",
        "id": 442410820,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1717463602
    },
    {
        "content": "<p>I am not sure if there are more PRs removing uses of <code>refine'</code>, but the PR with the linter deprecating <code>refine'</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11884\">#11884</a>) fixes the remaining 17 uses of <code>refine'</code> that the linter catches.</p>",
        "id": 444535837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718304281
    },
    {
        "content": "<p>I can extract the <code>refine'</code> --&gt; <code>refine</code> to a separate PR, if the linter is not something that is wanted, though.</p>",
        "id": 444535943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718304311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Can you please update the PR description? (This is just a test, etc...)</p>",
        "id": 444536427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718304447
    },
    {
        "content": "<p>I updated the PR description.</p>",
        "id": 444537067,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718304625
    },
    {
        "content": "<p>In fact, following what Michael usually says, I will add the reasons why the linter is ther to the docs themselves!</p>",
        "id": 444537366,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718304718
    }
]