[
    {
        "content": "<p>We have some bad lemma names for Group(WithZero) lemmas. <br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> made a PR in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11530\">#11530</a> to improve the situation. I like the logic of the new names, but  since it's a pretty big change, I would like to see if someone has another suggestion, and to have some more visibility for this. And e.g. <code>mul_div_cancel</code> will refer to a very different lemma.</p>\n<p>From the PR description:<br>\neach big row contains the multiplicative statement, then the three rows contain the <code>GroupWithZero</code> lemma name, the <code>Group</code> lemma, the <code>AddGroup</code> lemma name</p>\n<table>\n<thead>\n<tr>\n<th>Statement</th>\n<th>New name</th>\n<th>Old name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(a * b) / a = b</code></td>\n<td><code>mul_div_eq_right₀</code></td>\n<td><code>mul_div_cancel_left</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>mul_div_eq_right</code></td>\n<td><code>mul_div_cancel'''</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>add_sub_eq_right</code></td>\n<td><code>add_sub_cancel'</code></td>\n</tr>\n<tr>\n<td><code>(a * b) / b = a</code></td>\n<td><code>mul_div_eq_left₀</code></td>\n<td><code>mul_div_cancel</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>mul_div_eq_left</code></td>\n<td><code>mul_div_cancel''</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>add_sub_eq_left</code></td>\n<td><code>add_sub_cancel</code></td>\n</tr>\n<tr>\n<td><code>a / (a * b) = b⁻¹</code></td>\n<td><code>div_mul_eq_inv_right₀</code></td>\n<td><code>div_mul_right</code> (roughly)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>div_mul_eq_inv_right</code></td>\n<td><code>div_mul_cancel''</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>sub_add_eq_neg_right</code></td>\n<td><code>sub_add_cancel'</code></td>\n</tr>\n<tr>\n<td><code>b / (a * b) = a⁻¹</code></td>\n<td><code>div_mul_eq_inv_left₀</code></td>\n<td><code>div_mul_left</code> (roughly)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>div_mul_eq_inv_left</code></td>\n<td><code>div_mul_cancel'''</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>sub_add_eq_neg_left</code></td>\n<td><code>sub_add_cancel''</code></td>\n</tr>\n<tr>\n<td><code>a * (b / a) = b</code></td>\n<td><code>mul_div_cancel₀</code></td>\n<td><code>mul_div_cancel'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>mul_div_cancel</code></td>\n<td><code>mul_div_cancel'_right</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>add_sub_cancel</code></td>\n<td><code>add_sub_cancel'_right</code></td>\n</tr>\n<tr>\n<td><code>(a / b) * b = a</code></td>\n<td><code>div_mul_cancel₀</code></td>\n<td><code>div_mul_cancel</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>div_mul_cancel</code></td>\n<td><code>div_mul_cancel'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>sub_add_cancel</code></td>\n<td><code>sub_add_cancel</code></td>\n</tr>\n</tbody>\n</table>",
        "id": 428018426,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710970073
    },
    {
        "content": "<p>I am happy with these changes, and I think we should go further in a later PR, unifying the name of e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_inv_cancel#doc\">docs#mul_inv_cancel</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_right_inv#doc\">docs#mul_right_inv</a></p>",
        "id": 428018897,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710970262
    },
    {
        "content": "<p>Getting rid of the triple ticks will definitely be a win</p>",
        "id": 428019197,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710970408
    },
    {
        "content": "<p>I am personally happy with these changes.</p>\n<p>And not just triple ticks, also double and single ones!</p>",
        "id": 428019320,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710970457
    },
    {
        "content": "<p>Yes, I should add this is a very unambitious PR compared to what could/should be done!</p>",
        "id": 428019885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710970738
    },
    {
        "content": "<p>Anyway, please offer better naming schemes if you have some. I am mostly unfussed about what the new names should be, so long as</p>\n<ul>\n<li>The triples of lemmas get the same name (up to additivisation and appending of <code>₀</code>)</li>\n<li>The pairs of triples get the same name (up to swapping <code>left</code> and <code>right</code> or different symbol reading, eg swapping <code>mul</code> and <code>div</code>)</li>\n<li>The names are guessable/symbol-readable</li>\n</ul>",
        "id": 428020560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710971078
    },
    {
        "content": "<p><code>mul_div_cancel</code> is much more suggestive and guessable for <code>(a * b) / b = b</code> (where the multiplication is done first) than for <code>a * (b / a) = b</code> (which should perhaps be <code>div_mul_cancel_left</code> or <code>div_mul_cancel'</code>).<br>\nIf you do change it, it's also worth considering the similarly-named lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat.mul_div_cancel</span> <span class=\"c1\">--  ⋯ → m * n / n = m</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsUnit.mul_div_cancel</span> <span class=\"c1\">-- ⋯ → a * b / b = a</span>\n<span class=\"k\">#check</span> <span class=\"n\">Asymptotics.IsBigO.eventually_mul_div_cancel</span> <span class=\"c1\">-- ⋯ → u / v * v =ᶠ[l] u</span>\n</code></pre></div>\n<p>and the already inconsistent</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Ordinal.mul_div_cancel</span> <span class=\"c1\">-- ⋯ → b * a / b = a</span>\n</code></pre></div>",
        "id": 428023216,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710972450
    },
    {
        "content": "<p>This PR seems like a strict improvement on the current state of affairs! It’s unfortunate that <code>mul_div</code> could mean <code>(_ * _) / _</code> or <code>_ * (_ / _)</code>, but I can’t think of a (good) way around it.</p>",
        "id": 428023381,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710972528
    },
    {
        "content": "<p>Likewise the rule for using <code>cancel</code> vs. <code>eq_</code>(<code>left</code>/<code>right</code>) takes seeing one of these tables and thinking about it, I think. It’d be nice if this were either documented somewhere or if we could have a uniform scheme (but again, hard to think of one).</p>",
        "id": 428023461,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710972574
    },
    {
        "content": "<p>(Maybe this is already documented somewhere and I just didn’t scroll far enough through the diff? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 428023522,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710972604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428023381\">said</a>:</p>\n<blockquote>\n<p>It’s unfortunate that <code>mul_div</code> could mean <code>(_ * _) / _</code> or <code>_ * (_ / _)</code></p>\n</blockquote>\n<p>I hate binary operators</p>",
        "id": 428023565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428023216\">said</a>:</p>\n<blockquote>\n<p><code>mul_div_cancel</code> is much more suggestive and guessable for <code>(a * b) / b = a</code> than for <code>a * (b / a) = b</code></p>\n</blockquote>\n<p>From experience, which one it is much more suggestive and guessable for entirely depends on which one you need at the minute... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 428023726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972721
    },
    {
        "content": "<p>A problem with <code>mul_div_cancel</code> meaning <code>(a * b) / b = a</code> is that it should then also mean <code>(a * b) / a = b</code></p>",
        "id": 428023868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972790
    },
    {
        "content": "<p><code>mul_div_eq_right</code> isn't better in that respect.</p>",
        "id": 428024086,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710972887
    },
    {
        "content": "<p>It is better in that the other one can be <code>mul_div_eq_left</code>!</p>",
        "id": 428024115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972907
    },
    {
        "content": "<p>(Typo: could you fix the <code>a / (a * b) = a⁻¹</code> in the table please?)</p>",
        "id": 428024119,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710972908
    },
    {
        "content": "<p>(fixed on the PR)</p>",
        "id": 428024174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972948
    },
    {
        "content": "<p>(fixed in OP)</p>",
        "id": 428024250,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710972987
    },
    {
        "content": "<p>(you fixed it the wrong way, Floris!)</p>",
        "id": 428024308,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710973031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428024115\">said</a>:</p>\n<blockquote>\n<p>It is better in that the other one can be <code>mul_div_eq_left</code>!</p>\n</blockquote>\n<p><span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span>  but never mind. Overall I like the change.</p>",
        "id": 428024463,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710973108
    },
    {
        "content": "<p>Tentative idea which might look bad after I send this message and look at it long enough:</p>\n<ul>\n<li>the inner operator gets to name what is “right” and what is “left”. (Already sort of the case for the proposed <code>eq</code> names.)</li>\n<li>The outer operator refers to which of these it uses as its <em>other</em> argument after its name. For example:</li>\n</ul>\n<p><code>(a * b) / a = b</code>: <code>mul_div_left_eq_right</code><br>\n<code>a * (b / a) = b</code>: <code>mul_right_div_eq_left</code><br>\n<code>a / (b * a) = b ^{-1}</code>: <code>div_right_mul_eq_left_inv</code><br>\n<code>(a / b) * b = a</code>: <code>div_mul_right_eq_left</code></p>",
        "id": 428025558,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710973714
    },
    {
        "content": "<p>This is still technically ambiguous, but the alternate interpretations are no longer true!</p>",
        "id": 428025691,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710973791
    },
    {
        "content": "<p>Though there is the issue that imo we don’t really call it “left division” and “right division” so this still isn’t that intuitive when <code>div</code> names the arguments. (There’s “numerator” and “denominator”, but what would be the additive analogue? “minuend” and “subtrahend” aren’t exactly widely known terms…)</p>",
        "id": 428025965,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710973922
    },
    {
        "content": "<p>Alternate idea, I guess, just to brainstorm and maybe inspire more ideas:</p>\n<p>keep the names in the table above, but replace <code>_cancel</code> with <code>_eq_numerator</code> (and <code>_eq_minuend</code>)</p>",
        "id": 428026619,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710974272
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> dividend, not numerator</p>",
        "id": 428026783,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710974346
    },
    {
        "content": "<p>Oh, yeah, dividend is better. (But not <em>not</em> numerator! :P)</p>",
        "id": 428026949,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710974422
    },
    {
        "content": "<p>(Aside: I’m realizing maybe some people only use “numerator” for <code>natLit</code>s…though I’ve always heard it used generically for the top part of <code>\\frac</code>, and I assume <code>/</code> is just ASCII art for <code>\\frac</code>! :) )</p>",
        "id": 428027392,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710974667
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>Statement type</th>\n<th>New base name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(a * b) / a = b</code></td>\n<td>div_cancels_left_mul</td>\n</tr>\n<tr>\n<td><code>(a * b) / b = a</code></td>\n<td>div_cancels_right_mul</td>\n</tr>\n<tr>\n<td><code>a / (a * b) = b⁻¹</code></td>\n<td>div_right_mul_eq_inv  ??</td>\n</tr>\n<tr>\n<td><code>a / (b * a) = b⁻¹</code></td>\n<td>div_left_mul_eq_inv ??</td>\n</tr>\n<tr>\n<td><code>b * (a / b) = a</code></td>\n<td>left_mul_cancels_div</td>\n</tr>\n<tr>\n<td><code>(a / b) * b = a</code></td>\n<td>right_mul_cancels_div</td>\n</tr>\n</tbody>\n</table>\n<p>Semiseriously. With all new names, deprecation becomes a possibility.</p>",
        "id": 428028678,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710975351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428023868\">said</a>:</p>\n<blockquote>\n<p>A problem with <code>mul_div_cancel</code> meaning <code>(a * b) / b = a</code> is that it should then also mean <code>(a * b) / a = b</code></p>\n</blockquote>\n<p>Another way out is to always give the simpler name to the lemma that doesn't need commutativity, which means the first one wins here</p>",
        "id": 428028900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710975468
    },
    {
        "content": "<p>I don't understand the logic here regarding whether <code>cancel</code> should be used or not. AFAICT these should all be \"cancel\" lemmas? (The characteristic property of a <code>cancel</code> lemma is that the lhs contains two occurrences of a variable where the rhs has 0)</p>",
        "id": 428044198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710985563
    },
    {
        "content": "<p>I also what to put a vote in the \"actually, <code>'</code> isn't so bad\" bucket: it's nice if symbol reading takes you to the whole cluster of lemmas, i.e. I see <code>a * (b / a)</code> and say \"uh... mul div cancel\" cause it's cancelling and has mul and div in that order, and then I get a list of lemmas that are also cancellation lemmas with mul and div in that order like <code>(a * b) / a</code> or <code>(a * b) / b</code> and I pick the right one by looking at it in autocomplete. If the names are all completely different then I really have to understand the logic of the naming because if I search for the wrong one then my lemma won't show up.</p>",
        "id": 428044524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710985843
    },
    {
        "content": "<p>(note, it's fine to use suffixes other than <code>'</code> for this purpose, like <code>mul_div_cancel_right</code>; I'm just worried about us breaking up the group so that they don't share a prefix anymore.)</p>",
        "id": 428044632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710985951
    },
    {
        "content": "<p>Based on Mario's suggestion, this is a possible naming scheme:</p>\n<table>\n<thead>\n<tr>\n<th>Statement type</th>\n<th>New name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(a * b) / a = b</code></td>\n<td>mul_div_cancel_left(₀)</td>\n</tr>\n<tr>\n<td><code>(a * b) / b = a</code></td>\n<td>mul_div_cancel_right(₀)</td>\n</tr>\n<tr>\n<td><code>a / (a * b) = b⁻¹</code></td>\n<td>div_mul_cancel_left(₀)</td>\n</tr>\n<tr>\n<td><code>a / (b * a) = b⁻¹</code></td>\n<td>div_mul_cancel_right(₀)</td>\n</tr>\n<tr>\n<td><code>b * (a / b) = a</code></td>\n<td>mul_div_cancel(₀)</td>\n</tr>\n<tr>\n<td><code>(a / b) * b = a</code></td>\n<td>div_mul_cancel(₀)</td>\n</tr>\n</tbody>\n</table>",
        "id": 428093900,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711016015
    },
    {
        "content": "<p>You have the same typo as before in your statements</p>",
        "id": 428094454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711016202
    },
    {
        "content": "<p>I think I just interchanged <code>a</code> and <code>b</code>?</p>",
        "id": 428094532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711016238
    },
    {
        "content": "<p>Oh right</p>",
        "id": 428094580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711016255
    },
    {
        "content": "<p>I quite like this naming scheme</p>",
        "id": 428094597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711016261
    },
    {
        "content": "<p>Per Eric's suggestion, would it make sense to give <code>(a * b) / b = a</code> the shorter name, rather than <code>b * (a / b) = a</code>?</p>",
        "id": 428168456,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1711037985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428028900\">said</a>:</p>\n<blockquote>\n<p>Another way out is to always give the simpler name to the lemma that doesn't need commutativity, which means the first one wins here</p>\n</blockquote>\n<p>This is a possible heuristic, but not one we actually use in Mathlib, I think. Compare <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_inv#doc\">docs#mul_inv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_inv_rev#doc\">docs#mul_inv_rev</a>.</p>",
        "id": 428174060,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711039572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428168456\">said</a>:</p>\n<blockquote>\n<p>Per Eric's suggestion, would it make sense to give <code>(a * b) / b = a</code> the shorter name, rather than <code>b * (a / b) = a</code>?</p>\n</blockquote>\n<p>I think that's worse because of the symmetry issues.</p>",
        "id": 428284908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711097681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/renaming.20basic.20Group.28WithZero.29.20lemmas/near/428094597\">said</a>:</p>\n<blockquote>\n<p>I quite like this naming scheme</p>\n</blockquote>\n<p>Me too!</p>",
        "id": 428417876,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1711146373
    },
    {
        "content": "<p>PR updated!</p>",
        "id": 428419181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711147107
    },
    {
        "content": "<p>I feel <code>div_mul_cancel</code> should be  <code>a / (a * b) = 1 / b</code> rather than <code>… =  b⁻¹</code>.<br>\n(This latter lemma could be called <code>div_mul_eq_inv_left</code>.)</p>",
        "id": 429056046,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711176239
    },
    {
        "content": "<p>We decided long ago that lemmas should use <code>x⁻¹</code>, not <code>1 / x</code>, the same way that we use <code>-x</code>, not <code>0 - x</code>.</p>",
        "id": 429060327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711180759
    }
]