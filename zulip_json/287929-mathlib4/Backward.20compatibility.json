[
    {
        "content": "<p>UPD: this message and the next 2 were moved from the previous discussion.</p>\n<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> I have a few planned refactors that can't go through the deprecation scheme you suggest:</p>\n<ul>\n<li>redefine bundled sets/homomorphisms as suggested in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a></li>\n<li>generalize the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Absorbs#doc\">docs#Absorbs</a>, changing defeq and preserving most lemmas;</li>\n<li>generalize the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAtFilter#doc\">docs#HasFDerivAtFilter</a> so that it works for topological vector spaces;</li>\n<li>redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image2#doc\">docs#Set.image2</a> to use <code>∃ x ∈ s, ∃ y ∈ t, _</code> instead of <code>∃ x y, x ∈ s ∧ y ∈ t ∧ _</code> (not sure that this one will be accepted)</li>\n</ul>\n<p>What would you suggest in these cases?</p>",
        "id": 409742781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703359415
    },
    {
        "content": "<p>(I definitely want the last one to happen)</p>",
        "id": 409742900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703359562
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-image2-def\">branch#YK-image2-def</a>; I'm pushing PRs for golfs I made while working on it now.</p>",
        "id": 409742998,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703359652
    },
    {
        "content": "<p>Opening a new topic for discussion about backward compatibility started in <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas</a> (and several times before that)</p>",
        "id": 409743131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703359755
    },
    {
        "content": "<p>I think mathlib's ability and willingness to change even pretty central parts of the library is one of its great advantages, though it clearly has negative effects on downstream projects. A few thoughts:</p>\n<ul>\n<li>In the case of renaming definitions where the old name isn't reused, I think we could generally keep a deprecated alias around at low cost. It might be necessary to improve the support for deprecation if we do this.</li>\n<li>We could set up infrastructure to test a PR against a body of known dependents; possibly this is planned for reservoir?</li>\n<li>We could create a place where potentially significant breaking changes are announced, possibly in advance (and then make sure we use it)</li>\n<li>We had a bot to automatically bump mathlib3 in dependents, which helped catch issues sooner. I suspect this could be resurrected.</li>\n<li>We could move completed projects into some sort of \"staging\" part of the mathlib repository, rather than trying to land them piecemeal over a number of months (or giving up before landing them entirely)</li>\n<li>When changing core parts of the library, we could consider keeping the old and new version side by side, though that's probably too much work for most changes.</li>\n</ul>",
        "id": 409744380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703361053
    },
    {
        "content": "<p>What about the effect on AI projects? Someone trains AI on the old library, then it generates code that no longer works. Disclaimer: I'm not an expert in AI, so I don't know how big is this issue for AI projects.</p>",
        "id": 409745981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703362430
    },
    {
        "content": "<p>I'm not an expert on mathlib yet, so <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I don't have enough knowledge of the dynamics in the areas you're referring to. </p>\n<p>I think every major software effort like mathlib has some parts that are more under development than others (linux kernel is a great example). For things that are \"more central\" as <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  described I think a deprecation path is actually necessary. For things that are understood to be under active development (and it should be clear to users which is which), a more adaptable strategy is required.</p>",
        "id": 409746058,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703362492
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/409746058\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas\">#mathlib4 &gt; Renaming monotonicity of powers lemmas</a> by <span class=\"user-mention silent\" data-user-id=\"117969\">Tudor achim</span>.</p>",
        "id": 409746080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703362525
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid#doc\">docs#Submonoid</a> is a pretty low-level definition that should stay for a long time unless we implement <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a></p>",
        "id": 409746493,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703362894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I think those are great suggestions. It seems like the sum total of those steps would be a pretty big workflow departure from the current way that mathlib is maintained, so going step by step is a good way to get there. </p>\n<p>I think the best first step that would help us, and probably lots of other users that are not as attuned to the mathlib dev cycle, is to define a deprecation workflow that preserves functionality and then apply that workflow to the \"core\" aspects of Mathlib, however the maintainers/community define those.</p>",
        "id": 409746592,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703362983
    },
    {
        "content": "<p>I think that we need:</p>\n<ul>\n<li>a bot that generates and posts API diff for each PR; <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> can <code>leaff</code> help here?</li>\n<li>topic or a stream for announces of large refactors that can't be made in a backward-compatible way (e.g., changing definitions);</li>\n<li>workflow for other refactors that improves backward compatibility; e.g.,<ul>\n<li>renames should preserve old lemmas, probably deprecated;</li>\n<li>generalizations of typeclass assumptions are fine (?);</li>\n<li>how do we handle changing explicit assumptions to something weaker?</li>\n</ul>\n</li>\n</ul>",
        "id": 409747266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703363580
    },
    {
        "content": "<p>Oh yeah, API diff would be great, also when moving things around</p>",
        "id": 409747607,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703363967
    },
    {
        "content": "<p>what's <code>leaff</code>?</p>",
        "id": 409747839,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703364236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/409747839\">said</a>:</p>\n<blockquote>\n<p>what's <code>leaff</code>?</p>\n</blockquote>\n<p><a href=\"https://github.com/alexjbest/leaff\">https://github.com/alexjbest/leaff</a></p>",
        "id": 409748299,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703364709
    },
    {
        "content": "<p>Presumably one shortcoming in leaff is that it can't tell when a deletion/addition should  actually be considered a rename/tweak. I guess the question is whether we want to use the git model of using a heuristic diff, or the mercurial model of recording it up front (and providing tools to initialize the recorsing heuristically)</p>",
        "id": 409748767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703365164
    },
    {
        "content": "<p>If we choose the latter, there's also the question of whether we want this data to be immutably in the main git history (giving us no easy way to recover from incorrect or missing data), or stored elsewhere (git notes, an external database, PR descriptions, ...)</p>",
        "id": 409749217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703365429
    },
    {
        "content": "<p>First, I would love to see that data as a comment to each successfully compiled PR.</p>",
        "id": 409752027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703368361
    },
    {
        "content": "<p>Yes, even if it's not ready to be used as a migration tool, the current iteration looks useful for review</p>",
        "id": 409752293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703368660
    },
    {
        "content": "<p>maybe a bot posts this in a comment?</p>",
        "id": 409753192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703369308
    },
    {
        "content": "<p>I guess that's what yury means</p>",
        "id": 409753202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703369329
    },
    {
        "content": "<p>Yes, that's what I had in mind.</p>",
        "id": 409753227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703369360
    },
    {
        "content": "<p>Who volunteers to write the bot?</p>",
        "id": 409753234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703369374
    },
    {
        "content": "<p>I already wrote the bot <a href=\"https://github.com/leanprover-community/mathlib4/pull/8479\">#8479</a> it uses a sticky comment to update to the latest leaff output</p>",
        "id": 409759162,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703375107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/409748767\">said</a>:</p>\n<blockquote>\n<p>Presumably one shortcoming in leaff is that it can't tell when a deletion/addition should  actually be considered a rename/tweak. I guess the question is whether we want to use the git model of using a heuristic diff, or the mercurial model of recording it up front (and providing tools to initialize the recorsing heuristically)</p>\n</blockquote>\n<p>Can you elaborate more what you mean here. Currently leaff emits a few different types of difference, eg. changed proof, changed type, renamed declaration, deleted declaration etc. I plan to add support for some combinations, like rename + proof changed.</p>",
        "id": 409759270,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703375225
    },
    {
        "content": "<p>Related question: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9078\">#9078</a> by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  removes some lemmas that were deprecated for almost a year. It turns out that these lemmas were used a few times in Mathlib and this code didn't generate warnings/errors in the CI. Is it a bug in (our handling of) <code>@[deprecated]</code>?</p>",
        "id": 409778171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703388675
    },
    {
        "content": "<p>While we don't have formal backward compatibility guidelines, I suggest 1 simple rule: if a downstream project wants to restore some lemmas removed in Mathlib, then they should submit a PR that restores the old lemmas (probably, as deprecated aliases to the new names).</p>",
        "id": 409941859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703540419
    },
    {
        "content": "<p>I propose a backward-incompatible change to the <code>simp</code> set in <a href=\"#narrow/stream/287929-mathlib4/topic/mem_image\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mem_image</a><br>\nI haven't started working on the implementation yet (and won't till I get some feedback).</p>",
        "id": 409942542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703541410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/409941859\">said</a>:</p>\n<blockquote>\n<p>While we don't have formal backward compatibility guidelines, I suggest 1 simple rule: if a downstream project wants to restore some lemmas removed in Mathlib, then they should submit a PR that restores the old lemmas (probably, as deprecated aliases to the new names).</p>\n</blockquote>\n<p>that is a pretty bad user experience for downstream projects</p>",
        "id": 409955870,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703552753
    },
    {
        "content": "<p>what's the process by which the mathlib maintainers decide on a policy for backwards compatibility?</p>",
        "id": 409955972,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703552794
    },
    {
        "content": "<p>Up until now, we started the discussion a few times, then never came to any conclusion because nobody pushed for backwards compatibility hard enough.</p>",
        "id": 409956026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703552838
    },
    {
        "content": "<p>Also, up until very recently (1 year? 2 years?) the project was so small that nobody cared about formal procedures.</p>",
        "id": 409956170,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703552961
    },
    {
        "content": "<p>Currently, the backwards compatibility policy is \"there is no compatibility\".</p>",
        "id": 409956335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703553118
    },
    {
        "content": "<p>To change it, we need (a) decide what are we ready to promise; (b) write tools to enforce these promises.</p>",
        "id": 409956424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703553175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> says that <code>leaff</code> will be ready for use on all PRs in about a week.</p>",
        "id": 409956653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703553359
    },
    {
        "content": "<p>Once we have it, we can, e.g., (this is my idea, not a decision of the team)</p>\n<ul>\n<li>add a stream where the bot will post API changes in submitted PRs, if some theorems are deleted or some definitions are changed; no need to spam if a PR only adds theorems;</li>\n<li>enforce a delay (a few days?) for these PRs;</li>\n<li>mark some files as \"we promise we won't delete/change theorems in this file without a deprecation period\".</li>\n</ul>",
        "id": 409957026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703553609
    },
    {
        "content": "<p>BTW, the downstream code can fail if we add <code>@[simp]</code> to a lemma upstream, especially if you use non-terminal <code>simp</code>s.</p>",
        "id": 409957149,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703553708
    },
    {
        "content": "<p>Also, up until now most of the downstream projects had a bounded life span (i.e., \"formalize that theorem, and we're done\") and at least half of them used a frozen mathlib version as a dependency.</p>",
        "id": 409958503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703554708
    },
    {
        "content": "<p>I think that last point is important. (The other points are good as well <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>) It would be good to get more awareness for projects that depend on mathlib long-term. Because we just haven't had many examples of such projects yet. <span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> is your project that depends on mathlib published somewhere? Or is it closed source?</p>",
        "id": 409980316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703571573
    },
    {
        "content": "<p>I know the answer: closed source (at least, for now)</p>",
        "id": 409982308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703573032
    },
    {
        "content": "<p>I don't love the idea of rushing to establish a backwards compatibility policy (e.g. start requiring <code>@[deprecated] alias</code> everywhere) that creates a burden for many mathlib contributors, when the only motivation is a closed source project, and even our high-profile open source projects (LTE, sphere eversion, PFR, ...) did not seem to motivate such a change.</p>",
        "id": 409994243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703580616
    },
    {
        "content": "<p>But I do think this is a great reason to invest more in things like leaff</p>",
        "id": 410000722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703583563
    },
    {
        "content": "<p><a href=\"https://github.com/girving/ray\">https://github.com/girving/ray</a> is an example of a project which has existed as Lean 4 for a while (mainly because I haven’t had time to work on upstreaming much).  It would certainly be easier if there was a standard command to run that would do the various renames since I last synced; currently I have my own script for this which I gradually update.</p>",
        "id": 410002788,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703584351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> Do you think it is worthwhile to share your mathlib-bump-sync-update script, until we have better tooling? Or would you rather keep it private for now?</p>",
        "id": 410006118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703586186
    },
    {
        "content": "<p>No reason to keep it private, but it's <em>extremely</em> hacky.  It's called <code>port-fix</code> because I initially used it when I was doing the Lean 4 port.  We'd want something way cleaner if it was standard.  It probably best serves as an example of what people have to do in the absence of standard tooling.</p>\n<p><a href=\"/user_uploads/3121/qRT4hPvjPKzzaxWv_bl3qVGz/port-fix\">port-fix</a></p>",
        "id": 410006385,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703586336
    },
    {
        "content": "<p>Ideally if we build such tooling \"properly\", it would be able to run against versions of mathlib 4 that predate it</p>",
        "id": 410006627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703586450
    },
    {
        "content": "<p>port-fix looks like a hacky version of mathport. Is it possible that we can use <code>#align</code> declarations over time as a migration assistant?</p>",
        "id": 410024614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703597142
    },
    {
        "content": "<p>^ Yes, I think that could work very well, and it would be a lot simpler than Mathport due to working entirely inside Lean 4.</p>",
        "id": 410024770,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703597201
    },
    {
        "content": "<p>I think it will always be difficult to run migration and diffing entirely in lean, because lean doesn't like to talk to other versions of itself</p>",
        "id": 410026791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703598137
    },
    {
        "content": "<p>Imperfection seems fine here, and for small incremental upgrades the two versions will be similar enough that the #aligns could be parsed and applied in the new version.  They could even be interpreted as macros that you can click on in VSCode to do the update.</p>",
        "id": 410027136,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703598311
    },
    {
        "content": "<p>Probably, I should disclose a COI: I've recently accepted a job offer from <span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span>, applying for a visa now.</p>",
        "id": 410033614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703601707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/409994243\">said</a>:</p>\n<blockquote>\n<p>I don't love the idea of rushing to establish a backwards compatibility policy (e.g. start requiring <code>@[deprecated] alias</code> everywhere) that creates a burden for many mathlib contributors, when the only motivation is a closed source project, and even our high-profile open source projects (LTE, sphere eversion, PFR, ...) did not seem to motivate such a change.</p>\n</blockquote>\n<p>The reasons to establish a backwards compatibility policy are (and these are common to all high profile OSS projects, which mathlib4 already is / will soon become):</p>\n<ol>\n<li>For a better human experience i.e. not having to re-learn things in the standard library except in major release bumps</li>\n<li>To prevent downstream projects from needing active maintenance all the time to keep up. I.e. consider that you can download most python 3 code from the internet and, generally speaking, have it run without modification, which makes it really easy for people to get into python and build on what's there</li>\n</ol>\n<p>If the vision for mathlib is that it will be one monorepo for all of internet Lean4 math, then (2) is not really a concern. But imo the probable outcome is that there will be much more Lean 4 math code outside of mathlib than inside (consider what happens when the majority of papers are formalized/automatically formalized), so it makes sense to keep core parts of the library more stable than the leaf nodes. </p>\n<p>On my end, I'm cool with whatever the community decides and am happy to continue participating in the discussion.</p>",
        "id": 410040187,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703605273
    },
    {
        "content": "<blockquote>\n<p>LTE, sphere eversion, PFR</p>\n</blockquote>\n<p>I think the question is what happens with projects like that if they don't make it into mathlib -- in my view it would be unfortunate if they need frequent maintenance with minor version releases of mathlib to keep working. So if there's a straightforward way to lower the probability of that substantially (like with deprecation paths) it seems like it ought to be considered.</p>",
        "id": 410040792,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703605597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410024614\">said</a>:</p>\n<blockquote>\n<p>port-fix looks like a hacky version of mathport. Is it possible that we can use <code>#align</code> declarations over time as a migration assistant?</p>\n</blockquote>\n<p>To make sure I understand -- is the idea here that <code>#align</code>s could be added to mathlib PRs that deprecate old lemma names, and then downstream projects could include a build step that automatically applies all the <code>#align</code>s to yield a version that works with the latest mathlib (in the case where the types themselves were not changed)?</p>\n<p>Edit: if yes, I think this checks the boxes, since now the onus is on the user of the downstream projects to simply run a build step and not on the authors to keep doing manual work. I think if the tool is well-tested that should work well.</p>",
        "id": 410041181,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703605878
    },
    {
        "content": "<p>Even if the types changed, that would still be useful, as you only have to add/remove/shuffle arguments, rather than finding what declaration this used to be.</p>",
        "id": 410041401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410041401\">said</a>:</p>\n<blockquote>\n<p>Even if the types changed, that would still be useful, as you only have to add/remove/shuffle arguments, rather than finding what declaration this used to be.</p>\n</blockquote>\n<p>Makes sense. Would adding such <code>#align</code> declarations be considered a serious burden for PR authors?</p>",
        "id": 410041518,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703606075
    },
    {
        "content": "<p>Without automation, yes. With automation, it should be fine.</p>",
        "id": 410041743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117969\">Tudor achim</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410040792\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>LTE, sphere eversion, PFR</p>\n</blockquote>\n<p>I think the question is what happens with projects like that if they don't make it into mathlib -- in my view it would be unfortunate if they need frequent maintenance with minor version releases of mathlib to keep working. So if there's a straightforward way to lower the probability of that substantially (like with deprecation paths) it seems like it ought to be considered.</p>\n</blockquote>\n<p>There's two kinds of \"keep working\" to consider here, though. If a downstream project is abandoned, it stays pinned to a specific mathlib version that will rot no faster than the rest of the computing platform it's built on. There's no guarantee that it will keep working with the most recent mathlib though, and I don't think it's feasible to guarantee that, because basically every line of mathlib is \"API\", in a sense. That doesn't mean we can't make upgrading easier</p>",
        "id": 410041801,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703606268
    },
    {
        "content": "<p>There's also no fundamental reason that a legacy project needs to continue compiling with the most recent mathlib, unless you want to build on top of it</p>",
        "id": 410041915,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703606344
    },
    {
        "content": "<p>Actually I don't think plain <code>#align</code>-like statements will work since a lemma could be renamed several times. We need to record exactly <em>when</em> a lemma was renamed, and this information should not be overwritten by future PRs. So probably what we want is a database external to mathlib (or at least to the Lean code it relates to, maybe by having a big JSON inside mathlib) which would record diffs on a lemma level. Tools like Leaff could provide a first approximation of the diff, and PR authors could subsequently fix the diff manually.</p>",
        "id": 410042231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606492
    },
    {
        "content": "<p>It would be even better if there was no need to record anything at all. After all, git diffs are not recorded, but recomputed on the fly. Hopefully, Leaff could reach that level too.</p>",
        "id": 410042374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606541
    },
    {
        "content": "<p>In that ideal world, you could upgrade your mathlib dependency from version A to version B by getting Leaff to compute all \"lemma diffs\" between consecutive versions of mathlib from A to B and using those diffs to automatically rename the lemmas in your project.</p>",
        "id": 410042666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606669
    },
    {
        "content": "<p>And maybe Leaff could even compute argument reorders and the upgrade tool could rearrance the arguments in lemma calls automatically.</p>",
        "id": 410042819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410042231\">said</a>:</p>\n<blockquote>\n<p>Actually I don't think plain <code>#align</code>-like statements will work since a lemma could be renamed several times. We need to record exactly <em>when</em> a lemma was renamed, and this information should not be overwritten by future PRs. So probably what we want is a database external to mathlib (or at least to the Lean code it relates to, maybe by having a big JSON inside mathlib) which would record diffs on a lemma level. Tools like Leaff could provide a first approximation of the diff, and PR authors could subsequently fix the diff manually.</p>\n</blockquote>\n<p>My idea is that <code>#align</code> statements exist in the git repo which means they provide information regarding how a declaration has moved over time</p>",
        "id": 410042977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703606827
    },
    {
        "content": "<p>When being used directly for migration, you don't need to know when and where they changed, only what the initial and final names are</p>",
        "id": 410043106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703606901
    },
    {
        "content": "<p>Ah so the tool would not look at the <code>#align</code> in the current version of mathlib but in older revisions? Then an <code>#align</code> could technically be present for a revision only and that would be enough already. How do you decide when to remove them?</p>",
        "id": 410043112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606907
    },
    {
        "content": "<p>if we use <code>#align</code> for this then we can't remove them</p>",
        "id": 410043147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703606931
    },
    {
        "content": "<p>Nevermind, you disambiguated before I pressed Enter.</p>",
        "id": 410043172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703606951
    },
    {
        "content": "<p>basically the LHS <code>#align</code> name plays the role of a permanent identifier which is never changed even if the real declaration changes</p>",
        "id": 410043204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703606978
    },
    {
        "content": "<p>the drawback of using the literal <code>#align</code> command is that this was designed for lean 3 alignment and so there are a lot of lean 4 declarations which lack <code>#align</code> because they are new in lean 4</p>",
        "id": 410043398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607102
    },
    {
        "content": "<p>so if we want to rename them we get no migration assistance for them</p>",
        "id": 410043458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607128
    },
    {
        "content": "<p>Can’t we just add new #aligns?</p>",
        "id": 410043481,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703607146
    },
    {
        "content": "<p>Okay no, your idea doesn't work. What if I have lemma <code>A</code> which is renamed to <code>B</code>? I would need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>But now if I add another lemma called <code>A</code> which I subsequently rename to <code>C</code> I would need to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>and now you're in a pickle since you don't know whether a call to <code>A</code> in a downstream project should be translated to <code>B</code> or <code>C</code>. The correct answer will depend on what version of mathlib the call to <code>A</code> was written with, and your <code>#align</code> mechanism has forgotten this information.</p>",
        "id": 410043523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703607188
    },
    {
        "content": "<p>Also, <code>#align</code>s don't help with refactors that reorder/drop arguments of a lemma.</p>",
        "id": 410043547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703607219
    },
    {
        "content": "<p>No the <code>A</code> needs to be a permanent identifier which is not necessarily related to the initial name</p>",
        "id": 410043553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607222
    },
    {
        "content": "<p>Independently of auto updating I think some way of having perma-ids for relatively important results will be important for mathlib long term. But I agree that it would be burdonesome to have these for all lemmas. And the small lemmas are normally the ones that get refactored the most</p>",
        "id": 410043623,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703607249
    },
    {
        "content": "<p>For people who haven’t seen Unison, it might be useful to look at for ideas.  They have a bunch of machinery for incremental refactoring, though it’s built pretty deeply into the language and thus not necessarily applicable.</p>\n<p><a href=\"https://www.unison-lang.org\">https://www.unison-lang.org</a></p>",
        "id": 410043743,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703607359
    },
    {
        "content": "<p>It is plausible that we can obtain this information by looking back through the history but automatically following renames seems incredibly difficult without something like <code>#align</code></p>",
        "id": 410043811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607381
    },
    {
        "content": "<p>I think littering mathlib code with permanent identifiers is not going to do us well. Anybody could (accidentally) edit them and they will be permanent junk in files. Automatically calculating diffs doesn't take any space in mathlib files and is guaranteed to not break with later commits.</p>",
        "id": 410043814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703607382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410043811\">said</a>:</p>\n<blockquote>\n<p>automatically following renames seems incredibly difficult without something like <code>#align</code></p>\n</blockquote>\n<p>I think Leaff is doing pretty well at that?</p>",
        "id": 410043876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703607425
    },
    {
        "content": "<p>Not really, it doesn't do renames at all?</p>",
        "id": 410043888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607437
    },
    {
        "content": "<p>Hmm... I must have misread</p>",
        "id": 410044049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703607528
    },
    {
        "content": "<p>IMO renames are the most important part to get right in automated migration. Other things can be handled by manual work but when a name change is mixed with type and other changes then it's really a nightmare to upgrade</p>",
        "id": 410044074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607541
    },
    {
        "content": "<p>An alternative to <code>#align</code> in the files is some machine checkable format for describing diffs to go along with renaming PRs. But we would have to invent a whole ecosystem of tools to make sure that we don't mess this data up</p>",
        "id": 410044272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607704
    },
    {
        "content": "<p>What do you mean by \"renames\" leaff will identify if a lemma is renamed with the same type and proof. And soon if it has the same type but different proof also</p>",
        "id": 410044558,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703607886
    },
    {
        "content": "<p>I think many changes could be tracked over time as a composition of renames and proof / type changes. Of course if the name and type change within one commit there would likely need to be human intervention to assist in tracking that the lemmas are morally the same somehow</p>",
        "id": 410044701,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703607977
    },
    {
        "content": "<p>you should probably also consider the case where the type is equal to a renaming of the original type</p>",
        "id": 410044977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608161
    },
    {
        "content": "<p>aka dependent rename</p>",
        "id": 410045000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608177
    },
    {
        "content": "<p>plus, \"one commit\" is probably more than just one commit because we squash merge</p>",
        "id": 410045079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608206
    },
    {
        "content": "<p>But generally “incrementally add heuristic features to Leaff” seems a better path long-term than manual #aligns.</p>",
        "id": 410045091,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703608213
    },
    {
        "content": "<p>the advantage of <code>#align</code> is that it is easier to keep things in sync and curate the mapping</p>",
        "id": 410045150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608263
    },
    {
        "content": "<p>Because leaff is just per commit we would still need to run it over the whole mathlib history to get some migration database and maintain it and now that becomes another moving part</p>",
        "id": 410045189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608309
    },
    {
        "content": "<p>I think my main point is that we should automate as much as possible, maintaining a list of renames by hand seems more work than running a tool over history and adding a few hints where needed. If we actually want to go back to the start of time at all, which I'm not sure we do?</p>",
        "id": 410045373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703608432
    },
    {
        "content": "<p>Another possibility which I should mention is <a href=\"https://github.com/metamath/set.mm/blob/develop/changes-set.txt\">what set.mm does</a>: maintain a list of renames in the style of a changelog, with dated entries, and then you can just take some subsequence from it and apply it as a migration. The work of maintenance of this list is on those doing the renames, and we can always go back and fix historical entries if needed</p>",
        "id": 410045612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608565
    },
    {
        "content": "<p>Automation is definitely required for this to scale, but I don't think leaff can be used as the source of truth, only as a check on something that can be hand-edited. There are just too many ways where it is too rigid and some interpretation is needed to determine what the actual rename target is supposed to be</p>",
        "id": 410046015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703608911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> The OSS projects you've mentioned as points of comparison, the Linux kernel and Python 3, are two very established bodies of work that are designed to support applications and be <em>very</em> conservative with breaking \"user space\". They're pieces of infrastructure that need a guarantee that multiple projects can work together and run within the same platform. These projects also get industry support for their development.</p>\n<p>Maybe there are better projects to compare against? Consider that mathlib4 just finished its port this summer. It's still got a number of internal tensions due to changes from Lean 3 to Lean 4, and it will still take some time for it to anneal. Plus, if you pick up a random project that depends on mathlib, you can still run it, since you can still obtain the version of Lean and the version of mathlib it was built for -- you don't need to upgrade a project's dependencies just to use it.</p>\n<p>Migration tools would definitely be nice (and everyone's talking about this already), but I think it's important to mention that an important question in here is who is responsible for which aspects of handling reverse-incompatible changes to mathlib. Handling this in the nicest way for downstream projects takes resources away from time spent refactoring mathlib to be as elegant and versatile as it can be (and unlike a normal software library, refactors can be due to communicating an improved mathematical understanding). My personal opinion is that downstream projects at the present moment are more tolerated than supported -- tolerated since many times it's easier to develop new theory in a project first and then contribute it to mathlib -- and for this reason migration tools are very important to the mathlib project.</p>\n<p>However, for downstream projects that don't intend to become part of mathlib, perhaps the resources for handling reverse-incompatible changes should come from groups that are interested in these sorts of guarantees, rather than asking mathlib to be developed differently? For example, these additional resources could be put into organizing stable mathlib releases along with detailed migration instructions from release to release. (However: the Zulip community is generally less responsive to questions about old versions of mathlib, which might be worth considering.) To be clear, we shouldn't have a <em>fork</em> of mathlib, but rather a version of it that someone is willing to support.</p>",
        "id": 410047219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703609876
    },
    {
        "content": "<p>I'm only casually following this thread, but</p>\n<blockquote>\n<p>My personal opinion is that downstream projects at the present moment are more tolerated than supported</p>\n</blockquote>\n<p>definitely matches how I think of Mathlib. I also always get reminded of <a href=\"https://0ver.org/\">https://0ver.org/</a> and basically consider Mathlib to be in that boat of \"production ready software that still doesn't really want to commit to hard guarantees\" (for anyone who misses it, that page is dripping with sarcasm).</p>",
        "id": 410047929,
        "sender_full_name": "Julian Berman",
        "timestamp": 1703610260
    },
    {
        "content": "<p>I'll add that I think having backward compatibility will certainly be important, especially as projects using mathlib outpace the ability of mathlib to absorb it all. We will also reach a point where things get more stable internally.</p>\n<p>It's worth talking about what this would look like, but I don't think it will happen soon, and I would hate for premature efforts to make mathlib be more conservative in handling backward compatibility to stifle the \"philosophical experiment\" part of mathlib: we don't really know whether all of established mathematics can co-exist in a monorepo, but, if it's possible, I think we do understand that to get there we need to be comfortable with deep refactorings.</p>",
        "id": 410048313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703610524
    },
    {
        "content": "<p>I think an interesting thing to consider before <em>committing</em> to anything is at least attempting to decide to measure it. E.g. a simplish idea is to start to ask people doing refactors to estimate (in number of hours or something) the amount of additional effort it would be to <em>also</em>do the backwards compatibility work, and then to track the estimates over time. They'll be wildly wrong of course, as every software estimation process is proven to be, but they still may have some information in them.</p>",
        "id": 410048537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1703610719
    },
    {
        "content": "<blockquote>\n<p>However, for downstream projects that don't intend to become part of mathlib, perhaps the resources for handling reverse-incompatible changes should come from groups that are interested in these sorts of guarantees, rather than asking mathlib to be developed differently</p>\n</blockquote>\n<p>I thought it's reasonable to flag an issue with backwards compatibility, but if bringing this up isn't appropriate for this zulip, happy to move the discussion elsewhere</p>",
        "id": 410049419,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703611423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> I'm sorry if what you're getting out of my messages is \"go away\" -- that's not what I meant at all. Everyone in the Lean community should be welcome here, and I think having the discussion here on this Zulip is beneficial to the community.</p>\n<p>I can see how \"asking for mathlib to be developed differently\" could be interpreted differently from how I wanted. I was trying to say something about how, like in all of software engineering, discussions tend to circle around who is putting what resources into which parts of a project, and I think it's important to make sure we talk about this part. This is the \"political\" part, where choices have different impacts on the different groups that use mathlib. One way would be for mathlib to ask volunteers to spend time worrying about reverse compatibility rather than developing theory, another is improving migration tools, and yet another is looking into ways that those who would benefit from reverse compatibility to incur some of the \"costs\" of ensuring guarantees, for example by curating and supporting stable releases. Maybe some combination of all of these, but I'd hope we can be sure we keep costs down on carrying out significant refactors for contributors.</p>",
        "id": 410051147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703612616
    },
    {
        "content": "<p>Got it. Just to avoid misinterpretation, I'm not asking volunteers to spend time on things they don't want to do (at this point, I'm getting the sense this is something the community might not want to do at the moment). My objective with this discussion is to surface that there is a downstream cost to renaming core lemmas of Mathlib, and this cost will almost certainly increase substantially over the next several years as the wider mathematical community starts to move toward formal math in Lean [1]. It's of course up to the Mathlib community to decide what to do with that.</p>\n<p>As <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> alluded to above, I am involved with a company (<a href=\"https://harmonic.fun/\">https://harmonic.fun/</a>) that uses Mathlib, among other things, and if there is interest I'm happy to discuss concrete proposals for how we can help here! I will need to ramp up on the state of the codebase, though, because I would've thought that the proposal above of using <code>#align</code> liberally was a pretty reasonable and low-overhead process for PR authors but that doesn't seem to be a universally held view <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>[1] Again, if the working model the community has in mind is that all of this actually does go into Mathlib then this point is moot because the current process probably supports that just fine.</p>",
        "id": 410056676,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703617082
    },
    {
        "content": "<p><code>#align</code> has the advantage that it is what we are currently doing, but I think most people are thinking about it as junk from the lean 3 era and not something to use going forward</p>",
        "id": 410056947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410048313\">said</a>:</p>\n<blockquote>\n<p>I'll add that I think having backward compatibility will certainly be important, especially as projects using mathlib outpace the ability of mathlib to absorb it all. We will also reach a point where things get more stable internally.</p>\n<p>It's worth talking about what this would look like, but I don't think it will happen soon, and I would hate for premature efforts to make mathlib be more conservative in handling backward compatibility to stifle the \"philosophical experiment\" part of mathlib: we don't really know whether all of established mathematics can co-exist in a monorepo, but, if it's possible, I think we do understand that to get there we need to be comfortable with deep refactorings.</p>\n</blockquote>\n<p>I think we should be careful to separate the concepts of \"backward compatibility\" from \"migration assistance\". I think we are not yet at a point where we can consider backward compatibility in mathlib, but already well past the point where we should have a coherent story for migration because this is causing problems for every user that depends on mathlib and wants to stay up to date</p>",
        "id": 410057383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617459
    },
    {
        "content": "<p>the key differentiator being that it is okay to require that people upgrading mathlib run a tool over their code which fixes as much as it can. Ideally it would replace <code>lake update</code> and would be otherwise fully automatic</p>",
        "id": 410057603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617616
    },
    {
        "content": "<p>At least for stable-to-stable bumps I think we could just go over the list of renames and curate a list of migrations</p>",
        "id": 410057748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/410057748\">said</a>:</p>\n<blockquote>\n<p>At least for stable-to-stable bumps I think we could just go over the list of renames and curate a list of migrations</p>\n</blockquote>\n<p>To have \"stable-to-stable\" bumps we need stable branches. I don't see any volunteers to maintain it so far.</p>",
        "id": 410091706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703642938
    },
    {
        "content": "<p>we need stable tags, not branches</p>",
        "id": 410091727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703642954
    },
    {
        "content": "<p>and we already have them</p>",
        "id": 410091730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703642958
    },
    {
        "content": "<p>the task would be to determine what changed from one stable tag to the next, maybe starting from a leaff based analysis and refining it with comments from respective PRs (labeling the changes with the PR they came from) to eliminate spurious removals (I think we should not have any removals in a migration, since mathlib basically never actually removes things, although it may not be easy to determine what the replacement is without reading the PR comment or other discussion)</p>",
        "id": 410092015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703643165
    },
    {
        "content": "<p>How does it help when tactics change, especially when they get weaker?</p>",
        "id": 410280289,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1703762462
    },
    {
        "content": "<p>I think there's a lot of value to developing migration strategies for lemma renames even if we can't guarantee a perfect migration for things like tactic behavior changes</p>",
        "id": 410287325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703766619
    },
    {
        "content": "<p>Definitely. Agreed. In general uncontrolled rapid changes and quick fixes with no migration pathway are a very bad idea.</p>",
        "id": 410291222,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1703768881
    },
    {
        "content": "<p>Codemods are pretty rare in my experience (I see them only for major JavaScript frameworks). Usually developers are expected to manually migrate their code when <code>@deprecated</code> warnings show up.</p>\n<p>I scrolled through this thread but I couldn't find it - what was the issue with <code>@deprecated</code>? It seems quite a bit simpler than Leaff and a more widespread practice. I think it's not quite the same as <code>#align</code> either, since it goes beyond exact renames (it should also warn/encourage usage of the preferred variant, which I'm not sure <code>#align</code> does)</p>",
        "id": 410494575,
        "sender_full_name": "llllvvuu",
        "timestamp": 1703896399
    },
    {
        "content": "<p>There are few issues with <code>@[deprecated]</code>:</p>\n<ol>\n<li>\n<p>If we start using them, then we need automation to</p>\n<ul>\n<li>remind/help PR authors to add them; <code>leaff</code> could help here;</li>\n<li>remind someone to clean up lemmas that were deprecated for a long time;</li>\n<li>(optional): help downstream projects to migrate.</li>\n</ul>\n</li>\n<li>\n<p>Without extra automation (which we don't have yet), this creates extra burden on PR authors and maintainers.</p>\n</li>\n<li>\n<p>It only helps with the \"rename\" refactors. But many other things can happen:</p>\n<ul>\n<li>slightly redefine an existing definition, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/9275\">#9275</a> for an example;</li>\n<li>generalize a definition; e.g., generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=fderiv#doc\">docs#fderiv</a> to topological vector spaces or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Absorbs#doc\">docs#Absorbs</a> as I suggested <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20Absorbs\">here</a>;</li>\n<li>refactor a large chunk of the library, as I'm suggesting in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a> (WIP in <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-bundled-set\">branch#YK-bundled-set</a>)</li>\n<li>add a lemma to the default <code>simp</code> set, possibly creating confluence issues down the road.</li>\n</ul>\n</li>\n</ol>",
        "id": 410495539,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703896996
    },
    {
        "content": "<p>Is 2. that bad? (assuming it would be suggested in the contributing guide and the reminder is simply the GitHub suggest button)</p>\n<p>For cleaning up lemmas, I've seen the practice of putting a version number after <code>@deprecated</code>; it doesn't seem like mathlib has version numbers, but there could be a substitute. (This is the easier part to automate and I'd be happy to contribute)</p>\n<p>For 3., that's OK I think. One could continue to break things like <code>simp</code> while re-expressing other changes as renames wherever natural.</p>\n<p>FWIW I've also seen the practice of combining all approaches: <code>@deprecated</code>, versioning (SemVer or otherwise), and backports. I think the latter two are actually more effort though.</p>",
        "id": 410505961,
        "sender_full_name": "llllvvuu",
        "timestamp": 1703905389
    },
    {
        "content": "<p>Another idea is the <code>!</code> convention from Conventional Commits: I've never seen it enforced, and consequently commits inevitably don't 100% get labeled, but as a best-effort thing can get maybe &gt;90% of breaking changes indicated</p>",
        "id": 410506222,
        "sender_full_name": "llllvvuu",
        "timestamp": 1703905673
    },
    {
        "content": "<p>Mathport just got hit by a backward compatibility break in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9553\">#9553</a> (by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ), which removes the <code>Mathlib.Algebra.Abs</code> file. This is the easiest kind of breakage to avoid, just leave a re-import file in its place. I would really like us to make more headway on this issue...</p>",
        "id": 412791676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218203
    },
    {
        "content": "<p>Is this something that <code>#align_import</code> should be handling?</p>",
        "id": 412791797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705218309
    },
    {
        "content": "<p>(that is: is the problem that the file was deleted, or that the #align_import was deleted?)</p>",
        "id": 412791824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705218350
    },
    {
        "content": "<p>the #align_import was deleted</p>",
        "id": 412791885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218398
    },
    {
        "content": "<p>although I think we need some more infrastructure before <code>#align_import</code> would be able to solve this issue</p>",
        "id": 412791911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218437
    },
    {
        "content": "<p>but it's a good point, the <code>#align_import</code> should not have been deleted (and should be restored)</p>",
        "id": 412791933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218469
    },
    {
        "content": "<p>Did we decide about a deadline after which we drop mathlib3-&gt;mathlib4 migration support?</p>",
        "id": 412794276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705220525
    },
    {
        "content": "<p>well this particular example was about mathport qua lean 4 project</p>",
        "id": 412794351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220608
    },
    {
        "content": "<p>sorry I didn't make that clear</p>",
        "id": 412794357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220619
    },
    {
        "content": "<p>mathport itself didn't build</p>",
        "id": 412794363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220624
    },
    {
        "content": "<p>Once we drop the migration support, we no longer need mathport as well, do we?</p>",
        "id": 412794446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705220691
    },
    {
        "content": "<p>(I don't suggest doing it today or this month)</p>",
        "id": 412794460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705220703
    },
    {
        "content": "<p><code>#align_import</code> is actually a pretty good way to track moved files, but like <code>#align</code> it has \"lean 3 cruft\" written all over it so people are antsy to delete it, after which point we will lose the ability to track these as well for lean 4 projects</p>",
        "id": 412794468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220705
    },
    {
        "content": "<p>mathport here is just an example of a largish lean 4 project depending on mathlib which I happen to maintain</p>",
        "id": 412794490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220728
    },
    {
        "content": "<p>it's actually a bit of an issue that we don't have very many of these projects, since it means we don't have enough canaries for backcompat breaks</p>",
        "id": 412794580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220781
    },
    {
        "content": "<p>The deadline I originally set was 1 year after the port, but after seeing some lean 3 projects demoed at lean together which are being ported <em>this week</em> I think it's still premature</p>",
        "id": 412794690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705220874
    },
    {
        "content": "<p>Wait, so what should I have done? Should I have moved the <code>#align_import</code> to <code>Algebra.Order.Group.Abs</code>?</p>",
        "id": 412797993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705223649
    },
    {
        "content": "<p>Yes, and I create multiple copies of <code>#align_import</code> when I split a file.</p>",
        "id": 412798130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705223776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412794690\">said</a>:</p>\n<blockquote>\n<p>The deadline I originally set was 1 year after the port, but after seeing some lean 3 projects demoed at lean together which are being ported <em>this week</em> I think it's still premature</p>\n</blockquote>\n<p>I think we didn't see any project that did not start porting. So they are all past the point where mathport is useful.</p>",
        "id": 412823465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705245826
    },
    {
        "content": "<p>Yes, but those are just the projects we saw in presentations. It is at least evidence that 1 week ago would have been too early, which is why I think it is better to wait some more. I want it to be an old memory for everyone (not just the bleeding edge folks, <em>everyone</em>) before taking action on this.</p>",
        "id": 412824437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705246638
    },
    {
        "content": "<p>Despite your claims to the contrary I still expect LTE to be ported eventually. (I recall you saying the same thing about sphere eversion but it did get ported.)</p>",
        "id": 412824859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705246968
    },
    {
        "content": "<p>Even if we stop maintaining <code>#align</code>s today and stop running mathport CI, lean3 projects would be able to port to the version of mathlib4 that existed right now</p>",
        "id": 412825324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705247355
    },
    {
        "content": "<p>That doesn't sound all that different from having a project that was ported to lean4 immediately, but then was never bumped to newer mathlib4 versions</p>",
        "id": 412825347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705247379
    },
    {
        "content": "<p>the irony is that you get better migration assistance by porting from lean 3 to new lean 4 than by porting from lean 3 to old lean 4 and then manually upgrading your old lean 4 project</p>",
        "id": 412825446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705247451
    },
    {
        "content": "<p>because mathport is by far the most sophisticated and comprehensive migration tool we have, and there is no lean 4 equivalent</p>",
        "id": 412825475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705247486
    },
    {
        "content": "<p>which is what this thread is about</p>",
        "id": 412825514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705247523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412824859\">said</a>:</p>\n<blockquote>\n<p>Despite your claims to the contrary I still expect LTE to be ported eventually. (I recall you saying the same thing about sphere eversion but it did get ported.)</p>\n</blockquote>\n<p>Doesn't it need bumping to the latest mathlib3 before than can happen?</p>",
        "id": 412825816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705247790
    },
    {
        "content": "<p>most likely</p>",
        "id": 412825829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705247809
    },
    {
        "content": "<p>probably best to do that before the tools break down... <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20run.20a.20old.20lean3.20project.3F/near/412492556\"><code>leanproject</code> is not very happy to be run these days</a></p>",
        "id": 412825879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705247873
    },
    {
        "content": "<p>(and yes, that is me advising someone on how to run mathport only 2 days ago)</p>",
        "id": 412826143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705248094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412824859\">said</a>:</p>\n<blockquote>\n<p>Despite your claims to the contrary I still expect LTE to be ported eventually. (I recall you saying the same thing about sphere eversion but it did get ported.)</p>\n</blockquote>\n<p>Do you want to bet about LTE being mathported? I don't remember saying SE would not be ported, but the situation is very different anyway.</p>",
        "id": 412837217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705257954
    },
    {
        "content": "<p>I think it's very unlikely that LTE will get ported. LTE needed a lot of homological algebra and the formalisation of it used in the project had some down sides. Joel Riou now has a different way of doing it which is in mathlib4. The basics of solid abelian groups are being written by Dagur in lean 4. So mathlib4 has now diverged quite a bit from LTE -- in a good way.</p>",
        "id": 412843385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705263354
    },
    {
        "content": "<p>Yes, this is why I wrote it will never be mathported. The main theorem may end up in Mathlib but it won't use mathport.</p>",
        "id": 412844143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705264054
    },
    {
        "content": "<p>To be clear, this is also what I was suggesting</p>",
        "id": 412849674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705269263
    },
    {
        "content": "<p>I think eventually you will want the results in it, and once all the lean 3 tools fail on it because they are dependent on some infrastructure that dies (e.g. cache or elan) it may become difficult to even view projects for porting or partial porting purposes.</p>",
        "id": 412871915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705283761
    },
    {
        "content": "<p>Honestly it's been a bit scary to me how quickly all the lean 3 infrastructure is falling apart. I really hope this isn't the eventual destination of lean 4 projects too.</p>",
        "id": 412872057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705283830
    },
    {
        "content": "<p>But I acknowledge that I have an archivist mindset that does not really jive with the lean approach</p>",
        "id": 412872151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705283882
    },
    {
        "content": "<p>If we eventually get to the point that everyone is happy using the stable releases of Lean, I think this gets much better (or at least much less bad).</p>",
        "id": 412874832,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705285385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412872057\">said</a>:</p>\n<blockquote>\n<p>Honestly it's been a bit scary to me how quickly all the lean 3 infrastructure is falling apart. I really hope this isn't the eventual destination of lean 4 projects too.</p>\n</blockquote>\n<p>There is exactly one thing falling apart and it is the olean cache because nobody was reading the email that got warning, right?</p>",
        "id": 412877521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705287266
    },
    {
        "content": "<p>Would this be fixed by pushing one empty commit to mathlib3 so that a new cache is generated?</p>",
        "id": 412877655,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705287365
    },
    {
        "content": "<p>Can we rerun CI on the last commit instead?</p>",
        "id": 412877675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705287400
    },
    {
        "content": "<p>Tomorrow I'll do a test where I try to get Lean 3 working from scratch and see if / where I get stuck.</p>",
        "id": 412877837,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705287535
    },
    {
        "content": "<p>Note that pushing any new commit to mathlib3 will destroy the graphs on the mathlib stats page and I don't plan to fix that kind of issue except by dropping new mathlib3 data (but of course anyone else is free to propose another fix).</p>",
        "id": 412877975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705287637
    },
    {
        "content": "<p>NixOS build still works for me.</p>",
        "id": 412877985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705287644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412877975\">said</a>:</p>\n<blockquote>\n<p>Note that pushing any new commit to mathlib3 will destroy the graphs on the mathlib stats page and I don't plan to fix that kind of issue except by dropping new mathlib3 data (but of course anyone else is free to propose another fix).</p>\n</blockquote>\n<p>I don't really understand why you set things up like that in the first place? I don't understand what kind of assumption you could make while plotting two graphs next to each other that requires that one of them stops at a particular point</p>",
        "id": 412879192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705288637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412877521\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412872057\">said</a>:</p>\n<blockquote>\n<p>Honestly it's been a bit scary to me how quickly all the lean 3 infrastructure is falling apart. I really hope this isn't the eventual destination of lean 4 projects too.</p>\n</blockquote>\n<p>There is exactly one thing falling apart and it is the olean cache because nobody was reading the email that got warning, right?</p>\n</blockquote>\n<p>I linked earlier an issue with <code>leanproject</code> caused by the fact that it assumes that the latest version is lean 3</p>",
        "id": 412879264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705288707
    },
    {
        "content": "<p>The crux of the issue is that while mathlib, lean3, and leanproject are all effectively frozen tools, there is no frozen version of elan; right?</p>",
        "id": 412887889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705295900
    },
    {
        "content": "<p>elan is backward compatible though</p>",
        "id": 412888172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296146
    },
    {
        "content": "<p>the thing that's not frozen is the <code>stable</code> track of elan, used when you call lean commands in a folder without a <code>lean-toolchain</code></p>",
        "id": 412888226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296210
    },
    {
        "content": "<p>(speaking of which, this relates to a bad behavior of lake: when you call <code>lake new foo</code> it generates a <code>lean-toolchain</code> containing <code>stable</code>, which is an anti-pattern)</p>",
        "id": 412888302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296254
    },
    {
        "content": "<p>Does elan no longer look for the lean3 leanpkg.toml?</p>",
        "id": 412888555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705296443
    },
    {
        "content": "<p><code>leanproject new</code> doesn't have a <code>leanpkg.toml</code> to look for</p>",
        "id": 412888720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296535
    },
    {
        "content": "<p>I believe elan still works in lean3 projects with a leanpkg.toml</p>",
        "id": 412888742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412888720\">said</a>:</p>\n<blockquote>\n<p><code>leanproject new</code> doesn't have a <code>leanpkg.toml</code> to look for</p>\n</blockquote>\n<p>This at least isn't relevant for mathport on old projects though, right?</p>",
        "id": 412888898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705296660
    },
    {
        "content": "<p>yes, as long as they are actually projects</p>",
        "id": 412888931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296685
    },
    {
        "content": "<p>some people just have a pile of lean files and never learned that projects are necessary</p>",
        "id": 412888962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296704
    },
    {
        "content": "<p>I have an old lean 3 project which is just a <code>leanpkg.path</code> and a bunch of lean files</p>",
        "id": 412889099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705296791
    },
    {
        "content": "<p>Perhaps elan should detect that file too</p>",
        "id": 412890790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705298081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412877521\">said</a>:</p>\n<blockquote>\n<p>There is exactly one thing falling apart and it is the olean cache because nobody was reading the email that got warning, right?</p>\n</blockquote>\n<p>I have definitely seen more things break than just cache but it's hard to remember what exactly.</p>",
        "id": 412931299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705316058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412879192\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility/near/412877975\">said</a>:</p>\n<blockquote>\n<p>Note that pushing any new commit to mathlib3 will destroy the graphs on the mathlib stats page and I don't plan to fix that kind of issue except by dropping new mathlib3 data (but of course anyone else is free to propose another fix).</p>\n</blockquote>\n<p>I don't really understand why you set things up like that in the first place? I don't understand what kind of assumption you could make while plotting two graphs next to each other that requires that one of them stops at a particular point</p>\n</blockquote>\n<p>I didn't. Rob wrote the first version of the website showing both curves. It had a bug which made it display non-sense when there was a month without mathlib3 commit after the beginning of mathlib4. I fixed this bug in the most obvious way and later realized it would break if mathlib3 commit resume. Again I have nothing against someone else implementing a cleverer fix, but I have a <em>lot</em> of more important things to do for the community so I won't do it myself.</p>",
        "id": 412984346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705333334
    },
    {
        "content": "<p>About <code>leanproject</code>, I understand how <code>leanproject new</code> could be broken indeed, but this is clearly at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> priority. However I would like to keep <code>leanproject get</code> working since this is useful when reading old formalization papers.</p>",
        "id": 412984606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705333423
    }
]