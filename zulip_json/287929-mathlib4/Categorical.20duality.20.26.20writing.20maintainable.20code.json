[
    {
        "content": "<p>I'd like to split the CategoryTheory.MonoidalClosed typeclass into two separate left closed and right closed classes. Since the monoidal opposite of a category C is definitionally equal to C we could in principle define <code>RightClosed X := LeftClosed (mop X)</code>, <code>ihom_r X := ihom_l (mop X)</code>, etc and milk the def eq for all it's worth. But this seems like a bad idea, and not in harmony with other dualities like limits/colimits. We could also define everything separately but still use the definitional-equality-duality to use the proofs for left closed stuff for right closed stuff. The more principled way of doing this would be to say that every construction on one side is equal to the transport of the construction on the other side along the canonical equivalence <code>C ≈ C^Mop</code>. But this leads to some very complicated theorem statements, and I'm not sure mathlib even has certain constructions we'd need for this (eg conjugating an adjunction by an equivalence). I know additive vs multiplicative notation has a similar duplication issue and solves it with annotations/macros, could something like that work here? </p>\n<p>I'd like to hear any thoughts people have on this, especially about how the design choices in other parts of the the category theory library came to be what they are. I would like to not fall victim to combinatorial explosion if possible!</p>",
        "id": 420921305,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707685163
    },
    {
        "content": "<p>(I'm also uncertain why some things are structures and some are defintions. What makes the opposite category more different from the original category than the monoidal opposite is?)</p>",
        "id": 420921705,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707685490
    },
    {
        "content": "<p>(I'd suggest renaming this thread to include \"category theory\" for visibility, since I think the design space there is rather different to many other parts of mathlib)</p>",
        "id": 420922925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707686711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Categorical.20duality.20.26.20writing.20maintainable.20code/near/420921705\">said</a>:</p>\n<blockquote>\n<p>(I'm also uncertain why some things are structures and some are defintions. What makes the opposite category more different from the original category than the monoidal opposite is?)</p>\n</blockquote>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/3193\">https://github.com/leanprover-community/mathlib4/pull/3193</a> for the reason why the opposite category is a structure.</p>",
        "id": 420929031,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707692345
    },
    {
        "content": "<p>The same issue in your original post exists for <code>MonoidalOpposite</code>, should it be changed too? (this is a genuine question, I have no issue with the fact that <code>Opposite</code> is a structure)</p>",
        "id": 420929222,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707692507
    },
    {
        "content": "<p>Yes, I think it should be changed.</p>",
        "id": 420929585,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707692799
    },
    {
        "content": "<p>Atm the hom types of the monoidal opposite are defined via <code>InducedCategory.category</code>. However this still gives us a defeq <code>Hom X Y = Hom (mop X) (mop Y)</code>, which I think we're trying to avoid. Should the homs be <code>Hom X Y := (Hom (unmop X) (unmop Y))ᴹᵒᵖ</code>?</p>",
        "id": 421338234,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707864504
    },
    {
        "content": "<p>(we might want an <code>Inducing</code> property on functors like for topological spaces?)</p>",
        "id": 421338610,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707864735
    },
    {
        "content": "<p>To see what I mean by avoiding combinatorial explosion, take a look at the simp lemmas added in commit <code>ac0ae4d</code> in the file <code>Mathlib/CategoryTheory/Monoidal/Opposite.lean</code></p>",
        "id": 421726397,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708025649
    }
]