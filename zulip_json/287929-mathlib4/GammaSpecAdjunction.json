[
    {
        "content": "<p>It seems like <code>Mathlib/AlgebraicGeometry/GammaSpecAdjunction.lean</code> was already slow in places, but it got much worse on recent nightlies with <code>isIso_locallyRingedSpaceAdjunction_counit</code> needing 1.6M heartbeats on the <code>nightly-testing</code> branch (up from .4M). <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , would you happen to be around to take a look?</p>",
        "id": 435760176,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714226833
    },
    {
        "content": "<p>You can see in the term that we're forcing Lean to unify <code>f.unop.op.unop</code> with <code>f.unop</code>, although I don't know if this is the problem. I haven't seriously thought about the algebraic geometry part of Lean since the port so am only just getting up to speed. Note that right now the proof has <code>convert ... using 1</code> but <code>...using 0</code> or just removing the <code>using</code> completely all work, and are all equally slow.</p>",
        "id": 435764037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714229915
    },
    {
        "content": "<p>ooof this whole file is slow!</p>",
        "id": 435765368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714231196
    },
    {
        "content": "<p>but yeah my laptop's fans started kicking in with <code>isIso_...</code></p>",
        "id": 435765524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714231251
    },
    {
        "content": "<p>Lol I've got it! It's a universe issue! Hang on</p>",
        "id": 435766571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714231802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">isIso_locallyRingedSpaceAdjunction_counit</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIso.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">locallyRingedSpaceAdjunction.counit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsIso.of_iso_inv</span> <span class=\"o\">(</span><span class=\"n\">NatIso.op</span> <span class=\"n\">Spec</span><span class=\"bp\">Œì</span><span class=\"n\">Identity</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is immediate. It also removes the porting note; the <code>dsimp</code> is gone. <code>rfl</code> is telling me that this is the same term as before.</p>",
        "id": 435766667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714231874
    },
    {
        "content": "<p>I‚Äôd like to see where Lean is spending its time here</p>",
        "id": 435767205,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714232321
    },
    {
        "content": "<p>Also I wonder how you found it?</p>",
        "id": 435767616,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714232704
    },
    {
        "content": "<p>I bet the adjunction itself has some unnecessary universe parameters‚Ä¶ <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=locallyRingedSpaceAdjunction#doc\">docs#locallyRingedSpaceAdjunction</a></p>",
        "id": 435768887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714233395
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsIso#doc\">docs#CategoryTheory.IsIso</a></p>",
        "id": 435769005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714233502
    },
    {
        "content": "<p>FWIW, adding a universe annotation as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Spec</span><span class=\"bp\">Œì</span><span class=\"n\">Identity</span> <span class=\"o\">:</span> <span class=\"n\">Spec.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">rightOp</span> <span class=\"bp\">‚ãô</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚âÖ</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>also speeds things up (and allows to remove the heartbeat setting there)</p>",
        "id": 435774566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714238416
    },
    {
        "content": "<p>Please push those somewhere :)</p>",
        "id": 435774797,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714238659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/GammaSpecAdjunction/near/435767616\">said</a>:</p>\n<blockquote>\n<p>Also I wonder how you found it?</p>\n</blockquote>\n<p>Oh I am a lean guru and it was obvious to me the moment I saw the question. No, actually it was blind luck. I was trying to figure out which parts of the terms didn't unify in the <code>convert</code> call, so I changed the proof to <code>have foo := IsIso.of_iso_inv (NatIso.op SpecŒìIdentity); convert foo</code> and then printed out the goal and <code>foo</code> with <code>pp.all</code> on and then tried to diff them in a console. But one was full of <code>?u.117323</code>s and the other was full of <code>?u.116808</code>s so the diff was huge. So I decided to make them both <code>u</code> to make the diff smaller and then the declaration just magically compiled immediately. I have absolutely no idea why (that was why it got a lol, I had been banging my head against a wall for about an hour before that)</p>",
        "id": 435778350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714240931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/GammaSpecAdjunction/near/435774797\">said</a>:</p>\n<blockquote>\n<p>Please push those somewhere :)</p>\n</blockquote>\n<p>I'll do this now.</p>",
        "id": 435778711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714241083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/GammaSpecAdjunction/near/435774566\">said</a>:</p>\n<blockquote>\n<p>FWIW, adding a universe annotation as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Spec</span><span class=\"bp\">Œì</span><span class=\"n\">Identity</span> <span class=\"o\">:</span> <span class=\"n\">Spec.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">rightOp</span> <span class=\"bp\">‚ãô</span> <span class=\"bp\">Œì</span> <span class=\"bp\">‚âÖ</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>also speeds things up (and allows to remove the heartbeat setting there)</p>\n</blockquote>\n<p>I'm not entirely sure which heartbeat setting you're talking about. What is so weird is that in the <code>isIso_locallyRingedSpaceAdjunction_counit</code> example there just seem to be two universe metavariables in the <code>convert</code> call and it's trivial to unify them just by making them equal.</p>",
        "id": 435779322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714241476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm talking about this one: <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca5e44c32834549fd360f9b38470252b297e314c/Mathlib/AlgebraicGeometry/Spec.lean#L335\">https://github.com/leanprover-community/mathlib4/blob/ca5e44c32834549fd360f9b38470252b297e314c/Mathlib/AlgebraicGeometry/Spec.lean#L335</a></p>",
        "id": 435779537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714241687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12469\">#12469</a> for the GammaSpecAdjunction file</p>",
        "id": 435781271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714243383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/GammaSpecAdjunction/near/435779537\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> I'm talking about this one: <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca5e44c32834549fd360f9b38470252b297e314c/Mathlib/AlgebraicGeometry/Spec.lean#L335\">https://github.com/leanprover-community/mathlib4/blob/ca5e44c32834549fd360f9b38470252b297e314c/Mathlib/AlgebraicGeometry/Spec.lean#L335</a></p>\n</blockquote>\n<p>I cannot find this on master, and I'm not up to speed with how <code>nightly-testing</code> works. Perhaps it's time someone explained to me (possibly for the second time :-/ ) how I could help here.</p>",
        "id": 435781401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714243529
    },
    {
        "content": "<ol>\n<li>check out the nightly testing branch</li>\n<li>put a <span aria-label=\"hammer and wrench\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"hammer and wrench\">:hammer_and_wrench:</span> on the latest message in <a href=\"#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates\">https://leanprover.zulipchat.com/#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates</a></li>\n<li>fix an issue</li>\n<li>push back to nightly-testing</li>\n</ol>",
        "id": 435783086,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714245238
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+ ~Mathlib.AlgebraicGeometry.GammaSpecAdjunction   instructions   -54.2%</span>\n</code></pre></div>\n<p>Damn</p>",
        "id": 435783255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714245377
    },
    {
        "content": "<p>yeah that is very weird. Note that <code>SpecŒìIdentity_hom_app_presheaf_obj</code> is particularly wild; the only change made in the PR is changing <code>{X : Scheme}</code> to <code>{X : Scheme.{u}}</code> and compilation time on my machine reliably drops from 0.7 secs to 0.23 according to <code>trace.profiler</code>. As explained in the PR, I spotted this one by lowering maxHeartbeats in the entire file to 20000 from 200000 and then fixing what broke with these crazy explicit universe annotations. Note that I don't change the proof <em>at all</em> in this one, and there was only ever one universe in the statement, so this totally contradicts my model of what is going on.</p>",
        "id": 435783792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714245928
    },
    {
        "content": "<p>An example of the diff with trace.profiler on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span>             <span class=\"o\">[</span><span class=\"n\">Elab.step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">222938</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Quiver.Hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"bp\">Œì.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                         <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                           <span class=\"o\">(</span><span class=\"n\">X.presheaf.obj</span>\n<span class=\"bp\">&lt;</span>                             <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                               <span class=\"o\">((</span><span class=\"n\">IsOpenMap.functor.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span> <span class=\"bp\">‚ãØ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})))))))</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.pushforwardObj.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                         <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.</span><span class=\"bp\">Œì</span><span class=\"n\">Spec.adjunction.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unit.app</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚à£</span><span class=\"n\">_</span><span class=\"bp\">·µ§</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.base</span>\n<span class=\"bp\">&lt;</span>                         <span class=\"o\">((</span><span class=\"n\">CategoryTheory.Functor.id.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>             <span class=\"o\">[</span><span class=\"n\">Elab.step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">017098</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Quiver.Hom.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&gt;</span>                   <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"bp\">Œì.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&gt;</span>                     <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&gt;</span>                       <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&gt;</span>                         <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&gt;</span>                           <span class=\"o\">(</span><span class=\"n\">X.presheaf.obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"n\">IsOpenMap.functor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">‚ãØ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})))))))</span>\n<span class=\"bp\">&gt;</span>                   <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.pushforwardObj.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&gt;</span>                         <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.</span><span class=\"bp\">Œì</span><span class=\"n\">Spec.adjunction.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unit.app</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚à£</span><span class=\"n\">_</span><span class=\"bp\">·µ§</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.base</span>\n<span class=\"bp\">&gt;</span>                         <span class=\"o\">((</span><span class=\"n\">CategoryTheory.Functor.id.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n</code></pre></div>\n<p>Seems to be literally equal other than the fact that one universe metavariable is replaced with one concrete universe, and we have a 13x speedup.</p>",
        "id": 435784202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714246360
    },
    {
        "content": "<p><code>SpecŒìIdentity_naturality</code> was the last one that caused trouble on nightly, so I fixed a similar fix to your PR</p>",
        "id": 435784297,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714246457
    },
    {
        "content": "<p>Just to confirm -- I'm still tinkering with the GammaSpecAdjunction file trying to figure out what's going on, feel free to play with the nightly.</p>",
        "id": 435784410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714246589
    },
    {
        "content": "<p>It builds, so I'm not touching it anymore :)</p>",
        "id": 435784671,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714246846
    },
    {
        "content": "<p>Sadly, Mathlib/AlgebraicGeometry/AffineScheme.lean has issues that seem similar</p>",
        "id": 435784683,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714246880
    },
    {
        "content": "<p>OK, next observation is that with <code>set_option trace.profiler true</code> on <code>SpecŒìIdentity_hom_app_presheaf_obj</code>, even with <code>set_option profiler.threshold 1</code>, changing <code>{X : Scheme}</code> to <code>{X : Scheme.{u}}</code> makes the total size of the trace output go from 1421 lines to 88 lines. So that's maybe the source of the speedup -- there is a whole ton of stuff which literally isn't happening any more?</p>",
        "id": 435784898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714247133
    },
    {
        "content": "<p>2000 lines of trace output starting with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span>               <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">202370</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Quiver.Hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"bp\">Œì.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                         <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                           <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                             <span class=\"o\">(</span><span class=\"n\">X.presheaf.obj</span>\n<span class=\"bp\">&lt;</span>                               <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                                 <span class=\"o\">((</span><span class=\"n\">IsOpenMap.functor.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span> <span class=\"bp\">‚ãØ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})))))))</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"bp\">?</span><span class=\"n\">m.133590</span> <span class=\"bp\">=?=</span> <span class=\"n\">Quiver.Hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(((</span><span class=\"n\">CategoryTheory.Functor.comp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"bp\">&lt;</span>                                   <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                                 <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.rightOp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                                   <span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"bp\">Œì.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})</span>\n<span class=\"bp\">&lt;</span>                                 <span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                             <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚à£</span><span class=\"n\">_</span><span class=\"bp\">·µ§</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">presheaf.obj</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}))</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.pushforwardObj.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                           <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.</span><span class=\"bp\">Œì</span><span class=\"n\">Spec.adjunction.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unit.app</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚à£</span><span class=\"n\">_</span><span class=\"bp\">·µ§</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.base</span>\n<span class=\"bp\">&lt;</span>                           <span class=\"o\">((</span><span class=\"n\">CategoryTheory.Functor.id.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span>                                   <span class=\"n\">AlgebraicGeometry.Scheme.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                               <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚à£</span><span class=\"n\">_</span><span class=\"bp\">·µ§</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.133110</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>are literally missing once you supply the universe explicitly. So explicitly adding the universe seems to makes defeq much better. That's perhaps a useful take-home.</p>",
        "id": 435785078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714247341
    }
]