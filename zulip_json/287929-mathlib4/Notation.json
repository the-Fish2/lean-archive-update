[
    {
        "content": "<p>I have a strange notation problem in this example I explain to students</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- addition de deux entiers -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span> <span class=\"c1\">-- Pour pouvoir utiliser la notation `n + m`</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- rfl</span>\n    <span class=\"c1\">-- I know `rfl` is enough, but…</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- doesn't work otherwise</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"n\">hrec</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">hrec</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>For pedagogical reasons, I would like to be able to <code>rw [add_zero]</code>, but the induction pattern inserts the  litteral <code>zero</code> and Lean does not recognize this <code>zero</code> as <code>0</code>.</p>",
        "id": 421241130,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707829992
    },
    {
        "content": "<p>You should write your own induction tactic which uses the right notation, and do <code>induction ... using</code>.</p>",
        "id": 421244422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707831206
    },
    {
        "content": "<p>Thanks. But shouldn't the <code>instance : Zero N := &lt;zero&gt;</code> provide a rewriting lemma?</p>",
        "id": 421291775,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707845343
    }
]