[
    {
        "content": "<p>It is a bit confusing for me that MulAction is defined for the action of a Monoid, and not for the action of a Semigroup (or just a Multiplicative operation). Something like this... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Commute.Defs</span>\n\n\n<span class=\"sd\">/-- Type class for additive operations actions. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddAction</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">VAdd</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Associativity of `+` and `+ᵥ` -/</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">g₁</span> <span class=\"bp\">+</span> <span class=\"n\">g₂</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g₁</span> <span class=\"bp\">+ᵥ</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Typeclass for multiplicative actions.-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Associativity of `•` and `*` -/</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n\n<span class=\"sd\">/-- Type class for additive monoids actions. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoidAction</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">AddAction</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Zero is a neutral element for `+ᵥ` -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">zero_vadd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"sd\">/-- Typeclass for Monoid actions. This generalizes group actions. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">MonoidAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is the neutral element for `•` -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 412805727,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1705230549
    }
]