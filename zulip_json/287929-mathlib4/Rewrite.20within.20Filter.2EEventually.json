[
    {
        "content": "<p>How can I apply a hypothesis within a <code>Filter.Eventually</code>? Specifically,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eventuallyEq_abs_atTop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">eventually_ge_of_tendsto_gt</span> <span class=\"n\">two_pos</span> <span class=\"n\">hf</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure how to proceed here. I feel like I should be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=abs_of_nonneg#doc\">docs#abs_of_nonneg</a>, but I can't quite place it. Still trying to get used to filters.</p>",
        "id": 438120854,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1715446403
    },
    {
        "content": "<p>In your very simple case <code>simpa using this</code> will probably be enough. But a more general next step would be <code>apply this.mono</code>.</p>",
        "id": 438121642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715447217
    },
    {
        "content": "<p>Or <code>filter_upwards</code></p>",
        "id": 438123180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715448884
    },
    {
        "content": "<p>It would be nice to make <code>simp (config := {contextual := true})</code> do more inside <code>Filter.Eventually</code> but I'm not sure what's the right way to implement this. E.g., if you have <code>‚àÄ x, ‚àÄ·∂† y in atTop, f x y = g x y</code>, then you can't use it inside another <code>Filter.Eventually</code>/<code>Filter.Frequently</code> for more than finitely many values of <code>x</code> (or countably many, if it's a filter like <code>Measure.ae</code>).</p>",
        "id": 438123362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715449088
    },
    {
        "content": "<p>There's seems to be a bug in the <code>peel</code> tactic, but this could be a use of it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eventually_imp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Filter.Eventually.mp</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">Filter.eventually_of_forall</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eventuallyEq_abs_atTop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">eventually_ge_of_tendsto_gt</span> <span class=\"n\">two_pos</span> <span class=\"n\">hf</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eventually_imp</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"c1\">-- should be `peel this with x h`</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(<span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I'm not sure what the bug is. It seems like it might be because of mdata, but there's nothing in the code that pops out as being the culprit.)</p>",
        "id": 438124195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715450140
    },
    {
        "content": "<p>(<code>eventually_imp</code> isn't necessary, it's <code>hp.mono hq</code>, but I was just copying implementation from <code>peel</code>)</p>",
        "id": 438124330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715450290
    },
    {
        "content": "<p>What if I have several <code>Eventually</code> assumptions? Do I have to <code>and</code> all of them first?</p>",
        "id": 438125123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715451102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I'll try to have a look tonight, but no promises.</p>",
        "id": 438126171,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715452141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <code>peel</code> only works with a single hypothesis, but if you can <code>and</code> them together (and merge quantifiers) then I suppose you could use it here</p>",
        "id": 438126692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715452797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rewrite.20within.20Filter.2EEventually/near/438121642\">said</a>:</p>\n<blockquote>\n<p>In your very simple case <code>simpa using this</code> will probably be enough. But a more general next step would be <code>apply this.mono</code>.</p>\n</blockquote>\n<p>This is indeed what I was looking for, thanks!</p>",
        "id": 438126798,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1715452905
    },
    {
        "content": "<p>isn't this what the <code>filter_upwards</code> tactic is for?</p>",
        "id": 438127918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715454289
    },
    {
        "content": "<p>With <code>filter_upwards</code>, you can prove some goal, but you can't use one <code>Filter.Eventually</code> to simplify another.</p>",
        "id": 438151612,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715482768
    },
    {
        "content": "<p>Or use an a.e. equality to rewrite inside an integral (without constructing a very specific a.e. equality).</p>",
        "id": 438151681,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715482818
    },
    {
        "content": "<p>E.g., if you know that <code>f</code> is a.e. equal to <code>g</code>, then you can't simplify integral of <code>fun x =&gt; (f x)^2 - (g x)^2</code> to zero.</p>",
        "id": 438151725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715482886
    }
]