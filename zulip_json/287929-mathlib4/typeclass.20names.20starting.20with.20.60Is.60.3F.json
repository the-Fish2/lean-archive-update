[
    {
        "content": "<p>Can anyone point me to a thread about the consensus on using <code>Is</code> in typeclass names for Mathlib? It isn't covered in <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>.</p>\n<p>My understanding is that mixin Prop-valued typeclasses may/should start with <code>Is</code>, and Type-valued typeclasses must not. Is that accurate? How closely do we follow this in Mathlib? Is everyone happy? :-)</p>\n<p>(There is some FRO internal discussion of naming that I'd like to provide context for.)</p>",
        "id": 416458489,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705531751
    },
    {
        "content": "<p>This is unfortunately not accurate -- <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC#doc\">docs#IsROrC</a> is a counterexample (and I would certainly prefer that <code>Is</code> was used for Props only -- I remember Jeremy Avigad years ago telling me that this was stuck to in Isabelle and it made for easy understanding, so you might want to ask his opinion on the matter).</p>",
        "id": 416458892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705531952
    },
    {
        "content": "<p>Conversely, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTensorProduct#doc\">docs#IsTensorProduct</a> is a <code>Prop</code>, but I would prefer that it carried data</p>",
        "id": 416460257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705532630
    },
    {
        "content": "<p>I guess we could rename <code>IsROrC</code> to <code>ROrCLike</code>, or more generally use <code>Like</code> as a suffix anywhere we are tempted to use <code>Is</code> for data?</p>",
        "id": 416460354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705532668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416460257\">said</a>:</p>\n<blockquote>\n<p>Conversely, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTensorProduct#doc\">docs#IsTensorProduct</a> is a <code>Prop</code>, but I would prefer that it carried data</p>\n</blockquote>\n<p>Why?</p>",
        "id": 416461337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705533264
    },
    {
        "content": "<p>Presumably to have the isomorphism with \"the\" tensor product bundled?</p>",
        "id": 416461399,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705533308
    },
    {
        "content": "<p>I would like a Prop-valued version of <code>IsROrC</code> which didn't choose a preferred <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mo>−</mo><mn>1</mn></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1744em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span></span></span></span> (and which I'll write myself when I need it ) but probably this thread is not for these sorts of discussions.</p>",
        "id": 416461409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705533311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416461399\">said</a>:</p>\n<blockquote>\n<p>Presumably to have the isomorphism with \"the\" tensor product bundled?</p>\n</blockquote>\n<p>Is this actually useful though? In that case you may as well just use the tensor product itself.</p>",
        "id": 416461510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705533364
    },
    {
        "content": "<blockquote>\n<p>I remember Jeremy Avigad years ago telling me that this was stuck to in Isabelle ...</p>\n</blockquote>\n<p>I don't remember saying that or thinking that! Maybe that's a sign that I am now of a certain age. But the naming scheme does bring back memories of the old symbolic AI and object-oriented programming literature, e.g. <a href=\"https://ieeexplore.ieee.org/document/1654194\">this</a>. Beyond nostalgia, I don't have any feelings about it.</p>",
        "id": 416461600,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1705533433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416458489\">said</a>:</p>\n<blockquote>\n<p>My understanding is that mixin Prop-valued typeclasses may/should start with <code>Is</code>, and Type-valued typeclasses must not. </p>\n</blockquote>\n<p>FWIW, I think such a naming convention makes perfect sense.</p>",
        "id": 416461898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705533595
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> this was my understanding, but I know we haven't been supercareful about it (like with <code>IsROrC</code>; maybe just <code>ROrC</code>?). I think it came from Lean 3 where we used <code>is_foo : Prop</code> and <code>has_foo : Type*</code> but then in Lean 4 core they dropped <code>has</code>, so Mathlib (mostly) did too. There are a few <code>HasFoo</code> relics now though.</p>",
        "id": 416463919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705534725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416461510\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416461399\">said</a>:</p>\n<blockquote>\n<p>Presumably to have the isomorphism with \"the\" tensor product bundled?</p>\n</blockquote>\n<p>Is this actually useful though? In that case you may as well just use the tensor product itself.</p>\n</blockquote>\n<p>It's useful constructively to avoid <code>noncomputable</code>. A reason you might not have the tensor product itself is to allow type aliases that put different norms / products on the tensor product, such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedTensorProduct#doc\">docs#GradedTensorProduct</a>, which still \"is\" a tensor product</p>",
        "id": 416471504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705538393
    },
    {
        "content": "<p>(react with <span aria-label=\"moving truck\" class=\"emoji emoji-1f69a\" role=\"img\" title=\"moving truck\">:moving_truck:</span> if you want me to split this discussion to a new thread)</p>",
        "id": 416471583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705538420
    },
    {
        "content": "<p>Indeed, eventually I will be wanting to put norms on my tensor product.</p>",
        "id": 416477327,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705541427
    },
    {
        "content": "<p>Of course, this is maybe a failure in the use of type synonyms; any type that you might want to wrap in a synonym ends up needing an <code>IsTheOriginalType</code> typeclass.</p>",
        "id": 416478658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705542482
    },
    {
        "content": "<blockquote>\n<p>My understanding is that mixin Prop-valued typeclasses may/should start with Is, and Type-valued typeclasses must not. Is that accurate? How closely do we follow this in Mathlib? Is everyone happy? :-)</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding#doc\">docs#Embedding</a> (<code>Prop</code>-valued mixin) and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Embedding#doc\">docs#Function.Embedding</a> (bundled injective function) have been annoying me a bit. Technically doesn't violate what you're saying, which sounds like a decent rule, but <code>IsEmbedding</code> would be my preferred spelling for the former.</p>",
        "id": 416965379,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705734955
    },
    {
        "content": "<p>Honestly, <code>Embedding</code> should live in the <code>Topology</code> namespace.</p>",
        "id": 416965583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705735086
    },
    {
        "content": "<p>Some more counterexamples I noticed recently:</p>\n<p>There are a whole bunch of TopologicalSpace mixins with no <code>Is</code>, e.g. <code>CompactSpace</code>, <code>QuasiSober</code>, <code>QuasiSeparatedSpace</code>, <code>T0Space</code>, <code>T2Space</code>,... .</p>\n<p>Conversely there are a few category theory <code>Is</code> typeclasses which aren't Props; I found <code>CategoryTheory.IsLeftAdjoint</code>, <code>CategoryTheory.IsRightAdjoint</code> and  <code>CategoryTheory.IsEquivalence</code>.</p>\n<p>Note that <a href=\"https://github.com/leanprover-community/mathlib4/pull/10819\">#10819</a> changes the name of <code>IsROrC</code>.</p>",
        "id": 423079680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708716106
    },
    {
        "content": "<p>Yes, in topology we have the conflicting naming convention of naming <code>IsX</code> properties about subsets and <code>XSpace</code> the corresponding property of spaces</p>",
        "id": 423080641,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708716474
    },
    {
        "content": "<p>When introducing new properties of topological spaces (what made me notice the list above was the discussion of spectral spaces <a href=\"#narrow/stream/113489-new-members/topic/Hello/near/422625907\">here</a>) should one always introduce the <code>Is</code> version for subsets too?</p>",
        "id": 423080907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708716574
    },
    {
        "content": "<p>It depends on whether you want to deal with sets with this property.</p>",
        "id": 423081688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708716877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/416965583\">said</a>:</p>\n<blockquote>\n<p>Honestly, <code>Embedding</code> should live in the <code>Topology</code> namespace.</p>\n</blockquote>\n<p>We have things in <code>Topology</code> namespace and in <code>TopologicalSpace</code> namespace.</p>",
        "id": 423081754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708716906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20names.20starting.20with.20.60Is.60.3F/near/423080641\">said</a>:</p>\n<blockquote>\n<p>Yes, in topology we have the conflicting naming convention of naming <code>IsX</code> properties about subsets and <code>XSpace</code> the corresponding property of spaces</p>\n</blockquote>\n<p>Can we move the former into the <code>Set</code> namespace?</p>",
        "id": 423102822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708726323
    }
]