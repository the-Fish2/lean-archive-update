[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> mathlib has this:</span>\n\n<span class=\"cm\">````</span>\n<span class=\"cm\">/-- Coercion from a commutative semiring to an algebra over this semiring. -/</span>\n<span class=\"cm\">@[coe] def Algebra.cast {R A : Type*} [CommSemiring R] [Semiring A] [Algebra R A] : R → A :=</span>\n<span class=\"cm\">  algebraMap R A</span>\n<span class=\"cm\">````</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>What am I doing wrong?</p>",
        "id": 418844902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706624392
    },
    {
        "content": "<p>Are you expecting the <code>coe</code> attribute to mean that Lean will silently apply that function? AFAIK <code>coe</code> only affects behaviour of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coe#doc\">docs#Coe</a> instances.</p>",
        "id": 418845396,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624525
    },
    {
        "content": "<p>I don't understand coercions at all and don't really know where to look to read about them.</p>",
        "id": 418846258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706624758
    },
    {
        "content": "<p>There's plenty I don't understand but I believe you need a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coe#doc\">docs#Coe</a> (or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeOut#doc\">docs#CoeOut</a> etc.) instance for them to fire and the <code>@[coe]</code> decorator just affects whether the result expands or stays like a little up arrow.</p>",
        "id": 418846573,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624839
    },
    {
        "content": "<p>(So in this case, you need to invoke <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=algebraMap#doc\">docs#algebraMap</a> manually.)</p>",
        "id": 418846655,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624863
    },
    {
        "content": "<p>So this is the intention?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fooexample</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.cast</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">barexample</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fooexample</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">barexample</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">fooexample</span> <span class=\"c1\">-- ↑a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">barexample</span> <span class=\"c1\">-- (algebraMap A B) a</span>\n</code></pre></div>\n<p>Which of these is the simp normal form?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra.cast</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ ↑a = b</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- no progress</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ (algebraMap A B) a = b</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- no progress</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418847134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706624993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  the <code>Coe</code> instances exist to allow Lean to find coercions. The <code>@[coe]</code> attributes exist to leave a trail of breadcrumbs after they've been inserted so that Lean can tell a coercion was applied. That is, how would Lean know something is a coercion after it inserts the corresponding function? Because that function has the attribute. This is how the delaborator knows to print an up arrow. It's also how norm_cast figures out how many coercions there are and where they are.</p>\n<p>So, with just the attribute, the function will display as an up arrow in the infoview, but you have to write <code>algebraMap</code> in the source. With just the instance, you could coerce in the source, but in the infoview it would show up as <code>algebraMap</code></p>",
        "id": 418848296,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706625307
    },
    {
        "content": "<p>The attribute is not on <code>algebraMap</code>, it's on <code>Algebra.cast</code>, which is the same as algebraMap except that it explicitly asks for source and target rings. Is this something to do with the design decision?</p>",
        "id": 418849305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706625572
    },
    {
        "content": "<p>It looks like the reason for this attribute on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.cast#doc\">docs#Algebra.cast</a> is because of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=algebraMap.coeHTCT#doc\">docs#algebraMap.coeHTCT</a></p>",
        "id": 418850408,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706625848
    },
    {
        "content": "<p>That doesn't answer your question (and in fact raises others). I'd like to know why we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=algebraMap.coeHTCT#doc\">docs#algebraMap.coeHTCT</a></p>",
        "id": 418850471,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706625871
    },
    {
        "content": "<p>(sorry -- a message got lost on the Eurostar: this was supposed be about <a href=\"https://github.com/leanprover-community/mathlib4/pull/10125\">#10125</a>) Oh ha ha now we get this <code>⊢ (↑R A) 0 = 0</code> because the coercion is asking for R and A explicitly :-)</p>",
        "id": 418863926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706628796
    }
]