[
    {
        "content": "<p>Recently I've added <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CardinalInterFilter#doc\">docs#CardinalInterFilter</a> as a typeclass to mathlib. This definition generalizes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> and the file contains a proof that they are in fact the same for a specific cardinal. </p>\n<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and I thought that we could consider refactoring the proofs in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CardinalInterFilter#doc\">docs#CardinalInterFilter</a>. The main trade-off would be a shorter file for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> (less defs, less API) versus the fact that this would then need to transitively import <code>Mathlib.SetTheory.Cardinal.Cofinality</code>.  </p>\n<p>I'm curious what you think, I'm more than happy to carry out the refactor! Note that all results in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> generalized to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CardinalInterFilter#doc\">docs#CardinalInterFilter</a>: the first half of the results has already landed in mathlib, the other half is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11578\">#11578</a>. </p>\n<p>Option 1: don't refactor<br>\nOption 2: refactor<br>\nOption 3: Refactor, but split CardinalInterFilter into a file with more basic results (which then only needs to import Mathlib.SetTheory.Cardinal.Ordinal`) and a file with the other results (which then imports Mathlib.SetTheory.Cardinal.Cofinality). As such, CountableInterFilter should only transitively need Mathlib.SetTheory.Cardinal.Ordinal instead of Mathlib.SetTheory.Cardinal.Cofinality.</p>",
        "id": 430250975,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711716402
    },
    {
        "content": "<p>/poll What to do<br>\nDon't refactor<br>\nRefactor<br>\nSplit and refactor</p>",
        "id": 430251032,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711716425
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> who wrote the original</p>",
        "id": 430269027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711724494
    },
    {
        "content": "<p>I'm a bit worried about adding more dependencies, otherwise I don't care (both refactor and don't refactor LGTM)</p>",
        "id": 430410306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1711823375
    },
    {
        "content": "<p>OK let's live with the duplication, at least for now.</p>",
        "id": 430631510,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1711991623
    }
]