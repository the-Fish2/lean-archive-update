[
    {
        "content": "<p>I want to define two random sequences, <code>S </code>and<code> X</code>, where the value of <code>Sk</code> is randomly drawn with equal probability from <code>{1, 2, ..., N}</code>, and <code>Xk+1 = Xk - a * Sk</code>, where <code>0 &lt; a &lt; 1</code>.<br>\nHow should I define the two random sequences <code>S</code> and <code>X</code> in Lean?<br>\nOr are there any documents in Lean that I can refer to?</p>",
        "id": 427295609,
        "sender_full_name": "haotian liu",
        "timestamp": 1710728881
    },
    {
        "content": "<p>The idea is to define <code>k ↦ S k</code> as being drawn from the uniform distribution on <code>{1, ..., N}</code>, then define <code>X</code> by recursion using it.</p>",
        "id": 427358236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710744505
    },
    {
        "content": "<p>Is <code>S</code> an infinite sequence, or is it finite?</p>",
        "id": 427358320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710744527
    },
    {
        "content": "<p><code>S</code> is a finite sequence.</p>",
        "id": 427377622,
        "sender_full_name": "haotian liu",
        "timestamp": 1710748859
    },
    {
        "content": "<p>I still have a question. Suppose there is a random variable X, which follows the distribution μ. Are there any relevant theorems about random sampling in Mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 427840924,
        "sender_full_name": "haotian liu",
        "timestamp": 1710900671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Definition.20of.20two.20relational.20random.20sequence/near/427358236\">said</a>:</p>\n<blockquote>\n<p>The idea is to define <code>k ↦ S k</code> as being drawn from the uniform distribution on <code>{1, ..., N}</code>, then define <code>X</code> by recursion using it.</p>\n</blockquote>\n<p>I still have a question, how should i write the recursion in Lean?</p>",
        "id": 429277321,
        "sender_full_name": "haotian liu",
        "timestamp": 1711335917
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- You didn't tell what you wanted here</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">S</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 429296264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711347615
    },
    {
        "content": "<p>Maybe you will want to replace <code>ℕ → ℝ</code> with <code>Fin n → ℝ</code> for some <code>n</code> that you didn't specify to me</p>",
        "id": 429296311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711347637
    },
    {
        "content": "<p>OK, Thank you very much!</p>",
        "id": 429306754,
        "sender_full_name": "haotian liu",
        "timestamp": 1711352242
    }
]