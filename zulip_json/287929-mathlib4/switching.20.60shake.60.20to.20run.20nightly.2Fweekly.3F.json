[
    {
        "content": "<p>I spend a <em>lot</em> of time waiting for CI to re-run after <code>lake exe shake --fix</code>.</p>\n<p>I love <code>shake</code>, and definitely want it run all the time. But can we run it periodically outside of the PR process? I would be happy to set up the bots that run it, and report failures to zulip if something goes wrong. (Or even happier if someone else could do this!!).</p>",
        "id": 431857475,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712552332
    },
    {
        "content": "<p>And I suspect it is not just me who this holds up. It's moreover a confusing thing to have to deal with for newcomers, and probably better concentrated in experts hands than requiring everyone to interact with it.</p>",
        "id": 431857696,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712552427
    },
    {
        "content": "<p>Another possibility: shake still runs but you can <code>lake exe shake --defer</code> which adds to a <code>\"defer\"</code> key in noshake which acts just like <code>\"ignore\"</code>, and then <code>lake exe shake --defer --fix</code>  will apply any deferred fixes</p>",
        "id": 431858994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712552998
    },
    {
        "content": "<p>(we could also have <code>lake exe shake --fix</code> also apply deferred fixes, since you will probably be recompiling a big fraction of mathlib anyway and it seems like a good time to empty the queue)</p>",
        "id": 431859311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712553157
    },
    {
        "content": "<p>As a newcomer, I did manage to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11667/commits/6ebd230c4e75708d9b20e32da62ab0d4a6b1e0c3\">wrongly fix imports</a>, by blindly trusting <code>lake exe shake --fix</code>, but I think this was due to a bug that has been fixed recently. </p>\n<p>Something along the same lines that might also be a thing for newcomers: The different (?) linters. The first one that runs immediately is fine, but the one that triggers on missing documentation for <code>def</code> runs after the build, which increases the length of the feedback loop.</p>\n<p>Now that I think about this, I will probably write a prepush hook for myself (for both linting and shake). If the issue with <code>shake</code> is \"I forgot to run it locally\", then that might also be a broader solution?</p>",
        "id": 431871354,
        "sender_full_name": "Pim Otte",
        "timestamp": 1712558895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/switching.20.60shake.60.20to.20run.20nightly.2Fweekly.3F/near/431858994\">said</a>:</p>\n<blockquote>\n<p>Another possibility: shake still runs but you can <code>lake exe shake --defer</code> which adds to a <code>\"defer\"</code> key in noshake which acts just like <code>\"ignore\"</code>, and then <code>lake exe shake --defer --fix</code>  will apply any deferred fixes</p>\n</blockquote>\n<p>Doesn't this have the same problem, requiring an extra CI pass to get to green? I'm not really concerned about the difference between --fix and --defer: I just don't want to have to think about it so often.</p>",
        "id": 431876854,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712561175
    },
    {
        "content": "<p>If there are people (maintainers particularly) who would support turning it off for every CI run (and instead running periodically), I would appreciate +1s indicating as much. It is a bunch of work to set up the periodic run, and do not want to do that work and then have objections.</p>",
        "id": 431877078,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712561239
    },
    {
        "content": "<p>I'm not a maintainer, but would welcome having shorter CI.  If you end up getting the periodic run of <code>shake</code>, maybe <code>lean4checker</code> could be placed on the same schedule?</p>",
        "id": 431877836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712561431
    },
    {
        "content": "<p>Yes, definitely.</p>",
        "id": 431878067,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712561507
    },
    {
        "content": "<p>I have been hoping someone else would do that for some time. :-)</p>",
        "id": 431878111,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712561519
    },
    {
        "content": "<p>Honestly, I tried, but I have some deep misunderstanding of how CI works...</p>",
        "id": 431878278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712561565
    },
    {
        "content": "<p>Or rather, GitHub actions.</p>",
        "id": 431878354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712561586
    },
    {
        "content": "<p>I struggle too, CI is no fun.</p>",
        "id": 431878640,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712561660
    },
    {
        "content": "<p>Maybe a simple solution is to run some steps only at a certain time?  And maybe configure an empty push at this time to trigger a run with the full CI?</p>",
        "id": 431879721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712561930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, could you look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12004\">https://github.com/leanprover-community/mathlib4/pull/12004</a>?</p>",
        "id": 431880917,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712562230
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/12005\">#12005</a> is an initial attempt at running shake periodically, asking humans for help if something goes wrong. I barely thought about this one, and have to go hop on a plane, so please treat with some skepticism! :-)</p>",
        "id": 431883142,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712562869
    },
    {
        "content": "<p>I think Mario is in the best position to judge how hard it is to do library-wide shake-fixes.</p>",
        "id": 431911827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712568564
    },
    {
        "content": "<p>So I would want to give his vote triple-weight, or something like that.</p>",
        "id": 431911952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712568587
    },
    {
        "content": "<p>The actual <code>lake exe shake</code> run takes negligible time, as I recall. I think the main argument to keep it per-pr is that letting issues pile up makes them harder to fix</p>",
        "id": 431947293,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712576491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/switching.20.60shake.60.20to.20run.20nightly.2Fweekly.3F/near/431876854\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/switching.20.60shake.60.20to.20run.20nightly.2Fweekly.3F/near/431858994\">said</a>:</p>\n<blockquote>\n<p>Another possibility: shake still runs but you can <code>lake exe shake --defer</code> which adds to a <code>\"defer\"</code> key in noshake which acts just like <code>\"ignore\"</code>, and then <code>lake exe shake --defer --fix</code>  will apply any deferred fixes</p>\n</blockquote>\n<p>Doesn't this have the same problem, requiring an extra CI pass to get to green? I'm not really concerned about the difference between --fix and --defer: I just don't want to have to think about it so often.</p>\n</blockquote>\n<p>Kinda? The second run would not take an hour, because it would not involve changing mathlib. (It would be a similar level of pain as the \"you didn't import everything\" linter - you do a standard action and then the CI for the second run quickly catches back up to this point and continues with the rest of the checks.)</p>\n<p>We can also try to ensure that this step failing does not prevent later steps from running (and ditto for other lints and tests), since it's better if you can have fewer dialogues with CI</p>",
        "id": 431961918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712580401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/switching.20.60shake.60.20to.20run.20nightly.2Fweekly.3F/near/431947293\">said</a>:</p>\n<blockquote>\n<p>The actual <code>lake exe shake</code> run takes negligible time, as I recall. I think the main argument to keep it per-pr is that letting issues pile up makes them harder to fix</p>\n</blockquote>\n<p>Right. This is my main concern with letting it slip, <code>shake</code> fixes become increasingly incoherent the more you try to fix at once, and there is a lot of time lost if you need to do a second pass since any change to imports will involve a lengthy recompile before you can do fixes to the fixes</p>",
        "id": 431962394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712580565
    },
    {
        "content": "<p>So a fully automated shake fix run will fail a good portion of the time and require human interaction on a regular basis. That's why my idea is to instead keep the human in the loop but allow authors to use <code>--defer</code> instead of <code>--fix</code> if they are in a hurry, and the next person to run <code>--fix</code> will pick up the slack</p>",
        "id": 431962909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712580722
    },
    {
        "content": "<p>Hmm... I still think <code>--defer</code> is too much work.</p>\n<p>Could we try out <a href=\"https://github.com/leanprover-community/mathlib4/pull/12005\">#12005</a>, and see if it is manageable? I think the failure modes are:</p>\n<ul>\n<li>the failures that get reported at 24 hour intervals are sufficiently more difficult than the every-PR failures</li>\n<li>no one responds to the requests for help from the bot when there are failures</li>\n<li>only I respond :-)</li>\n</ul>",
        "id": 432111468,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712634240
    },
    {
        "content": "<p>well if someone other than me is doing the work, and the work size remains bounded, I don't have objections to setting up an alternative system, at least as a test</p>",
        "id": 432164771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651033
    },
    {
        "content": "<p>I agree that there are a bunch of checks that could be run periodically rather than on each CI run. What I'm thinking of is:</p>\n<ul>\n<li>shake</li>\n<li>lean4checker</li>\n<li>everything is imported (actually this one could be run on each bors batch if we knew how to)</li>\n<li>the list of nolints/nostyles is up to date (we lost that automation during the port)</li>\n</ul>",
        "id": 432843050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712906359
    },
    {
        "content": "<p>Basically any check whose failure can be fixed without possibly having to revert the PR that caused it is eligible to be run periodically rather than on every run (I guess lean4checker has that property only if we trust that mathlib contributors aren't malicious)</p>",
        "id": 432843485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712906514
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12005\">#12005</a>, running <code>shake</code> daily, I think to test it properly we're going to need to remove <code>shake</code> as a standard CI step, introduce an intentional redundant import for shake to remove, and see how it goes.</p>\n<p>Can I proceed with that?</p>",
        "id": 433447241,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713247347
    }
]