[
    {
        "content": "<p>Can anyone explain this:</p>",
        "id": 418842004,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706623492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.AlgebraMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"c1\">-- Works only when `import Mathlib` omitted</span>\n<span class=\"k\">#check</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"c1\">-- Always works</span>\n</code></pre></div>",
        "id": 418842009,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706623494
    },
    {
        "content": "<p>With error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Polynomial</span> <span class=\"bp\">?</span><span class=\"n\">m.539</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.539</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>Is this related to the big FunLike refactor?</p>",
        "id": 418842763,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706623719
    },
    {
        "content": "<p>Not to my knowledge. The above is on master FWIW.</p>",
        "id": 418843396,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706623897
    },
    {
        "content": "<p>Oh, look: <a href=\"#narrow/stream/287929-mathlib4/topic/Polynomial.2Eaeval.20broke\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Polynomial.2Eaeval.20broke</a></p>",
        "id": 418843850,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706624035
    },
    {
        "content": "<p>See here:<br>\n<span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/elaboration.20problems.20for.20algebra.20homomorphisms/near/412781772\">said</a>:</p>\n<blockquote>\n<p>Perhaps you've had problems elaborating <code>AlgHom</code>s or <code>StarAlgHom</code>s. If so, I've come across two instances (I think I added them) that are causing the pain.</p>\n</blockquote>",
        "id": 418844251,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706624170
    },
    {
        "content": "<p>That's the only way I can figure out how to link to a thread on mobile.</p>",
        "id": 418844302,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706624190
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 418844609,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624287
    },
    {
        "content": "<p>Upshot, it's fixed with <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> but you could temporarily disable those instances.</p>",
        "id": 418844896,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706624391
    },
    {
        "content": "<p>(This isn't even hitting me, I just wanted to run <code>#find_home</code> with everything imported.)</p>",
        "id": 418845599,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624586
    },
    {
        "content": "<p>For posterity I will record that adding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">AlgHom.instContinuousLinearMapClassToSemiringToDivisionSemiringToSemifieldToFieldToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingToNonUnitalSeminormedCommRingToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNormedSpace</span>\n</code></pre></div>\n<p>fixes this issue.</p>",
        "id": 418847124,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706624989
    }
]