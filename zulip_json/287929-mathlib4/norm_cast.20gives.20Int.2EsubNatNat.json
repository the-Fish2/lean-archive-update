[
    {
        "content": "<p>Is this really the behavior we want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ Int.subNatNat n 1 = 3</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407506373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702395732
    },
    {
        "content": "<p>Which lemma does it use?</p>",
        "id": 407508877,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702396460
    },
    {
        "content": "<p>I thought that was fixed</p>",
        "id": 407515318,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702398477
    },
    {
        "content": "<p>Ref <a href=\"#narrow/stream/287929-mathlib4/topic/norm_cast.20leaks.20Int.2EsubSubNat\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/norm_cast.20leaks.20Int.2EsubSubNat</a></p>",
        "id": 407515464,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702398519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/norm_cast.20gives.20Int.2EsubNatNat/near/407508877\">said</a>:</p>\n<blockquote>\n<p>Which lemma does it use?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_subNatNat#doc\">docs#Int.cast_subNatNat</a></p>",
        "id": 410849311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704203919
    },
    {
        "content": "<p>As an (inelegant) workaround one can <code>rw [Int.subNatNat_eq_coe]</code> immediately afterwards.</p>",
        "id": 410866493,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704210997
    },
    {
        "content": "<p>I'm pretty sure <code>norm_cast</code> has several kinds of tagging internally and you can specify what kind a specific lemma is. This changes the way <code>norm_cast</code>/<code>push_cast</code> use those lemmas (in particular, whether <code>norm_cast</code> is allowed to use them backwards).</p>",
        "id": 410866749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704211124
    },
    {
        "content": "<p>I just hit this again. Would be good to fix it</p>",
        "id": 436129531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714421165
    },
    {
        "content": "<p>I thought I filed this, but it was <a href=\"https://github.com/leanprover-community/mathlib4/pull/11573\">#11573</a> instead</p>",
        "id": 436131942,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714422042
    }
]