[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12617\">https://github.com/leanprover-community/mathlib4/pull/12617</a> I'm trying to add an instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommSemiring.toNonUnitalNonAssocCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NonUnitalNonAssocCommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">CommMonoid</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">CommSemiring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This then breaks <code>Mathlib.Tactic.Ring.Basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">658</span><span class=\"bp\">/</span><span class=\"mi\">4453</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Ring.Basic</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span> <span class=\"bp\">.&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.8.0-rc1/lib/lean:/home/lean/.elan/toolchains/leanprover--lean4---v4.8.0-rc1/lib:././.lake/build/lib /home/lean/.elan/toolchains/leanprover--lean4---v4.8.0-rc1/bin/lean -Dpp.unicode.fun=true -Dpp.proofs.withType=false -DautoImplicit=false -DrelaxedAutoImplicit=false ././././Mathlib/Tactic/Ring/Basic.lean -R ./././. -o ././.lake/build/lib/Mathlib/Tactic/Ring/Basic.olean -i ././.lake/build/lib/Mathlib/Tactic/Ring/Basic.ilean -c ././.lake/build/ir/Mathlib/Tactic/Ring/Basic.c --json</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">584</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"bp\">-</span><span class=\"mi\">584</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sub_pf</span> <span class=\"bp\">«$</span><span class=\"n\">pc</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">pd</span><span class=\"bp\">»</span>\n<span class=\"n\">argument</span>\n  <span class=\"bp\">«$</span><span class=\"n\">pd</span><span class=\"bp\">»</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"n\">NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring</span><span class=\"o\">)))</span>\n      <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">_c</span><span class=\"bp\">»</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">«$</span><span class=\"n\">d</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring</span><span class=\"o\">)))</span>\n      <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">_c</span><span class=\"bp\">»</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">?</span><span class=\"n\">m.108578</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Lean</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I've not looked into meta programming in Mathlib yet, so I'm not sure how to proceed?</p>\n<p>Or is my instance wrong in some way?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 436827109,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1714719053
    },
    {
        "content": "<p>I would guess a well-placed <code>assertInstancesCommute</code> in the meta code will fix this</p>",
        "id": 436834720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714722619
    },
    {
        "content": "<p>Ok, I fixed that issue in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12617\">#12617</a> (it relates to issues with dependent types and <code>Qq</code>, as quoted terms that are equal by definition are not equal in Qq) but now we have a worse one relating to <code>CoeFun</code> not firing on linear maps</p>",
        "id": 437090422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714896190
    }
]