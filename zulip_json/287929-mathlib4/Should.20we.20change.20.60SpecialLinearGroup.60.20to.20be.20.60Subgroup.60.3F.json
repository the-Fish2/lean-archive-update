[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7826#pullrequestreview-1884728787\">commented in GitHub</a>:</p>\n<blockquote>\n<p>I claim our definition <code>SpecialLinearGroup</code> should be changed and should really be defined to have type <code>Subgroup (GeneralLinearMap R M)</code> rather than just a <code>Subtype</code>. Probably we should also have a second definition which would have type <code>Subgroup (Matrix n n R)ˣ</code> and could be called something like <code>SpecialLinearMatrixGroup</code>. The main point though is that by having type <code>Subgroup</code> a lot of boilerplate currently in this file could be dropped.</p>\n</blockquote>\n<p>What do you think?</p>",
        "id": 421982686,
        "sender_full_name": "Wen Yang",
        "timestamp": 1708152859
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.SpecialLinearGroup#doc\">docs#Matrix.SpecialLinearGroup</a></p>",
        "id": 421989926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708157563
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup#doc\">docs#Subgroup</a></p>",
        "id": 421990130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708157678
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SpecialLinearGroup#doc\">docs#SpecialLinearGroup</a> (doesn't exist)</p>",
        "id": 421990759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708158073
    },
    {
        "content": "<p>It looks like we can't have subgroups of a monoid so I think Oliver is dead right. </p>\n<p>I've just had to start working with general linear groups and we have two kinds -- matrices and endomorphisms (concrete and abstract). I think that this is necessary. And I think that for all the classical groups (special linear, symplectic, orthogonal, unitary) we're going to want two definitions -- a concrete one and an abstract one -- and they should all be subgroups of the appropriate general linear group  because this is how they're used in practice.</p>\n<p>My only reservation about this design decision is that I have seen typeclass inference go haywire recently when faced with <code>\\u|-\\MCO K</code>(the type corresponding to the integers of a number field) and so am currently a bit nervous about coerced subtypes in general, but my impression is that the community are getting on top of these issues</p>",
        "id": 421991014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708158228
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.GeneralLinearGroup#doc\">docs#Matrix.GeneralLinearGroup</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.GeneralLinearGroup#doc\">docs#LinearMap.GeneralLinearGroup</a> and I think we should follow this pattern for all the classical groups, with everything being a subgroup in each case. This is how the groups are used in practice.</p>",
        "id": 421991325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708158414
    },
    {
        "content": "<p><code>LinearMap.GeneralLinearGroup</code> is not a subgroup though :)</p>",
        "id": 421991484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708158505
    },
    {
        "content": "<p>Yeah but this is the base case</p>",
        "id": 421991503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708158519
    },
    {
        "content": "<p>The General Linear is moving from a monoid to a group and once you're in group land you never want to leave (in this part of mathematics)</p>",
        "id": 421991638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708158581
    },
    {
        "content": "<p>What about things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.unitaryGroup#doc\">docs#Matrix.unitaryGroup</a> ?</p>",
        "id": 421991738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708158608
    },
    {
        "content": "<p>I guess we'll have to talk to the unitary group people but my gut feeling is that pain will be minimised if this were a subgroup of Matrix.GeneralLinearGroup rather than a submonoid of a matrix group.</p>",
        "id": 421992160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708158758
    },
    {
        "content": "<p>Right now there seems to be a genuine risk that the symplectic group people will come along and make a third design decision for how their subgroups of GL(n) are implemented. I suspect we're in this mess because \"special linear groups\" will have been an entry on the undergraduate to-do list and someone will have knocked it off just to get it out the way rather than for any other reason</p>",
        "id": 421992777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708159004
    },
    {
        "content": "<p>I'm on mobile and can't figure out how to see if the unitary group file is a leaf file in the API docs page</p>",
        "id": 421992979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708159086
    },
    {
        "content": "<p>It is not:<br>\n<a href=\"/user_uploads/3121/6Q974nuSOZZtltVT8jDqyrdN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6Q974nuSOZZtltVT8jDqyrdN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6Q974nuSOZZtltVT8jDqyrdN/image.png\"></a></div>",
        "id": 421993076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708159157
    },
    {
        "content": "<p>Thanks. And do these files suffer with the fact that it's defined as a monoid?? It sounds like the worst of all worlds to me.</p>",
        "id": 421993239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708159234
    },
    {
        "content": "<p>I'm now suffering because apparently modern phone browsers think it's a bad idea to let users edit URLs manually :-/</p>",
        "id": 421993446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708159327
    },
    {
        "content": "<p>The Star.Matrix file seems to only use unitary groups once, just as a way of saying \"I am unitary\". In particular it never uses the group structure. So maybe we should have reducible predicates on matrices and endomorphisms saying \"I am unitary/symplectic/orthogonal/special linear\" and then define all the classical groups as subgroups of general linear groups satisfying these predicates.</p>",
        "id": 421994229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708159830
    },
    {
        "content": "<p>As a Lean newcomer who was recently confused by these definitions I very much agree it is more natural to work with subgroups. Just from a practical standpoint having to think about and work around if a \"group\" is a Subtype or Submonoid is odd. Also, it seems like having consistent Subgroup definitions makes expressing something like special unitary much easier.</p>",
        "id": 422005758,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708170853
    },
    {
        "content": "<p>The nice thing about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.unitaryGroup#doc\">docs#Matrix.unitaryGroup</a> is that you automatically get access to all the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> API (right now there's not a ton, but that's something), and that's already a group.</p>",
        "id": 422013911,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708178758
    },
    {
        "content": "<p>In any case, I'm agnostic about all this at the moment, so if people have other preferences, that's fine.</p>",
        "id": 422014002,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708178805
    },
    {
        "content": "<p>The correct solution is one that makes everybody happy and will probably need some thought.</p>",
        "id": 422014349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708179105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20we.20change.20.60SpecialLinearGroup.60.20to.20be.20.60Subgroup.60.3F/near/422014349\">said</a>:</p>\n<blockquote>\n<p>The correct solution is one that makes everybody happy and will probably need some thought.</p>\n</blockquote>\n<p>I almost responded with \"does not compute\" but realized that you most carefully left out the clause \"all of the time\".</p>",
        "id": 422245941,
        "sender_full_name": "Ian Allen",
        "timestamp": 1708353416
    }
]