[
    {
        "content": "<p>Given a set <code>s</code> in a type <code>Œπ</code>, do we have in mathlib the linear map forgetting the coordinates not in <code>s</code>, i.e., <code>((i : Œπ) ‚Üí E‚ÇÅ i) ‚Üí‚Çó[ùïú] ((i : s) ‚Üí E‚ÇÅ i)</code>? I looked for this and for a more general version, replacing the inclusion of <code>s</code> in <code>univ</code> with a general embedding, but I couldn't find it. It's one of these cases where I don't know a good tool to look for these constructions (and there are so many constructions in linear algebra!) (<code>loogle</code> and <code>grep</code> both failed me), so if you have tricks I'm all ears!</p>",
        "id": 432221329,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1712664908
    },
    {
        "content": "<p>My strategy is too look manually through <code>Mathlib/LinearAlgebra/Pi.lean</code>, but I don't find that there, so I think it's missing. It should be formulated as the non-equiv version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.piCongrLeft#doc\">docs#LinearEquiv.piCongrLeft</a>.</p>",
        "id": 432256389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712672715
    },
    {
        "content": "<p>This should be restriction along the inclusion of <code>s</code>.</p>",
        "id": 432257336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712672959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.funLeft</span>\n  <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>found with <code>exact?</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 432257863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673106
    },
    {
        "content": "<p>oh but you want the dependent product. Does that work? (no :( )</p>",
        "id": 432257954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673125
    },
    {
        "content": "<p>Suppose I didn't want the dependent version (which I do). Can you explain how I could have guessed the name <code>funLeft</code>? Is that a standard name scheme in this corner of the library? (It's not even clear to me if <code>fun</code> means <code>function</code> -- because <code>f</code> is a function -- or <code>functor</code> -- since this is the canonical contravariant functor in this setting).</p>",
        "id": 432259459,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1712673539
    },
    {
        "content": "<p>Well, here's the cleanest version I could come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">EX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">EX</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n   <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">EX</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n   <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span>\n   <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EX</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EX</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.pi</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LinearMap.proj</span> <span class=\"n\">i.val</span>\n</code></pre></div>",
        "id": 432259564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673562
    },
    {
        "content": "<p>I mostly used <code>exact?%</code> and followed my nose.</p>",
        "id": 432259663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673597
    },
    {
        "content": "<p>It seems that this is just missing.</p>",
        "id": 432259749,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673609
    },
    {
        "content": "<p>I also found <code>funLeft</code> with <code>exact?%</code>.</p>",
        "id": 432259861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673637
    },
    {
        "content": "<p>FWIW, I think <code>funLeft</code> is quite a bad name. I think it should have <code>precompose</code> or something like that in the name.</p>",
        "id": 432260181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673713
    },
    {
        "content": "<p>It's possible I don't work in the most efficient way, but I tend to prefer using tools in lean itself over going for loogle/moogle. I use loogle/moogle as a last resort.</p>",
        "id": 432260522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712673794
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 432260560,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1712673802
    },
    {
        "content": "<p>We have these pre/post-composition defs all over the library, but the naming is absolutely awful (in terms of consistency). There's <code>comp</code> and <code>comp'</code> in some places (you get to guess which is which), or <code>compLeft</code> and <code>compRight</code> (again, you get to guess which is which).</p>\n<p>I propose we come up with a standard naming scheme for these, and add it to <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>.</p>",
        "id": 432304043,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712685158
    },
    {
        "content": "<p>I think <code>precomp</code> and <code>postcomp</code> are clearer that <code>compLeft</code> and <code>compRight</code>, but maybe that's just my own bias showing.</p>",
        "id": 432304254,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712685204
    },
    {
        "content": "<p>Part of the problem is that you need to talk about compositions of <code>Hom1</code>s as a <code>Hom2</code></p>",
        "id": 432312318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687096
    },
    {
        "content": "<p>Where here <code>Hom1</code> is just a regular function, and <code>Hom2</code> is a linear map</p>",
        "id": 432312372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687110
    },
    {
        "content": "<p>But we also definitely care about the cases where both are linear maps</p>",
        "id": 432312437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687124
    },
    {
        "content": "<p>And at least theoretically could care about the case where one is only an <code>AddMonoidHom</code>...</p>",
        "id": 432312543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687142
    },
    {
        "content": "<p>I don't think that's a problem? Or at least, it's a separate one? I'm talking about the distinction between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.compStarAlgHom#doc\">docs#ContinuousMap.compStarAlgHom</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.compStarAlgHom%27#doc\">docs#ContinuousMap.compStarAlgHom'</a>, for instance.</p>",
        "id": 432313268,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712687319
    },
    {
        "content": "<p>I think the point is there are a bunch of naming issues merging here x) I suggested some time ago that bundlings of the \"same\" function with different hom types could be named <code>function.asSomeType</code>, e.g <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.compL#doc\">docs#ContinuousLinearMap.compL</a> could be <code>ContinuousLinearMap.comp.asCLM</code> or something like this.</p>",
        "id": 432317458,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712688769
    },
    {
        "content": "<p>But I agree this is not precisely the issue at play here.</p>",
        "id": 432317519,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712688790
    }
]