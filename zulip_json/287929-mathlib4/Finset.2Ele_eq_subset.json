[
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.coeEmb</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.coeEmb.1</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 433085258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713049476
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Why it fails</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>In the first case, <code>LE.le</code> is not applied, so it doesn't get simplified to <code>HasSubset.Subset</code>. In the second case, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RelEmbedding.coe_toEmbedding#doc\">docs#RelEmbedding.coe_toEmbedding</a> turns it into <code>(fun a b =&gt; a ≤ b)</code> which gets simplified to <code>fun a b =&gt; a ⊆ b</code>, so <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.coe_coeEmb#doc\">docs#Finset.coe_coeEmb</a> no longer applies.</p>\n</div></div>",
        "id": 433085442,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713049671
    },
    {
        "content": "<p>What should we do about it?</p>",
        "id": 433085492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713049691
    },
    {
        "content": "<p>I would prefer to get rid of <code>⊆</code> for sets and finsets but I was told that it's bad for pedagogical reasons.</p>",
        "id": 433105783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713073131
    },
    {
        "content": "<p>I agree that it is a burden to have to rewrite subset as le or the other way round. Is it possible to have subset be just notation for le?</p>",
        "id": 433111691,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713079312
    },
    {
        "content": "<p>Yes, Kyle and I have some work towards it</p>",
        "id": 433111741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713079328
    },
    {
        "content": "<p>but I won't have time to finish it before this summer</p>",
        "id": 433111761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713079346
    },
    {
        "content": "<p>Can't you delegate some things from the big plate you seem to have? Nobody's too young to suffer burn out, but still...</p>",
        "id": 433112201,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713079748
    },
    {
        "content": "<p>Go wild <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"point down\" class=\"emoji emoji-1f447\" role=\"img\" title=\"point down\">:point_down:</span><br>\n<span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/dm/306601,387244-dm/near/406968420\">said</a>:</p>\n<blockquote>\n<p>Here's an experiment with what we talked about in Bonn regarding Set using lattice operations but pretty printing using set notation: <a href=\"https://github.com/leanprover-community/mathlib4/tree/kmill_set_use_lattice\">https://github.com/leanprover-community/mathlib4/tree/kmill_set_use_lattice</a></p>\n</blockquote>",
        "id": 433112323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713079834
    }
]