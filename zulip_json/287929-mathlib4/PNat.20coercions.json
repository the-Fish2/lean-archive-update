[
    {
        "content": "<p>Can we have a <code>simp</code>lemma that does <code>((37 : ℕ+) : ℕ) = 37</code> for all positive values of <code>37</code>?<br>\n(For every concrete value, this is <code>rfl</code>, but I was not able to figure out how to write this for general <code>n</code>.)</p>",
        "id": 424522558,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709483394
    },
    {
        "content": "<p>This would be stated using OfNat.ofNat</p>",
        "id": 424523009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709483725
    },
    {
        "content": "<p>But how, precisely?</p>",
        "id": 424523035,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709483743
    },
    {
        "content": "<p>You should be able to find lots of similar lemma statements by searching for that</p>",
        "id": 424523046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709483753
    },
    {
        "content": "<p>Eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zpow_ofNat#doc\">docs#zpow_ofNat</a>, which is unreadable in the docs, but stated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- See note [no_index around OfNat.ofNat]</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">ofNat_zsmul</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zpow_ofNat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zpow_coe_nat</span> <span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 424523106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709483770
    },
    {
        "content": "<p>I was wondering why such a <code>simp</code> lemma does not exist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>",
        "id": 424523209,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709483856
    },
    {
        "content": "<p>So maybe the <code>no_index</code> is the secret sauce here.</p>",
        "id": 424523261,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709483881
    },
    {
        "content": "<p>Because no one wrote the lemma yet, I think</p>",
        "id": 424523314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709483890
    },
    {
        "content": "<p>OfNat didn't exist in Lean3, so mathlib is full of holes around it</p>",
        "id": 424523337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709483905
    },
    {
        "content": "<p>The next problem is that for general <code>n</code>, <code>(OfNat.ofNat n) : ℕ+</code> does not type-check. But this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">PNat.val_ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> : Can you add this <code>simp</code> lemma in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10683\">#10683</a> and use it in the proofs?</p>",
        "id": 424523537,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709484081
    },
    {
        "content": "<p>You should use <code>[n.AtLeastTwo]</code> or perhaps <code>[NeZero n]</code>, rather than <code>n.succ</code></p>",
        "id": 424523690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709484224
    },
    {
        "content": "<p><code>[n.AtLeastTwo]</code> does not help against \"failed to synthesize instance<br>\n  OfNat ℕ+ n\".</p>",
        "id": 424523777,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709484291
    },
    {
        "content": "<p>Same with <code>[NeZero n]</code>.</p>",
        "id": 424523803,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709484314
    },
    {
        "content": "<p>I guess this is because there cannot be a <code>NatCast</code> instance for <code>PNat</code>.</p>",
        "id": 424524075,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709484533
    },
    {
        "content": "<p>Indeed, the <code>OfNat</code> instance for <code>PNat</code> doesn't use <code>Nat.AtLeastTwo</code> like most other ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">instOfNatPNatHAddNatInstHAddInstAddNatOfNat</span>\n<span class=\"c1\">-- (n : ℕ) → OfNat ℕ+ (n + 1)</span>\n</code></pre></div>\n<p>Maybe it should be split into an instance for <code>n = 1</code> and an instance for <code>n.AtLeastTwo</code> for consistency</p>",
        "id": 424525688,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709485575
    },
    {
        "content": "<p>Ah, in that case the n.succ spelling is fine</p>",
        "id": 424531777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709490279
    },
    {
        "content": "<p>Thanks for the suggestion! I will do it tomorrow</p>",
        "id": 424535498,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709493009
    }
]