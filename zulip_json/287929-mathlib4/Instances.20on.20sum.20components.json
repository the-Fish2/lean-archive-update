[
    {
        "content": "<p>I want to define an auxiliary type as a sum. I can not have Lean realize that, since all components of the sum satisfy some instance, then all components of the sum satisfy this instance (yes, I wrote the same thing twice). Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Bezout</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">two_rings</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">two_rings</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">two_rings</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"c1\">-- works</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>In my case, it's a topological module structure. I can define all the instances by hand just like for <code>bar</code> above, but I wonder if I'm missing some construction to make this automatic for typeclass inference.</p>",
        "id": 429650890,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1711458412
    },
    {
        "content": "<p>I asked about this a long time ago <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218484619\">here</a></p>",
        "id": 429651190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711458510
    },
    {
        "content": "<p>It's funny, I need this also for multilinear maps (but in my use case the two types along <code>inl</code> and <code>inr</code> are not the same, so I can't really take a shortcut...)</p>",
        "id": 429651817,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1711458768
    },
    {
        "content": "<p>It seems like you want something like the <code>deriving</code> handler for instances on types with finitely many terms to apply <code>Pi.ring</code> etc</p>",
        "id": 429664072,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711462277
    },
    {
        "content": "<p>It's not a <code>Pi</code> instance, as I'm not asking to show that the global object has some typeclass. I'm only asking that each component should have some instance detected by typeclass inference, given the fact that each component has the instance to start with. It's completely tautological (or syntaxical?).</p>",
        "id": 429666960,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1711463147
    },
    {
        "content": "<p>Oh ok. You want the hypothesis of <code>Pi.ring</code></p>",
        "id": 429667332,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711463247
    },
    {
        "content": "<p>Still, it sounds like it could be a job for <code>deriving</code></p>",
        "id": 429703473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711473498
    },
    {
        "content": "<p>If we involve a metaprogram here, note that we probably also want to have instances for <code>Option.rec</code>, <code>Sigma.rec</code>, <code>Nat.rec</code>, <code>Weekday.rec</code>, ...</p>",
        "id": 429740798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711487519
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11780\">#11780</a> adds a bunch of instances along these lines; is it a coincidence that <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> wanted this too, or did this thread spin out of LFTCM 2024?</p>",
        "id": 430506140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711917889
    },
    {
        "content": "<p>I think it's a coincidence? Amelia asked me this question the day after Sebastian made his post and I pointed her to it.</p>",
        "id": 430517325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711928808
    },
    {
        "content": "<p>Yeah, just a coincidence. I don't really need <a href=\"https://github.com/leanprover-community/mathlib4/pull/11780\">#11780</a>  or <a href=\"https://github.com/leanprover-community/mathlib4/pull/11810\">#11810</a> for anything - I'm not sure if the other members of my LFTCM group are planning on PR'ing their work - just thought I might as well PR, but I can close them if we should be using a metaprogram instead (edit: although I've just seen you've reviewed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11780\">#11780</a>, Eric, thank you!)</p>",
        "id": 430520408,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1711931568
    }
]