[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/11331\">#11331</a>, we change </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mulAction</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">S₂</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f.2.const_smul</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_f</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_a</span> <span class=\"n\">_b</span> <span class=\"n\">_f</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">S₂</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f.2.const_smul</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mulAction</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">S₂</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_f</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_a</span> <span class=\"n\">_b</span> <span class=\"n\">_f</span> <span class=\"o\">:=</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>to prevent Lean from unfolding <code>smul</code> unless necessary in defeq checks. </p>\n<p>We get </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span> Benchmark                                             Metric         Change\n<span class=\"w\"> </span> ===========================================================================\n<span class=\"gi\">+ ~Mathlib.Analysis.Calculus.FDeriv.Mul                 instructions    -8.9%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.InnerProductSpace.Adjoint           instructions   -10.4%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.InnerProductSpace.Basic             instructions    -4.7%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear   instructions   -13.0%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.NormedSpace.Star.Multiplier         instructions    -5.9%</span>\n<span class=\"gi\">+ ~Mathlib.Geometry.Manifold.ContMDiff.NormedSpace      instructions   -12.6%</span>\n</code></pre></div>\n<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/bd301862-1544-462c-bcf1-eb3144dd9a91/to/03762835-377c-41f9-aa30-a6f1c935173c\">Here</a> is the benchmarking comparison in detail.</p>",
        "id": 426196924,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710271171
    },
    {
        "content": "<p>The cost is that elaboration can need some additional help but the fallout here is minor</p>",
        "id": 426197051,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710271212
    },
    {
        "content": "<p>This begs the question: What do people think of a convention where you explicitly declare instances of data carrying parents? Perhaps only the small ones?</p>",
        "id": 426197193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710271275
    },
    {
        "content": "<p>For a (not very good) example of where nothing really happens see <a href=\"https://github.com/leanprover-community/mathlib4/pull/11329\">#11329</a>. The <code>build lint</code> change is noise. </p>\n<p>It is not a very good example because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.mulHom#doc\">docs#DirectSum.mulHom</a> is not reducible despite being used in the <code>NonUnitalNonAssocSemiring</code> instance currently</p>",
        "id": 426201099,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710272943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exposed.20data/near/426197051\">said</a>:</p>\n<blockquote>\n<p>The cost is that elaboration can need some additional help but the fallout here is minor</p>\n</blockquote>\n<p>In particular, the difference is that in the old spelling, the <code>MulAction</code> instance could always be found by unification, but now there are presumably cases where it has to be found by TC search</p>",
        "id": 426205673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710274811
    },
    {
        "content": "<p>My expectation would have been that performance worsened as a result; perhaps it is worth waiting for the next lean release that is much more willing to use unification to find instance arguments?</p>",
        "id": 426205806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710274884
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11332\">#11332</a> another example with <code>Units</code></p>",
        "id": 426207760,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710275650
    },
    {
        "content": "<p>I am not sure if a reducible definition would behave the same</p>",
        "id": 426209125,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710276231
    }
]