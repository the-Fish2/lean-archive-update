[
    {
        "content": "<p>I was hoping to use <code>IsIdempotentElem f</code> to say <code>f âˆ˜ f = f</code>, but apparently there is no instance of <code>Mul (A â†’ A)</code> in mathlib. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsIdempotentElem</span>\n<span class=\"k\">#check</span> <span class=\"n\">IsIdempotentElem</span> <span class=\"n\">f</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">â†’</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Would there be a problem adding the following instance to mathlib? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">â†’</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">âŸ¨</span><span class=\"n\">Function.comp</span><span class=\"o\">âŸ©</span>\n</code></pre></div>\n<p>In my case I can also just use <code>f âˆ˜ f = f</code> instead but was wondering if there are reasons why adding such instance might not be a good idea?</p>",
        "id": 430567587,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1711963549
    },
    {
        "content": "<p>I suspect that if A has a <code>Mul</code> then <code>X -&gt; A</code> has a <code>Mul</code> defined pointwise, and so yes I should think that your suggestion might create problems.</p>",
        "id": 430568613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711964027
    },
    {
        "content": "<p>Thanks, that makes sense! Indeed, the instance you refer to is, I believe, <code>Pi.instMul</code>. In Lean 3 sometimes we used to provide multiple instances with different instance priorities -- not sure if we still do this in Lean 4, and even if that is the case, I am not sure if this case is worth the trouble? That's why I asked just to get a better sense of multiple instance issues.</p>",
        "id": 430569099,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1711964285
    },
    {
        "content": "<p>If you want multiplication as composition, you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End#doc\">docs#Function.End</a></p>",
        "id": 430569570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711964479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/No.20instance.20of.20.60Mul.60.20for.20the.20type.20of.20endofunctions/near/430569570\">said</a>:</p>\n<blockquote>\n<p>If you want multiplication as composition, you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End#doc\">docs#Function.End</a></p>\n</blockquote>\n<p>Thanks, that helps!</p>",
        "id": 430569833,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1711964569
    }
]