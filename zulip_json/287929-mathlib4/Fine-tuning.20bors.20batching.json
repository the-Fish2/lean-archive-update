[
    {
        "content": "<p>Batches like <a href=\"https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1584\">https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1584</a> seemed doomed to fail due to their large size. What do people think of setting <code>max_batch_size</code> to something like 16 to avoid huge useless runs?</p>",
        "id": 421259638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707836098
    },
    {
        "content": "<p>This is probably day-dreaming, but is it possible in any way to use the logs of a failed bors batch (or mergify batch, when that becomes a thing) in order to influence how it's going to be rebatched? Put another way: A human can reasonably quickly read a log file and tell Johan what he should take off the queue; Is it possible to replace both the human and Johan by a script?</p>",
        "id": 421261528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707836576
    },
    {
        "content": "<p>It's pretty easy to list which files a PR touches and also pretty easy to calculate the import graph on master, so a somewhat naive criterion for rebatching is something like \"Put all the PRs that don't touch anything upstream of the failing file in a batch. Split the other ones into two equal size batches.\". A more refined version could be looking at the distance along the import graph (either in terms of file, or using a more complicated metric like the number of declarations used) and make sure the \"didn't touch the file\" batch does not contain more than 1/3 of the batch's PRs.</p>",
        "id": 421262789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707836895
    },
    {
        "content": "<p>Because it's the trend, one could even think of training an AI to recognise what PR is causing the build error and single it out...</p>",
        "id": 421262969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707836949
    },
    {
        "content": "<p>Mergify doesn't support something like this, I don't think. I mean, at the current moment we seem to have enough CI capacity - are you finding yourself waiting a lot?</p>",
        "id": 421263599,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707837128
    },
    {
        "content": "<p>No, but <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and I were discussing how our CI setup is going to scale up. As we seem to be able to get Mergify to (slowly) work on features we need, it seems good to think through what our future needs will be.</p>",
        "id": 421263853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707837203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/345428-mathlib-reviewers/topic/Fine-tuning.20bors.20batching/near/421261528\">said</a>:</p>\n<blockquote>\n<p>Put another way: A human can reasonably quickly read a log file and tell Johan what he should take off the queue; Is it possible to replace both the human and Johan by a script?</p>\n</blockquote>\n<p>Johan, it seems you’ve been promoted(?) to non-human.</p>",
        "id": 421264170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707837290
    },
    {
        "content": "<p>There's another 25-PR batch running, let's see... Nope, it's failed</p>",
        "id": 421264648,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707837416
    },
    {
        "content": "<p>Which is to say, I agree</p>",
        "id": 421264928,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707837500
    },
    {
        "content": "<p>Where should we put this setting? In some file? Or via some web UI?</p>",
        "id": 421265176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707837584
    },
    {
        "content": "<p>Johan certainly provides super-human reviewing!</p>",
        "id": 421265180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707837586
    },
    {
        "content": "<p>I've not heard anything from mergify wrt making the merge behaviour as we desire - am I out of the loop here?</p>",
        "id": 421265183,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707837586
    },
    {
        "content": "<p>bors.toml, I'd assume</p>",
        "id": 421265209,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707837596
    },
    {
        "content": "<p>Here: <a href=\"#narrow/stream/113488-general/topic/bors.20going.20away.3F/near/412131903\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bors.20going.20away.3F/near/412131903</a></p>",
        "id": 421265337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707837622
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10499\">#10499</a></p>",
        "id": 421266518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707837959
    },
    {
        "content": "<p>Here is a short analysis of what happened:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>- Start: 2/13/2024, 13:28:55\n- End:   2/14/2024, 08:40:06\n- Duration: 19 hours 11 minutes\n- Total number of merged PRs: 87\n- Total batches: 26\n- Total canceled batches: 1 (size 13)\n- Total failed batches: 12\n- Total succeeded batches: 13\n- Average batch size: 10.3 = 268/26\n- Average successful batch size: 6.7 = 87/13\n- Average failed batch size: 14 = 168/12\n</code></pre></div>",
        "id": 421400087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707901711
    },
    {
        "content": "<p>Which means that under this kind of stress, bors is about 3.5x more efficient than a linear merging strategy.</p>",
        "id": 421400298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707901791
    },
    {
        "content": "<p>Probably would even have been a bit more efficient if we'd had the batch size limit in place earlier</p>",
        "id": 421401661,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707902243
    },
    {
        "content": "<p>I conjecture that a max batch size of 16 is still too big</p>",
        "id": 421401798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707902287
    },
    {
        "content": "<p>Distribution of failed batch sizes</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>#\n####\n#######\n########\n##########\n############\n##############\n################\n###################\n#########################\n##########################\n##########################\n</code></pre></div>",
        "id": 421404958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707903348
    },
    {
        "content": "<p>I would like to try a numerical argument for batch sizes. Let's simulate some options and see what looks best!</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">statistics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_batch</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">failure_mode</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Let's assume each PR in the batch has an independent chance of `prob_failure` to contain an error.</span>\n    <span class=\"n\">prob_failure</span> <span class=\"o\">=</span> <span class=\"n\">failure_mode</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">prob_failure</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">)]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">batch_succeeds</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">):</span>\n    <span class=\"c1\"># A batch succeeds if all PRs in this batch succeed.</span>\n    <span class=\"c1\"># We assume there are no inter-batch failures.</span>\n    <span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_on_failure</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">):</span>\n    <span class=\"c1\"># If a single PR fails, we drop it from the queue.</span>\n    <span class=\"c1\"># Otherwise we bisect the batch.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">batch</span><span class=\"p\">[:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">batch</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">:]]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">simulate</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">failure_mode</span><span class=\"p\">,</span> <span class=\"n\">attempts</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Return the number of merged PRs during a number of build attempts.</span>\n    <span class=\"c1\"># We'll assume each batch is filled up to `batch_size`,</span>\n    <span class=\"c1\"># and the way a batch may fail is controlled by `failure_mode`.</span>\n\n    <span class=\"n\">successes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">attempts</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n            <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">make_batch</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">failure_mode</span><span class=\"p\">)]</span>\n        <span class=\"c1\"># We'll operate the queue like a true queue, which seems to be Bors' model.</span>\n        <span class=\"n\">batch</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">queue</span>\n        <span class=\"k\">if</span> <span class=\"n\">batch_succeeds</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">):</span>\n            <span class=\"n\">successes</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">split_on_failure</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">successes</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">batch_size</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">prob_failure</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]:</span>\n            <span class=\"n\">outcomes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">prob_failure</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">prob_failure</span><span class=\"p\">,</span> <span class=\"n\">statistics</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">outcomes</span><span class=\"p\">),</span> <span class=\"n\">statistics</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">outcomes</span><span class=\"p\">),</span> <span class=\"n\">statistics</span><span class=\"o\">.</span><span class=\"n\">stdev</span><span class=\"p\">(</span><span class=\"n\">outcomes</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 421415134,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707906553
    },
    {
        "content": "<p>I'm using the following simulation:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">sim</span><span class=\"p\">[</span><span class=\"nv\">p_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">Mu</span><span class=\"p\">]</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">n_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"w\">  </span><span class=\"n\">successes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"w\">  </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"nv\">vals_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">   </span><span class=\"n\">With</span><span class=\"p\">[{</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">vals</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppendTo</span><span class=\"p\">[</span><span class=\"n\">successes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]],</span>\n<span class=\"w\">     </span><span class=\"n\">AppendTo</span><span class=\"p\">[</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]];</span>\n<span class=\"w\">     </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">With</span><span class=\"p\">[{</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Floor</span><span class=\"p\">[</span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]},</span><span class=\"w\"> </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">[[</span><span class=\"o\">;;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]]];</span>\n<span class=\"w\">       </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">[[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">;;</span><span class=\"p\">]]]]]]];</span>\n<span class=\"w\">  </span><span class=\"n\">Do</span><span class=\"p\">[</span><span class=\"n\">bisect</span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">RandomReal</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">RandomVariate</span><span class=\"p\">[</span><span class=\"n\">PoissonDistribution</span><span class=\"p\">[</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">Mu</span><span class=\"p\">]]]]],</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">];</span>\n<span class=\"w\">  </span><span class=\"n\">Mean</span><span class=\"w\"> </span><span class=\"o\">/@</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">successes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Join</span><span class=\"p\">[</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">successes</span><span class=\"p\">]}</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This assumes no batch limit, where the initial batch is poisson-distributed with mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span>, and the batch is bisected to find the errors (independent with probability <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>). For the given data I get something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Manipulate</span><span class=\"o\">[</span>\n <span class=\"n\">Show</span><span class=\"o\">[</span><span class=\"n\">ListPlot</span><span class=\"bp\">@</span>\n   <span class=\"n\">Transpose</span><span class=\"bp\">@</span>\n    <span class=\"n\">Table</span><span class=\"o\">[{</span><span class=\"bp\">\\</span><span class=\"o\">[</span><span class=\"n\">Mu</span><span class=\"o\">],</span> <span class=\"bp\">#</span><span class=\"o\">}</span> <span class=\"bp\">&amp;</span> <span class=\"bp\">/@</span> <span class=\"n\">sim</span><span class=\"o\">[</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">\\</span><span class=\"o\">[</span><span class=\"n\">Mu</span><span class=\"o\">],</span> <span class=\"mi\">30</span><span class=\"o\">],</span> <span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"o\">[</span><span class=\"n\">Mu</span><span class=\"o\">],</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">}],</span>\n  <span class=\"n\">Plot</span><span class=\"o\">[{</span><span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"o\">[</span><span class=\"n\">Mu</span><span class=\"o\">],</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">}]],</span> <span class=\"o\">{{</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">27</span><span class=\"o\">},</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">50</span><span class=\"o\">}]</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/QP9KEe9VbKyGGk2jyiScKRm7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QP9KEe9VbKyGGk2jyiScKRm7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QP9KEe9VbKyGGk2jyiScKRm7/image.png\"></a></div>",
        "id": 421415913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707906790
    },
    {
        "content": "<p>which is to say the predicted initial batch is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>=</mo><mn>80</mn></mrow><annotation encoding=\"application/x-tex\">\\mu=80</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">80</span></span></span></span> (with success probability <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>27</mn></mrow><annotation encoding=\"application/x-tex\">1-1/27</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/27</span></span></span></span>) which sounds a bit unrealistically high; I must be missing an aspect of the process</p>",
        "id": 421416208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707906886
    },
    {
        "content": "<p>Based on running my script: if each PR has an i.i.d. chance <code>p</code> of failing (and therefore causing any batch it's in to fail), then the batch sizes for optimal throughput, followed by everything within one std. dev. are approximately as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>0.00 - &gt;32 - 32\n0.01 - &gt;32 - 19-32\n0.02 - &gt;32 - 11-32\n0.05 - 14 - 5-32\n0.10 - 4 - 3-9\n0.20 - 2 - 2-2\n0.50 - 1 - 1-1\n</code></pre></div>",
        "id": 421416681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707907050
    },
    {
        "content": "<p>So if we assume more than one in 20 PRs fails, then our batch size is too big.</p>",
        "id": 421416979,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707907157
    },
    {
        "content": "<p>AFAICT your code is using the same simulation as mine except that you are assuming fixed batch size and I'm using poisson-distributed batch sizes</p>",
        "id": 421416999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707907163
    },
    {
        "content": "<p>you are also not tracking number of failed batches</p>",
        "id": 421417059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707907186
    },
    {
        "content": "<p>my original goal was to try to fit the simulation to find the parameters</p>",
        "id": 421417188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707907220
    },
    {
        "content": "<p>and then you can use that to test batch sizes</p>",
        "id": 421417221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707907229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421416999\">said</a>:</p>\n<blockquote>\n<p>AFAICT your code is using the same simulation as mine except that you are assuming fixed batch size and I'm using poisson-distributed batch sizes</p>\n</blockquote>\n<p>Yes, I think our model agrees. My question is maximum throughput during congested periods (how many merges is the upper limit we can survive), and I suppose yours is more similar to uncongested periods.</p>",
        "id": 421418134,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707907506
    },
    {
        "content": "<p>Is Poisson a reasonable assumption? I think our behaviour is somewhat more towards the tails and away from the middle, with periods of inactivity and of high activity.</p>",
        "id": 421418402,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707907604
    },
    {
        "content": "<p>the landing time of PRs is not particularly correlated, except that there are times of day and of the week for high activity</p>",
        "id": 421418690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707907689
    },
    {
        "content": "<p>Ooh, I incorporated another aspect and got some interesting behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">sim</span><span class=\"p\">[</span><span class=\"nv\">p_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">Mu</span><span class=\"p\">]</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">n_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"w\">  </span><span class=\"n\">successes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"w\">  </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"nv\">vals_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">With</span><span class=\"p\">[{</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">vals</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppendTo</span><span class=\"p\">[</span><span class=\"n\">successes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]],</span>\n<span class=\"w\">     </span><span class=\"n\">AppendTo</span><span class=\"p\">[</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]];</span>\n<span class=\"w\">     </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">With</span><span class=\"p\">[{</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Floor</span><span class=\"p\">[</span><span class=\"n\">Length</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]},</span><span class=\"w\"> </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">[[</span><span class=\"o\">;;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]]];</span>\n<span class=\"w\">       </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"n\">vals</span><span class=\"p\">[[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">;;</span><span class=\"p\">]]]]]]];</span>\n<span class=\"w\">  </span><span class=\"n\">Do</span><span class=\"p\">[</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">RandomReal</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">RandomVariate</span><span class=\"p\">[</span><span class=\"n\">PoissonDistribution</span><span class=\"p\">[</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">Mu</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"p\">]]];</span>\n<span class=\"w\">   </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"n\">bisect</span><span class=\"p\">[</span><span class=\"n\">batch</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">];</span>\n<span class=\"w\">  </span><span class=\"n\">Mean</span><span class=\"w\"> </span><span class=\"o\">/@</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">successes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Join</span><span class=\"p\">[</span><span class=\"n\">fails</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">successes</span><span class=\"p\">]}</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Here the mean for the distribution is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\mu t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8095em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">t</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> is the number of batches, on the reasoning that batches take time and the longer it takes to bisect the more PRs queue up in the next run. What I didn't expect is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is larger than a constant then the simulation diverges with exponentially growing batch sizes, because at a certain point the batch size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is much larger than the failure rate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> so we have to bisect <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">qn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">n</span></span></span></span> times to find all the failures in the batch, so if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mi>q</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\mu q&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> then the batches will grow as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>q</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(\\mu q)^kn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span></p>",
        "id": 421422038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707908873
    },
    {
        "content": "<p>I suppose at some level this is expected, this is what happens if the people outrun bors</p>",
        "id": 421422176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707908914
    },
    {
        "content": "<p>IIRC we had a situation like this with the benchmark bot, where the queue was plodding along a few months behind real time</p>",
        "id": 421422278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707908957
    },
    {
        "content": "<p>Given fixed probability <code>p</code>, we can actually work out a recursive formula for the cost of bisection:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"nv\">n_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">^</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">failcost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n<span class=\"n\">failcost</span><span class=\"p\">[</span><span class=\"nv\">n_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\"> </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">With</span><span class=\"p\">[{</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Floor</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]},</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">]]]</span>\n<span class=\"n\">maxcost</span><span class=\"p\">[</span><span class=\"nv\">n_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">m_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\"> </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">maxcost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"n\">If</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">Floor</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Floor</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]]]</span>\n</code></pre></div>\n<p>That is, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msup><mi>p</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><msub><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cost}_n(p)=1+(1-p^n)\\mathrm{failcost}_n(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">cost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">failcost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>m</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{failcost}_n(p)=\\mathrm{cost}_m(p)+\\mathrm{cost}_{n-m}(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">failcost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">cost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">cost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2583em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mo stretchy=\"false\">⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">m=\\lfloor n/2\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/2</span><span class=\"mclose\">⌋</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">t</mi></mrow><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cost}_n(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">cost</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> is a polynomial in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">p=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1+2n(1-p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 421441249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916144
    },
    {
        "content": "<p>Here's a plot of the relative benefit of a batch limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> compared to no limit, when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> items are in the queue, assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>27</mn></mrow><annotation encoding=\"application/x-tex\">p=1-1/27</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/27</span></span></span></span> and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>16</mn><mo separator=\"true\">,</mo><mn>27</mn><mo separator=\"true\">,</mo><mn>40</mn><mo separator=\"true\">,</mo><mn>54</mn></mrow><annotation encoding=\"application/x-tex\">m=16, 27, 40, 54</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">16</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">27</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">40</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">54</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">ListPlot</span><span class=\"p\">[</span>\n<span class=\"w\"> </span><span class=\"n\">Transpose</span><span class=\"p\">[</span>\n<span class=\"w\">  </span><span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">maxcost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">/.</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mf\">27.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"mi\">200</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"p\">}}]],</span><span class=\"w\"> </span><span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"p\">]</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/vSkndVr-meTUcNyi07jFHEu8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vSkndVr-meTUcNyi07jFHEu8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vSkndVr-meTUcNyi07jFHEu8/image.png\"></a></div><p>The bottom value is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>16</mn></mrow><annotation encoding=\"application/x-tex\">m=16</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">16</span></span></span></span>, which is clearly too low. Playing around with this shows that the benefit becomes strictly positive when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is more than twice the failure rate (the red line). Also shown are the intermediate values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>27</mn></mrow><annotation encoding=\"application/x-tex\">m=27</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">27</span></span></span></span> (yellow, the same as the failure rate), which gets off to a weak start, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>40</mn></mrow><annotation encoding=\"application/x-tex\">m=40</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">40</span></span></span></span> (in green), which seems to have the best long term behavior (for large <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, i.e. when there is a large backlog).</p>",
        "id": 421441268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916152
    },
    {
        "content": "<p>From experience, a failure probability of 1/27 sounds too low. Can we gather more bors data?</p>",
        "id": 421441557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916256
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> mathematicians using CI</p>",
        "id": 421441866,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707916362
    },
    {
        "content": "<p>This is the failure probability for individual PRs, not batches. The failure rate for batches is about 55% in these simulations (although it depends on the batching strategy of course)</p>",
        "id": 421442056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916426
    },
    {
        "content": "<p>... and then we should formalise the results.</p>",
        "id": 421442061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707916430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421442056\">said</a>:</p>\n<blockquote>\n<p>This is the failure probability for individual PRs, not batches. </p>\n</blockquote>\n<p>I meant that 1/27 sounds too low for the failure of an individual PR.</p>",
        "id": 421442305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916496
    },
    {
        "content": "<p>I don't think bors actually runs batches of size 1 which it thinks will fail by process of elimination, which might skew the data a little</p>",
        "id": 421442443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916537
    },
    {
        "content": "<p>It does seem to run the second batch of size m/2 even when the first batch of size m/2 has already hit master though.</p>",
        "id": 421442631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916590
    },
    {
        "content": "<p>yes, that's a necessary part of the bisection</p>",
        "id": 421442785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916650
    },
    {
        "content": "<p>Why? We know the second batch will fail, so why not split further into two batches of size m/4 ?</p>",
        "id": 421442948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916698
    },
    {
        "content": "<p>oh I see. That would require more state I guess, it would need to share information between siblings in the bisection tree</p>",
        "id": 421443451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916892
    },
    {
        "content": "<p>after the initial bisection you would mark the second batch as \"mark failing if the first batch succeeds\"</p>",
        "id": 421443585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916941
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 421443607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916952
    },
    {
        "content": "<p>my cost function doesn't take that into account either</p>",
        "id": 421443657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707916972
    },
    {
        "content": "<p>I suspect those \"doomed to fail\" batches account for quite a lot of CI time overall.</p>",
        "id": 421443682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707916981
    },
    {
        "content": "<p>Just a quick thought: are failure probabilities for a PR roughly constant or do we have some property (e.g. total diff etc) that is predictive for failure probabilities? This way, you could make the bisection split \"balanced\" in the sense that each split has about equal estimated probability of failing rather than equal number of PRs.</p>",
        "id": 421444216,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707917179
    },
    {
        "content": "<p>Currently, if you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, all but one of which are good (and mutually compatible) and one is bad, you will run one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{n - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> PRs, ..., two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> PR, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> batches. If you do my optimisation, you will run one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, ..., one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> PRs, two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> PR, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> batches. That's a 50% improvement!</p>",
        "id": 421444484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707917278
    },
    {
        "content": "<p>Here are raw throughput numbers where we ignore \"doomed to failure\" batches: <a href=\"/user_uploads/3121/k1wP8FvN1SLkk8xHLVE3Y7Vl/afbeelding.png\">afbeelding.png</a><br>\nHere where we drop single PRs that are \"doomed to failure\": <br>\n<a href=\"/user_uploads/3121/r3Yuy6AAHROSaL61QvIw4vnj/afbeelding.png\">afbeelding.png</a><br>\nAnd here where we bisect batches that are \"doomed to fail\" (singletons are dropped, like above): <br>\n<a href=\"/user_uploads/3121/s_i2KNzGKjisncDCYLUxfgGa/afbeelding.png\">afbeelding.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/k1wP8FvN1SLkk8xHLVE3Y7Vl/afbeelding.png\" title=\"afbeelding.png\"><img src=\"/user_uploads/3121/k1wP8FvN1SLkk8xHLVE3Y7Vl/afbeelding.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/r3Yuy6AAHROSaL61QvIw4vnj/afbeelding.png\" title=\"afbeelding.png\"><img src=\"/user_uploads/3121/r3Yuy6AAHROSaL61QvIw4vnj/afbeelding.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s_i2KNzGKjisncDCYLUxfgGa/afbeelding.png\" title=\"afbeelding.png\"><img src=\"/user_uploads/3121/s_i2KNzGKjisncDCYLUxfgGa/afbeelding.png\"></a></div>",
        "id": 421444784,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707917380
    },
    {
        "content": "<p>(Not entirely sure why the third table has lower throughput than the second one. It might be that I implemented the logic incorrectly...)</p>",
        "id": 421445169,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707917514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421444216\">said</a>:</p>\n<blockquote>\n<p>Just a quick thought: are failure probabilities for a PR roughly constant or do we have some property (e.g. total diff etc) that is predictive for failure probabilities? This way, you could make the bisection split \"balanced\" in the sense that each split has about equal estimated probability of failing rather than equal number of PRs.</p>\n</blockquote>\n<p>Here are my thoughts from the reviewer stream a few days ago:<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> said:</p>\n<blockquote>\n<p>This is probably day-dreaming, but is it possible in any way to use the logs of a failed bors batch (or mergify batch, when that becomes a thing) in order to influence how it's going to be rebatched? Put another way: A human can reasonably quickly read a log file and tell Johan what he should take off the queue; Is it possible to replace both the human and Johan by a script?<br>\nIt's pretty easy to list which files a PR touches and also pretty easy to calculate the import graph on master, so a somewhat naive criterion for rebatching is something like \"Put all the PRs that don't touch anything upstream of the failing file in a batch. Split the other ones into two equal size batches.\". A more refined version could be looking at the distance along the import graph (either in terms of file, or using a more complicated metric like the number of declarations used) and make sure the \"didn't touch the file\" batch does not contain more than 1/3 of the batch's PRs.<br>\nBecause it's the trend, one could even think of training an AI to recognise what PR is causing the build error and single it out...</p>\n</blockquote>",
        "id": 421445511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707917639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421442948\">said</a>:</p>\n<blockquote>\n<p>Why? We know the second batch will fail, so why not split further into two batches of size m/4 ?</p>\n</blockquote>\n<p>This is not <em>always</em> true. It can happen that a bad PR becomes good because a PR improved performance on master or whatever. But this is rare enough that I think it's fair to reject the bad-turned-good PR until the author merges master and checks everything is alright indeed.</p>",
        "id": 421445979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707917780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421445169\">said</a>:</p>\n<blockquote>\n<p>(Not entirely sure why the third table has lower throughput than the second one. It might be that I implemented the logic incorrectly...)</p>\n</blockquote>\n<p>I added logic to drop predicted-to-fail batches of size 1 outright. Now the raw numbers look like: <br>\n<a href=\"/user_uploads/3121/bykmKJnaV9ZWLDPIGWT6--df/afbeelding.png\">afbeelding.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bykmKJnaV9ZWLDPIGWT6--df/afbeelding.png\" title=\"afbeelding.png\"><img src=\"/user_uploads/3121/bykmKJnaV9ZWLDPIGWT6--df/afbeelding.png\"></a></div>",
        "id": 421446134,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707917834
    },
    {
        "content": "<p>Those numbers are very encouraging!</p>",
        "id": 421446326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707917887
    },
    {
        "content": "<p>One conclusion we might draw is if Bors is smart and drops batches that are predicted to fail, we _don't_ want a batch size of a power of two. Multiples of 3 like 12 or 24 seem to be slightly better!</p>",
        "id": 421447156,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707918152
    },
    {
        "content": "<p>Should we rename and/or merge the two active bors threads by the way? Maybe this can become \"Optimizing bors batch size\" and the other \"Bors failure investigation\".</p>",
        "id": 421447667,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707918325
    },
    {
        "content": "<p>Actually, could you move my \"Fine-tuning bors batching\" thread out of <a class=\"stream\" data-stream-id=\"345428\" href=\"/#narrow/stream/345428-mathlib-reviewers\">#mathlib reviewers</a> and then move the relevant messages from here to it?</p>",
        "id": 421447869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707918388
    },
    {
        "content": "<p>The formula only changes a little bit accounting for the \"doomed to fail\" optimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cost2</span><span class=\"o\">[</span><span class=\"n\">n_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">cost2</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">failcost2</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"n\">failcost2</span><span class=\"o\">[</span><span class=\"n\">n_</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n <span class=\"n\">If</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">With</span><span class=\"o\">[{</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Floor</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]},</span> <span class=\"n\">cost2</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">cost2</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>Which has an effect of increasing throughput by about 1/25, here it is compared to the batching optimizations:<br>\n<a href=\"/user_uploads/3121/AJ2meWVaaRk511QDzdBJB9aV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AJ2meWVaaRk511QDzdBJB9aV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AJ2meWVaaRk511QDzdBJB9aV/image.png\"></a></div>",
        "id": 421447932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707918409
    },
    {
        "content": "<p>and of course the batching optimizations still apply on top of this</p>",
        "id": 421447986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707918432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421447156\">said</a>:</p>\n<blockquote>\n<p>Multiples of 3 like 12 or 24 seem to be slightly better!</p>\n</blockquote>\n<p>Does that mean we should try trisecting? Try a batch of size m. It fails. Try a batch of size m/3. It works. Try a batch of size m/3. It works. Trisect the last m/3 batch.</p>",
        "id": 421448072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707918467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bors.20failing/near/421447869\">said</a>:</p>\n<blockquote>\n<p>Actually, could you move my \"Fine-tuning bors batching\" thread out of <a class=\"stream\" data-stream-id=\"345428\" href=\"/#narrow/stream/345428-mathlib-reviewers\">#mathlib reviewers</a> and then move the relevant messages from here to it?</p>\n</blockquote>\n<p>How about the \"Bors batch size\" thread in the reviewers stream?</p>",
        "id": 421448133,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707918483
    },
    {
        "content": "<p>You could merge it too, I guess. It might become a little confusing.</p>",
        "id": 421448318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707918533
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"345428\" href=\"/#narrow/stream/345428-mathlib-reviewers/topic/Fine-tuning.20bors.20batching\">#mathlib reviewers &gt; Fine-tuning bors batching</a> by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>.</p>",
        "id": 421448426,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707918573
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"345428\" href=\"/#narrow/stream/345428-mathlib-reviewers/topic/Bors.20batch.20size\">#mathlib reviewers &gt; Bors batch size</a> by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>.</p>",
        "id": 421448564,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707918607
    },
    {
        "content": "<p>52 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/bors.20failing\">#mathlib4 &gt; bors failing</a> by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>.</p>",
        "id": 421448656,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707918644
    },
    {
        "content": "<p>More plots. The question of where to bisect is the same as asking what is the minimum of the following function:<br>\n<a href=\"/user_uploads/3121/HV_9TJ8POvTw5rxWdhLYwIkU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HV_9TJ8POvTw5rxWdhLYwIkU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HV_9TJ8POvTw5rxWdhLYwIkU/image.png\"></a></div><p>Here it is for more values of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Mathematica\"><pre><span></span><code><span class=\"n\">ListPlot</span><span class=\"p\">[</span>\n<span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">[{</span><span class=\"n\">m</span><span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"n\">Evaluate</span><span class=\"p\">[(</span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">^</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">        </span><span class=\"n\">p</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/.</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mf\">27.</span><span class=\"p\">]},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"mi\">2000</span><span class=\"p\">}},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PlotRange</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">-1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}]</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/va05b4aUz8YdSXVDwBw1hwHp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/va05b4aUz8YdSXVDwBw1hwHp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/va05b4aUz8YdSXVDwBw1hwHp/image.png\"></a></div><p>There are two interesting features of this function compared to the usual. Normally this would be a symmetric function which bows in the middle, hence the minimum is in the middle so that's where you split. However here there is an overall tilt of the function down to the left because of the additional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">p^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> factor, meaning that we should prefer to split more leftish. Moreover, the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> gets a little boost because it saves on the cost of a bisection. As a result, for a significant range of values the minimum value is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, all the way up to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">m=30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">30</span></span></span></span>, and then it hangs somewhere around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n/3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/3</span></span></span></span> for a while, and then for very large <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> the bottom starts to turn into a fractal so I'm not so sure.</p>",
        "id": 421456140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707920911
    },
    {
        "content": "<p>And here's a plot of the relative advantages to throughput of applying the splitting strategy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n/3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/3</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>&lt;</mo><mn>30</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{if}(n&lt;30,1,n/3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">if</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">30</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/3</span><span class=\"mclose\">)</span></span></span></span> recursively, over the usual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/2</span></span></span></span>:<br>\n<a href=\"/user_uploads/3121/siTtkbFqNFVVCF95dQ7O2lFX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/siTtkbFqNFVVCF95dQ7O2lFX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/siTtkbFqNFVVCF95dQ7O2lFX/image.png\"></a></div>",
        "id": 421457100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707921174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fine-tuning.20bors.20batching/near/421444484\">said</a>:</p>\n<blockquote>\n<p>Currently, if you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, all but one of which are good (and mutually compatible) and one is bad, you will run one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{n - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> PRs, ..., two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> PR, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> batches. If you do my optimisation, you will run one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> PRs, ..., one batch with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> PRs, two batches with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> PR, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> batches. That's a 50% improvement!</p>\n</blockquote>\n<p>This analysis isn't quite correct. It's true if the failing PR is the last one in the list, but if it is the first one then you get no improvement. In general it's somewhere in between</p>",
        "id": 421473703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707925403
    },
    {
        "content": "<p>because the optimization only applies when the first half is good and the second half is bad</p>",
        "id": 421473921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707925460
    },
    {
        "content": "<p>Just pulled some bors data regarding 1-commit batches: there are 316 successes and 45 failures in the database right now, i.e. one in 7</p>",
        "id": 421477143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707926305
    },
    {
        "content": "<p>Isn't this biased by the fact that correct commits are more likely to be merged in bigger batches, while buggy commits will end up alone and will therefore be part of a 1-commit batch?</p>",
        "id": 421478149,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707926556
    },
    {
        "content": "<p>Can we not run the simulations with historical data? Maybe just try grab the past week and see what would happen</p>",
        "id": 421479181,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707926828
    },
    {
        "content": "<p>I'm wondering if we should take more advantage of priority, especially in common cases where we expect things to break when part of a batch. I'm betting that a small amount of thoughtful human interaction can drastically decrease the failure rate.</p>\n<p>I'm thinking of, for instance, PRs renaming very common lemmas (even with deprecation, bors will fail because Mathlib doesn't allow using deprecated lemmas), PRs deleting ‌/ renaming a file, etc.</p>",
        "id": 421479308,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707926859
    },
    {
        "content": "<p>I think one source of failures from yesterday was due to a file rename.</p>",
        "id": 421479659,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707926936
    },
    {
        "content": "<p>One of the issues I think I saw multiple times was PRs not being updated since the FunLike refactor. I wonder if we could have a warning or something for PRs that are very outdated</p>",
        "id": 421489131,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707929688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> at some point automatically commented on all open PRs pinging them to update...</p>",
        "id": 421490014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707929958
    },
    {
        "content": "<p>I think that's because he updated all the toolchains for them in order to avoid data loss from v4.x.x-rc3, whichever one it was.</p>",
        "id": 421490713,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707930160
    },
    {
        "content": "<p>Oh but I guess your point is more that such a pinging of all PRs is possible.</p>",
        "id": 421490779,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707930178
    },
    {
        "content": "<p>Yeah, that could have helped with this case, though my point was more that old branches are more prone to failing in general</p>",
        "id": 421496524,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707931840
    },
    {
        "content": "<p>Do we have data about probability of a PR failing plotted according to its age (as measured by the latest master merge)?</p>",
        "id": 421497263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707932105
    },
    {
        "content": "<p>I really think we just need to find some number that seems sensible and stick with it. Fiddling with very specific numbers is not going to fix all issues. One thing that mergify does which could be helpful is that it can do batches speculatively, i.e. in parallel. I think that's much more likely to give us a boost than trying to dig deeper and deeper into this</p>",
        "id": 421506910,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707935381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fine-tuning.20bors.20batching/near/421479308\">said</a>:</p>\n<blockquote>\n<p>I'm wondering if we should take more advantage of priority, especially in common cases where we expect things to break when part of a batch.</p>\n</blockquote>\n<p>There is the <code>bors single on</code> command, which says \"don't put this PR in a batch, compile it on its own\". I recommend using this for PRs that have lots of merge conflicts</p>",
        "id": 421523933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707941328
    },
    {
        "content": "<p>Can a bot find the most recent common ancestor of a PR branch and master, and then use the age of that commit to add a label?</p>",
        "id": 421532914,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707944834
    }
]