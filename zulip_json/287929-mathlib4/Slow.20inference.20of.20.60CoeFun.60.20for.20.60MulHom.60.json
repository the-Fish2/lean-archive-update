[
    {
        "content": "<p>I'm noticing a significant slowdown in my proofs, caused by each <code>MulAction.conj g</code> written taking 200ms to elaborate, as lean struggles to find the <code>CoeFun</code> instance for <code>MulAction.conj</code>. As an example, the following theorem takes 2s on my machine to elab, but only 0.1s when adding a local instance as hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Aut</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.SMul</span>\n<span class=\"c1\">-- Seems to import enough things to cause a slowdown:</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Exponent</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Uncomment the following to get a 20x speedup:</span>\n<span class=\"c1\">-- private instance {α β : Type*} [Monoid α] [Monoid β]: CoeFun (α →* β) fun _ =&gt; α → β := inferInstance</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">slow</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:=</span> <span class=\"n\">MulAut.conj</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Should this instance hint be added to <code>MulHom</code>?</p>",
        "id": 418418987,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706363397
    },
    {
        "content": "<p>I think this is what  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> aims to fix</p>",
        "id": 418420233,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706364465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380890\">@Emilie (Shad Amethyst)</span> you could check to see if <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> does fix your problem, and if it does then add a note on the PR saying \"hey this PR fixed my problem\".</p>",
        "id": 418486672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706433538
    },
    {
        "content": "<p>I'll do that then, yeah; that PR also solves another issue that I have, which is that it's hard to compose together function classes like <code>InfHomClass</code> and <code>MulActionHom</code> — the usual way is to content oneself by choosing one bundled form</p>",
        "id": 418490525,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706437555
    }
]