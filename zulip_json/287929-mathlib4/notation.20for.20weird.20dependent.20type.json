[
    {
        "content": "<p>I'm having trouble figuring out the correct way to write this dependent type - I'm trying to prove an equivalence between the set of submodules that don't contain <code>Submodule.map (LinearMap.inr K V W) ⊤</code> as a submodule, and the set of products of submodules with linear maps that behave the way I want them to when taken for the given submodule. Here's my attempt, I don't know how to make it typecheck. Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.LinearMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Map</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Prod</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subspacesBijection2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X.1</span><span class=\"o\">,</span> <span class=\"n\">X.2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438007742,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1715357366
    },
    {
        "content": "<p>Is it possible you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subspacesBijection2</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">//</span>\n      <span class=\"bp\">¬</span> <span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">//</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">∈</span> <span class=\"n\">X.1.1</span> <span class=\"bp\">→</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">∉</span> <span class=\"n\">X.1.1</span> <span class=\"bp\">→</span> <span class=\"n\">X.2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)}</span> <span class=\"n\">where</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438019330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715361931
    },
    {
        "content": "<p>Though that doesn't make much sense, because <code>x.2 = 0</code> forces <code>W</code> to be trivial</p>",
        "id": 438019737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715362089
    },
    {
        "content": "<p>Are you confusing <code>Submodule K V × W</code> with <code>Submodule K (V × W)</code></p>",
        "id": 438019869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715362144
    },
    {
        "content": "<p>If you make that change, your version works as written (though you should parenthesize the foralls)</p>",
        "id": 438019998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715362202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/notation.20for.20weird.20dependent.20type/near/438019869\">said</a>:</p>\n<blockquote>\n<p>Are you confusing <code>Submodule K V × W</code> with <code>Submodule K (V × W)</code></p>\n</blockquote>\n<p>This was part of it.</p>",
        "id": 438020785,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1715362479
    },
    {
        "content": "<p>What I'm trying to do with the second condition comes from<br>\n<a href=\"/user_uploads/3121/ZC3hoQIgPsM_aBYCWzZkBKRL/Screenshot-2024-05-10-at-1.35.19PM.png\">Screenshot-2024-05-10-at-1.35.19PM.png</a><br>\nwhere I'm trying to keep track of the linear function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><msup><mi>V</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>→</mo><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\phi : V&#x27; \\rightarrow E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. I thought having a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo>×</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(V \\times W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> made the most sense type theoretically, and then tried restricting it by requiring that the linear map takes everything outside the submodule to 0.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZC3hoQIgPsM_aBYCWzZkBKRL/Screenshot-2024-05-10-at-1.35.19PM.png\" title=\"Screenshot-2024-05-10-at-1.35.19PM.png\"><img src=\"/user_uploads/3121/ZC3hoQIgPsM_aBYCWzZkBKRL/Screenshot-2024-05-10-at-1.35.19PM.png\"></a></div>",
        "id": 438021249,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1715362658
    }
]