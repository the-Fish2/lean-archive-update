[
    {
        "content": "<p>Is the free walking arrow category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn mathvariant=\"double-struck\">2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>  defined somewhere in mathlib? It is a very useful thing to have around.</p>",
        "id": 432565917,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1712775053
    },
    {
        "content": "<p>We don't have a special definition for it, but <code>Fin 2</code> (which has a category instance because it is a preorder) should do the job.</p>",
        "id": 432570143,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1712776711
    },
    {
        "content": "<p>Good suggestion! So far, I've been using <code>WithTerminal Unit</code> which is not too bad, but I think <code>Fin 2</code> is better.</p>",
        "id": 432570469,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1712776843
    },
    {
        "content": "<p>I guess one advantage of <code>WithTerminal Unit</code> is that it is already in mathlib that the inclusion of <code>Unit</code> to <code>WithTerminal Unit</code> is full and faithful -- something I need -- whereas for <code>Fin 1</code> to <code>Fin 2</code> one has to prove it anew?</p>",
        "id": 432570835,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1712776990
    },
    {
        "content": "<p>There should be a fully faithful functor associated to an ordered embedding.</p>",
        "id": 432573460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712778099
    },
    {
        "content": "<p>Yes, but mainly because mathlib is missing the two necessary instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Quiver.IsThin</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">â¥¤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Faithful</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">â†ª</span><span class=\"n\">o</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Full</span> <span class=\"o\">(</span><span class=\"n\">f.monotone.functor</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">preimage</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">homOfLE</span> <span class=\"o\">(</span><span class=\"n\">f.map_rel_iff.1</span> <span class=\"n\">h.le</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Full</span> <span class=\"o\">(</span><span class=\"n\">Fin.succEmb</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone.functor</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Faithful</span> <span class=\"o\">(</span><span class=\"n\">Fin.succEmb</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone.functor</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 432573474,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1712778103
    }
]