[
    {
        "content": "<p>Hi all,</p>\n<p>With <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> and follow-up PRs, batteries will acquire acquire an extensive Vector API. This means Mathlib's Vector will need to be either renamed or namespaced. I want to ask what your preferred solution would be. Once a decision is reached, I will start a Mathlib PR.</p>",
        "id": 440576738,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716584352
    },
    {
        "content": "<p>Another answer is to delete all the definitions with clashing names, and deprecate everything else.</p>",
        "id": 440578131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716585072
    },
    {
        "content": "<p><code>List.Vector</code> might be an ok name if we decide to keep it as is</p>",
        "id": 440578141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716585083
    },
    {
        "content": "<p>My preference is to delete as much as possible, and deprecate everything else.</p>",
        "id": 440581663,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716587208
    },
    {
        "content": "<p>What are you imagining as being in the set of things that are kept but deprecated, in the scenario where we delete as much as possible?</p>",
        "id": 440585699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716589683
    },
    {
        "content": "<p>I don't really think that Batteries.Vector is a replacement for basically any of the uses of Mathlib.Vector (to the extent it has uses at all). It's used for proving purposes, I don't know any use of it in a programming context</p>",
        "id": 440588550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716591689
    },
    {
        "content": "<p>So I'm skeptical that deprecation is the right move</p>",
        "id": 440588633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716591743
    },
    {
        "content": "<p>What would you recommend we do with the Mathlib material?</p>\n<p>I'm not thrilled with just leaving it as is in the root namespace.</p>",
        "id": 440596781,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716599855
    },
    {
        "content": "<p>namespace it in <code>Mathlib</code> or <code>List</code>, slight preference for the latter</p>",
        "id": 440633278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716640518
    },
    {
        "content": "<p>Doesn't namespacing things mean we need to deprecate the old un-namespaced names (where we can)?</p>",
        "id": 440640458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716647312
    },
    {
        "content": "<p>The compatibility-conscious thing to do here would be to:</p>\n<ul>\n<li>Add a namespace to everything, and deprecate the un-namespaced names now</li>\n<li>wait N days</li>\n<li>remove the deprecations and accept the Batteries change</li>\n</ul>",
        "id": 440640578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716647449
    },
    {
        "content": "<p>Or:</p>\n<ul>\n<li>Call the batteries change <code>Std.Vector</code> or <code>Array.Vector</code>, merge it soon</li>\n<li>Do a slow deprecation / rename shuffle over a longer period</li>\n</ul>",
        "id": 440640716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716647586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440588550\">said</a>:</p>\n<blockquote>\n<p>I don't really think that Batteries.Vector is a replacement for basically any of the uses of Mathlib.Vector (to the extent it has uses at all). It's used for proving purposes, I don't know any use of it in a programming context</p>\n</blockquote>\n<p>Is there anything about the Array-based version being introduced in Batteries that would make it unsuitable for proving?</p>",
        "id": 440645747,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1716652199
    },
    {
        "content": "<p>no, but if you didn't need Array to begin with it's an unnecessary indirection</p>",
        "id": 440647344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716653599
    },
    {
        "content": "<p>If I'm doing some abstract CS and am using lists in a nested inductive or similar and use List.Vector for packing up that data when the length of the list is relevant (e.g. well scoped terms in a context), I don't think Array.Vector would be a welcome replacement</p>",
        "id": 440647493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716653742
    },
    {
        "content": "<p>I am not sure it is wise to call the namespace List or Array</p>",
        "id": 440647923,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654137
    },
    {
        "content": "<p>Firstly, it might contain identically named List functions</p>",
        "id": 440647949,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654161
    },
    {
        "content": "<p>And secondly I have to open List.Vector or Array.Vector on top of List or Array to get things running</p>",
        "id": 440647989,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654195
    },
    {
        "content": "<p>The reason for namespacing is that both Batteries and Mathlib will soon have a vector and name spacing them avoids name conflicts</p>",
        "id": 440648057,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654242
    },
    {
        "content": "<p>Eric: the issue with the second solution is that as long as mathlib.vector remains in the root namespace, opening the Batteries namespace will lead to ambiguity</p>",
        "id": 440648157,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654334
    },
    {
        "content": "<p>I might want to use parts of mathlib with Vector</p>",
        "id": 440648219,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654365
    },
    {
        "content": "<blockquote>\n<p>And secondly I have to open List.Vector or Array.Vector on top of List or Array to get things running</p>\n</blockquote>\n<p>I don't know what you mean by this. You only need to <code>open List</code> to be able to use <code>List.Vector</code> as <code>Vector</code></p>",
        "id": 440648222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716654371
    },
    {
        "content": "<p>There is a Vector namespace for Vector functions</p>",
        "id": 440648235,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654395
    },
    {
        "content": "<p>Similar to Array</p>",
        "id": 440648250,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654408
    },
    {
        "content": "<p>If there is <code>List.Vector.append</code> then you can use dot notation and not open anything, or <code>open List</code> and use <code>Vector.append</code>; you probably don't want to <code>open List.Vector</code> anyway but if you did you would be able to use just <code>append</code> (except not really since it's almost certainly protected anyway)</p>",
        "id": 440648313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716654473
    },
    {
        "content": "<p>I don't have a strong opinion on the namespace names. My reasoning is that the namespaces are a reflection of two identically named entities in different libraries. So the library name should be used for namespaces. There is already the Std namespace in core for example.</p>",
        "id": 440648582,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654725
    },
    {
        "content": "<p>I do think both Vectors ought to be namespaced</p>",
        "id": 440648598,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654742
    },
    {
        "content": "<p>Apart from giving us the choice of which Vector to keep hidden, it also meets the FROs desire to not have a _root_.Vector</p>",
        "id": 440648653,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654822
    },
    {
        "content": "<p>Of course the best systemwide long term solution to this is a system of qualified imports with a <code>hiding</code> keyword to remove specific names like Haskell.</p>",
        "id": 440648730,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716654882
    },
    {
        "content": "<p>These are different structures, the name clash is historical happenstance</p>",
        "id": 440648840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716654992
    },
    {
        "content": "<p>Namespacing is definitely going to happen, the question is only to what name and how to perform the rename/deprecation</p>",
        "id": 440648873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716655056
    },
    {
        "content": "<p>On second thoughts, I like your namespace name choice, because Mathlib.Vector belongs in batteries</p>",
        "id": 440649030,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716655180
    },
    {
        "content": "<p>I suggest going ahead with my plan from yesterday where both Vectors get thrown into a different namespace and the PRs get merged</p>",
        "id": 440649110,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716655255
    },
    {
        "content": "<p>This buys us time to think about any renaming/deprecation stuff later</p>",
        "id": 440649126,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716655281
    },
    {
        "content": "<p>We can't throw the mathlib <code>Vector</code> into a namespace without thinking about deprecations at the same time</p>",
        "id": 440649150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716655309
    },
    {
        "content": "<p>Why?</p>",
        "id": 440649227,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716655326
    },
    {
        "content": "<p>the point of deprecation is to ensure some continuity for people using the original name</p>",
        "id": 440649236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716655350
    },
    {
        "content": "<p>Oh right</p>",
        "id": 440649250,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716655368
    },
    {
        "content": "<p>However, you <em>can</em> put the batteries one in a namespace immediately (because it isn't in main yet)</p>",
        "id": 440649268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716655373
    },
    {
        "content": "<p>Yes please, it's essential the new one is namespaced as <code>Batteries.Vector</code>.</p>",
        "id": 440690413,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716704623
    },
    {
        "content": "<p>Okay, batteries.vector it shall be</p>",
        "id": 440694175,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716708996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440690413\">said</a>:</p>\n<blockquote>\n<p>Yes please, it's essential the new one is namespaced as <code>Batteries.Vector</code>.</p>\n</blockquote>\n<p>Is this strongly preferable to <code>Array.Vector</code> from the FRO's perspective?</p>",
        "id": 440696023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716711058
    },
    {
        "content": "<p>The upside of that spelling is that names don't have to change downstream if this is upstreamed to core/Std</p>",
        "id": 440696057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716711105
    },
    {
        "content": "<p>Yes, Batteries.Vector is our preference.</p>",
        "id": 440698619,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716713999
    },
    {
        "content": "<p>Done</p>",
        "id": 440700209,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716715802
    },
    {
        "content": "<p>What's the preference for the mathlib version of Vector?</p>",
        "id": 440706189,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716722291
    },
    {
        "content": "<p>@Mario: about this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440647493\">said</a>:</p>\n<blockquote>\n<p>If I'm doing some abstract CS and am using lists in a nested inductive or similar and use List.Vector for packing up that data when the length of the list is relevant (e.g. well scoped terms in a context), I don't think Array.Vector would be a welcome replacement</p>\n</blockquote>\n<p>For proof purposes, the Array implementation contains a list. The mathlib vector's list based lemma  interface could simply rely on this. It is how I  initially started that batteries PR, so I am quite sure the adaptation works.</p>",
        "id": 440706471,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716722594
    },
    {
        "content": "<p>Can we not simply delete it? (after deprecation if you insist)</p>",
        "id": 440706482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716722608
    },
    {
        "content": "<p>My understanding is Mario doesn't want to deprecate anything</p>",
        "id": 440706697,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716722807
    },
    {
        "content": "<p>A list based vector has some potential uses, but I don't see why there need to be two different defs. For proof purposes Arrays have a field called data of type List</p>",
        "id": 440706894,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716723015
    },
    {
        "content": "<p>That being said, we can think about this separately form that batteries PR now that there are no conflicts.</p>",
        "id": 440706980,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716723065
    },
    {
        "content": "<p>Can we at least get rid of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector3#doc\">docs#Vector3</a> ?</p>",
        "id": 440707641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716723789
    },
    {
        "content": "<p>That's probably a separate topic. I would still like Mathlib's vector to go into a namespace as well, because importing various bits and pieces of Mathlib automatically brings in Vectors, which means I can't open the Batteries namespace without getting into trouble.</p>",
        "id": 440709939,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716726273
    },
    {
        "content": "<p><del>It is not convenient to have long names because of the <code>Batteries.</code> prefix</del> : Fixed this</p>",
        "id": 440710118,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716726480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440706697\">said</a>:</p>\n<blockquote>\n<p>My understanding is Mario doesn't want to deprecate anything</p>\n</blockquote>\n<p>Deprecation implies that there is some equivalent replacement, and Batteries.Vector is not a replacement for Mathlib's Vector. If Mathlib namespaces Vector (and see no one saying it shouldn't), then the deprecation is regarding moving to mathlib's new name, not to Batteries.Vector.</p>",
        "id": 440718354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716735008
    },
    {
        "content": "<p>Code using mathlib's vector may or may not want to switch to using Batteries.Vector, but that's not a migration path, that's a similar level of complexity as replacing List with Array in a function (which is to say, actually quite complicated because you need to use different functions now if you don't want to write terrible code)</p>",
        "id": 440718434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716735118
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  There is a reason not to deprecate Vector though during the mathlib move and just move it without a deprecation alias, which is that even a deprecated alias will cause interference with using <code>Vector</code> while <code>Batteries</code> is open.</p>",
        "id": 440718629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716735271
    },
    {
        "content": "<p>So there is no easy migration path</p>",
        "id": 440723256,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716739794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440718629\">said</a>:</p>\n<blockquote>\n<p>cc: <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>  There is a reason not to deprecate Vector though during the mathlib move and just move it without a deprecation alias, which is that even a deprecated alias will cause interference with using <code>Vector</code> while <code>Batteries</code> is open.</p>\n</blockquote>\n<p>I think there's a missing feature here of a global <code>open _root_ hiding Vector</code> that does what you'd expect</p>",
        "id": 440726586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716743123
    },
    {
        "content": "<p>You can rename it to something else which is effectively hiding it</p>",
        "id": 440727549,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716744182
    },
    {
        "content": "<p>I don't know if it works for _root_ though</p>",
        "id": 440727568,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716744220
    },
    {
        "content": "<p>Because technically _root_ is already open</p>",
        "id": 440727917,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716744605
    },
    {
        "content": "<p>I got to a machine and tried this out. Apparently <code>_root_</code> is not something I can access with <code>open</code>. Maybe the default namespace needs to have an accessible name? I get \"unknown namespace <code>_root_</code>\" as an error though of course I can use <code>_root_</code> to access everything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Vector</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"w\"> </span><span class=\"kn\">renaming</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Vec</span><span class=\"w\"> </span><span class=\"c1\">--error</span>\n</code></pre></div>",
        "id": 440849346,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716814596
    },
    {
        "content": "<p>Have we reached a conclusion on how to namespace Mathlib's vector and give users a safe migration path?</p>",
        "id": 441454825,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717075011
    },
    {
        "content": "<p>I already namespaced the batteries version</p>",
        "id": 441454958,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717075054
    },
    {
        "content": "<p>I would suggest moving Vector to Mathlib.Vector, and add deprecation aliases. We can, if necessary, do an unusually short deprecation cycle.</p>",
        "id": 441624785,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717136199
    },
    {
        "content": "<p>To make sure I understand, you would like me to :</p>\n<ol>\n<li>Keep <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> as it is.</li>\n<li>Create a new mathlib PR with its contents inside the Batteries namespace</li>\n<li>Move Mathlib Vector into Mathlib namespace.</li>\n<li>Create deprecation aliases from root namespace to the Mathlib namespaced List Vector</li>\n<li>Get the Mathlib PR accepted.</li>\n<li>Then at the end of a short deprecation cycle, add another PR to Mathlib which points the alias to batteries.vector and make this new PR dependent on batteries <a href=\"https://github.com/leanprover-community/mathlib4/pull/793\">#793</a>. </li>\n<li>Merge the second mathlib PR and <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> together.</li>\n</ol>",
        "id": 441640458,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717141530
    },
    {
        "content": "<p>I think step2 in this is not necessary</p>",
        "id": 441641086,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717141725
    },
    {
        "content": "<ol>\n<li>\n<p>We can simply namespace Mathlib Vector and add deprecation aliases at the root namespace in a mathlib PR.</p>\n</li>\n<li>\n<p>We can independently merge <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> because it is behind a namespace.</p>\n</li>\n<li>\n<p>We eventually remove the deprecation aliases in mathlib vector and free up the root namespace</p>\n</li>\n</ol>",
        "id": 441641496,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717141851
    },
    {
        "content": "<p>That way, we keep both vectors as Mario wants</p>",
        "id": 441641680,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717141913
    },
    {
        "content": "<p>And there are fewer interdependent steps</p>",
        "id": 441641767,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717141929
    },
    {
        "content": "<p>I don't understand step2, so I guess I agree it is not necessary.</p>",
        "id": 441642740,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717142198
    },
    {
        "content": "<p>I think steps 3.4.5 are good and should be done before anything else.</p>",
        "id": 441642856,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717142235
    },
    {
        "content": "<p>I either don't understand 6, or if I do, don't think it should be done. Just leave the <code>_root_.Vector</code> aliases forwarding to <code>Mathlib.Vector</code>.</p>",
        "id": 441642935,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717142265
    },
    {
        "content": "<p>Steps 6 and 7 are also not necessary</p>",
        "id": 441643042,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717142288
    },
    {
        "content": "<p>I initially thought you wanted me to move my existing Batteries PR to mathlib, but now I see that the you are suggesting my second series of steps.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/441641496\">said</a>:</p>\n<blockquote>\n<ol>\n<li>\n<p>We can simply namespace Mathlib Vector and add deprecation aliases at the root namespace in a mathlib PR.</p>\n</li>\n<li>\n<p>We can independently merge <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> because it is behind a namespace.</p>\n</li>\n<li>\n<p>We eventually remove the deprecation aliases in mathlib vector and free up the root namespace</p>\n</li>\n</ol>\n</blockquote>",
        "id": 441643236,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717142350
    },
    {
        "content": "<p>What is necessary before <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> can be merged is a that there exists a <code>batteries-pr-testing-793</code> branch on Mathlib demonstrating that we can update Mathlib to use the branch, so there is no delay after <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> is merged before Mathlib can bump to the new batteries <code>main</code>. That branch should have an open PR attached to it, and that needs approval from a Mathlib maintainer.</p>",
        "id": 441643593,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717142443
    },
    {
        "content": "<p>Okay. I assume this is done by adding the last commit ID of the batteries PR to the mathlib lakefile and manifest?</p>",
        "id": 441644078,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717142586
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13407\">#13407</a>:  for namespacing Vector and adding deprecation aliases</p>",
        "id": 441653416,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717145661
    },
    {
        "content": "<p>Thanks! Remember to tag it awaiting-review when it's ready.</p>",
        "id": 441654957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717146146
    },
    {
        "content": "<p>One question:</p>\n<ol>\n<li>Is there a label that stops CI runs when I am pushing commits that I know won't build. It seems wasteful to run CI for such commits.</li>\n</ol>\n<p>One observation:</p>\n<ol>\n<li>The tedious part of this PR is going over all <code>#align</code> because even when they are inside a namespace <code>#align</code> seems to require fully qualified names. This could come up when more parts of Mathlib get namespaced.</li>\n</ol>",
        "id": 441655122,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717146198
    },
    {
        "content": "<p>Don't worry about CI resources; for now there are plenty, and when you push it automatically cancels any running builds on the same branch.</p>",
        "id": 441671975,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717151273
    },
    {
        "content": "<p>Questions about adding <code>deprecated</code> annotations:</p>\n<ol>\n<li>Is there a way to add a string letting users know that <code>Vector</code> will now be available in namespace <code>Mathlib</code>.</li>\n<li>Should every lemma, theorem, and def receive a deprecated alias in the entire Vector folder?</li>\n</ol>",
        "id": 441724825,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717166611
    },
    {
        "content": "<p>Although the CI is currently still building my last commit, I am certain that at least the <code>build</code> part of CI will pass on this commit. This leaves maybe lint issues and the addition of <code>deprecated</code> tags.</p>",
        "id": 441725274,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717166734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/441643593\">said</a>:</p>\n<blockquote>\n<p>What is necessary before <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> can be merged is a that there exists a <code>batteries-pr-testing-793</code> branch on Mathlib demonstrating that we can update Mathlib to use the branch, so there is no delay after <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> is merged before Mathlib can bump to the new batteries <code>main</code>. That branch should have an open PR attached to it, and that needs approval from a Mathlib maintainer.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, I think it might make more sense to do this first, rather than worrying about deprecations first</p>",
        "id": 441727177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717167269
    },
    {
        "content": "<p>On it. But these are independent</p>",
        "id": 441727225,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717167285
    },
    {
        "content": "<p>When I do <code>lake update batteries</code> after changing the revisions,  I get <code>error: external command 'git' exited with code 128</code></p>",
        "id": 441728674,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717167646
    },
    {
        "content": "<p>Fixed it.</p>",
        "id": 441731293,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717168270
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13415\">#13415</a></p>",
        "id": 441731771,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717168388
    },
    {
        "content": "<h3>Update</h3>\n<ol>\n<li>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13407\">#13407</a> namespaces Vector in mathlib. CI passes <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> . deprecations yet to be added. See my earlier questions.</li>\n<li>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13415\">#13415</a> tests Mathlib on top of <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> and passes CI <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n</ol>",
        "id": 441746706,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717172035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/441724825\">said</a>:</p>\n<blockquote>\n<p>Questions about adding <code>deprecated</code> annotations:</p>\n<ol>\n<li>Is there a way to add a string letting users know that <code>Vector</code> will now be available in namespace <code>Mathlib</code>.</li>\n<li>Should every lemma, theorem, and def receive a deprecated alias in the entire Vector folder?</li>\n</ol>\n</blockquote>\n<ol>\n<li>No. 2. I think it's actually fine to just deprecate the type. You can't use any of the results without hitting the warning about the type itself.</li>\n</ol>",
        "id": 441799919,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717187536
    },
    {
        "content": "<p>Use @[deprecated Mathlib.Vector]. This tells the user what to replace it with.</p>",
        "id": 441800073,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717187595
    },
    {
        "content": "<p>Maybe deprecate the type with <code>@[deprecated Mathlib.Vector \"Vector is now Mathlib.Vector. Use `open Mathlib (Vector)` to fix your old code\"]</code> or something</p>",
        "id": 441800366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187686
    },
    {
        "content": "<p>Not deprecating all the lemmas means that there's no code action for the replacement, but if we tell the user to use <code>open Mathlib (Vector)</code> then we don't need a code action anyway</p>",
        "id": 441800492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187733
    },
    {
        "content": "<p>Oh, apparently I am wrong about 1.</p>",
        "id": 441800513,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717187739
    },
    {
        "content": "<p>I apparently cannot read and did not see that 1 was being asked</p>",
        "id": 441800567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187759
    },
    {
        "content": "<p>I think there's a quirk here where the code action doesn't work if you use the string argument</p>",
        "id": 441800644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187774
    },
    {
        "content": "<p>But that's probably just a bug that can be fixed separately</p>",
        "id": 441800674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187784
    },
    {
        "content": "<p>Maybe I'm imagining the code action...</p>",
        "id": 441800862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187848
    },
    {
        "content": "<p>Yeah, the code action is rotting in one of Damiano's PRs</p>",
        "id": 441801130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717187930
    },
    {
        "content": "<p>It's very unfortunate that Damiano found time to make all these great automation PRs around the same time I lost much of my review time...</p>",
        "id": 441801342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717187990
    },
    {
        "content": "<p>Done.</p>",
        "id": 441801749,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188109
    },
    {
        "content": "<p>I have put the awaiting CI tag, but I think the changes can be reviewed even if the CI isn't finished</p>",
        "id": 441801858,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188134
    },
    {
        "content": "<p>One file that gave me slightly extra trouble was the Vector namespace part of Topology/List.Lean</p>",
        "id": 441802180,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188235
    },
    {
        "content": "<p>Which was a surprising thing, because after opening Mathlib namespace and despite already being inside the Vector namespace, certain commonly named functions were being interpreted as List functions. I fixed it by adding <code>Vector.</code> namespace prefix to the relevant function calls.</p>",
        "id": 441802315,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/441800644\">said</a>:</p>\n<blockquote>\n<p>I think there's a quirk here where the code action doesn't work if you use the string argument</p>\n</blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/machineApplicableDeprecated.20tag.20attribute/near/397630086\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/machineApplicableDeprecated.20tag.20attribute/near/397630086</a></p>",
        "id": 441802604,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717188360
    },
    {
        "content": "<p>Uh... help needed. It seems adding this deprecation alias triggered an avalance of errors arising from \"possible ambiguous interpretations\"</p>",
        "id": 441804185,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188836
    },
    {
        "content": "<p>and also a host of warnings wherever Vector is used even if I opened the namespace, because of course <code>_root_.Vector</code> has been deprecated</p>",
        "id": 441804287,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188854
    },
    {
        "content": "<p>It seems opening the namespace might have been a bad idea although not doing so means long names</p>",
        "id": 441804385,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717188884
    },
    {
        "content": "<p>The straightforward solution for now is to \"not\" open these names and be okay with prefixes everywhere Vector and its theorems are used.</p>",
        "id": 441804868,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717189047
    },
    {
        "content": "<p>I am hoping there is something less painful and more elegant</p>",
        "id": 441804898,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717189063
    },
    {
        "content": "<p>I somehow thought <code>alias</code> would  automatically handle this issue.</p>",
        "id": 441805186,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717189154
    },
    {
        "content": "<p>This is the issue I was referring to earlier:<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/440718629\">said</a>:</p>\n<blockquote>\n<p>cc: <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>  There is a reason not to deprecate Vector though during the mathlib move and just move it without a deprecation alias, which is that even a deprecated alias will cause interference with using <code>Vector</code> while <code>Batteries</code> is open.</p>\n</blockquote>",
        "id": 441810730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191272
    },
    {
        "content": "<p>What's the fix to be applied now? Should I find every occurrence of a Vector or Vector lemma and explicitly prefix it?</p>",
        "id": 441811150,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717191405
    },
    {
        "content": "<p>you should be able to use <code>open Mathlib (Vector)</code> after namespacing it</p>",
        "id": 441811292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191452
    },
    {
        "content": "<p>That's what I am doing now</p>",
        "id": 441811334,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717191470
    },
    {
        "content": "<p>Oh wait, does putting (Vector) in brackets supersede root.Vector?</p>",
        "id": 441811489,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717191516
    },
    {
        "content": "<p>oh right, you have root.Vector too because of the alias</p>",
        "id": 441811810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191616
    },
    {
        "content": "<p>yeah I think it would be better to just not deprecate-rename</p>",
        "id": 441812010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191696
    },
    {
        "content": "<p>I guess a really dumb solution would be to add <code>VectorIsGone</code> as an alias</p>",
        "id": 441812033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717191704
    },
    {
        "content": "<p>And then at least autocomplete would find it</p>",
        "id": 441812051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717191713
    },
    {
        "content": "<p>That serves no purpose</p>",
        "id": 441812056,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717191716
    },
    {
        "content": "<p>autocomplete will find <code>Mathlib.Vector</code> already</p>",
        "id": 441812128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191728
    },
    {
        "content": "<p>I would really like to make <code>alias</code> be more of a name resolution hint a la <code>open</code></p>",
        "id": 441812207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191767
    },
    {
        "content": "<p>so that it doesn't cause conflicts with itself</p>",
        "id": 441812228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191777
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9nsffXKIjFpBaFn4Dl9zHLE2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9nsffXKIjFpBaFn4Dl9zHLE2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9nsffXKIjFpBaFn4Dl9zHLE2/image.png\"></a></div>",
        "id": 441812245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717191784
    },
    {
        "content": "<p>it's there just below</p>",
        "id": 441812290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717191801
    },
    {
        "content": "<p>I'm confused, this seems to work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">axiom</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Bar</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Bar</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Bar</span>\n</code></pre></div>",
        "id": 441812916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717192034
    },
    {
        "content": "<p>Oh, this is just #check being weird</p>",
        "id": 441812972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717192063
    },
    {
        "content": "<p>Namespaces are weird.</p>",
        "id": 441814558,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717192664
    },
    {
        "content": "<p>When I <code>open Mathlib</code> and there is a downstream <code>open Vector</code>, all the Vector defs work perfectly fine.</p>",
        "id": 441814644,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717192686
    },
    {
        "content": "<p>If instead I do <code>open Mathlib (Vector)</code> and then open <code>Vector</code>,  that somehow makes lean not capable of recognising the Vector functions right under this <code>open Vector</code>.</p>",
        "id": 441814731,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717192721
    },
    {
        "content": "<p>To see what I mean, open the <del>PartRec</del> <code>Computability/Halting.lean</code> file in the latest commit of my PR. Change the <code>open Mathlib</code> to <code>open Mathlib (Vector)</code>.</p>",
        "id": 441815177,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717192904
    },
    {
        "content": "<p>Found a fix: The fix is to change <code>open Vector</code> to <code>open Mathlib.Vector</code></p>",
        "id": 441815436,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717193022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Vector.20namespace/near/441812010\">said</a>:</p>\n<blockquote>\n<p>yeah I think it would be better to just not deprecate-rename</p>\n</blockquote>\n<p>Followed this. PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13407\">#13407</a> passes CI  <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> and is ready for review</p>",
        "id": 441830477,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717200506
    },
    {
        "content": "<p>Hi I need some help with git. I took PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13407\">#13407</a> out of merge conflict today. This unfortunately added a large number of commits from the last two weeks. How do I squash them or get rid of them. Obviously I didn't touch 2000 files with this PR, but it did affect some two dozen files. This PR has a high chance of running into merge conflicts.</p>",
        "id": 446620819,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719237306
    },
    {
        "content": "<p><em>Update</em> : Resolved the merge conflict issues and the extra commit issues with some resets and merges. This PR is ready for review. Since it touches some 25 files, I request and hope this PR can be processed faster since this PR is much more likely to have merge conflicts than most PRs</p>",
        "id": 446738922,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719270767
    }
]