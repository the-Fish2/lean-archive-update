[
    {
        "content": "<p>I noticed that both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.not#doc\">docs#Int.not</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.lnot#doc\">docs#Int.lnot</a> exist. They seem identical. Is there a reason for having them both?</p>",
        "id": 432518674,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712759751
    },
    {
        "content": "<p>There isn't even a theorem relating them! :)</p>",
        "id": 432519302,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712759905
    },
    {
        "content": "<p>they were written in different libraries at different times. I think the mathlib version can be removed in favor of the one from Init</p>",
        "id": 432520585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760223
    },
    {
        "content": "<p>it seems to be just that one function though, init doesn't have any of the other bitwise ops on Int as far as I can see</p>",
        "id": 432521104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760334
    },
    {
        "content": "<p>Yeah. So maybe someone was writing in Mathlib, didn't find <code>Int.land</code> or <code>Int.lor</code>, and so didn't notice <code>Int.not</code>? Or maybe, yeah, different times I guess</p>",
        "id": 432521273,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760367
    },
    {
        "content": "<p>no, the mathlib version was certainly first</p>",
        "id": 432521424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760394
    },
    {
        "content": "<p>lean4 is often developed without looking for related work</p>",
        "id": 432521545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760427
    },
    {
        "content": "<p>Ah ok. Was just guessing :)</p>",
        "id": 432521557,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_eq_neg_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">Int.not</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.not</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.neg_ofNat_succ</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.not</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.neg_ofNat_succ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>also feels like (to me) an important definitional fact to have about <code>Int.not</code> - but I recognize that a proof with <code>simp</code> is probably too \"heavy\" if it's going in Init</p>",
        "id": 432521632,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760452
    },
    {
        "content": "<p>nah, <code>simp</code> is used all over the place in Init</p>",
        "id": 432521799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760487
    },
    {
        "content": "<p>Ah! Ok. I clearly don't have a good understanding of the import order then</p>",
        "id": 432521858,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760506
    },
    {
        "content": "<p>it's a builtin tactic so you can use it from line 0</p>",
        "id": 432521888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760516
    },
    {
        "content": "<p>lean core development is weird</p>",
        "id": 432521949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760533
    },
    {
        "content": "<p>Wait ... like ... you could use it in Prelude if you wanted to?</p>",
        "id": 432522099,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760567
    },
    {
        "content": "<p>yes</p>",
        "id": 432522131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760572
    },
    {
        "content": "<p>Alright. Yeah clearly I do not understand Lean core / tactic order. Weird haha</p>",
        "id": 432522212,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712760596
    },
    {
        "content": "<p>but you can't use notations</p>",
        "id": 432522217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760597
    },
    {
        "content": "<p>it's a bit nutty</p>",
        "id": 432522284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Int.2Enot.60.20vs.20.60Int.2Elnot.60/near/432522131\">said</a>:</p>\n<blockquote>\n<p>yes</p>\n</blockquote>\n<p>Well, not prelude <em>only</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- fails: \"unknown tactic\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 432522477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712760657
    },
    {
        "content": "<p>well it works in the sense that it doesn't give an error about <code>simp</code> not existing</p>",
        "id": 432522704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760695
    },
    {
        "content": "<p>but of course <code>simp</code> uses lemmas and unless the lemmas are there it can't prove things</p>",
        "id": 432522788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760716
    },
    {
        "content": "<p>It says \"unknown tactic\" in Lean 4.7.0</p>",
        "id": 432522841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712760723
    },
    {
        "content": "<p>oh, I guess <code>simp</code> is not one of the builtin tactics (at least the syntax is not builtin). It is defined in <code>Init/Tactics.lean</code></p>",
        "id": 432523719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712760962
    },
    {
        "content": "<p>there are actually very few builtin tactics, <code>decide</code> and <code>native_decide</code> and a few others</p>",
        "id": 432524078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712761056
    },
    {
        "content": "<p>these are defined in <code>Lean/Parser/Tactic.lean</code> and are available from the very beginning</p>",
        "id": 432524220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712761089
    },
    {
        "content": "<p>I just checked and <code>Int.not</code> was upstreamed from <code>Std</code>  and it was added when <code>BitVec</code> were introduced in <code>Std.   It might be better to just define </code>Int.not<code> as </code>-(n + 1)`.</p>",
        "id": 432549006,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712768587
    }
]