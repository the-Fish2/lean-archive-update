[
    {
        "content": "<p>I think there's a bug in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Random.randFin#doc\">docs#Random.randFin</a> (namely, it should say <code>randNat 0 n</code> as opposed to <code>randNat 0 n.succ</code>). E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">RandT</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Random.randFin</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">10000</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.runRand</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">out</span>\n\n<span class=\"c1\">-- 6615</span>\n</code></pre></div>",
        "id": 428340514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711117399
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> who is the author on that file.</p>",
        "id": 428340698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711117443
    },
    {
        "content": "<p>In general with the current implementation I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> will come up more often than it should.</p>",
        "id": 428340917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711117508
    },
    {
        "content": "<p>assuming one expects the uniform distribution, of course.</p>",
        "id": 428340962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711117522
    },
    {
        "content": "<p>I agree yes, that's an off by one.</p>",
        "id": 428342868,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711117999
    },
    {
        "content": "<p>I guess the real question is whether we want <code>randNat</code> to be inclusive in the upper bound. What does haskell do?</p>",
        "id": 428342966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711118029
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/random-1.2.1.2/docs/System-Random.html#g:2\">https://hackage.haskell.org/package/random-1.2.1.2/docs/System-Random.html#g:2</a> bsaed on the usage here it appears that if you ask haskell for a uniform distribution 1, 6 you get upper and lower bound inclusive</p>",
        "id": 428344075,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711118282
    },
    {
        "content": "<p>ok, I can open a quick pr with a fix to <code>randFin</code> then.</p>",
        "id": 428344226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711118315
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11587\">#11587</a></p>",
        "id": 428345173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711118566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> has already deligated the PR, but I did add some additional nontrivial tests. <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  and Matt -- are you okay with these new tests?</p>",
        "id": 428363711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711123761
    },
    {
        "content": "<p>I guess those are fine. They might flipper  when we are really unlucky but let's just hope that doesn't happen^^</p>",
        "id": 428365106,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711124161
    },
    {
        "content": "<p>But an explicit seed is provided, so these tests should be deterministic</p>",
        "id": 428365233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711124185
    },
    {
        "content": "<p>Ah I didn't see that while quickly reading the file, then everything is fine <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 428365432,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711124248
    },
    {
        "content": "<p>great. I'll merge it once it passes CI</p>",
        "id": 428365946,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711124406
    },
    {
        "content": "<p>... it just failed CI :-/</p>",
        "id": 428366087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711124450
    },
    {
        "content": "<p>oh... just because I didn't update the slim check test file!</p>",
        "id": 428366202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711124492
    }
]