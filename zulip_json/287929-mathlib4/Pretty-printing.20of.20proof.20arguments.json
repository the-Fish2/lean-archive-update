[
    {
        "content": "<p>A question came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10082\">#10082</a>: should an argument like <code>(s : Opens X)</code> the above be made implicit, if there's a named hypothesis from which <code>s</code> can be inferred? My understanding is that in principle, we like that change - but <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> pointed out:</p>\n<blockquote>\n<p>The reason why we kept these arguments explicit in Lean 3 was the following: if you have <code>myDef {x : α} (hx : MyProp x)</code> and the proof of hx is nontrivial (not just a variable), then Lean pretty prints it as <code>myDef _</code>.</p>\n</blockquote>\n<p>Does anybody know if this is was fixed with Lean 4 (e.g., by printing the type of hx in this case)?<br>\n(If not, I agree the PR should be closed.)</p>",
        "id": 418688893,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706550288
    },
    {
        "content": "<p>The printing of proofs is controlled using the <code>pp.proofs</code> options, so if you ask Lean nicely, it will print the proofs in full glory.</p>",
        "id": 418693511,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706551955
    },
    {
        "content": "<p>In particular, <code>pp.proofs</code> (default: false) controls whether to pretty print proofs or to elide them, and if false, then <code>pp.proofs.withType</code> (default: true) controls whether to add a type ascription, so whether to pretty print as <code>(_ : MyProp x)</code> rather than just <code>_</code>.</p>",
        "id": 418694801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706552490
    },
    {
        "content": "<p>This option is not very discoverable to the user, but I find it a bit strange to make an argument explicit just because of pretty printing. Perhaps it is enough to see the type of <code>_</code> when you click on it.</p>",
        "id": 418737441,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706569738
    },
    {
        "content": "<p>Thanks for the insight. Given these, I propose to move forward with the PR.<br>\n(This option being hard to discover is a separate issue, which I would prefer to address indepedently.)</p>",
        "id": 419040765,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706708266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-printing.20of.20proof.20arguments/near/418737441\">said</a>:</p>\n<blockquote>\n<p>This option is not very discoverable to the user, but I find it a bit strange to make an argument explicit just because of pretty printing. Perhaps it is enough to see the type of <code>_</code> when you click on it.</p>\n</blockquote>\n<p>Note that it's possible to write a custom delaborator for your function so that the argument is visible in the pretty printer by default, even if it's implicit (or to show the type for a proof even if it's disabled)</p>",
        "id": 419125652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706736292
    },
    {
        "content": "<p>You can't click on <code>_</code> in the web docs</p>",
        "id": 419125761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706736349
    },
    {
        "content": "<p>In the next Lean release, there's <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/419097436\">now an option to make deep terms pretty print as <code>⋯</code></a>. It has features such as (1) hovering over <code>⋯</code> in the infoview shows the pretty printed term, not the <code>@</code> explicit form and (2) if you copy/paste it from the infoview, it throws an elaboration error letting you know what pretty printer option caused it.</p>\n<p>We probably should make <code>pp.proofs</code> use <code>⋯</code> too, which would give a better UX than <code>_</code>.</p>",
        "id": 419127214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706736903
    },
    {
        "content": "<p>Would anyone find this to be an upgrade to how the <code>pp.proofs</code> feature omits proofs?</p>",
        "id": 419127345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706736962
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3241\">lean4#3241</a> is an exploration of this</p>\n<p>It also gives a <code>pp.proofs.threshold</code> option to let some more complicated terms get pretty printed. I've set the default value to <code>0</code>, which means \"pretty print only atomic proofs, like constants and local variables\", which how <code>pp.proofs</code> works right now.</p>",
        "id": 419316116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706814968
    }
]