[
    {
        "content": "<p>About <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> 's <a href=\"https://github.com/leanprover-community/mathlib4/pull/14233\">#14233</a> (adding <code>scoped</code> to a bunch of <code>simp</code> lemmas). First of all, thank you for locating and fixing this! Second, could you please explain to me why these lemmas are bad, so that I don't introduce a similar performance issue in the future? Is it because Lean tries them every time when it sees <code>DFunLike.coe f (_ + _)</code> but they rarely apply (as opposed to <code>_root_.map_add</code> which usually applies when it matches)?</p>",
        "id": 448022580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719691448
    },
    {
        "content": "<p>If yes, does it mean that lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddConstMap.coe_mk#doc\">docs#AddConstMap.coe_mk</a> and below are OK as non-scoped but you've scoped them for consistency?</p>",
        "id": 448022667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719691512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bad.20.60simp.60.20lemmas.20for.20.60AddConstMap.60/near/448022580\">said</a>:</p>\n<blockquote>\n<p>Is it because Lean tries them every time when it sees <code>DFunLike.coe f (_ + _)</code> but they rarely apply (as opposed to <code>_root_.map_add</code> which usually applies when it matches)?</p>\n</blockquote>\n<p>Yes, my understanding is that they get through the discrimination tree filter now but rarely apply. Since this is a leaf file, we don't notice. But in linting, we have all of mathlib to check simp on.</p>",
        "id": 448024432,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719692010
    },
    {
        "content": "<p>I just scoped everything mindlessly. But I think consistency is a good goal. You don't want to guess which are and which are out.</p>",
        "id": 448024569,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719692048
    },
    {
        "content": "<p>I guess, lemmas in <code>AddConstMapClass</code> should be scoped, lemmas about <code>AddConstMap</code>s don't need <code>scoped</code>.</p>",
        "id": 448030608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719694269
    },
    {
        "content": "<p>Testing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9726\">#9726</a></p>",
        "id": 448031193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719694788
    },
    {
        "content": "<p>I droped <code>scoped</code> on lemmas about concrete types. Bench says no significant changes. Would you like have a look from the perf point of view?</p>",
        "id": 448034512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719696559
    },
    {
        "content": "<p>Looks good to me.</p>",
        "id": 448115959,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719754609
    }
]