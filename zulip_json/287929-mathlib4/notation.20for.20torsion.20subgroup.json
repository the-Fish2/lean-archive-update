[
    {
        "content": "<p>The notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> to represent the subgroup of the additive abelian group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> comprised of solutions to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">na=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">na</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for some natural <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> was I think popularised by Mazur in his paper I need for FLT. <span class=\"user-mention\" data-user-id=\"258845\">@Peiran Wu</span> has just PRed this notation to mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">torsionBy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Submodule.torsionBy</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddSubgroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">A</span><span class=\"s2\">\"[\"</span><span class=\"n\">n</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">torsionBy</span> <span class=\"n\">A</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11742\">#11742</a> , but I can't get it to work with numerals. Here's the phenomenon on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Torsion</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddSubgroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The additive `n`-torsion subgroup for `n` in `ℕ`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">torsionBy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Submodule.torsionBy</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddSubgroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">A</span><span class=\"s2\">\"[\"</span><span class=\"n\">n</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">torsionBy</span> <span class=\"n\">A</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">]</span> <span class=\"c1\">-- fails (ambiguous)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- still fails:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">ambiguous, possible interpretations</span>\n<span class=\"cm\">  A[37] : AddSubgroup A</span>\n\n<span class=\"cm\">  A[37] : AddSubgroup A</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there any way of getting this standard notation to work? I promise I don't need list notation. Otherwise there's always these...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEFT</span> <span class=\"n\">BLACK</span> <span class=\"n\">LENTICULAR</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3010</span><span class=\"o\">,</span> <span class=\"n\">Ps</span><span class=\"o\">):</span> <span class=\"bp\">【</span>\n<span class=\"n\">RIGHT</span> <span class=\"n\">BLACK</span> <span class=\"n\">LENTICULAR</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3011</span><span class=\"o\">,</span> <span class=\"n\">Pe</span><span class=\"o\">):</span> <span class=\"bp\">】</span>\n<span class=\"n\">LEFT</span> <span class=\"n\">TORTOISE</span> <span class=\"n\">SHELL</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3014</span><span class=\"o\">,</span> <span class=\"n\">Ps</span><span class=\"o\">):</span> <span class=\"bp\">〔</span>\n<span class=\"n\">RIGHT</span> <span class=\"n\">TORTOISE</span> <span class=\"n\">SHELL</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3015</span><span class=\"o\">,</span> <span class=\"n\">Pe</span><span class=\"o\">):</span> <span class=\"bp\">〕</span>\n<span class=\"n\">LEFT</span> <span class=\"n\">WHITE</span> <span class=\"n\">LENTICULAR</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3016</span><span class=\"o\">,</span> <span class=\"n\">Ps</span><span class=\"o\">):</span> <span class=\"bp\">〖</span>\n<span class=\"n\">RIGHT</span> <span class=\"n\">WHITE</span> <span class=\"n\">LENTICULAR</span> <span class=\"n\">BRACKET</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">3017</span><span class=\"o\">,</span> <span class=\"n\">Pe</span><span class=\"o\">):</span> <span class=\"bp\">〗</span>\n</code></pre></div>",
        "id": 437727975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715201413
    },
    {
        "content": "<p>Wild guess, but what happens if you remove the <code>@[reducible]</code>?</p>",
        "id": 437728813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715201732
    },
    {
        "content": "<p>I think it has to do with how num literals are parsed as syntax.</p>",
        "id": 437729015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715201816
    },
    {
        "content": "<p>Note that these work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"o\">[(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437729140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715201877
    },
    {
        "content": "<p>In fact, just <code>A[(37:)]</code>  works.  I wonder if it gets confused with wanting to use <code>GetElem</code>.</p>",
        "id": 437730366,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715202389
    },
    {
        "content": "<p>yeah, probably: This all works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Torsion</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddSubgroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The additive `n`-torsion subgroup for `n` in `ℕ`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">torsionBy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Submodule.torsionBy</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toAddSubgroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">A</span><span class=\"s2\">\"_[\"</span><span class=\"n\">n</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">torsionBy</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437730596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715202486
    },
    {
        "content": "<p>So it seems anything more than just a pair of square brackets will work. Just to put another suggestion out there, we could add a subscript plus sign (<code>\\_+</code>) after the closing bracket, indicating that <code>A</code> is <code>AddCommGroup</code>. Should <code>Subgroup.torsionBy</code> be added for <code>CommGroup</code>, there would be an obvious counterpart.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">A</span><span class=\"s2\">\"[\"</span><span class=\"n\">n</span><span class=\"s2\">\"]₊\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">torsionBy</span> <span class=\"n\">A</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">]</span><span class=\"bp\">₊</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 437745396,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1715210139
    },
    {
        "content": "<p>Or just, you know, <code>torsionBy A 37</code>, which seems rather more readable to me. :-)</p>",
        "id": 437752008,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715215739
    },
    {
        "content": "<p>This also just works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">]</span> <span class=\"c1\">-- note the space!</span>\n</code></pre></div>\n<p>I'm not sure about the consequences of the following, but adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Fin.instGetElemFinVal</span>\n</code></pre></div>\n<p>makes the notation work as well.</p>",
        "id": 437762574,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715225011
    },
    {
        "content": "<p>But why make fragile notation, or break basic stuff to make the notation work?</p>",
        "id": 437763422,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715225828
    },
    {
        "content": "<p>Are you suggesting to remove the <code>torsionBy</code> notation?  I agree that it is very poorly implemented, but it is also <em>very</em> standard in maths...</p>",
        "id": 437763507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715225904
    },
    {
        "content": "<p>We've used <code>_x</code> before in notation to mean \"this is a subscript in maths\"\", but this really isn't a subscript.</p>",
        "id": 437797159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715249804
    },
    {
        "content": "<p>The + sign makes it look like we're taking the positive part of the torsion</p>",
        "id": 437797249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715249859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/notation.20for.20torsion.20subgroup/near/437763422\">said</a>:</p>\n<blockquote>\n<p>But why make fragile notation, or break basic stuff to make the notation work?</p>\n</blockquote>\n<p>Could we scope the competing getElem notation?</p>",
        "id": 437797390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715249945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/notation.20for.20torsion.20subgroup/near/437763507\">said</a>:</p>\n<blockquote>\n<p>Are you suggesting to remove the <code>torsionBy</code> notation?  I agree that it is very poorly implemented, but it is also <em>very</em> standard in maths...</p>\n</blockquote>\n<p>I'd stay its <em>standard</em>, but not <em>very</em> standard. I also have seen indices on the right, as well as on the left. I wonder whether a notation for integers is that important. One frequently has to consider, for an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">a\\in R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, of the module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[a]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">]</span></span></span></span> of elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">m\\in M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a\\cdot m=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (or whatever other notation), and even, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is an ideal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, of the submodule <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>I</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[I]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">]</span></span></span></span>  of elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">m\\in M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a\\cdot m=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">a\\in I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>. A uniform thing would be useful.</p>",
        "id": 437850528,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715272868
    },
    {
        "content": "<p>People also use it e.g. for homological shifts of an object, and I'm sure for a dozen other things. :-) It's just bad notation in a universal maths library.</p>",
        "id": 437907187,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715301172
    },
    {
        "content": "<p>I think it would be good if we could locally choose the meaning</p>",
        "id": 437927352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715319660
    },
    {
        "content": "<p>One of the problems with AG in mathlib is that statements are becoming unbearably long. Having concise notation that matches the real world is important.</p>",
        "id": 437927473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715319759
    },
    {
        "content": "<p>Of course I realise that there are many cases in informal maths where notation isn't precise/unambiguous/formalizable.<br>\nBut this doesn't seem to be one of them.</p>",
        "id": 437927595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715319873
    },
    {
        "content": "<p>I think that there is a mechanism for resolving ambiguities for declarations in the current namespace over another one.  Could that not be the case for scoped notation as well?  That is, in case of an ambiguity, the scoped one takes precedence.</p>",
        "id": 437930165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715321718
    },
    {
        "content": "<p>Also used in mathlib's probability <a href=\"https://github.com/leanprover-community/mathlib4/blob/18a35ebb796ef104676edcf9d6f02880f4e6af6a/Mathlib/Probability/Notation.lean#L42-L42\"><code>P[X]</code></a></p>",
        "id": 437936301,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1715325550
    },
    {
        "content": "<p>You should be able to do <code>scoped notation:max (priority := high) A\"[\"n\"]\" =&gt; torsionBy A n</code> to get notation that overrides a pre-existing one.</p>",
        "id": 437998707,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715354023
    }
]