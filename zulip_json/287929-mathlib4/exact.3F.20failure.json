[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s.powerset</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- `Finset.mem_powerset.mp h' h` works</span>\n<span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n</code></pre></div>",
        "id": 409753661,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703369912
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finset.mem_powerset.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>The RHS does not syntactically match the goal, so this lemma is not even tried by <code>exact?</code>.</p>",
        "id": 411147882,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704357576
    },
    {
        "content": "<p>OK; seems I have to adjust my mental model of <code>exact?</code>.</p>",
        "id": 411172257,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704367534
    },
    {
        "content": "<p>What about this one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? -- (deterministic) timeout at 'whnf'</span>\n  <span class=\"c1\">-- apply? using hz -- (deterministic) timeout at 'isDefEq'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_pow_atTop_nhds_0_of_norm_lt_1</span> <span class=\"n\">hz</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nOff-topic: Why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_pow_atTop_nhds_0_of_norm_lt_1#doc\">docs#tendsto_pow_atTop_nhds_0_of_norm_lt_1</a> (similarly for some other lemmas nearby) not called <code>tendsto_pow_atTop_nhds_zero_of_norm_lt_one</code>? The literal <code>0</code> and <code>1</code> make it difficult to find, since they are unexpected.</p>",
        "id": 418443193,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706386264
    },
    {
        "content": "<p>PR welcome! Those names are certainly incorrect.</p>",
        "id": 418459345,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706402819
    },
    {
        "content": "<p>Sorry, away from my computer for a bit. But timeouts are a bad sign. What happens with this example with <code>std_exact?</code>?</p>",
        "id": 418459421,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706402892
    },
    {
        "content": "<p><code>std_exact?</code> and <code>std_apply?</code> also lead to timeouts.<br>\nWould it be possible in principle to limit the heartbeats used when checking each of the candidates (possibly storing the \"continuation\" so that it can be continued later if no quick solution was found)? My suspicion is that when <code>exact?</code> (say) tries to match the conclusion of some lemma, it initiates a slow TCI search (which maybe would eventually fail) and so loses time before getting to the relevant ones.</p>",
        "id": 418487392,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706434251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/418459345\">said</a>:</p>\n<blockquote>\n<p>PR welcome! Those names are certainly incorrect.</p>\n</blockquote>\n<p>What is the syntax for a deprecated alias? (I assume the good practice now is to not remove the old names immediately, but to keep them as deprecated.)</p>",
        "id": 418487413,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706434295
    },
    {
        "content": "<p><code>@[deprecated] alias</code></p>",
        "id": 418492476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706439336
    },
    {
        "content": "<p>with <a href=\"https://github.com/leanprover-community/mathlib4/pull/10052\">#10052</a>, adding <code>with_reducible</code> makes it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 418504712,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706450133
    },
    {
        "content": "<p>Actually, it seems that <code>with_reducible exact?</code> works even without the help of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10052\">#10052</a></p>",
        "id": 418504831,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706450232
    },
    {
        "content": "<p>How do I know when to use <code>with_reducible</code> in this context? (I.e., is there a better answer than \"just try it when <code>exact?</code> throws a timeout\"?) Should this be the default, or are there downsides?</p>",
        "id": 418507076,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706452211
    },
    {
        "content": "<p>seems like it should be the default</p>",
        "id": 418507452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706452530
    },
    {
        "content": "<p>the discrimination tree used by <code>exact?</code> already only works up to reducible unfolding, so anything that requires additional unfolding is a coin toss</p>",
        "id": 418507478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706452560
    },
    {
        "content": "<p>the downside of setting the reducibility in a tactic to something other than \"inherited\" is that you can't use combinators like <code>with_reducible</code> or <code>with_unfolding_all</code> to change the behavior to something else</p>",
        "id": 418507782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706452803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/418459345\">said</a>:</p>\n<blockquote>\n<p>PR welcome! Those names are certainly incorrect.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10077\">#10077</a><br>\nThis was quite a bit more work than I expected!</p>",
        "id": 418514981,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706458678
    },
    {
        "content": "<p>(There are some others like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zero_ne_one_or_forall_eq_0#doc\">docs#zero_ne_one_or_forall_eq_0</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.C_0#doc\">docs#Polynomial.C_0</a> , but I'll leave these to somebody else.)</p>",
        "id": 418515686,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706459298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> asks in a comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10077\">#10077</a> whether the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">{</span><span class=\"n\">deprecated</span><span class=\"o\">]</span> <span class=\"n\">alias</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span> <span class=\"n\">Bla</span>\n</code></pre></div>\n<p>lines are correct without full namespace qualification on <code>bla</code> and <code>Bla</code>. Can somebody who knows about this chime in?</p>",
        "id": 418699521,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706554280
    },
    {
        "content": "<p>Doesn't it show the full name if you hover over it? This is also something that leaff would be great for</p>",
        "id": 418704581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706556279
    },
    {
        "content": "<p>It should be correct, as in <code>namespace Foo @[deprecated] alias bar := bla</code> creates <code>Foo.bar</code>.</p>",
        "id": 418705301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706556551
    },
    {
        "content": "<p>Then maybe one or two more people can look at it?</p>",
        "id": 418705772,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706556711
    },
    {
        "content": "<p>Name resolution in <code>alias</code> is the same as other defs: the thing being defined has the current <code>namespace</code>s prepended, and the thing being referenced is resolved using the current <code>namespace</code> and <code>open</code> declarations</p>",
        "id": 418715009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706560190
    },
    {
        "content": "<p>I only asked because they were each right next to an <code>#align</code> which was following a different system</p>",
        "id": 418718585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706561663
    },
    {
        "content": "<p>I've opened a thread on the name-changing PR <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310077.20rename.20_0.20-.3E.20_zero.2C.20_1.20-.3E.20_one/near/419024785\">here</a>, as this discussion is rather off-topic for this thread.</p>",
        "id": 419026520,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706703238
    },
    {
        "content": "<p>Example from PFR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails to find Finset.sum_mul_sq_le_sq_mul_sq _ _ _</span>\n</code></pre></div>",
        "id": 419318963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706816054
    },
    {
        "content": "<p>The standard infinite-primes demo saw quite a slowdown. And <code>std_exact?</code> even times out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Euclid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.Prime</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">minFac</span> <span class=\"n\">N</span>\n  <span class=\"n\">use</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">minFac_prime</span> <span class=\"bp\">?</span><span class=\"n\">hp.n1</span>\n    <span class=\"n\">observe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n    <span class=\"n\">observe</span> <span class=\"n\">that</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">that</span>\n    <span class=\"n\">observe</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"n\">observe</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span>\n    <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span>\n    <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- slow</span>\n    <span class=\"c1\">-- std_exact? -- timeout</span>\n  <span class=\"n\">tauto</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 419393990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706856976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/419318963\">said</a>:</p>\n<blockquote>\n<p>Example from PFR:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails to find Finset.sum_mul_sq_le_sq_mul_sq _ _ _</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, we've seen this many times before: <code>v * w</code> does match (according to a <code>DiscrTree</code> with <code>fun i =&gt; f i * g i</code>, so the lemma isn't even retrieved (let along tried).</p>\n<p>Options: restate the lemma with just <code>f * g</code> instead, or switch out to Jovan's DiscrTree tree, which, if I recall correctly, can handle this.</p>",
        "id": 419735928,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707084696
    },
    {
        "content": "<p>The second option is logistically very difficult, as we are almost about to replace <code>exact?</code> with the new implementation in Std, and so the alternate DiscrTree would need to move up to Std. I won't have time for this, but if you or anyone else is interested in working on this I'm happy to advise! :-)</p>",
        "id": 419736040,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707084764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/419393990\">said</a>:</p>\n<blockquote>\n<p>The standard infinite-primes demo saw quite a slowdown. And <code>std_exact?</code> even times out.</p>\n</blockquote>\n<p>I can't reproduce <code>std_exact?</code> timing out.</p>",
        "id": 419736193,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707084899
    },
    {
        "content": "<p>Note that something pretty close to this is already checked in as a test in <code>test/observe.lean</code>. (You mentioned that we should have a regression test, and I agreed, forgetting we already did. :-)</p>",
        "id": 419736237,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707084938
    },
    {
        "content": "<p>Sorry, your brackets don't match so I'm not sure how to parse your message. Are you saying that <code>v * w</code> gets expanded to <code>fun i ↦ v i * w i</code> in the <code>DiscrTree</code>?</p>",
        "id": 419736538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707085174
    },
    {
        "content": "<p>No. The lemma statement for <code>Finset.sum_mul_sq_le_sq_mul_sq</code> includes <code>fun i ↦ v i * w i</code>, but that doesn't appear in the goal.</p>",
        "id": 419736611,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085225
    },
    {
        "content": "<p>The <code>DiscrTree</code> lookup sees the <code>v * w</code> in the goal, which doesn't match against the <code>fun i ↦ v i * w i</code> in the key for <code>Finset.sum_mul_sq_le_sq_mul_sq</code>, so it doesn't get retrieved.</p>",
        "id": 419736655,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085269
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 419798629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707126231
    },
    {
        "content": "<p>So what's the fix? Does this mean that the lemma in mathlib should be stated in another way?</p>",
        "id": 419831927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707137311
    },
    {
        "content": "<p>I think the only viable options are:</p>\n<ul>\n<li>be sad that <code>exact?</code> doesn't find this</li>\n<li>adopt <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span>'s modified <code>DiscrTree</code> tree</li>\n<li>make copies of the lemmas (perhaps with <code>_no_lambda</code> in the name? perhaps <code>exact?</code> could find these and then suggest the real one?)</li>\n</ul>",
        "id": 419832274,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707137432
    },
    {
        "content": "<p>I investigated previously just changing the statement, but then <code>simp</code> is often unhappy! I can't find the thread in which we talked about this previously, at the moment.</p>",
        "id": 419832359,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707137467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/419736237\">said</a>:</p>\n<blockquote>\n<p>Note that something pretty close to this is already checked in as a test in <code>test/observe.lean</code>. (You mentioned that we should have a regression test, and I agreed, forgetting we already did. :-)</p>\n</blockquote>\n<p>You clearly weren't the only one that forgot.</p>",
        "id": 419849976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707142914
    },
    {
        "content": "<p>Should we adjust the default heartbeats on that test, to make sure it doesn't just pass, but also remains reasonably fast?</p>",
        "id": 419850257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707142990
    },
    {
        "content": "<p>My version of discrtree also does not see that <code>fun x -&gt; f x + g x</code> is the same as <code> f + g</code>, but this was on my TODO list to figure out how to implement it.</p>",
        "id": 419854502,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1707144109
    },
    {
        "content": "<p>The equivalence is not applied at the root expression, because we still want the lemma <code>fun x =&gt; x = id</code> to be useable for rewriting</p>",
        "id": 419856252,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1707144578
    },
    {
        "content": "<p>Related to this I recently added to my discrtree that it sees that <code>fun x =&gt; x</code> and <code>id</code> are the same when it is not a root expression. <code>exact?</code> also has problems with lemmas involving <code>id</code> that can be written in either form (and sometimes a lemma is duplicated to have both forms)</p>",
        "id": 419856264,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1707144582
    },
    {
        "content": "<p>Somehow the previous 2 messages have been sent in the wrong order</p>",
        "id": 419856623,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1707144675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/419850257\">said</a>:</p>\n<blockquote>\n<p>Should we adjust the default heartbeats on that test, to make sure it doesn't just pass, but also remains reasonably fast?</p>\n</blockquote>\n<p>Yes, please!</p>",
        "id": 420007896,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707212330
    },
    {
        "content": "<p>I've made an update, and now my DiscrTree indexes <code>f + g</code> and <code>fun x =&gt; f x + g x</code> in the same way. I've implemented it for <code>+</code>, <code>*</code>, <code>-</code> and <code>/</code>. In principle this can also be done for some other pointwise defined operators such as <code>⁻¹</code>.</p>",
        "id": 420911124,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1707675872
    },
    {
        "content": "<p>I just want to record that on (random commit in the past)</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit 1de7e6632c661b383aecc389f7e89d7033d3ab46 (HEAD)\nAuthor: Jz Pan &lt;acme_pjz@hotmail.com&gt;\nDate:   Mon Jan 8 09:51:29 2024 +0000\n</code></pre></div>\n<p>the test in <code>test/observe.lean</code> needed less than 6000 heartbeats.</p>\n<p>On current master it needs ~ 100 000.</p>\n<p>I will do a proper bisect in a moment.</p>",
        "id": 421253699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707834422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit 718437417b23d1bfbde949afdf430e1d7f20d134\nAuthor: Ruben Van de Velde &lt;65514131+Ruben-VandeVelde@users.noreply.github.com&gt;\nDate:   Tue Feb 6 09:06:17 2024 +0000\n</code></pre></div>\n<p>needs ~ 25 000.</p>\n<p>The bisect continues. But this suggests that there might be multiple regressions.</p>",
        "id": 421258405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707835754
    },
    {
        "content": "<p>I'm going to call this commit <code>bad</code>. But a bisect in the other path would also be useful, I think.</p>",
        "id": 421258483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707835780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">5876928</span><span class=\"n\">aa973de8045e91fd2b70d184ca806f6b2</span><span class=\"o\">]</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">formalize</span> <span class=\"n\">IMO</span> <span class=\"mi\">1959</span> <span class=\"n\">Q2</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">9884</span><span class=\"o\">)</span>\n<span class=\"bp\">~</span> <span class=\"mi\">95</span> <span class=\"mi\">000</span> <span class=\"n\">hearbeats</span>\n</code></pre></div>",
        "id": 421260485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836327
    },
    {
        "content": "<p>Which is an older commit. So this heartbeat count is going up and down and up again.</p>",
        "id": 421260590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836354
    },
    {
        "content": "<p>Is it deterministic at least?</p>",
        "id": 421260689,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707836380
    },
    {
        "content": "<p>Seems to be</p>",
        "id": 421261695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836621
    },
    {
        "content": "<p>This seems to be the culprit:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>d3a6c9f3bd17193b002fdc5e540789c883605cc3 is the first bad commit\ncommit d3a6c9f3bd17193b002fdc5e540789c883605cc3\nAuthor: Scott Morrison &lt;scott@tqft.net&gt;\nDate:   Tue Jan 30 01:07:06 2024 +0000\n\n<span class=\"w\"> </span>   chore: bump Std to leanprover/std4#242 (#10104)\n</code></pre></div>",
        "id": 421262801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>bisect<span class=\"w\"> </span>start\n<span class=\"c1\"># status: waiting for both good and bad commits</span>\n<span class=\"c1\"># bad: [abd9e6428d55b6ef591e971679ac80db2d10f166] perf(test/observe): set low maxHeartbeats for test</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>bad<span class=\"w\"> </span>abd9e6428d55b6ef591e971679ac80db2d10f166\n<span class=\"c1\"># status: waiting for good commit(s), bad commit known</span>\n<span class=\"c1\"># good: [1de7e6632c661b383aecc389f7e89d7033d3ab46] chore(FieldTheory/SeparableDegree): add `Separable.natSepDegree_eq_natDegree` and golf (#9525)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>1de7e6632c661b383aecc389f7e89d7033d3ab46\n<span class=\"c1\"># good: [cb8ebafbf496d7273b27c5424ffbc4a195f4bda5] refactor(Probability/Kernel/CondCdf): mv prod_iInter (#10037)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>cb8ebafbf496d7273b27c5424ffbc4a195f4bda5\n<span class=\"c1\"># bad: [718437417b23d1bfbde949afdf430e1d7f20d134] chore: tidy various files (#10269)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>bad<span class=\"w\"> </span>718437417b23d1bfbde949afdf430e1d7f20d134\n<span class=\"c1\"># bad: [e64d0a161b8ccdd45cb8d9db09910eb461f5d0f7] refactor(Order/CompleteLatticeIntervals): move lemmas with a multiset dependency to a new file (#10165)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>bad<span class=\"w\"> </span>e64d0a161b8ccdd45cb8d9db09910eb461f5d0f7\n<span class=\"c1\"># bad: [5876928aa973de8045e91fd2b70d184ca806f6b2] feat: formalize IMO 1959 Q2 (#9884)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>bad<span class=\"w\"> </span>5876928aa973de8045e91fd2b70d184ca806f6b2\n<span class=\"c1\"># good: [86ffe042ba78d8e2f72717176e5ed6cd0c3445df] chore(Order/Filter/ListTraverse): move from `Basic` (#10048)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>86ffe042ba78d8e2f72717176e5ed6cd0c3445df\n<span class=\"c1\"># bad: [d3a6c9f3bd17193b002fdc5e540789c883605cc3] chore: bump Std to leanprover/std4#242 (#10104)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>bad<span class=\"w\"> </span>d3a6c9f3bd17193b002fdc5e540789c883605cc3\n<span class=\"c1\"># good: [89f9777575aaa0e4190c64c8247b03f7864f67e8] chore: fix Punit-&gt;PUnit in CommMon_ (#10089)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>89f9777575aaa0e4190c64c8247b03f7864f67e8\n<span class=\"c1\"># good: [7458f0e73e0f7d6acb16aec54166314351250412] feat(Topology/Separation): define R₁ spaces, review API (#10085)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>7458f0e73e0f7d6acb16aec54166314351250412\n<span class=\"c1\"># good: [132e5112a4627495177b8b165a8cfcc8992a87df] feat: Integral curves are either injective or periodic (#9343)</span>\ngit<span class=\"w\"> </span>bisect<span class=\"w\"> </span>good<span class=\"w\"> </span>132e5112a4627495177b8b165a8cfcc8992a87df\n<span class=\"c1\"># first bad commit: [d3a6c9f3bd17193b002fdc5e540789c883605cc3] chore: bump Std to leanprover/std4#242 (#10104)</span>\n</code></pre></div>",
        "id": 421262898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836931
    },
    {
        "content": "<p>After that bad commit, the heartbeats in <code>test/observe.lean</code> went from &lt; 3000 to &gt; 95000.</p>",
        "id": 421263031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836971
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 421263073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836983
    },
    {
        "content": "<p>Did we get rid of old <code>exact?</code> with <code>std_exact?</code> in that commit?</p>",
        "id": 421263398,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707837076
    },
    {
        "content": "<p>at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9962\">#9962</a> the <code>std</code> commit was updated to <code>0d0ac1c43e1ec1965e0806af9e7a32999ea31096</code><br>\nand then at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10104\">#10104</a> (which was implicated by Johan's <code>git bisect</code>) the <code>std</code> commit was updated to  <code>128fd8e663353da2a3666167605b510824fe2eb5</code></p>",
        "id": 421264088,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707837262
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10498\">#10498</a> is setting a \"low\" maxHeartbeats. But we should strive to make that at least 10x lower.</p>",
        "id": 421264460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707837367
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>git<span class=\"w\"> </span>log<span class=\"w\"> </span>--oneline<span class=\"w\"> </span>0d0ac1c43e1ec1965e0806af9e7a32999ea31096..128fd8e663353da2a3666167605b510824fe2eb5\n128fd8e<span class=\"w\"> </span>Revert<span class=\"w\"> </span><span class=\"s2\">\"chore: don't call symmSaturate repeatedly in solve_by_elim (#547)\"</span><span class=\"w\"> </span>again.<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#567)</span>\n92fb0a9<span class=\"w\"> </span>chore:<span class=\"w\"> </span>upstream<span class=\"w\"> </span>classical<span class=\"w\"> </span>tactic<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#242)</span>\n6f352d4<span class=\"w\"> </span>feat:<span class=\"w\"> </span>upstream<span class=\"w\"> </span>addHaveSuggestion<span class=\"w\"> </span>and<span class=\"w\"> </span>addRewriteSuggestion<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#210)</span>\n5368bbb<span class=\"w\"> </span>feat:<span class=\"w\"> </span>commit<span class=\"w\"> </span><span class=\"sb\">`</span>lake-manifest.json<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#560)</span>\nfff46c3<span class=\"w\"> </span>feat:<span class=\"w\"> </span>module<span class=\"w\"> </span>docs<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#237)</span>\nb275827<span class=\"w\"> </span>feat:<span class=\"w\"> </span>more<span class=\"w\"> </span><span class=\"sb\">`</span>Bool<span class=\"sb\">`</span><span class=\"w\"> </span>lemmas<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#464)</span>\n1a0e00d<span class=\"w\"> </span>feat:<span class=\"w\"> </span>add<span class=\"w\"> </span><span class=\"sb\">`</span>ByteArray.ofFn<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#526)</span>\n61ef066<span class=\"w\"> </span>feat:<span class=\"w\"> </span>solve_by_elim<span class=\"w\"> </span>uses<span class=\"w\"> </span>intros<span class=\"w\"> </span>and<span class=\"w\"> </span>constructor<span class=\"w\"> </span>by<span class=\"w\"> </span>default<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c1\">#551)</span>\n</code></pre></div>",
        "id": 421266355,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707837912
    },
    {
        "content": "<p>Is <code>61ef066 feat: solve_by_elim uses intros and constructor by default (#551)</code> the suspicious one?</p>",
        "id": 421266732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707838017
    },
    {
        "content": "<p>The <code>symm_saturate</code> stuff is really quite slow. Me and Scott were discussing that a while ago, but we didn't really come to a conclusion about the best way to fix it.</p>",
        "id": 421266757,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707838023
    },
    {
        "content": "<p>Those seem like fast tactics</p>",
        "id": 421266804,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707838035
    },
    {
        "content": "<p>Ooh wait, the other one is a \"revert\"! So now it is in fact calling <code>symmSaturate</code> repeatedly...</p>",
        "id": 421266924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707838072
    },
    {
        "content": "<p>I think the default <code>exact?</code> should be really fast so that you can basically try it all the time. And then we can have a <code>exact?!</code> that tries a lot harder when you are sure this should be somewhere.</p>",
        "id": 421270507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707839021
    },
    {
        "content": "<p>I think this is configurable in the solve by elim config so it should be easy to try a patch and see if it is indeed this</p>",
        "id": 421272474,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707839556
    },
    {
        "content": "<p>I think turning off <code>symm</code> doesn't do anything: <a href=\"https://github.com/leanprover-community/mathlib4/compare/ericrbg/check_observe\">https://github.com/leanprover-community/mathlib4/compare/ericrbg/check_observe</a></p>",
        "id": 421277168,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707840687
    },
    {
        "content": "<p>It is <code>solve_by_elim</code> calling <code>constructor</code>. I've turned it off in <code>library_search</code>, and it drops to about 6500 heartbeats.</p>",
        "id": 421367519,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707883866
    },
    {
        "content": "<p>I pushed the change.</p>",
        "id": 421367524,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707883874
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/642\">std#642</a> is corresponding change in <code>std_exact?</code> so we don't lose it when we do the switchover.</p>",
        "id": 421367647,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707883990
    },
    {
        "content": "<p>Thanks for debugging this!</p>",
        "id": 421372643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707888019
    },
    {
        "content": "<p>Here is another <code>exact?</code> failure that surprised me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_mul_dvd_mul_left'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_dvd_mul_iff_left</span> <span class=\"n\">hc</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mp</span> <span class=\"n\">H</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>(e.g. on commit <code>98b2339d0d</code>)</p>",
        "id": 429659612,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711461104
    },
    {
        "content": "<p>Btw, with <code>apply?</code>, one of the suggestions is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_dvd_mul_iff_left</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">hc</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">hc</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>(which does not work but gives the right lemma!)</p>",
        "id": 429662322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711461807
    },
    {
        "content": "<p>Recently, I've got many nondeterministic failures of <code>exact?</code>, in the following form: when working on a heavy proof, at some point <code>exact?</code> times out in the sense that I get the warning that the lemma is taking too many heartbeats and that I should increase the heartbeats (I don't get the message on <code>exact?</code>, but on the lemma name). From this point on, <code>exact?</code> is unusable (even a stupid lemma like <code>lemma foo (n : ℕ) : 0 ≤ n := by exact?</code> will fail). Increasing heartbeats doesn't make any difference (even more, even when I increase them to 500000 say I get the standard message mentioning 200000 heartbeats). Apart from <code>exact?</code>, Lean seems to still be working fine. The only solution I found in this situation is to restart Lean -- then the <code>exact?</code> that failed initially will work fine, and everything is fixed.</p>\n<p>The outcome is that every 10 or 15 minutes I have to restart Lean. Not too bad, but not very nice. Sorry I can't give more details or a reproductible use case...</p>",
        "id": 429666273,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1711462934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 429669470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711463876
    },
    {
        "content": "<p>related: <a href=\"#narrow/stream/270676-lean4/topic/.60exact.3F.60.20timing.20out/near/429675849\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60exact.3F.60.20timing.20out/near/429675849</a></p>",
        "id": 429676951,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711465780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Thanks for the ping.  <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> There were a few changes in the Lean 4 migration, and at least one will be fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3769\">#3769</a>.   There may also be a heartbeat issue in initialization.  I'm planning to have <a href=\"https://github.com/leanprover-community/mathlib4/pull/3769\">#3769</a> in the next nightly.</p>",
        "id": 429677320,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711465875
    },
    {
        "content": "<p>There's still a bit of testing, but I think <a href=\"https://github.com/leanprover/lean4/pull/3769\">lean4#3769</a> will resolve the issues and should be ready in time for the next release candidate.</p>\n<p>If <code>exact?</code> or <code>apply?</code> work, but seems slow (especially on first run), it'd be useful to see  profiling numbers.  e.g,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- lazy discriminator import initialization took 2.3s</span>\n<span class=\"c1\">-- tactic execution of Lean.Parser.Tactic.apply? took 3.6ms</span>\n</code></pre></div>\n<p>The initialization performance after recent changes seems to have degraded from about 1.5s to 2.3s.  That is not ideal, but still seems reasonable to me (though I have a M2).  It'd be good to know if it's prohibitively slow on other's machines.</p>",
        "id": 429740723,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711487480
    },
    {
        "content": "<p>On a recent version of Mathlib I get similar numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- librarySearch launch took 2.01s</span>\n<span class=\"c1\">-- librarySearch took 1.43s</span>\n<span class=\"c1\">-- (some other things that take &lt;10ms)</span>\n</code></pre></div>",
        "id": 429755475,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711495468
    },
    {
        "content": "<p>And of course I'm perfectly happy with such numbers as a one-time cost.</p>",
        "id": 429755671,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711495588
    }
]