[
    {
        "content": "<p>Hi all, I'm Elif Uskuplu, a recent PhD in math from USC. As a project suggested by <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  in the Formalization of Mathematics (SLMATH) summer program, I've finished my work about the formalization of STLC in locally nameless syntax in Lean4. One can read the details from <a href=\"https://github.com/ElifUskuplu/Stlc_deBruijn\">the github repository</a>. The important and novel part of the study is that it includes the proof of strong normalization in <em>locally nameless syntax</em>. I would like to contribute to mathlib with my work. I've already an invitation for write permission for non-master branches, and I've accepted. However, I'm new in Lean4 community, so I would like to consult to experts about opening a PR. How STLC should be in mathlib? Please let me know if you have questions and suggestions.</p>",
        "id": 412906310,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1705307108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> will probably be interested in hearing about this!</p>",
        "id": 412931383,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1705316092
    },
    {
        "content": "<p>This seems really interesting! I've been writing something similar (although I've not been contributing to it for a while). While I haven't gotten as far with the theory as you have, I think my presentation of lambda calculi is more general, and can optionally deal with finitary (co)product types, and should be easily extendable with other features. The code is <a href=\"https://github.com/zeramorphic/lambda_calculi/blob/main/LambdaCalculi/LambdaCalculus.lean\">here</a> if you're interested. I assume that if your code were added into mathlib, it would be desirable to prove it in the most general form, but people more familiar with the process than me should comment on that.</p>",
        "id": 412942769,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1705320137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> thanks for the information. Indeed, the more the structure is general, the better it is. In this version, I only have a base type and arrow types, but I can try to add the others if it is needed before submitting a PR. I'll wait for further comments before finalizing.</p>",
        "id": 413039435,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1705358481
    },
    {
        "content": "<p>There is no clearly \"most general\" version of STLC. You can always add more base types and operations, though this can potentially be dealt with by parameterising over base types and primitive operations. More fundamentally, it's not clear whether you should use de Bruijn indices or de Bruijn levels or locally nameless or even named representations of binders and variables; all of these have their pros and cons. Then there are people who like to use intrinsically typed syntax and others who prefer extrinsic types. So unfortunately the state of the art in type theory research seems to be that everyone defines their own little calculus and all these calculi are obviously related to each other, but the relation is not made formal.</p>\n<p>What this means for Mathlib is that, in my view, it doesn't make much sense to insist on the usual philosophy that there should be one canonical representation of each concept. Of course, obvious opportunities for generalisation should be taken, but if someone needs STLC with de Bruijn and Mathlib has STLC with locally nameless, I would put both formalisms into Mathlib and relate them with the obvious maps.</p>\n<p>Then again, I'm not involved with Mathlib maintenance, so these are just personal opinions.</p>",
        "id": 413133868,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705404307
    },
    {
        "content": "<blockquote>\n<p>What this means for Mathlib is that, in my view, it doesn't make much sense to insist on the usual philosophy that there should be one canonical representation of each concept.</p>\n</blockquote>\n<p>In my view, what this means for mathlib is that it should not attempt to formalize a specific type theory like STLC but rather formalize a tool for constructing type theories. There is precedent in other libraries: <a href=\"https://github.com/coq-community/autosubst\">Autosubst</a> in Coq and <a href=\"https://isabelle.in.tum.de/nominal/main.html\">Nominal Isabelle</a> in Isabelle</p>",
        "id": 413135862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705405178
    },
    {
        "content": "<p>I can see that. As a refinement of this approach, perhaps the rule should be: Mathlib should only formalise type theories if they're used by something else in Mathlib. For example, if someone wants to use STLC as the internal language of cartesian-closed categories or as a representation of intuitionistic propositional logic, then the specific variant of STLC most useful for this should (well, needs to) be in Mathlib.</p>",
        "id": 413138915,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705406323
    },
    {
        "content": "<p>Thank you for your comments. It seems that keeping this as a separate repository is the right thing to do in this case. But I also got inspired to expand this work for many different needs, thanks.</p>",
        "id": 415945401,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1705462329
    },
    {
        "content": "<p>I'd also throw <a href=\"https://iris-project.org/\">Iris</a>, made for Coq, into the bucket of existing libraries. They also have a set of custom tactics for reasoning in a hoare-style logic</p>",
        "id": 415994402,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705486704
    },
    {
        "content": "<p>see also <a href=\"https://github.com/leanprover-community/iris-lean/\">https://github.com/leanprover-community/iris-lean/</a></p>",
        "id": 415994454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705486726
    },
    {
        "content": "<p>Oooh now that's interesting</p>",
        "id": 415994495,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705486738
    },
    {
        "content": "<p>Although the Iris port really is more a MoSeL port at this stage, i.e. no hoare-triples yet.</p>",
        "id": 415994773,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1705486818
    }
]