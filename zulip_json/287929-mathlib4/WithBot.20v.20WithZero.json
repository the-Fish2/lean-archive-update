[
    {
        "content": "<p>I'm in the middle of a bunch of rewrites and I don't really want to stop, apply <code>norm_cast</code>, and then start again. But I can't find a way around it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">DedekindDomain</span><span class=\"bp\">.</span><span class=\"n\">AdicValuation</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Multiplicative</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithZero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Multiplicative</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">one_lt_coe</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>because we have <code>WithBot.one_lt_coe</code> but it won't fire on <code>WithZero</code>.  Not even this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Multiplicative</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithZero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Multiplicative</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">WithBot</span><span class=\"bp\">.</span><span class=\"n\">one_lt_coe</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithZero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Multiplicative</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Should I just make <code>WithZero.one_lt_coe</code> or is this frowned upon because it's code duplication?</p>",
        "id": 444849857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718446363
    },
    {
        "content": "<p>It's not code duplication! They are (supposed to be) different types!</p>",
        "id": 444849957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718446411
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13853\">#13853</a></p>",
        "id": 444854304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718449891
    }
]