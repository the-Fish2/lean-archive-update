[
    {
        "content": "<p>This isn't supposed to work, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Use</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">·</span>\n</code></pre></div>\n<p>I would expect to have to write <code>(·)</code>.</p>",
        "id": 448279748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719827607
    },
    {
        "content": "<p>I do find it strange!</p>\n<p>Also, I find the behaviour of <code>apply (·)</code> instead of <code>use ·</code> strange in that same proof.</p>",
        "id": 448283950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719828619
    },
    {
        "content": "<p>That's funny. It's allowed because in this particular case, <code>use</code> unfolds to</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I'm surprised that this is how dot interacts with type ascriptions. I might have thought that <code>(· : Y)</code> would have type <code>_ -&gt; Y</code>.</p>",
        "id": 448381676,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719851542
    },
    {
        "content": "<p>I think this <code>use ·</code> is relatively harmless, but it would be nice to know if there's a way to inhibit the cdot feature when splicing together syntax.</p>",
        "id": 448382300,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719851708
    }
]