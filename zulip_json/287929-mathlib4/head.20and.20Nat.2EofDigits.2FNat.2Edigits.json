[
    {
        "content": "<p>I needed the following two lemmas and was wondering if they would make a good contribution to mathlib. (I expected them to be there already, hopefully I didn't overlook them). What do you think?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.ofDigits_modEq_head</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"n\">l.head</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.ofDigits</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.digits_head</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.digits_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_mod</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.ofDigits_digits</span> <span class=\"n\">b</span> <span class=\"n\">n.succ</span><span class=\"o\">]</span>\n    <span class=\"n\">zify</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.eq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.ofDigits_modEq_head</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits_lt_base</span> <span class=\"n\">hb</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.head</span><span class=\"bp\">!</span><span class=\"n\">_mem_self</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"n\">Nat.digits_ne_nil_iff_ne_zero.mpr</span> <span class=\"o\">(</span> <span class=\"n\">Nat.succ_ne_zero</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 424447848,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1709415560
    },
    {
        "content": "<p>Second one seems fine. I'm less keen of the ZMOD in the first one.</p>",
        "id": 424467756,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709435723
    },
    {
        "content": "<p>There's a few lemmas about ofDigits with zmod already, fwiw</p>",
        "id": 424482344,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709449944
    },
    {
        "content": "<p>I suppose </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.ofDigits_modEq_head</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l.head</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>might also be useful instead of the ZMOD version. At least this is exactly what I use in the proof of <code>Nat.digits_head </code></p>",
        "id": 424485866,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1709453158
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11129\">https://github.com/leanprover-community/mathlib4/pull/11129</a></p>",
        "id": 424503555,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1709468139
    }
]