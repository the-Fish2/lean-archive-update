[
    {
        "content": "<p>I found two places where an <code>outParam</code> appears in an instance argument in Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">NormedAddTorsor</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">SeminormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddTorsor</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">AddTorsor</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">AddGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddAction</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"w\">  </span><span class=\"n\">VSub</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n</code></pre></div>\n<p>These <code>outParam</code> are redundant because instance arguments are always already synthesized when the type class search begins, so there is no need to generate them again. The original <a href=\"#narrow/stream/113488-general/topic/out_param.20.26.20add_torsor\">Zulip thread</a> that added <code>outParam</code>s to <code>AddTorsor</code> seems to not give a conscious reason for this extra <code>outParam</code>. I have a PR removing them (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13067\">#13067</a>), and this gives a minimal speedup of the relevant files.</p>\n<p>Are people happy to merge this?</p>",
        "id": 442056432,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717337086
    },
    {
        "content": "<p>Looks fine to me</p>",
        "id": 442056488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717337126
    },
    {
        "content": "<p>There is an overall saving of about 9*10⁹ build instructions, but also a file that got slower by more than 10⁹ instructions (I haven't checked whether this file actually uses <code>AddTorsor</code>).</p>",
        "id": 442057694,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717337902
    },
    {
        "content": "<p>I have to say I am quite confused in general by increases and decreases in build instructions. I have this PR <a href=\"https://github.com/leanprover/lean4/pull/4319\">lean4#4319</a>, which should clearly only improve performance. But somehow there is one file improving by 4% and another slowing down by 1% (overall a 0.1% improvement). Could it be that pheidippides, the speed centre computer, doesn't give an honest value for build instructions per file?</p>",
        "id": 442058097,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717338133
    },
    {
        "content": "<p>Also, I noticed that all three of <code>outParam Type*</code>, <code>outParam (Type*)</code> and <code>outParam &lt;| Type*</code> appear frequently in mathlib. Should we choose a preferred form and replace it everywhere?</p>",
        "id": 442059394,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717339005
    },
    {
        "content": "<p>If the shortest form works, I think we would prefer it</p>",
        "id": 442060044,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717339357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60outParam.60.20in.20instance.20argument/near/442058097\">said</a>:</p>\n<blockquote>\n<p>Could it be that pheidippides, the speed centre computer, doesn't give an honest value for build instructions per file?</p>\n</blockquote>\n<p>I wouldn't suggest dishonesty on pheidippides's part, but there is clearly some noise (i.e., files that are clearly not affected by a change still take more or fewer instructions than before), I just don't have a good idea of what amount of noise is normal.</p>",
        "id": 442060846,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717339989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60outParam.60.20in.20instance.20argument/near/442060044\">said</a>:</p>\n<blockquote>\n<p>If the shortest form works, I think we would prefer it</p>\n</blockquote>\n<p>Ok, I made a PR for it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13462\">#13462</a></p>",
        "id": 442061654,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717340588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60outParam.60.20in.20instance.20argument/near/442059394\">said</a>:</p>\n<blockquote>\n<p>Also, I noticed that all three of <code>outParam Type*</code>, <code>outParam (Type*)</code> and <code>outParam &lt;| Type*</code> appear frequently in mathlib. Should we choose a preferred form and replace it everywhere?</p>\n</blockquote>\n<p>There's a good chance the latter two come from before <code>Type*</code> existed, and it often replaced <code>Type _</code>.</p>",
        "id": 442075186,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717347587
    },
    {
        "content": "<p>I'm not certain about instructions, but certainly heartbeats is nondeterministic in certain files. \"Finite limits commute with filtered colimits\" is a known offender that I never got to the bottom of.</p>",
        "id": 442088099,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717353845
    }
]