[
    {
        "content": "<p>Sometimes things are called trans and sometimes comp. What's the distinction?</p>\n<p>Trans:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Composition of two relation embeddings is a relation embedding. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f.1.trans</span> <span class=\"n\">g.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f.map_rel_iff</span><span class=\"o\">,</span> <span class=\"n\">g.map_rel_iff</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>Comp:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Composition of two relation homomorphisms is a relation homomorphism. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span><span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g.2</span> <span class=\"o\">(</span><span class=\"n\">f.2</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 439158406,
        "sender_full_name": "Eric Paul",
        "timestamp": 1715927138
    },
    {
        "content": "<p>I'm also confused about what simp tags are being used when and why.</p>\n<p>For example we have that definition of trans with no simp tags</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f.1.trans</span> <span class=\"n\">g.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f.map_rel_iff</span><span class=\"o\">,</span> <span class=\"n\">g.map_rel_iff</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>And then we have a similar trans with many simp things going on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Composition of `f : α ↪ β` and `g : β ↪ γ`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">trans</span><span class=\"o\">,</span> <span class=\"n\">simps</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">simpRhs</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">↪</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g.injective.comp</span> <span class=\"n\">f.injective</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I would have guessed that these two would have the same simp tags.</p>",
        "id": 439159494,
        "sender_full_name": "Eric Paul",
        "timestamp": 1715927643
    },
    {
        "content": "<p>Embeddings should use <code>comp</code>, not <code>trans</code>. Only equivalences/isomorphisms use <code>trans</code>.</p>",
        "id": 439159601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715927693
    },
    {
        "content": "<p>I see. So both of those <code>trans</code> should have their names changed to <code>comp</code>?</p>",
        "id": 439159837,
        "sender_full_name": "Eric Paul",
        "timestamp": 1715927798
    },
    {
        "content": "<p>Which is slightly bizarre since ordering relations use trans (and correspond to categorical monomorphisms).</p>",
        "id": 439161109,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715928410
    },
    {
        "content": "<p>It's not bizarre at all if you remember that <code>le_trans : a ≤ b → b ≤ c → a ≤ c</code>, while <code>le_comp</code> would rather be <code>le_comp : b ≤ c → a ≤ b → a ≤ c</code></p>",
        "id": 439161541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715928605
    },
    {
        "content": "<p>It's not that bizarre in my opinion, and the reason isn't just the order of the arguments.</p>\n<p>We think of the composition of isomorphisms as a transitivity property (and thus call it <code>trans</code>) because we commonly think of isomorphism as a relation (e.g. \"the groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> are isomorphic\"). It is much less common to think of embeddability as a relation, so we don't think of the composition of embeddings as a transitivity property, and we call it <code>comp</code>.</p>",
        "id": 439161864,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1715928773
    },
    {
        "content": "<p>The number of times I've typed <code>e.comp</code> and got a failure is humiliatingly high.</p>",
        "id": 439181145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715936451
    },
    {
        "content": "<p>Allow me to rephrase. If trans is used for equiv only, that means the word is restricted to groupoids, while comp is used for categories which are not a priori groupoids. Both cases correspond to the idea of transitivity. But for ordering relations, it is the word trans that is used, while the corresponding category (arrows are increasing pairs) is not a groupoid.</p>",
        "id": 439302971,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715986832
    },
    {
        "content": "<p>One thing I fail to do with equivalences is defining by transitivity, such as ‘e.trans _?‘ with some known e and the next to be guessed.</p>",
        "id": 439303238,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715986990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Trans.20vs.20Comp.20naming/near/439303238\">said</a>:</p>\n<blockquote>\n<p>One thing I fail to do with equivalences is defining by transitivity, such as ‘e.trans _?‘ with some known e and the next to be guessed.</p>\n</blockquote>\n<p>Do you mean <code>e.trans ?_</code>. This Just Works<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>, right? What does this have to do with the current conversation?</p>",
        "id": 439330742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716013543
    },
    {
        "content": "<p>It should work as long as the expected type is known.</p>",
        "id": 439349881,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1716033391
    }
]