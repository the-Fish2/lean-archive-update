[
    {
        "content": "<p>I'm wondering about best API design practices around reducing code duplication, on virtually-but-no-quite identical concepts.</p>\n<p>Case in point: I want to formalise open continuously differentiable embeddings; these are topological embeddings with open range (i.e. <code>OpenEmbedding</code>s) which are <code>C^n</code>. Thus, it's natural to define <code>ContMDiffEmbedding</code>s. Matching API around <code>Smooth</code>, it also seems natural to have a <code>SmoothEmbedding</code>. What are best practices for this, without having to copy-paste most of the API?</p>\n<p>An abbreviation <code>abbrev SmoothEmbedding I I' = ContDiffEmbedding I I' \\infty</code>? (One complication is that <code>ContDiffEmbedding</code> will have a field about differentiability; I'd prefer the corresponding field of <code>SmoothEmbedding</code> to be named involving <code>Smooth</code>, not <code>contMDiff</code>.) Other ideas? Just copy-paste and pretend it's fine?</p>",
        "id": 427432672,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710759283
    },
    {
        "content": "<p>Typeclasses are one way to organize such APIs</p>",
        "id": 427469020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710766105
    },
    {
        "content": "<p>Which works well in mathlib for morphisms between algebraic structures (eg <code>MonoidHomClass</code> etc)</p>",
        "id": 427469156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710766134
    },
    {
        "content": "<p>In topology/geometry, usually concepts are defined as predicates on functions. And then hopefully we can have short projections between various predicates?</p>",
        "id": 427469479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710766184
    }
]