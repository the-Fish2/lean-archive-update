[
    {
        "content": "<p>Warning: there is no question in this post, this is only for fun. For people who like monads and know Mathlib, consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Removing the <code>import Mathlib</code> line will make it fail. Challenge: without using Lean, guess what is the minimal file to import to make it work again.</p>",
        "id": 425434828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865252
    },
    {
        "content": "<p>If this is too difficult you can then try using Lean.</p>",
        "id": 425434924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865295
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Tactic.NormNum.Basic</p>\n</div></div>",
        "id": 425435142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> may enjoy this puzzle for instance.</p>",
        "id": 425435223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865421
    },
    {
        "content": "<p>Bonus question: without running it, <code>#eval bar 1</code> in your head.</p>",
        "id": 425435398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865519
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>failed</code></p>\n</div></div>",
        "id": 425435435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865543
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>it looks like a type error, in that <code>foo n</code> is an <code>Option Nat</code> but you are using <code>&lt;-</code> with it to make a <code>MetaM</code></p>\n<p>So whether this works depends on whether there is a monadLift instance</p>\n<p>and my guess is that mathlib somewhere decides that there is such a monad lift instance for any <code>Alternative m</code></p>\n<p>so the answer to the bonus question is probably <code>failed</code></p>\n<p>and the minimal file will be something in <code>Mathlib.Control</code> if we're lucky and in some random number theory file if we are unlucky</p>\n</div></div>",
        "id": 425435470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709865580
    },
    {
        "content": "<p>..oof, it looks like my code is the one at fault</p>",
        "id": 425435986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709865902
    },
    {
        "content": "<p>I guess you should have put all your messages behind spoiler tags. But you can now look at the answers.</p>",
        "id": 425436001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865907
    },
    {
        "content": "<p>I would say this is a minor foot gun.</p>",
        "id": 425436053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709865937
    },
    {
        "content": "<p>yeah, that code should have been a local instance</p>",
        "id": 425436243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866065
    },
    {
        "content": "<p>although TBH it's not unreasonable as a global instance, it's just poorly placed</p>",
        "id": 425436312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866096
    },
    {
        "content": "<p>I was not expecting the answer to the bonus question when writing code in my teaching library.</p>",
        "id": 425436393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709866161
    },
    {
        "content": "<p>I think the footgun here is distributed across two features, both individually reasonable:</p>\n<ul>\n<li><code>Option A -&gt; M A</code> should be a coercion / monad lift instance when <code>M</code> is an alternative monad</li>\n<li><code>A -&gt; Option A</code> should be a coercion via <code>some</code></li>\n</ul>",
        "id": 425436505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866238
    },
    {
        "content": "<p>the result is that when you have <code>M (Option A)</code> there isn't a lot lean can do to help detect errors when you send <code>none</code> the wrong direction</p>",
        "id": 425436551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866278
    },
    {
        "content": "<p>since depending on the context both <code>pure none</code> and <code>failure</code> are reasonable answers</p>",
        "id": 425436586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866314
    },
    {
        "content": "<p>I was not expecting the first one. When I want this behavior I write <code>let some x := y | throwError …</code>.</p>",
        "id": 425436638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709866329
    },
    {
        "content": "<p>I think that behavior is also related to the sentiment of \"<code>Option</code> should not be a monad\"</p>",
        "id": 425436686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866365
    },
    {
        "content": "<p>i.e. <code>Option</code> is just for data and if you want control flow you should use <code>OptionM</code></p>",
        "id": 425436722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866397
    },
    {
        "content": "<p>Actually, the original issue comes up in general when you have <code>M A</code> and want <code>M (M A)</code></p>",
        "id": 425436849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866485
    },
    {
        "content": "<p>but at least <code>pure</code> isn't a coercion (anymore...) so there is less damage</p>",
        "id": 425436906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709866557
    },
    {
        "content": "<p>Note that I don’t have strong feelings here. The main point of this thread is still the game at the beginning.</p>",
        "id": 425437014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709866616
    },
    {
        "content": "<p>Btw, <a href=\"#narrow/stream/287929-mathlib4/topic/MetaM.20and.20Option\">this</a> seems to be the same thing that confused me as well.</p>",
        "id": 425475990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709888683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/monad.20puzzle/near/425436638\">said</a>:</p>\n<blockquote>\n<p>I was not expecting the first one. When I want this behavior I write <code>let some x := y | throwError …</code>.</p>\n</blockquote>\n<p>I agree with this, and I'm generally not a fan of the <code>Alternative</code> instance of <code>MetaM</code>. I think it is better to give names to errors instead of having it throw <code>\"failure\"</code> through the alternative instance.</p>",
        "id": 425575834,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709924700
    },
    {
        "content": "<p>It took a little while for me to learn that seeing just <code>failed</code> at the tactic level likely meant some guard failing in <code>MetaM</code>.</p>\n<p>But guards are useful. I'd be curious to know how often the <code>Alternative MetaM</code> instance is used. If it's too useful to abandon, it'd be nice for the instance to throw some information about the <code>MetaM</code> state instead of the string <code>failed</code>—or at the very least for it to express the fact that this was specifically a <code>MetaM</code> failure.</p>",
        "id": 425577644,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709925465
    },
    {
        "content": "<p>(As an example of its use: the <code>failed</code> you see from a failed <code>solve_by_elim</code> is from the <code>MetaM</code> <code>Alternative</code> instance!)</p>",
        "id": 425577834,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709925548
    },
    {
        "content": "<p>I don't really see the need for <code>guard condition</code> in <code>MetaM</code>, when you can just write <code>unless condition do throwError \"failed\"</code>. The latter forces the user to give an error message that will most likely be more useful than \"failed\".</p>",
        "id": 425609877,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709933169
    },
    {
        "content": "<p>In the case of <code>solve_by_elim</code>, wouldn't it be nicer if it said something more specific, like \"solve_by_elim failed to close the goal\" or something like that?</p>",
        "id": 425610232,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709933394
    },
    {
        "content": "<p>Definitely! I merely meant to show that it's not uncommon to see it used. (Though, as it happens, <code>solve_by_elim</code> is implemented in terms of something that takes in an arbitrary monad with an <code>Alternative</code> instance—this part might actually be unusual.)</p>",
        "id": 425621684,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709939504
    },
    {
        "content": "<p>Though, <code>firstM</code> also depends on an <code>Alternative</code> instance, and that's pretty useful—as is failing while checking many conditions in <code>try</code>/<code>catch</code> blocks, where the error simply won't propagate up to the user.</p>",
        "id": 425622172,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709939878
    },
    {
        "content": "<p>I agree that it's a bad error message, but I'd be reluctant to give up all of the functionality built on <code>Alternative</code> in <code>MetaM</code>. I wonder if there's a way to prevent it from bubbling to the surface somehow while allowing internal use.</p>",
        "id": 425622742,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709940275
    }
]