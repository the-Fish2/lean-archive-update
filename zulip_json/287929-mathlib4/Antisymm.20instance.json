[
    {
        "content": "<p>Newbie question: Is there a reason in the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `IsAntisymm X r` means the binary relation `r` on `X` is antisymmetric. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsAntisymm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">is_antisymm</span> <span class=\"n\">IsAntisymm</span>\n\n<span class=\"sd\">/-- `IsTrans X r` means the binary relation `r` on `X` is transitive. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsTrans</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">is_trans</span> <span class=\"n\">IsTrans</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">IsTrans.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Trans.trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>in  mathlib4/Mathlib/Init/Algebra/Classes.lean<br>\nthere's no instance code for Antisymm but only for trans? I think it prevents some automatic inferences (but maybe I'm mistaken about that). In particular when I tried to use &lt;= for Nat in a function which required both implicitly, Lean inferred the trans but not the antisymm. Thanks in advance!</p>",
        "id": 409927651,
        "sender_full_name": "Andy Jiang",
        "timestamp": 1703524613
    },
    {
        "content": "<p><code>Init.Algebra.Classes</code>, as indicated at the top of the file, is mostly junk left from a lean3 refactor that never happened</p>",
        "id": 409928958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703526017
    }
]