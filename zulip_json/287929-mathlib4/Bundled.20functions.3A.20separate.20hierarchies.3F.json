[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> What do you think about deleting all the <code>*HomClass</code>es that mix hierarchies? I mean, since we have separate <code>FunLike</code> instances anyway, we can use <code>[FunLike F A B] [MonoidHomClass A B] [OrderHomClass A B]</code> whenever we need instead of creating all the cross-insances.</p>",
        "id": 421380202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707892972
    },
    {
        "content": "<p>This way we can have:</p>\n<ul>\n<li>order-related hierarchy;</li>\n<li>algebraic hierarchy;</li>\n<li>topological/metrical/smooth hierarchy;</li>\n</ul>",
        "id": 421380369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707893049
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: some class searches in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10472\">#10472</a> fail, probably because I make more <code>*HomClass</code>es available.</p>",
        "id": 421380401,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707893084
    },
    {
        "content": "<p>It was not possible until the <code>FunLike</code> unbundling, but now that that's done it sounds reasonable to at least try</p>",
        "id": 421394201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707899521
    },
    {
        "content": "<p>I agree we should try this. From my experience during the refactor I'd probably start with definitions that mix sets of variables, like splitting <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarAlgHomClass#doc\">docs#StarAlgHomClass</a> into the <code>Star</code> part and the <code>Alg</code> part that has an extra algebra parameter.</p>",
        "id": 421408067,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707904227
    },
    {
        "content": "<p>I'm going to start with algebraic and ordered hierarchies.</p>",
        "id": 421450135,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707919062
    },
    {
        "content": "<p><code>Mathlib.Algebra.Order.Hom.Monoid</code> is used by surprisingly few files now.</p>",
        "id": 421463693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707922888
    },
    {
        "content": "<p>Is that surprising? I defined it pretty late in the history of mathlib, and by that point we already had <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AbsoluteValue#doc\">docs#AbsoluteValue</a></p>",
        "id": 421464860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707923168
    },
    {
        "content": "<p>How few is \"surprisingly few\"?</p>",
        "id": 421465752,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707923384
    },
    {
        "content": "<p>Less than 10</p>",
        "id": 421465822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707923402
    },
    {
        "content": "<p>transitively or directly?</p>",
        "id": 421465984,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707923433
    },
    {
        "content": "<p>Transitively, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/10544\">#10544</a></p>",
        "id": 421466265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707923508
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/IbKKLV_MvM8yUurH5vr5Twem/mon.pdf\">mon.pdf</a></p>",
        "id": 421466566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707923579
    },
    {
        "content": "<p>I also merged it into <a href=\"https://github.com/leanprover-community/mathlib4/pull/10472\">#10472</a> to see if it helps there.</p>",
        "id": 421466772,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707923629
    },
    {
        "content": "<p>How should I name what's now called <code>OrderMonoidHomClass.toOrderMonoidHom</code> etc?</p>",
        "id": 421550716,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707952986
    },
    {
        "content": "<p>Half-awake guess: <code>OrderMonoidHom.ofClass</code></p>",
        "id": 421550909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707953066
    },
    {
        "content": "<p>I suggest that I don't change names for now, then I change them for all bundled homs at once.</p>",
        "id": 421551694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707953449
    }
]