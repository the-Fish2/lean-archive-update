[
    {
        "content": "<p>This is strange </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.OperatorNorm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- ContinuousLinearMap.hasOpNorm</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"c1\">-- ContinuousLinearMap.hasOpNorm</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 423226292,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708831282
    },
    {
        "content": "<p>I’ve seen this many times, it’s the curse of the operator norm.</p>",
        "id": 423228542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708833561
    },
    {
        "content": "<p>Each time it pulls off a <code>k</code> except the last time we get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">k</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">NonUnitalSeminormedRing.toSeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>On the last one it, it doesn’t try to synthesize this and just puts in a metavariable. It then gets stuck of course</p>",
        "id": 423228969,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708833914
    },
    {
        "content": "<p>First</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.7403</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.7411</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.7404</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7403</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.7411</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.7404</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7401</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7402</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7411</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7403</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7404</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionSemiring.toSemiring</span>\n                    <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">k</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">NonUnitalSeminormedRing.toSeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">)</span>\n                      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">k</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n</code></pre></div>\n<p>and then finally </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.7426</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.7434</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.7427</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">k</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7426</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.7434</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.7427</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7424</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7425</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7434</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7426</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7427</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionSemiring.toSemiring</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 423229227,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708834194
    },
    {
        "content": "<p>Replace <code>k</code> with distinct modules won’t fix it. That is where I came from</p>",
        "id": 423229403,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708834375
    },
    {
        "content": "<p>Aha! <code>trace.Meta.synthPending</code> reports: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthPending</span><span class=\"o\">]</span> <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">nested</span> <span class=\"n\">synthPending</span> <span class=\"n\">invocations</span>\n</code></pre></div>\n<p>Thank goodness this one was plugged in lol</p>",
        "id": 423229866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708834838
    },
    {
        "content": "<p>From <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Context#doc\">docs#Lean.Meta.Context</a></p>\n<blockquote>\n<p>Remark: in the current implementation, <code>synthPending</code> fails if <code>synthPendingDepth &gt; 0</code>.<br>\n   We will add a configuration option if necessary. -/</p>\n</blockquote>",
        "id": 423230198,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708835176
    },
    {
        "content": "<p>I am not sure why we get depth &gt; 0 after 4 copies of <code>k</code> and not less (or more?)</p>",
        "id": 423230257,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708835250
    },
    {
        "content": "<p>It hits that because for <code>k →L[k] k →L[k] k →L[k] k</code> it needs to synth <code>SeminormedAddCommGroup</code> for the last <code>k →L[k] k →L[k] k</code> and then needs to do it again for <code>k  →L[k] k</code> which trips the wire. </p>\n<p>For <code>k →L[k] k →L[k] k</code> it does it once for <code>k →L[k] k</code> and then can figure out the <code>SeminormedAddCommGroup k</code> for the source and target</p>",
        "id": 423230899,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708835852
    },
    {
        "content": "<p>Note: this issue came up for me recently too. Search <code>RegularNormedAlgebra</code></p>",
        "id": 423235707,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708840733
    },
    {
        "content": "<p>Oh. I guess I missed something or I should have suspecting <code>synthPending</code> immediately.</p>",
        "id": 423266617,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708870418
    },
    {
        "content": "<p>Going to test changes to the default <code>synthPendingDepth</code>. Anyone have any good numbers besides 0?</p>",
        "id": 423278229,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708881742
    },
    {
        "content": "<p>1? 100?</p>",
        "id": 423278289,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708881809
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 423278351,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708881846
    },
    {
        "content": "<p>37</p>",
        "id": 423278750,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708882304
    },
    {
        "content": "<p>5077</p>",
        "id": 423281350,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708884812
    },
    {
        "content": "<p>I quickly learned this is the only thing keeping <code>synthInstance</code> from looping</p>",
        "id": 423283708,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708887148
    },
    {
        "content": "<p>this discussion reminds me of <a href=\"https://www.youtube.com/watch?v=0obMRztklqU\">https://www.youtube.com/watch?v=0obMRztklqU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0obMRztklqU\" href=\"https://www.youtube.com/watch?v=0obMRztklqU\"><img src=\"https://uploads.zulipusercontent.net/9a48af37866d0187788c2a66975e7c347ef15921/68747470733a2f2f692e7974696d672e636f6d2f76692f306f624d527a746b6c71552f64656661756c742e6a7067\"></a></div>",
        "id": 423309875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708912842
    }
]