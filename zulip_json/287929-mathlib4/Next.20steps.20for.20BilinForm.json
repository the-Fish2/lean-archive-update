[
    {
        "content": "<p>I've been working on <a href=\"https://github.com/leanprover-community/mathlib4/issues/10553\">https://github.com/leanprover-community/mathlib4/issues/10553</a></p>\n<p>With the following PRs merged</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11032\">https://github.com/leanprover-community/mathlib4/pull/11032</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11057\">https://github.com/leanprover-community/mathlib4/pull/11057</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11078\">https://github.com/leanprover-community/mathlib4/pull/11078</a></li>\n</ul>\n<p>I think we'd be quite close to being able to deprecate / remove the BilinForm structure.</p>\n<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib4/pull/11032\">#11032</a>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> asks: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11032#issuecomment-1970146663\">https://github.com/leanprover-community/mathlib4/pull/11032#issuecomment-1970146663</a></p>\n<blockquote>\n<p>Does anything use the old BilinForm files in this PR after this change? I'd be tempted to update them in place to be about LinearMap.BilinForm, so as to keep the history of the file, like we did with the TensorProduct file.</p>\n</blockquote>\n<p>I think this could work for <code>LinearAlgebra/BilinearForm/DualLattice</code>. I'm less sure what to do about <code>LinearAlgebra/BilinearForm/Properties</code> because several of the concepts in that file not touched by <a href=\"https://github.com/leanprover-community/mathlib4/pull/11032\">#11032</a> (e.g. IsRefl, IsAlt, IsSymm) already have equivalents in LinearAlgebra/SesquilinearForm. (Not quite the same as commutativity of the semi-ring is required there, also some results are missing e.g. <code>IsAlt.add</code>, <code>IsAlt.smul</code>, <code>IsAlt.neg</code> and <code>IsAlt.sub</code>.)</p>\n<p>Any opinions on how we should proceed?</p>\n<p>Thanks.</p>\n<p>Christopher</p>",
        "id": 424750306,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1709587596
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11278\">This</a> is what I've come up with.</p>",
        "id": 425776749,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1710080045
    },
    {
        "content": "<p>One split that looks tempting; I think we should change <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BilinForm#doc\">docs#BilinForm</a> to require <code>CommSemiring R</code> first, as that will collect together all the typeclass changes from that PR</p>",
        "id": 425777393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710080542
    },
    {
        "content": "<p>(ah, which we have already as <a href=\"https://github.com/leanprover-community/mathlib4/tree/bilinear-form-commutative\">branch#bilinear-form-commutative</a>)</p>",
        "id": 425777551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710080647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11280\">https://github.com/leanprover-community/mathlib4/pull/11280</a></p>",
        "id": 425787627,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1710089796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> , what are your thoughts on marking everything in the <code>BilinForm</code> folder as deprecated with links to new version. I think we are at a point now where we really don't want to have any new usage of <code>BilinForm</code> and also want to see that all theorems have a counterpart in the new structure.</p>",
        "id": 427319997,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710734838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Next.20steps.20for.20BilinForm/near/427319997\">said</a>:</p>\n<blockquote>\n<p>want to see that all theorems have a counterpart in the new structure.</p>\n</blockquote>\n<p>If <a href=\"https://github.com/leanprover-community/mathlib4/pull/11280\">https://github.com/leanprover-community/mathlib4/pull/11280</a> gets approved/merged, then I was thinking that the next step would be to open PRs like <a href=\"https://github.com/leanprover-community/mathlib4/pull/9485\">https://github.com/leanprover-community/mathlib4/pull/9485</a> and then see what was left.</p>\n<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> What is your view of the approach in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11280\">https://github.com/leanprover-community/mathlib4/pull/11280</a> ?</p>",
        "id": 427338957,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1710739733
    },
    {
        "content": "<p>I think it is good, I didn't have the time to have a proper look at it, but this is definitively the thing to do</p>",
        "id": 427413314,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710755750
    },
    {
        "content": "<p>Hi. For a project described <a href=\"#narrow/stream/287929-mathlib4/topic/Derivations.20on.20Lie.20algebras\">here</a> (prove that all derivations of a finite dimensional semisimple Lie algebra are inner), I need the lemma <code>restrict_nondegenerate_of_isCompl_orthogonal</code>, which, up to my understanding, was only stated using the old definition of bilinear forms. I pushed <a href=\"https://github.com/leanprover-community/mathlib4/pull/12015\">#12015</a> to transfer this statement to the new definition of bilinear forms. I had to put it in a separate file to avoid a dependency cycle. Could any of you take a look or share thoughts about this? Thanks</p>",
        "id": 432011548,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712592292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674861\">@Frédéric Marbach</span> In the short term, I think the next step is to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/11278\">https://github.com/leanprover-community/mathlib4/pull/11278</a> which will keep all of the existing <code>_root_. BilinForm</code> results but built on top of <code>LinearMap.BilinForm</code>. There'll then be some clean up and consolidation to do.</p>",
        "id": 432034374,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1712598362
    },
    {
        "content": "<p>Oh, indeed it looks great and we wouldn't need my modifications. Do you know why <a href=\"https://github.com/leanprover-community/mathlib4/pull/11278\">#11278</a> is not merged yet? Is there anything in the way?</p>",
        "id": 432052585,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712604659
    },
    {
        "content": "<p>Probably just because it changes a lot of files, and is several hundred lines long.</p>",
        "id": 432053267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604908
    },
    {
        "content": "<p>Possibly <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has been taking a well deserved Easter break - or has been otherwise occupied.</p>",
        "id": 432053472,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1712604968
    },
    {
        "content": "<p>Given the 200+ page PhD thesis that landed in my inbox recently, I know he's been very occupied :-)</p>",
        "id": 432055450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605762
    },
    {
        "content": "<p>Rumour has it, he also has a day job.</p>",
        "id": 432060970,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1712607842
    },
    {
        "content": "<p>Thanks for preparing this PR and merging!</p>\n<p>It seems that there are two definitions of the restriction of a bilinear form to a subspace:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearMap.html#Submodule.restrictBilinear\">Submodule.restrictBilinear</a> </li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearForm/Basic.html#BilinForm.restrict\">BilinForm.restrict</a></li>\n</ul>\n<p>I am running into an issue because two lemmas I need use respectively each of these.</p>\n<p>I can prepare a commit to delete one of these definitions and align everything on the remaining one.  Which one do you want to keep? Both are used in a small number of places (~5 references each). I would probably lean towards keeping <code>BilinForm.restrict</code> because writing <code>B.restrict W</code> feels more natural to me than <code>W.restrict B</code>, but I don't have much experience!</p>",
        "id": 432161639,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712650120
    },
    {
        "content": "<p>It looks like the docs have not yet rebuilt with the latest change</p>",
        "id": 432162394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712650313
    },
    {
        "content": "<p>Well, I linked the docs but both are still in the source code too on the <code>master</code> branch.</p>",
        "id": 432163379,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712650534
    },
    {
        "content": "<p>Well, thanks for making me notice; the docs builds stop every 60 days, and the last such stop was three days ago! I've set them going again for the next two months :)</p>",
        "id": 432168621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712652138
    },
    {
        "content": "<p>And actually, we have <em>three</em> of these definitions, not two!</p>",
        "id": 432168744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712652188
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.LinearMap.domRestrict%E2%82%81%E2%82%82#doc\">docs#LinearMap.domRestrict₁₂</a> is the other one</p>",
        "id": 432168759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712652191
    },
    {
        "content": "<p>Yes. But this last one is for general bi-semi-linear maps <code>M → N → P</code>, while the previous two were really specific to bilinear forms <code>M → M → R</code>.</p>\n<p>I am ready to implement whatever option you think is best concerning these 2/3 definitions.</p>\n<p>In the same way that <code>BilinForm</code> is defined as an abbreviation, could we keep one abbreviation for the restriction of a bilinear form to a subspace? <code>B.restrict W</code> feels better to me than <code>B.domRestrict₁₂ W W</code>.</p>",
        "id": 432179291,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712655036
    },
    {
        "content": "<p><code>Submodule.restrictBilinear</code> should definitely go, we can think about the other two later</p>",
        "id": 432312746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687180
    },
    {
        "content": "<p>Changing the BilinForm one to an <code>abbrev</code> sounds good to me</p>",
        "id": 432312831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712687207
    },
    {
        "content": "<p>It is here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12045\">#12045</a>. I ran into some unexpected weird problems with <code>flip</code> (for which I have no explanation). I think I found an OK solution after a lot of fiddling. The try-and-test was quite painful because of long compile times (probably messing with files quite low in the hierarchy).</p>",
        "id": 432498260,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1712753849
    },
    {
        "content": "<p>I've opened a PR to deprecate a some of the definitions and results which are essentially just the identity following the migration: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12078\">https://github.com/leanprover-community/mathlib4/pull/12078</a></p>",
        "id": 432969094,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1712950134
    },
    {
        "content": "<p>More deprecations: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12112\">https://github.com/leanprover-community/mathlib4/pull/12112</a></p>\n<p>What is the rule / convention for how long a result remains in Mathlib before being removed after deprecation?</p>",
        "id": 433084649,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713048785
    },
    {
        "content": "<p>I would indeed very much like to read a page about how the mathlib community approaches versioning/deprecation with respect to third parties.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Next.20steps.20for.20BilinForm/near/433084649\">said</a>:</p>\n<blockquote>\n<p>What is the rule / convention for how long a result remains in Mathlib before being removed after deprecation?</p>\n</blockquote>",
        "id": 433118811,
        "sender_full_name": "Frédéric Marbach",
        "timestamp": 1713086157
    },
    {
        "content": "<p>I don't think we really have a policy yet</p>",
        "id": 433119990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713087165
    },
    {
        "content": "<p>I have been removing deprecated lemmas that were on my way for other things. Those were deprecated since they were ported over a year ago.</p>",
        "id": 433121582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713088760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Next.20steps.20for.20BilinForm/near/433119990\">said</a>:</p>\n<blockquote>\n<p>I don't think we really have a policy yet</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"674861\">@Frédéric Marbach</span> think this would be a good conversation to start. My wild guess/impression is that one year is presumably uncontroversial, and something between three and six months could be a likely outcome.</p>",
        "id": 433122457,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713089547
    },
    {
        "content": "<p>I'd prefer we land in the 3-6 months range. It would be helpful if there's a consistent method for including a date in the deprecated attribute.</p>",
        "id": 433190123,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713149894
    },
    {
        "content": "<p>Btw, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a> is a wrapper around <code>@[deprecate] alias</code> that makes the date part of the syntax.  If you think that it may be useful, feel free to suggest modifications!</p>",
        "id": 433201724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713158362
    },
    {
        "content": "<p>I'm inclined to close without merging this <a href=\"https://github.com/leanprover-community/mathlib4/pull/11057\">PR</a> unless anyone thinks it's still useful?</p>",
        "id": 436236479,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1714471418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Next.20steps.20for.20BilinForm/near/433201724\">said</a>:</p>\n<blockquote>\n<p>Btw, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a> is a wrapper around <code>@[deprecate] alias</code> that makes the date part of the syntax.  If you think that it may be useful, feel free to suggest modifications!</p>\n</blockquote>\n<p>Since @deprecate in Lean 4.8 allows including a date (in the <code>since</code> field), I think it's easier to just standardise on that.</p>",
        "id": 436274468,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714484468
    }
]