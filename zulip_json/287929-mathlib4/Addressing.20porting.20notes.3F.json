[
    {
        "content": "<p>I'm nearly finished with <code>mono</code>, and was wondering if I should restore the <code>@[mono]</code> attributes which were commented out and left with a porting note. I was about to go through and do it, but then started wondering if this would cause problems with SHA synchronization between mathlib3 and mathlib4, or if that's taken care of by automation.</p>\n<p>In general, if a porting note becomes easy to fix in a completely unambiguous way (e.g. restoring <code>@[mono]</code> now that mono will be available) can it simply be fixed, or is there extra work a human has to do to make the SHA's line up? If so, what's the correct procedure?</p>",
        "id": 341276969,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678626370
    },
    {
        "content": "<p>There's no issue with SHAs because you aren't editing mathlib3 (or synchronizing a mathlib3 PR), so go ahead.</p>",
        "id": 341280418,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678627905
    },
    {
        "content": "<p>just a note, I've restored many of them. see <a href=\"https://github.com/leanprover-community/mathlib4/pull/2491\">https://github.com/leanprover-community/mathlib4/pull/2491</a></p>",
        "id": 341603201,
        "sender_full_name": "Casavaca",
        "timestamp": 1678756183
    },
    {
        "content": "<p>Ok, great, I‚Äôll rebase to master! :)</p>",
        "id": 341606096,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678758090
    },
    {
        "content": "<p>Reviving this topic and making it more general: at the mathlib meeting last Friday there was a discussion about \"technical debt\", part of which seemed to be \"what the heck are we going to do with these thousands of porting notes?\". Sometimes I run into one, saying something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- porting note: in Lean 4 we need this next line for some reason</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and I try deleting the extra line which was added during the port, and the file compiles just fine, because there was some bug or inefficiency somewhere which has since been fixed. On the other hand I would imagine that there are still some porting notes which do apply, and do we have a plan for these? Is the idea to have issues in mathlib or core, and to add a link to the issue for every porting note which is still valid? Or did I misunderstand the plan?</p>",
        "id": 421244930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707831388
    },
    {
        "content": "<p>It would already be extremely helpful to make a pass through many (all?!) porting notes, to see which ones can be removed and which ones still apply.</p>",
        "id": 421245653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707831635
    },
    {
        "content": "<p>A follow-up step would be to categorize the remaining porting notes, and link them (in the code) to issues that need to be addressed.</p>",
        "id": 421245732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707831661
    },
    {
        "content": "<p>But don't you think that we could do both steps in one pass?</p>",
        "id": 421246010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707831759
    },
    {
        "content": "<p>One could change \"porting note\" to \"triaged porting note\" whenever one is linked to an issue</p>",
        "id": 421246079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707831789
    },
    {
        "content": "<p>I took a couple minutes to grab the first porting note ripgrep could find. <a href=\"https://github.com/leanprover-community/mathlib4/pull/10496\">#10496</a></p>",
        "id": 421257652,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707835511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I left a comment.</p>",
        "id": 421258303,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707835716
    },
    {
        "content": "<p>Shall we label these PRs with some GH label?</p>",
        "id": 421261633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836606
    },
    {
        "content": "<p><code>porting-debt</code>?</p>",
        "id": 421261658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707836612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421258303\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> I left a comment.</p>\n</blockquote>\n<p>Ok, more thought that I gave it is required here. <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.2310496.20address.20porting.20notes.20in.20.02klzzwxh.3A0002.03\">#PR reviews &gt; #10496 address porting notes in <code>Order.Grade</code></a></p>",
        "id": 421267690,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707838296
    },
    {
        "content": "<p>There are hundreds of <code>-- Porting note: added</code> such as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: added</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instRingHomClass</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SemiRingCat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">RingHomClass</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingHom.instRingHomClass</span>\n\n<span class=\"c1\">-- porting note: added</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_id</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SemiRingCat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- porting note: added</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SemiRingCat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- porting note: added</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forget_map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">SemiRingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>These should be among the easiest to solve, shouldn't they? How should they be interpreted exactly?</p>",
        "id": 421273455,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707839781
    },
    {
        "content": "<p>Presumably, if removing the corresponding lemma still builds mathlib, it should be fine to remove them!</p>",
        "id": 421274088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707839938
    },
    {
        "content": "<p>I would add the caveat that it should disproportionately slow down the build also. Though this applies mainly to <code>instance</code>'s that were added.</p>",
        "id": 421274572,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707840056
    },
    {
        "content": "<p>don‚Äôt these specific porting notes just mean that they are new additions relative to the pre-porting status and adding during the porting process? So you should probably only remove the comments but leave the results in?</p>",
        "id": 421274756,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707840102
    },
    {
        "content": "<p>I think it depends on the context. Often these are added because other things did not fire but that context is lost between the porting and the note</p>",
        "id": 421275012,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707840165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421274756\">said</a>:</p>\n<blockquote>\n<p>don‚Äôt these specific porting notes just mean that they are new additions relative to the pre-porting status and adding during the porting process? So you should probably only remove the comments but leave the results in?</p>\n</blockquote>\n<p>Yes, I was referring to the deletion of the comments <code>-- Porting note: added</code>, but I wasn't sure I interpreted correctly.</p>",
        "id": 421275085,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707840184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421275012\">said</a>:</p>\n<blockquote>\n<p>I think it depends on the context. Often these are added because other things did not fire but that context is lost between the porting and the note</p>\n</blockquote>\n<p>Ok, so what should be the exact procedure to test the relevance of comments and / or their corresponding code chunks and the consequent possibility to remove them?</p>\n<p>I'd be happy to help cleaning it all up.</p>",
        "id": 421275602,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707840299
    },
    {
        "content": "<p>For me</p>\n<ul>\n<li>never add <code>instance</code>s if you can avoid it. As corollary, remove them when you can (assuming you don't break things and <code>!bench</code> is not terrible)</li>\n<li><code>theorem</code>s and <code>def</code>s should probably be given some thought assuming the porting note didn't provide adequate explanation. Feel to ask here if a particular declaration is unclear.</li>\n</ul>",
        "id": 421278576,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707841060
    },
    {
        "content": "<p>In the example above, I am guessing the first is needed because typeclass inference didn't find in Lean 4. For the last three, there is probably some more general declaration for <code>ConcreteCategory</code>'s that should applicable but did not fire in Lean 4.</p>",
        "id": 421279150,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707841212
    },
    {
        "content": "<p>When removing the porting notes, we should also be sure to collect examples of issues to document them better</p>",
        "id": 421279335,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707841267
    },
    {
        "content": "<p>Eg in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10496\">#10496</a>, I vaguely remember there was an problem updating <code>BinderInfo</code> and declaring new things in the same line. Is there an issue for this already?</p>",
        "id": 421279636,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707841349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421278576\">said</a>:</p>\n<blockquote>\n<p>never add <code>instance</code>s if you can avoid it. As corollary, remove them when you can (assuming you don't break things and <code>!bench</code> is not terrible)</p>\n</blockquote>\n<p>In order to test if I can remove a given <code>istance</code> should I always re-build the whole project?</p>",
        "id": 421281083,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707841782
    },
    {
        "content": "<p>Then comment <code>!bench</code> on a Github PR (for performance impact)</p>",
        "id": 421281223,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707841817
    },
    {
        "content": "<p>There are also several <code>-- Porting note: Removed:</code> such as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Removed:</span>\n<span class=\"c1\">-- include G</span>\n</code></pre></div>\n<p>These can be safely removed, right?</p>",
        "id": 421283584,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707842602
    },
    {
        "content": "<p>Yes, all references to <code>include</code> and <code>omit</code> should just go</p>",
        "id": 421283645,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707842627
    },
    {
        "content": "<p>I don't think you should remove things just because they're tagged with \"added\" comments</p>",
        "id": 421283865,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707842683
    },
    {
        "content": "<p>Those were mostly to aid review of the port or to help when forward-porting later changes in mathlib3 to mathlib4</p>",
        "id": 421284031,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707842729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421283645\">said</a>:</p>\n<blockquote>\n<p>Yes, all references to <code>include</code> and <code>omit</code> should just go</p>\n</blockquote>\n<p>I've just opened a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10503\">#10503</a>) to remove a bunch of those.</p>",
        "id": 421285822,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707843320
    },
    {
        "content": "<p>Probably clear, but please only address one category of porting notes per PR.</p>",
        "id": 421285852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707843330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421285852\">said</a>:</p>\n<blockquote>\n<p>Probably clear, but please only address one category of porting notes per PR.</p>\n</blockquote>\n<p>BTW, should have I used the <code>chore</code> keyword?</p>\n<p>[I'm sorry, kind of new with this]</p>",
        "id": 421286527,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707843553
    },
    {
        "content": "<p>Yes, that's probably better - this isn't about documentation</p>",
        "id": 421286626,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707843589
    },
    {
        "content": "<p>We're not super pedantic about commit messages, unlike with everything else ;)</p>",
        "id": 421286777,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707843625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421286626\">said</a>:</p>\n<blockquote>\n<p>Yes, that's probably better - this isn't about documentation</p>\n</blockquote>\n<p>Fixed. Sorry. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421286777\">said</a>:</p>\n<blockquote>\n<p>We're not super pedantic about commit messages, unlike with everything else <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>No problem at all with pedantry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 421287016,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1707843705
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10509\">#10509</a> looked like it might be fun but seems to have fixed itself</p>",
        "id": 421308954,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707851562
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10510\">#10510</a> is actually easy :)</p>",
        "id": 421310885,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707852314
    },
    {
        "content": "<p>Another <code>include</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10516\">#10516</a></p>",
        "id": 421340962,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1707865974
    },
    {
        "content": "<p>Given the trend, I'm going to open a PR removing all the <code>include/omit</code> porting notes.</p>",
        "id": 421342495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707866776
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10517\">#10517</a> (does not include the removed <code>include</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10510\">#10510</a>)</p>",
        "id": 421343518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707867354
    },
    {
        "content": "<p>I added comments referencing <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean#2452</a> for the last two PRs and delegated</p>",
        "id": 421345616,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707868625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10557\">#10557</a> - someone left a to-do inside a porting note. It seems fine as a to-do alone</p>",
        "id": 421525511,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707941933
    },
    {
        "content": "<p>I've noticed there are hundreds of <code>Porting note: simp can prove this</code> such as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">non_unital_alg_hom.map_smul</span> <span class=\"n\">NonUnitalAlgHom.map_smul</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">non_unital_alg_hom.map_add</span> <span class=\"n\">NonUnitalAlgHom.map_add</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">non_unital_alg_hom.map_mul</span> <span class=\"n\">NonUnitalAlgHom.map_mul</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_zero</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">non_unital_alg_hom.map_zero</span> <span class=\"n\">NonUnitalAlgHom.map_zero</span>\n</code></pre></div>\n<p>What's the best way to solve them?</p>",
        "id": 421689395,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708013520
    },
    {
        "content": "<p>Remove them</p>",
        "id": 421689494,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1708013537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421689494\">said</a>:</p>\n<blockquote>\n<p>Remove them</p>\n</blockquote>\n<p>Thank you. I'm going to open a PR solving them.</p>",
        "id": 421689651,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708013578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421689494\">said</a>:</p>\n<blockquote>\n<p>Remove them</p>\n</blockquote>\n<p>The lemmas or the comments?</p>",
        "id": 421689784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013612
    },
    {
        "content": "<p>I wonder if we want a <code>@[simp_can_prove_this]</code> attribute that causes a lint failure if for some reason a lemma can no longer be proven by <code>simp</code> (prompting the user to add <code>simp</code> back)</p>",
        "id": 421689991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421689784\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421689494\">said</a>:</p>\n<blockquote>\n<p>Remove them</p>\n</blockquote>\n<p>The lemmas or the comments?</p>\n</blockquote>\n<p>The point of <code>FunLike</code> and the hom classes was to remove the lemmas, but you definitely can remove just the comments as a first pass.</p>",
        "id": 421690177,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1708013708
    },
    {
        "content": "<p>To be clear, you're very specifically talking about the <code>map_$foo</code> lemmas with <code>simp can prove this</code>, not the general case of <code>simp can prove this</code>?</p>",
        "id": 421690355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013752
    },
    {
        "content": "<p>Yes, the general case is not so easy to diagnose</p>",
        "id": 421690502,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1708013785
    },
    {
        "content": "<p>One thing I'm curious about is whether making these <code>simp</code> lemmas anyway improves performance</p>",
        "id": 421690548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013794
    },
    {
        "content": "<p>Because in theory it would skip a typeclass search</p>",
        "id": 421690602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> I would like to discuss this a bit more before moving to action.</p>",
        "id": 421691893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708014145
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>'s suggestion of a special attribute makes sense. And also the investigation whether maybe we want to mark them as <code>simp</code> anyways, with a (special/dedicated?) nolint.</p>",
        "id": 421692083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708014194
    },
    {
        "content": "<p>So this will require a bit of investigating, to settle on the best solution.</p>",
        "id": 421692190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708014222
    },
    {
        "content": "<p>An immediate version of the special simp-attribute could be to prove the lemma with <code>simp</code>.</p>",
        "id": 421692301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708014244
    },
    {
        "content": "<p>You will definitely see if <code>simp</code> no longer proves the lemma!</p>",
        "id": 421692421,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708014269
    },
    {
        "content": "<p>Maybe we could have a <code>by_simp (statement) :=</code> syntax that expands to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"o\">(</span><span class=\"n\">statement</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 421692758,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708014366
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_lemma</span> <span class=\"o\">(</span><span class=\"n\">statement</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421693062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708014442
    },
    {
        "content": "<p>So, <code>simp_lemma</code> makes me think that the result has the <code>simp</code> attribute.  I was not going that far, I was simply thinking of \"a lemma the simp proves\".  Either works.</p>",
        "id": 421693505,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708014553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421692301\">said</a>:</p>\n<blockquote>\n<p>An immediate version of the special simp-attribute could be to prove the lemma with <code>simp</code>.</p>\n</blockquote>\n<p>Just verified that <code>simp</code> proves all of them: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">--   map_smul _ _ _</span>\n<span class=\"c1\">-- #align non_unital_alg_hom.map_smul NonUnitalAlgHom.map_smul</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">--   map_add _ _ _</span>\n<span class=\"c1\">-- #align non_unital_alg_hom.map_add NonUnitalAlgHom.map_add</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">--   map_mul _ _ _</span>\n<span class=\"c1\">-- #align non_unital_alg_hom.map_mul NonUnitalAlgHom.map_mul</span>\n\n<span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">--   map_zero _</span>\n<span class=\"c1\">-- #align non_unital_alg_hom.map_zero NonUnitalAlgHom.map_zero</span>\n</code></pre></div>",
        "id": 421693882,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708014651
    },
    {
        "content": "<p>These in particular should also get a <code>@[deprecated]</code>, I think</p>",
        "id": 421695698,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708015097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421695698\">said</a>:</p>\n<blockquote>\n<p>These in particular should also get a <code>@[deprecated]</code>, I think</p>\n</blockquote>\n<p>Something like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çô‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 421696412,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708015308
    },
    {
        "content": "<p>How does this look?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"sd\">/-- `simp_lemma name signature` introduces a lemma called `name` with</span>\n<span class=\"sd\">signature `signature` and proves it with `by simp`. -/</span>\n<span class=\"n\">macro</span> <span class=\"n\">dm</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"s2\">\"simp_lemma \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">dm</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- I can have docs too! -/</span>\n<span class=\"n\">simp_lemma</span> <span class=\"n\">ofCourse</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ofCourse</span>\n\n<span class=\"sd\">/-- The `simpNF` linter does not complain -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">nolint</span> <span class=\"n\">simpNF</span><span class=\"kd\">]</span> <span class=\"n\">simp_lemma</span> <span class=\"n\">not_linted</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 421705002,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708017869
    },
    {
        "content": "<p>(This implementation does not actually place the <code>simp</code> attribute.)</p>",
        "id": 421705041,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708017891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421692301\">said</a>:</p>\n<blockquote>\n<p>An immediate version of the special simp-attribute could be to prove the lemma with <code>simp</code>.</p>\n</blockquote>\n<p>I think for these lemmas, it's helpful to have the trivial non-simp proof. If the  point in the attribute is to verify that <code>simp</code> can still prove the lemma, <code>by simp</code> is not going to be a very helpful proof if in future <code>simp</code> is no longer capable!</p>",
        "id": 421708752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708019191
    },
    {
        "content": "<p>I would suggest <em>not</em> deprecating right now. It would be nice to know if there is a significant performance hit (although we'll only know if many proofs use the specific versions) to the general versions. The best way to test this would be to deprecate all such lemmas simultaenously in one PR and bench it.</p>",
        "id": 421718332,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708022694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421718332\">said</a>:</p>\n<blockquote>\n<p>The best way to test this would be to deprecate all such lemmas simultaenously in one PR and bench it.</p>\n</blockquote>\n<p>Ok, so I 'd just need to add <code>@[deprecated]</code> (as in the <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421696412\">code chunk above</a>) in all code chunks of the form: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- @[simp] -- Porting note: simp can prove this</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_name</span> <span class=\"o\">(</span><span class=\"n\">statement</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n</code></pre></div>\n<p>and then open a PR commenting with <code>!bench</code>, right?</p>",
        "id": 421719839,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708023241
    },
    {
        "content": "<p>Why would marking them deprecated affect performance? Isn't the relevant benchmark adding back <code>@[simp]</code> to them and seeing if that speeds things up?</p>",
        "id": 421721750,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708023929
    },
    {
        "content": "<p>Replacing the deprecated versions by the non-deprecated versions could be slower</p>",
        "id": 421722162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708024074
    },
    {
        "content": "<p><del>Opened a PR with <code>!bench</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/10604\">#10604</a></del></p>",
        "id": 421726358,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708025643
    },
    {
        "content": "<p>I was thinking that marking them deprecated would mean that they could no longer be used in Mathlib (which is true), but <span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span> is correct; the relevant question is whether there is a speedup if we were to mark them <code>@[simp, no lint simpNF]</code>. Since they're not firing currently, I'm less inclined to care about this. What do you think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 421727653,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708026118
    },
    {
        "content": "<p>Maybe we should dedicate different topics to different kinds of porting notes to make it all more readable and more efficient.</p>",
        "id": 421735298,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708028964
    },
    {
        "content": "<p>Right -- although I'm not an expert in this kind of project management, I was wondering whether one preliminary approach would be that for each \"type\" of porting note, a mathlib issue is created, and a preliminary procedure could be going through the library adding \"see issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/12345\">#12345</a>\" or whatever the relevant issue number is, to each one.</p>",
        "id": 421735743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708029164
    },
    {
        "content": "<p>I think replacing <code>-- porting note: foo</code> with <code>-- porting note (\\#12345): foo</code> would certainly improve the situation</p>",
        "id": 421736856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708029636
    },
    {
        "content": "<p>(the <code>\\</code> is there to stop Zulip being annoying, we don't actually want it in the comment)</p>",
        "id": 421736986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708029696
    },
    {
        "content": "<p>Github issues or <a href=\"https://docs.github.com/en/discussions/quickstart\">discussions</a>?</p>",
        "id": 421737187,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708029777
    },
    {
        "content": "<p>Issues</p>",
        "id": 421737939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708030106
    },
    {
        "content": "<p>If it's ok I could start writing issues (maybe with <code>porting-notes</code> label?) for the most frequent \"types\" of porting notes such as: </p>\n<ul>\n<li><code>-- Porting note: was X</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>600</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 600</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">600</span></span></span></span> occurrences in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>300</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 300</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">300</span></span></span></span> files)</li>\n<li><code>-- Porting note: added</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>600</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 600</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">600</span></span></span></span> occurrences in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>300</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 300</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">300</span></span></span></span> files)</li>\n<li><code>-- Porting note: simp can prove this</code>(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>300</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 300</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">300</span></span></span></span> occurrences in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span> files)</li>\n<li>etc.</li>\n</ul>",
        "id": 421738863,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708030465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421708752\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421692301\">said</a>:</p>\n<blockquote>\n<p>An immediate version of the special simp-attribute could be to prove the lemma with <code>simp</code>.</p>\n</blockquote>\n<p>I think for these lemmas, it's helpful to have the trivial non-simp proof. If the  point in the attribute is to verify that <code>simp</code> can still prove the lemma, <code>by simp</code> is not going to be a very helpful proof if in future <code>simp</code> is no longer capable!</p>\n</blockquote>\n<p>I thought that one of the issues was to make sure that <code>simp</code> kept proving the lemma.  If that fails due to some refactor, then building mathlib will pick it up and the declaration can be fixed.</p>\n<p>As for using a custom proof, that is easy to fix: the macro can take</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_lemma</span> <span class=\"n\">name</span> <span class=\"n\">statement</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n</code></pre></div>\n<p>and expand to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">statement</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">name</span> <span class=\"n\">statement</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n</code></pre></div>",
        "id": 421738923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708030489
    },
    {
        "content": "<p>Would it make sense to collect these different porting note issues in a tracking issue or github project?</p>",
        "id": 421747145,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708033911
    },
    {
        "content": "<p>I think <code>added</code> and <code>was X</code> are not particularly interesting unless grouped by the thing that they added / remove</p>",
        "id": 421752426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708036473
    },
    {
        "content": "<p>Here is the issue related to <code>simp can prove this</code>: <a href=\"https://github.com/leanprover-community/mathlib4/issues/10618\">https://github.com/leanprover-community/mathlib4/issues/10618</a></p>",
        "id": 421752496,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708036523
    },
    {
        "content": "<p>I edited your description slightly; note that if you paste raw permalinks, you get an embedded code block</p>",
        "id": 421753693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708037157
    },
    {
        "content": "<p>Here is the associated <a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">PR</a> adding the issue number as suggested by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> above.</p>",
        "id": 421754370,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708037471
    },
    {
        "content": "<p>I've reviewed and flagged the four instances which are not like the other 300 or so.</p>",
        "id": 421758702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708039421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421758702\">said</a>:</p>\n<blockquote>\n<p>I've reviewed and flagged the four instances which are not like the other 300 or so.</p>\n</blockquote>\n<p>Have you seen these two? <a href=\"https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619\">https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619</a></p>",
        "id": 421758868,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708039515
    },
    {
        "content": "<p>PS: There are merge conflicts, but I don't have write permission so I can't directly resolve them.</p>",
        "id": 421759190,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708039679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421692758\">said</a>:</p>\n<blockquote>\n<p>Maybe we could have a <code>by_simp (statement) :=</code> syntax that expands to</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"o\">(</span><span class=\"n\">statement</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Please don't do this. It unnecessarily makes Mathlib a mutually unintelligible dialect of Lean. This is what attributes are for.</p>",
        "id": 421760084,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708040215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421758868\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421758702\">said</a>:</p>\n<blockquote>\n<p>I've reviewed and flagged the four instances which are not like the other 300 or so.</p>\n</blockquote>\n<p>Have you seen these two? <a href=\"https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619\">https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619</a></p>\n</blockquote>\n<p>Yes, I would include those two. When we got these issues during the port, the linter would explain how to prove the lemmas using <code>simp</code>, and it looks like sometimes people decided to include the proofs. I don't see any reason to keep the proofs, they are easily regenerated by running <code>simp?</code> so you can just normalise them so they look like the others. That's my 2c anyway.</p>",
        "id": 421760295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708040362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421760295\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421758868\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421758702\">said</a>:</p>\n<blockquote>\n<p>I've reviewed and flagged the four instances which are not like the other 300 or so.</p>\n</blockquote>\n<p>Have you seen these two? <a href=\"https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619\">https://github.com/leanprover-community/mathlib4/pull/10619#issuecomment-1947480619</a></p>\n</blockquote>\n<p>Yes, I would include those two. </p>\n</blockquote>\n<p>Done.</p>",
        "id": 421760835,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708040656
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/blob/4b36afcf085586739aa4e59d507a7d01d9a2dbbf/Mathlib/Algebra/Category/GroupWithZeroCat.lean#L55-L62\">this case</a> and <a href=\"https://github.com/leanprover-community/mathlib4/blob/4b36afcf085586739aa4e59d507a7d01d9a2dbbf/Mathlib/Algebra/Category/GroupWithZeroCat.lean#L92\">this case</a> <code>was not necessary in mathlib</code> seems to mean that Lean 4 does less work to see through definitional equalities when looking for instances.</p>\n<p>I've commented the first instance out and it seems to be really needed since it returns errors, while the second one doesn't give any error when commented out.</p>\n<p>Should I remove the porting note comment for the first instance and remove the whole second instance?</p>",
        "id": 421930836,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708114058
    },
    {
        "content": "<p>My instinct is that if you've found a porting note saying \"this wasn't needed in Lean 3 but now it's needed\", and it is not needed any more (because of a bugfix in Lean 4) then you should triumphantly remove it and make a PR. CI will check to see that mathlib compiles, and if the experts say \"aah but we should have this thing anyway because of XYZ\" then you can still remove the porting note because the reason it's there is not because of a regression (which is what we're hunting down here) but something else (and hence it has nothing to do with porting).</p>",
        "id": 421941074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708118864
    },
    {
        "content": "<p>Here is the PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10646\">#10646</a>. </p>\n<p>All checks have passed.</p>\n<p>Merged.</p>",
        "id": 421952124,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708124551
    },
    {
        "content": "<p>New PR removing the <code>was not necessary</code> porting note comments related to instances, lemmas or tactics that seem to be really needed (i.e. return errors when commented out): <a href=\"https://github.com/leanprover-community/mathlib4/pull/10669\">#10669</a>.</p>",
        "id": 422039429,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708200631
    },
    {
        "content": "<p>I'm confused by your approach here. The notes are there exactly because the code is really needed, so that's not an argument to remove them. The goal of these notes was that we'd come back to them and investigate why the code is needed in lean 4 when it wasn't in lean 3 and potentially to improve lean 4 so we again wouldn't need it</p>",
        "id": 422040119,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708201376
    },
    {
        "content": "<p>Oh, I see. I erroneously believed that the task of \"addressing\" / \"solving\" those porting notes entailed verifying the necessity of the associated code.</p>\n<p>I've just closed the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10669\">#10669</a> and opened the issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a> with related PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a> as <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/421754370\">above</a>.</p>",
        "id": 422040521,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708201789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/422040119\">said</a>:</p>\n<blockquote>\n<p>The notes are there exactly because the code is really needed</p>\n</blockquote>\n<p>The true version is \"because the author <em>thought</em> the code was needed <em>at some point in time</em>\".<br>\nSometimes the code wasn't needed at all and stemmed from porter confusion;<br>\nsometimes it was needed when porting the file began, but became defunct by the time it was merged;<br>\nand in many cases, it was needed at the time it was first ported, but later Lean versions have made it defunct much more recently.</p>",
        "id": 422048709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708210328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span>, I don't think it's currently worth going to the trouble of filing issues for a single porting note; the ones that appear 5 or more times are probably more interesting to track</p>",
        "id": 422048851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708210545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/422048851\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span>, I don't think it's currently worth going to the trouble of filing issues for a single porting note; the ones that appear 5 or more times are probably more interesting to track</p>\n</blockquote>\n<p>Do you think it might be a good idea to group all the ‚ÄúX was not necessary‚Äù under the same issue?</p>",
        "id": 422048994,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708210699
    },
    {
        "content": "<p><strong>Update</strong></p>\n<table>\n<thead>\n<tr>\n<th>\"Type\"</th>\n<th>Issue</th>\n<th>PR</th>\n<th>No. Results</th>\n<th>No. Files</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>simp</code> can prove / simplify this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10618\">#10618</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">#10619</a></td>\n<td>476</td>\n<td>186</td>\n</tr>\n<tr>\n<td><code>instance</code> was not necessary (category theory)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a></td>\n<td>12</td>\n<td>6</td>\n</tr>\n<tr>\n<td><code>dsimp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10675\">#10675</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10676\">#10676</a></td>\n<td>28</td>\n<td>13</td>\n</tr>\n<tr>\n<td><code>dsimp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10685\">#10685</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10686\">#10686</a></td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td>was <code>rw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10691\">#10691</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10692\">#10692</a></td>\n<td>13</td>\n<td>8</td>\n</tr>\n<tr>\n<td>added to ease automation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10688\">#10688</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10689\">#10689</a></td>\n<td>22</td>\n<td>15</td>\n</tr>\n<tr>\n<td>added to speed up elaboration</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10694\">#10694</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10695\">#10695</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>",
        "id": 422102339,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708267043
    },
    {
        "content": "<p>Where are the thousands of other porting notes? I still have no real feeling what we're looking at here -- is it hundreds of different problems or can they be characterised into a small number of general classes?</p>",
        "id": 422106094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708270096
    },
    {
        "content": "<p>What's the point of opening both an issue and a PR?</p>",
        "id": 422107731,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1708271855
    },
    {
        "content": "<p>The issue is the main event, the PR is just \"add some references to the issue\"</p>",
        "id": 422108362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708272455
    },
    {
        "content": "<p>Having the PRs be self-referential would just be confusing, especially if we add extra notes to the same categorization later</p>",
        "id": 422108442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708272505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/422106094\">said</a>:</p>\n<blockquote>\n<p>Where are the thousands of other porting notes?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>grep<span class=\"w\"> </span>-r<span class=\"w\"> </span>-h<span class=\"w\"> </span>-o<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">\"[pP]orting note: .*\"</span><span class=\"w\"> </span>Mathlib<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sort<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>uniq<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l\n<span class=\"m\">4654</span>\n</code></pre></div>\n<p>so most of them are unique</p>",
        "id": 422108769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708272811
    },
    {
        "content": "<p>Once we have an issue, are keeping <code>porting note</code> in the file?</p>",
        "id": 422108839,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708272854
    },
    {
        "content": "<p>1066 of them are about <code>simp</code></p>",
        "id": 422109079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708273090
    },
    {
        "content": "<p>I'm not at all sure what the optimal aggregation level is supposed to be. </p>\n<p>Among the biggest clusters we can find:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>600</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 600</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">600</span></span></span></span> <code>added</code> or <code>added for reason X</code> or <code>added Y</code> or equivalent (maybe requires expert / porter judgment?)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>400</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 400</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">400</span></span></span></span> <code>removed</code> or <code>removed for reason X</code> or <code>removed Y</code> or equivalent (maybe requires expert / porter judgment?)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚âà</mo><mn>600</mn></mrow><annotation encoding=\"application/x-tex\">\\approx 600</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mrel\">‚âà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">600</span></span></span></span> <code>was</code> or <code>was X</code> that I suspect should be subcategorised to facilitate resolution</li>\n</ul>",
        "id": 422109540,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708273513
    },
    {
        "content": "<p>Might it be that the finer the classification the easier and faster will be to solve?</p>",
        "id": 422109725,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708273681
    },
    {
        "content": "<p>Consider, for example, the <code>added</code> keyword. </p>\n<p>Should we categorise: </p>\n<ul>\n<li>by purpose (e.g. <code>added to speed up elaboration</code>, <code>added to ease automation</code>, etc.)? </li>\n<li>by topic or Mathlib folder structure (e.g. <code>Algebra</code>, <code>Analysis</code>, etc.)?  </li>\n<li>by tactic (e.g. <code>added simp</code>, <code>added rw</code>, etc.)?</li>\n<li>by declaration (e.g. <code>added lemma</code>,  <code>added instance</code>, etc.)?</li>\n</ul>",
        "id": 422110695,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708274413
    },
    {
        "content": "<p>I noticed that there are duplicates of <code>le_iSup</code> and <code>iInf_le</code> that may be artifacts from the port. Should these be removed? <a href=\"https://github.com/leanprover-community/mathlib4/blob/25c2e96a350d027a9373ce86cfe8156018b9c2f3/Mathlib/Order/CompleteLattice.lean#L826-L844\">Order/CompleteLattice.lean:L826-L844</a></p>",
        "id": 422115945,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1708278973
    },
    {
        "content": "<p>Seems like there are more duplicated theorems due to the removal of the <code>ematch</code> attribute (<code>le_sup_left</code>, <code>le_sup_right</code>, <code>inf_le_left</code>,  <code>inf_le_right</code>).</p>",
        "id": 422116149,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1708279124
    },
    {
        "content": "<p>I see a good number (edit: ~85)  of <code>porting note: todo X</code> where <code>X</code> is a task independent of the port. These should be changed to <code>TODO ...</code></p>",
        "id": 422116333,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708279256
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10697\">#10697</a> removes one such that is not independent of porting. See the comment in the PR message for the sanity check.</p>",
        "id": 422117901,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708280545
    },
    {
        "content": "<p>In the class \"lemma was not necessary (category theory)\", there are only simp/ext lemmas which could be together in the class \"added to ease automation\".</p>",
        "id": 422187689,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1708333166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Jo√´l Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/422187689\">said</a>:</p>\n<blockquote>\n<p>In the class \"lemma was not necessary (category theory)\", there are only simp/ext lemmas which could be together in the class \"added to ease automation\".</p>\n</blockquote>\n<p>Done <a href=\"https://github.com/leanprover-community/mathlib4/pull/10674\">#10674</a>. I closed the associated issue.</p>",
        "id": 422219899,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708344564
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>\"Type\"</th>\n<th>Issue</th>\n<th>PR</th>\n<th>No. Results</th>\n<th>No. Files</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>simp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10618\">#10618</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">#10619</a></td>\n<td>566</td>\n<td>200</td>\n</tr>\n<tr>\n<td><code>dsimp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10685\">#10685</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10686\">#10686</a></td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td><code>simp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10959\">#10959</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10960\">#10960</a></td>\n<td>19</td>\n<td>9</td>\n</tr>\n<tr>\n<td><code>dsimp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10675\">#10675</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10676\">#10676</a></td>\n<td>28</td>\n<td>13</td>\n</tr>\n<tr>\n<td>need <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10971\">#10971</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10972\">#10972</a></td>\n<td>15</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>rw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10691\">#10691</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10692\">#10692</a></td>\n<td>13</td>\n<td>8</td>\n</tr>\n<tr>\n<td>was <code>simp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10745\">#10745</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10746\">#10746</a></td>\n<td>46</td>\n<td>32</td>\n</tr>\n<tr>\n<td>was <code>dsimp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10934\">#10934</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10935\">#10935</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>tidy</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10936\">#10936</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10937\">#10937</a></td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>added proof</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10888\">#10888</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10889\">#10889</a></td>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>added <code>instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10754\">#10754</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10755\">#10755</a></td>\n<td>50</td>\n<td>25</td>\n</tr>\n<tr>\n<td>added <code>lemma</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10756\">#10756</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10757\">#10757</a></td>\n<td>40</td>\n<td>12</td>\n</tr>\n<tr>\n<td>added <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>added to ease automation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10688\">#10688</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10689\">#10689</a></td>\n<td>23</td>\n<td>16</td>\n</tr>\n<tr>\n<td>added to speed up elaboration</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10694\">#10694</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10695\">#10695</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>added to clean up types</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>removed <code>@[nolint has_nonempty_instance]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10927\">#10927</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10929\">#10929</a></td>\n<td>43</td>\n<td>27</td>\n</tr>\n<tr>\n<td><code>instance</code> was not necessary (category theory)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a></td>\n<td>12</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>",
        "id": 423202611,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708807605
    },
    {
        "content": "<p>Related PRs ready to be merged: </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10929\">#10929</a> classifies <code>removed @[nolint has_nonempty_instance]</code> notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10931\">#10931</a> fixes misspelled \"porting note\"</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10930\">#10930</a> classifies more <code>simp can prove this</code> notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10935\">#10935</a> classifies <code>was dsimp</code> or <code>used to be dsimp</code> notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10937\">#10937</a> classifies <code>was tidy</code> or <code>used to be tidy</code> notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10959\">#10959</a> classifies <code>simp cannot prove this</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10972\">#10972</a> classifies <code>need dsimp only</code></li>\n</ul>",
        "id": 423202852,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708807871
    },
    {
        "content": "<p>I was under the impression that there were about 8000 porting notes but when I search for them I find nearer 2000. Am I doing something wrong?</p>",
        "id": 423204386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708809571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/423204386\">said</a>:</p>\n<blockquote>\n<p>I was under the impression that there were about 8000 porting notes but when I search for them I find nearer 2000. Am I doing something wrong?</p>\n</blockquote>\n<p>We have almost 800 classified notes and about 7100 still to be classified.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How are you searching for them?</p>",
        "id": 423204557,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1708809729
    },
    {
        "content": "<p>Some are upper case and some lower</p>",
        "id": 423210747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708815467
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>\"Type\"</th>\n<th>Issue</th>\n<th>PR</th>\n<th>No. Results</th>\n<th>No. Files</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>simp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10618\">#10618</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">#10619</a></td>\n<td>566</td>\n<td>200</td>\n</tr>\n<tr>\n<td><code>dsimp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10685\">#10685</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10686\">#10686</a></td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td><code>simp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10959\">#10959</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10960\">#10960</a></td>\n<td>19</td>\n<td>9</td>\n</tr>\n<tr>\n<td><code>dsimp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10675\">#10675</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10676\">#10676</a></td>\n<td>28</td>\n<td>13</td>\n</tr>\n<tr>\n<td>need <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10971\">#10971</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10972\">#10972</a></td>\n<td>15</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>rw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10691\">#10691</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10692\">#10692</a></td>\n<td>13</td>\n<td>8</td>\n</tr>\n<tr>\n<td>was <code>simp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10745\">#10745</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10746\">#10746</a></td>\n<td>46</td>\n<td>32</td>\n</tr>\n<tr>\n<td>was <code>dsimp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10934\">#10934</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10935\">#10935</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>tidy</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10936\">#10936</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10937\">#10937</a></td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>was <code>decide!</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11043\">#11043</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11044\">#11044</a></td>\n<td>17</td>\n<td>6</td>\n</tr>\n<tr>\n<td>added proof</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10888\">#10888</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10889\">#10889</a></td>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>added <code>instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10754\">#10754</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10755\">#10755</a></td>\n<td>50</td>\n<td>25</td>\n</tr>\n<tr>\n<td>added <code>lemma</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10756\">#10756</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10757\">#10757</a></td>\n<td>40</td>\n<td>12</td>\n</tr>\n<tr>\n<td>added <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>added to ease automation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10688\">#10688</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10689\">#10689</a></td>\n<td>23</td>\n<td>16</td>\n</tr>\n<tr>\n<td>added to speed up elaboration</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10694\">#10694</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10695\">#10695</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>added to clean up types</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>removed <code>@[nolint has_nonempty_instance]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10927\">#10927</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10929\">#10929</a></td>\n<td>43</td>\n<td>27</td>\n</tr>\n<tr>\n<td><code>instance</code> was not necessary (category theory)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a></td>\n<td>12</td>\n<td>6</td>\n</tr>\n<tr>\n<td>broken dot notation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11036\">#11036</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11038\">#11038</a></td>\n<td>28</td>\n<td>4</td>\n</tr>\n<tr>\n<td>broken proof was</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11039\">#11039</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11040\">#11040</a></td>\n<td>13</td>\n<td>3</td>\n</tr>\n<tr>\n<td>broken ext</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11041\">#11041</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11042\">#11042</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>",
        "id": 423782742,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1709114272
    },
    {
        "content": "<p>I also just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11034\">#11034</a></p>",
        "id": 423782981,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1709114355
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11037\">#11037</a> mimicking <a href=\"https://github.com/leanprover-community/mathlib4/pull/11034\">#11034</a>. (And just accepted the review suggestions.)</p>",
        "id": 423793309,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709117762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/423782981\">said</a>:</p>\n<blockquote>\n<p>I also just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11034\">#11034</a></p>\n</blockquote>\n<p>Shouldn't <code>le_sup_left'</code> and other duplicate theorems be deprecated (or removed) in <code>Order.Lattice</code>? It looked like the only reason they existed was for <code>[ematch]</code>.</p>",
        "id": 423840947,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1709133523
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>\"Type\"</th>\n<th>Issue</th>\n<th>PR</th>\n<th>No. Results</th>\n<th>No. Files</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>simp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10618\">#10618</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">#10619</a></td>\n<td>567</td>\n<td>204</td>\n</tr>\n<tr>\n<td><code>dsimp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10685\">#10685</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10686\">#10686</a></td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td><code>simp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10959\">#10959</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10960\">#10960</a></td>\n<td>19</td>\n<td>9</td>\n</tr>\n<tr>\n<td><code>dsimp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10675\">#10675</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10676\">#10676</a></td>\n<td>28</td>\n<td>13</td>\n</tr>\n<tr>\n<td>need <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10971\">#10971</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10972\">#10972</a></td>\n<td>15</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>rw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10691\">#10691</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10692\">#10692</a></td>\n<td>13</td>\n<td>8</td>\n</tr>\n<tr>\n<td>was <code>simp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10745\">#10745</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10746\">#10746</a></td>\n<td>46</td>\n<td>32</td>\n</tr>\n<tr>\n<td>was <code>dsimp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10934\">#10934</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10935\">#10935</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>tidy</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10936\">#10936</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10937\">#10937</a></td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>was <code>decide!</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11043\">#11043</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11044\">#11044</a></td>\n<td>17</td>\n<td>6</td>\n</tr>\n<tr>\n<td>was <code>infer_instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11187\">#11187</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11188\">#11188</a></td>\n<td>6</td>\n<td>3</td>\n</tr>\n<tr>\n<td>added proof</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10888\">#10888</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10889\">#10889</a></td>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>added <code>instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10754\">#10754</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10755\">#10755</a></td>\n<td>50</td>\n<td>25</td>\n</tr>\n<tr>\n<td>added <code>lemma</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10756\">#10756</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10757\">#10757</a></td>\n<td>114</td>\n<td>60</td>\n</tr>\n<tr>\n<td>added <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>added to ease automation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10688\">#10688</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10689\">#10689</a></td>\n<td>23</td>\n<td>16</td>\n</tr>\n<tr>\n<td>added to speed up elaboration</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10694\">#10694</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10695\">#10695</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>added to clean up types</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>removed <code>@[nolint has_nonempty_instance]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10927\">#10927</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10929\">#10929</a></td>\n<td>43</td>\n<td>27</td>\n</tr>\n<tr>\n<td>removed <code>@[simp]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11119\">#11119</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11121\">#11121</a></td>\n<td>21</td>\n<td>7</td>\n</tr>\n<tr>\n<td>removed <code>@[pp_nodot]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11180\">#11180</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11181\">#11181</a></td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>removed <code>@[ext]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11182\">#11182</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11183\">#11183</a></td>\n<td>5</td>\n<td>3</td>\n</tr>\n<tr>\n<td><code>instance</code> was not necessary (category theory)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a></td>\n<td>12</td>\n<td>6</td>\n</tr>\n<tr>\n<td>broken dot notation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11036\">#11036</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11038\">#11038</a></td>\n<td>28</td>\n<td>4</td>\n</tr>\n<tr>\n<td>broken proof was</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11039\">#11039</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11040\">#11040</a></td>\n<td>13</td>\n<td>3</td>\n</tr>\n<tr>\n<td>broken ext</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11041\">#11041</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11042\">#11042</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>cannot automatically derive</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11081\">#11081</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11082\">#11082</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>slow(er)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11083\">#11083</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11084\">#11084</a></td>\n<td>38</td>\n<td>19</td>\n</tr>\n<tr>\n<td>TODO</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11215\">#11215</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11216\">#11216</a></td>\n<td>182</td>\n<td>112</td>\n</tr>\n</tbody>\n</table>",
        "id": 424953265,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1709671211
    },
    {
        "content": "<p>New PRs ready to be merged: </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11216\">#11216</a>: classifies <code>TODO</code> porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11217\">#11217</a>: classifies <code>new lemma</code> / <code>added lemma</code> porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11225\">#11225</a>: classifies <code>rw to erw</code> porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11228\">#11228</a>: classifies <code>added dsimp</code> porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11230\">#11230</a>: classifies <code>deprecated</code> porting notes</li>\n</ul>\n<p>Here you can find the table updated in real-time: <a href=\"https://github.com/FormalMathematicsLab/mathlib4/discussions/2\">https://github.com/FormalMathematicsLab/mathlib4/discussions/2</a>.</p>",
        "id": 425385724,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1709841932
    },
    {
        "content": "<p>Can <code>deprecated</code> sections such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! Porting note (#11229): Deprecated section. Remove. -/</span>\n<span class=\"kn\">section</span> <span class=\"n\">deprecated</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.deprecated</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">power_bit0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">power_add</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">cardinal.power_bit0</span> <span class=\"n\">Cardinal.power_bit0</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">power_bit1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">power_bit0</span><span class=\"o\">,</span> <span class=\"n\">power_add</span><span class=\"o\">,</span> <span class=\"n\">power_one</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">cardinal.power_bit1</span> <span class=\"n\">Cardinal.power_bit1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">deprecated</span>\n</code></pre></div>\n<p>be removed after classification?</p>",
        "id": 425386304,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1709842193
    },
    {
        "content": "<p>We did half a job deprecating those during the port. Some of those might still be used</p>",
        "id": 425391400,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709844193
    },
    {
        "content": "<p>It might also be useful to replace them by variants about <code>Even</code> and <code>Odd</code></p>",
        "id": 425391509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709844239
    },
    {
        "content": "<p>Unfortunately the <code>bit</code> stuff is hard to remove, because it keeps being used further downstream. I think the right approach is:</p>\n<ul>\n<li>trying removing something @[deprecated] about bit</li>\n<li>see what breaks</li>\n<li>if what breaks is still about bit, cancel removing the first things and remove the downstream thing instead, repeat</li>\n<li>if what breaks is not about bit, announce this discovery, and then see if you can provide alternative to the bit lemmas for that use site</li>\n<li>repeat</li>\n</ul>\n<p>It's a bit painful!</p>",
        "id": 425413524,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709853517
    },
    {
        "content": "<p>A <em>bit</em> painful indeed <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 425469730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709886421
    },
    {
        "content": "<p>Resolved and closed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11249\">#11249</a>.</p>",
        "id": 425704198,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1710005013
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>\"Type\"</th>\n<th>Issue</th>\n<th>PR</th>\n<th>No. Results</th>\n<th>No. Files</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>simp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10618\">#10618</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10619\">#10619</a></td>\n<td>567</td>\n<td>204</td>\n</tr>\n<tr>\n<td><code>dsimp</code> can prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10685\">#10685</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10686\">#10686</a></td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td><code>simp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10959\">#10959</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10960\">#10960</a></td>\n<td>19</td>\n<td>9</td>\n</tr>\n<tr>\n<td><code>dsimp</code> cannot prove this</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10675\">#10675</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10676\">#10676</a></td>\n<td>28</td>\n<td>13</td>\n</tr>\n<tr>\n<td>need <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10971\">#10971</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10972\">#10972</a></td>\n<td>15</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>rw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10691\">#10691</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10692\">#10692</a></td>\n<td>13</td>\n<td>8</td>\n</tr>\n<tr>\n<td>was <code>simp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10745\">#10745</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10746\">#10746</a></td>\n<td>46</td>\n<td>32</td>\n</tr>\n<tr>\n<td>was <code>dsimp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10934\">#10934</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10935\">#10935</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>was <code>tidy</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10936\">#10936</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10937\">#10937</a></td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>was <code>decide!</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11043\">#11043</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11044\">#11044</a></td>\n<td>17</td>\n<td>6</td>\n</tr>\n<tr>\n<td>was <code>infer_instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11187\">#11187</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11188\">#11188</a></td>\n<td>6</td>\n<td>3</td>\n</tr>\n<tr>\n<td>added proof</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10888\">#10888</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10889\">#10889</a></td>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>added <code>instance</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10754\">#10754</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10755\">#10755</a></td>\n<td>77</td>\n<td>37</td>\n</tr>\n<tr>\n<td>added <code>theorem</code> / <code>lemma</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10756\">#10756</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10757\">#10757</a> / <a href=\"https://github.com/leanprover-community/mathlib4/pull/11432\">#11432</a></td>\n<td>233</td>\n<td>115</td>\n</tr>\n<tr>\n<td>added <code>definition</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11445\">#11445</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11446\">#11446</a></td>\n<td>12</td>\n<td>9</td>\n</tr>\n<tr>\n<td>added <code>dsimp</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11227\">#11227</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11228\">#11228</a></td>\n<td>11</td>\n<td>4</td>\n</tr>\n<tr>\n<td>added <code>dsimp only</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>added to ease automation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10688\">#10688</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10689\">#10689</a></td>\n<td>23</td>\n<td>16</td>\n</tr>\n<tr>\n<td>added to speed up elaboration</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10694\">#10694</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10695\">#10695</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>added to clean up types</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10750\">#10750</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10751\">#10751</a></td>\n<td>14</td>\n<td>1</td>\n</tr>\n<tr>\n<td>removed <code>@[nolint has_nonempty_instance]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10927\">#10927</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10929\">#10929</a></td>\n<td>43</td>\n<td>27</td>\n</tr>\n<tr>\n<td>removed <code>@[simp]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11119\">#11119</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11121\">#11121</a></td>\n<td>21</td>\n<td>7</td>\n</tr>\n<tr>\n<td>removed <code>@[pp_nodot]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11180\">#11180</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11181\">#11181</a></td>\n<td>19</td>\n<td>4</td>\n</tr>\n<tr>\n<td>removed <code>@[ext]</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11182\">#11182</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11183\">#11183</a></td>\n<td>5</td>\n<td>3</td>\n</tr>\n<tr>\n<td><code>instance</code> was not necessary (category theory)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10670\">#10670</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/10671\">#10671</a></td>\n<td>12</td>\n<td>6</td>\n</tr>\n<tr>\n<td>broken dot notation</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11036\">#11036</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11038\">#11038</a></td>\n<td>36</td>\n<td>5</td>\n</tr>\n<tr>\n<td>broken proof was</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11039\">#11039</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11040\">#11040</a></td>\n<td>13</td>\n<td>3</td>\n</tr>\n<tr>\n<td>broken ext</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11041\">#11041</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11042\">#11042</a></td>\n<td>8</td>\n<td>2</td>\n</tr>\n<tr>\n<td>cannot automatically derive</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11081\">#11081</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11082\">#11082</a></td>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>slow(er)</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11083\">#11083</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11084\">#11084</a></td>\n<td>38</td>\n<td>19</td>\n</tr>\n<tr>\n<td>TODO</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11215\">#11215</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11216\">#11216</a></td>\n<td>182</td>\n<td>112</td>\n</tr>\n<tr>\n<td>change <code>rw</code> to <code>erw</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11224\">#11224</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11225\">#11225</a></td>\n<td>9</td>\n<td>5</td>\n</tr>\n<tr>\n<td>change <code>(coe : ‚Ñ§ ‚Üí Œ±)</code> to <code>(Int.cast : ‚Ñ§ ‚Üí Œ±)</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11249\">#11249</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11250\">#11250</a></td>\n<td>10</td>\n<td>1</td>\n</tr>\n<tr>\n<td>deprecated</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11229\">#11229</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11230\">#11230</a></td>\n<td>4</td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>rfl</code> required</td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11441\">#11441</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11442\">#11442</a></td>\n<td>6</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>apply</code> ‚Üí <code>induction</code></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11443\">#11443</a></td>\n<td><a href=\"https://github.com/leanprover-community/mathlib4/pull/11444\">#11444</a></td>\n<td>9</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>",
        "id": 427130461,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1710685086
    },
    {
        "content": "<p>PRs ready to be merged: </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11432\">#11432</a> classifying \"new <code>theorem</code>\" / \"new <code>lemma</code>\" porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11433\">#11433</a> classifying \"new <code>instance</code>\" porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11442\">#11442</a> classifying \"<code>rfl</code> required\" porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11444\">#11444</a> classifying \"<code>apply</code> to <code>induction</code>\" porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11446\">#11446</a> classifying \"new <code>definition</code>\" porting notes</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11447\">#11447</a> classifying \"removed <code>@[pp_nodot]</code>\" porting note</li>\n</ul>",
        "id": 427131160,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1710685277
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12061\">#12061</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12074\">#12074</a> resolve a few more simp-related porting notes: in all cases, the original proof works again. I suspect this may be due to changes in 4.7.0, but haven't investigated.</p>",
        "id": 432795453,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1712873315
    },
    {
        "content": "<p>Status update: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12061\">#12061</a> has been merged (thanks for the review!); <a href=\"https://github.com/leanprover-community/mathlib4/pull/12074\">#12074</a> is ready for review.<br>\nA few new PRs were filed (some, but not all are mine)</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12088\">#12088</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12092\">#12092</a> (<code>simps</code>-related)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12098\">#12098</a>: classify porting notes referencing a missing linter</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12100\">#12100</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12102\">#12102</a>: resolve one simple porting note each (about a tactic which has since been implemented)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12101\">#12101</a>: resolve all porting notes about \"redundant binder updates\"</li>\n</ul>",
        "id": 432984163,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1712957123
    },
    {
        "content": "<p>Thanks so much! Most of these are now on the merge queue or <code>bors d+</code>.</p>",
        "id": 433015244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712983396
    },
    {
        "content": "<p>Thank you for the quick reviews. I addressed the feedback on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12074\">#12074</a>.<br>\nMy github verification emails are having trouble coming through; see free to bors this yourself.</p>",
        "id": 433026582,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1712995547
    },
    {
        "content": "<p>A few new PRs on this theme</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12126\">#12126</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12128\">#12128</a> (restoring some simp-related proofs)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12130\">#12130</a> (classifying porting notes about beta reduction)</li>\n</ul>",
        "id": 433125683,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713092774
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">'d <a href=\"https://github.com/leanprover-community/mathlib4/pull/12126\">#12126</a></p>",
        "id": 433208918,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713162163
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">'d <a href=\"https://github.com/leanprover-community/mathlib4/pull/12128\">#12128</a></p>",
        "id": 433209012,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713162213
    },
    {
        "content": "<p>and <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">'d <a href=\"https://github.com/leanprover-community/mathlib4/pull/12130\">#12130</a>. I wonder if we might just declare victory on this one. I don't think we're expecting to change anything to remove the need for these <code>beta_reduce</code>s.</p>",
        "id": 433209338,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713162341
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/12129\">#12129</a> for the issue)</p>",
        "id": 433209860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713162566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addressing.20porting.20notes.3F/near/433209012\">said</a>:</p>\n<blockquote>\n<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">'d <a href=\"https://github.com/leanprover-community/mathlib4/pull/12128\">#12128</a></p>\n</blockquote>\n<p>There was a merge conflict with <a href=\"https://github.com/leanprover-community/mathlib4/pull/12126\">#12126</a>; this was resolved and CI is green. Can somebody re-approve this one, please?</p>",
        "id": 433227239,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713168510
    },
    {
        "content": "<p>(Thanks for all the fast reviews!)</p>",
        "id": 433227272,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713168523
    },
    {
        "content": "<p>Done!</p>",
        "id": 433228450,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713168891
    }
]