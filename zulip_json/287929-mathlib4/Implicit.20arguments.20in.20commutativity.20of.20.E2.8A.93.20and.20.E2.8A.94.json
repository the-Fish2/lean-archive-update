[
    {
        "content": "<p>Hi, I'm a beginner, so please forgive me if this is a stupid question. I'm currently working through Mathematics in Lean. One exercise is to prove that in a lattice, ⊓ distributes over ⊔ if and only if ⊔ distributes over ⊓, and one of the steps of the computation I use to prove this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>This step easily follows from the fact that the ⊓ operation is commutative (theorem <code>inf_comm</code> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Lattice.html#inf_comm\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Lattice.html#inf_comm</a>), so <code>c ⊓ a = a ⊓ c</code> and <code>c ⊓ b = b ⊓ c</code>. Normally, I would just write <code>by rw [inf_comm c a, inf_comm c b]</code> and be done with it, but the arguments to <code>inf_comm</code> are implicit, so I can't do that. I ended up using <code>by simp [inf_comm]</code>; surprisingly, not even <code>by simp</code> worked.</p>\n<p>Is it a mistake that the arguments to <code>inf_comm</code> are implicit? All of the other commutativity theorems I found have explicit arguments.</p>",
        "id": 423728334,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709082289
    },
    {
        "content": "<p>from my perspective, yes, it seems like an oversight that they are implicit. However, you can work around this for now by doing <code>inf_comm (a := c) (b := a)</code>. Lean 4 allows you to supply values to named implicit arguments with this syntax.</p>",
        "id": 423743901,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709093448
    },
    {
        "content": "<p>Yes, they should be explicit, but I'm never annoyed enough to fix them</p>",
        "id": 423766586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709108246
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11033\">#11033</a></p>",
        "id": 423769747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709109540
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 423920358,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1709162246
    }
]