[
    {
        "content": "<p>In mathlib we currently have the instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">hasSMul'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">SMul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">pointwiseDistribMulAction</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DistribMulAction</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">SMulCommClass</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">DistribMulAction</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">pointwiseSetSMul</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DistribMulAction</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SMul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is kind of a mess. In particular it's seems very strange that <code>Submodule.hasSMul'</code> requires that <code>R</code> is commutative when <code>Ideal R</code> has a coercion to <code>Set R</code> and <code>Submodule.pointwiseSetSMul </code> has no commutativity assumption! This requirement exists because the action of ideals on submodules is defined by <code>I • N = Submodule.map₂ (LinearMap.lsmul R M) I N</code> when<code>map₂</code> and <code>lsmul</code> both depend on commutativity (because bilinear maps work a lot better over commutative rings). In the case of a commutative ring the three actions <code>SMul R (Submodule R M)</code>, <code>SMul (Set R) (Submodule R M)</code>, and <code>SMul (Ideal R) (Submodule R M)</code> are all roughly the same thing: acting by an ideal is the same as acting by its underlying set, acting by a set is the same as acting by its span and is the same as the supremum of the actions of each element, and acting by an element is the same as acting by the (span of the) singleton set containing that element. This leads to a lot of code duplication. At the moment it's hard to tell which lemmas apply to which action by their name (e.g. why is <code>map_smul''</code> about ideals acting and not sets?) and the APIs for each action aren't equally mature.</p>\n<p>I wanted to add a new smul action for lists of elements, because we write e.g. <strong>r</strong>M a lot when doing commutative algebra for a sequence of elements <strong>r</strong>, but I'm worried that doing so right now would just make things messier. It would be really great if we could define all these actions as a special case of one thing, but I don't know that that's possible. At least the ideal and set case could be unified, and it would be nice if the ring element case could be handled similarly (i.e. we always coerce to a set and go through that) but this last action is a special case of <code>Submodule.pointwiseDistribMulAction</code>, which in full generality can't be defined in terms of a coercion to <code>Set R</code> (although I guess it does still have a coercion to <code>Set (Module.End  R M)</code> and this does fit into <code>Submodule.pointwiseSetSMul </code>?).</p>\n<p>Does anyone have thoughts on how these actions could be unified/simplified?</p>",
        "id": 440731248,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716748245
    },
    {
        "content": "<p>My take on this is that all the actions that derive <code>SMul (F R) (G M)</code> from <code>SMul R M</code> are in some sense evil, as they are incompatible with the actions that derive <code>SMul (F R) M</code> from <code>SMul R M</code> (and often even incompatible with themselves); and so really only the second instance is kosher here, and the other two are begrudging permitted in mathlib out of pragmatism.</p>",
        "id": 440732499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716749663
    },
    {
        "content": "<p>Can you be a little clearer about exactly what instance you want to define? Is it <code>SMul (List S) (Submodule R M)</code>?</p>",
        "id": 440732536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716749719
    },
    {
        "content": "<p>Yeah, that's what I had in mind</p>",
        "id": 440732598,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716749781
    },
    {
        "content": "<p>Er, I was even just thinking <code>SMul (List R) (Submodule R M)</code> (but it might as well be in the generality you said)</p>",
        "id": 440732627,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716749826
    }
]