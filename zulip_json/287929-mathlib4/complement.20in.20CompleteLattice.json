[
    {
        "content": "<p>Bit of a beginner question, perhaps.</p>\n<p>For a complete lattice, it makes sense to me to define a complement as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasCompl</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">supₛ</span> <span class=\"o\">{</span> <span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span> <span class=\"o\">}}</span>\n</code></pre></div>\n<p>I thought this would actually already have been formalized in Mathlib, but can't find it.</p>\n<ul>\n<li>Am I overlooking an existing definition somewhere here?</li>\n<li>Should I consider Heyting algebra's instead? I know they do have a complement.</li>\n<li>The \"HasCompl\" class does not require me to prove that the operator actually is a complement. Why is that?</li>\n</ul>",
        "id": 421739218,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1708030607
    },
    {
        "content": "<p>The last one I can answer: <code>HasCompl</code> is simply a \"notation typeclass\", that is, it's just a way of registering the <code>ᶜ</code> notation on a type. It doesn't have any mathematical content.</p>",
        "id": 421739635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708030780
    },
    {
        "content": "<p>The answer is that this is currently a gap in mathlib which will be closed up by <a href=\"https://github.com/leanprover-community/mathlib4/pull/10560\">#10560</a></p>",
        "id": 421742196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708031755
    },
    {
        "content": "<p>Thanks, that clears it up quite a bit for me :-)</p>",
        "id": 421861122,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1708091137
    }
]