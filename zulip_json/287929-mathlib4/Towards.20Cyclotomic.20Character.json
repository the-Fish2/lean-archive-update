[
    {
        "content": "<p>Hi all, I've been working towards defining the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic cyclotomic character. <a href=\"https://github.com/GeQi/project/blob/main/Project/Main.lean\">This</a> is what I got so far.<br>\nIn particular I took the natural group theory approach that</p>\n<ol>\n<li>Define the group isomorphism between the endomorphisms of a finite cyclic group with <code>ZMod</code> of its cardinality</li>\n<li>Using its properties to define <code>ModularCyclotomicCharacter</code> and show for compatibilities.</li>\n</ol>\n<p>My understanding is that the current API for <code>Z[p]</code> is still insufficient to get a map easily. So there is still work to do to get the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic cyclotomic character.<br>\nI'm thinking about refining and organizing what I have so far, and push to mathlib since it is getting harder to manage as it gets longer.</p>\n<p>I'm aware <code>ModularCyclotomicCharacter</code> is already done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6342\">mathlib4#6342</a> by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>.<br>\n<span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> told me a sensible plan could be to show that my implementation would agree with what is in mathlib right now.<br>\nAll inputs are welcomed!</p>",
        "id": 430216791,
        "sender_full_name": "Qi Ge",
        "timestamp": 1711698612
    },
    {
        "content": "<p>In particular:<br>\n<a href=\"https://github.com/GeQi/project/blob/main/Project/Main.lean#L14-L135\">L14-L135</a> are variously lemmas that definitely need be cleaned up.<br>\n<a href=\"https://github.com/GeQi/project/blob/main/Project/Main.lean#L137-L437\">L137-L437</a> concern endomorphisms of finite cyclic (multiplicative/additive) group.<br>\n<a href=\"https://github.com/GeQi/project/blob/main/Project/Main.lean#L439-L495\">L439-L495</a> get to <code>ModularCyclotomicCharacter</code> and their compatibility.</p>",
        "id": 430217704,
        "sender_full_name": "Qi Ge",
        "timestamp": 1711699171
    },
    {
        "content": "<p>I haven't looked through everything yet, but I surely hope that your lemma <code>Group.exponent_dvd_of_forall_pow_eq_one</code> already exists in some form in mathlib!</p>",
        "id": 430252036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711716894
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.exponent_dvd_of_forall_pow_eq_one#doc\">docs#Monoid.exponent_dvd_of_forall_pow_eq_one</a></p>",
        "id": 430252153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711716946
    },
    {
        "content": "<p>Oh I see, that's for monoids with <code>n : Nat</code>, but I guess <span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> needed it for groups with <code>n : Int</code>.</p>",
        "id": 430252474,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711717087
    },
    {
        "content": "<p>Oh yeah we don't have that</p>",
        "id": 430253053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711717374
    }
]