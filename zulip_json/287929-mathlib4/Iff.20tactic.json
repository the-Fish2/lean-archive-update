[
    {
        "content": "<p>Is there a tactic which, for a theorem that states <code>PiffQ : ∀ (x : …) (y : …), P x y \\iff Q x y</code>, reduces it to the proof of one implication, say <code>PtoQ : ∀ (x : …) (y : …), P x y \\to Q x y</code>, and for the converse implication adds the hypothesis <code>PtoQ</code>?</p>",
        "id": 422087999,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708253183
    },
    {
        "content": "<p><code>Iff.intro</code>?</p>",
        "id": 422088051,
        "sender_full_name": "Michael",
        "timestamp": 1708253268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Logic.html#forall%E2%82%82_congr\">https://leanprover-community.github.io/mathlib4_docs/Std/Logic.html#forall%E2%82%82_congr</a></p>",
        "id": 422088146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708253361
    },
    {
        "content": "<p>docs#forall₂_congr sadly breaks the linkifier still</p>",
        "id": 422088158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708253376
    },
    {
        "content": "<p>Ah sorry, I misread</p>",
        "id": 422088224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708253426
    },
    {
        "content": "<p><del>What about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall#doc\">docs#forall</a>%E2%82%82_congr ?</del><br>\nNevermind</p>",
        "id": 422088225,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708253428
    },
    {
        "content": "<p>Is that what he wants? It looks like the goal is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mrow><mo fence=\"true\">(</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↔</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\forall x, y \\left( p(x,y) \\leftrightarrow q(x,y) \\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span></span></p>\n<p>and he wants to split it into two goals</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mrow><mo fence=\"true\">(</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow><mspace linebreak=\"newline\"></mspace><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mrow><mo fence=\"true\">(</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\forall x, y \\left( p(x,y) \\to q(x,y) \\right) \\\\\n\\forall x, y \\left( q(x,y) \\to p(x,y) \\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span></span></p>",
        "id": 422088460,
        "sender_full_name": "Michael",
        "timestamp": 1708253691
    },
    {
        "content": "<p>Well, not quite, in the second goal, they would like to have access to what they proved beforehand</p>",
        "id": 422088484,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708253716
    },
    {
        "content": "<p>I thought that was automatic; once you've proved one subgoal, is it not available?</p>",
        "id": 422088571,
        "sender_full_name": "Michael",
        "timestamp": 1708253786
    },
    {
        "content": "<p>The way I've been solving this issue so far was to use <code>suffices</code>; the forward direction can then be proven separately, and the backward direction can be proven inside of the by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">…</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">…</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">…</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">…</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">rev_imp</span><span class=\"o\">⟩</span>\n    <span class=\"c1\">-- Prove Q x y → P x y here, with `this` available for `P x y → Q x y`</span>\n  <span class=\"c1\">-- Prove P x y → Q x y</span>\n</code></pre></div>",
        "id": 422088688,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708253896
    },
    {
        "content": "<p>Usually though in Mathlib there are enough theorems to transform <code>P x y</code> into <code>Q x y</code> with exclusively <code>rw</code>, or the step that is hard to prove is isolated enough. From a quick ripgrep search, I can see that this is what's done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=star_le_star_iff#doc\">docs#star_le_star_iff</a> or in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.subset_union_prime%27#doc\">docs#Ideal.subset_union_prime'</a></p>",
        "id": 422089011,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708254200
    },
    {
        "content": "<p>Yes, I also do it this way, see <a href=\"https://github.com/leanprover-community/mathlib4/blob/02eb46065af4d2a0e05ac81b5df631e43fd45840/Mathlib/GroupTheory/Perm/Cycle/Basic.lean#L1534\">https://github.com/leanprover-community/mathlib4/blob/02eb46065af4d2a0e05ac81b5df631e43fd45840/Mathlib/GroupTheory/Perm/Cycle/Basic.lean#L1534</a> but I wondered whether a clean tactic could help.</p>",
        "id": 422089337,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708254488
    },
    {
        "content": "<p>It would certainly help me too, especially when making atomical theorems isn't currently a priority</p>",
        "id": 422089472,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708254649
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422090094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708255303
    },
    {
        "content": "<p>I find Eric's suggestion very clean and a great use of <code>?h</code>!</p>\n<p>Before this syntax was available, I think that quite a few of the situations where this was an issue, resolved in proving the implication <code>∀ (x : …) (y : …), P x y -&gt; Q x y</code> with weaker assumptions, so that it became just an implication, and the converse only followed with stronger assumptions.  Once you have the separate, more general lemma, you can use it in the two branches, of course.</p>",
        "id": 422090307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708255510
    },
    {
        "content": "<p>(This only works if you can find such a weakening, naturally.)</p>",
        "id": 422090348,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708255557
    },
    {
        "content": "<p>I can't get the <code>?h</code> syntax to work if you need the quantification</p>",
        "id": 422090552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708255777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Iff.20tactic/near/422090552\">said</a>:</p>\n<blockquote>\n<p>I can't get the <code>?h</code> syntax to work if you need the quantification</p>\n</blockquote>\n<p>The quantification is around the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↔</mo></mrow><annotation encoding=\"application/x-tex\">\\leftrightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">↔</span></span></span></span>, so will stripping it work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- special strategies</span>\n</code></pre></div>",
        "id": 422091429,
        "sender_full_name": "Michael",
        "timestamp": 1708256679
    },
    {
        "content": "<p><del>I guess not, when I fill in from your example, I see <code>failed to infer 'let' declaration type</code>.</del><br>\nNot sure what was wrong, but it does appear to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- special strategies</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">hmp</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">hmpr</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">hmp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But this only preserves <code>p x y → q x y</code> for the particular arbitrary x and y that are introduced.</p>",
        "id": 422091740,
        "sender_full_name": "Michael",
        "timestamp": 1708257010
    },
    {
        "content": "<p>Yes, that was my point, sorry for not being clearer; the quantification is absent from the extracted goal</p>",
        "id": 422093516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708258718
    },
    {
        "content": "<p>the trick still works if you provide your own theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">univ_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">hmp</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">hmpr</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">hmp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422094359,
        "sender_full_name": "Michael",
        "timestamp": 1708259527
    },
    {
        "content": "<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">hmp</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">hmpr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">hmp</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">hmp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'd really like to know what the deep difference is between solving case hmp implicitly, because it's the first one in the default sequence, and solving it explicitly by calling it <code>case hmp</code>.</p>",
        "id": 422094552,
        "sender_full_name": "Michael",
        "timestamp": 1708259737
    },
    {
        "content": "<p><code>simp_rw [iff_iff_implies_and_implies, forall_and]</code> removes the need for <code>univ_iff</code></p>",
        "id": 422094621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708259786
    },
    {
        "content": "<p>I should have been clearer: in my application case, I need to retain the forall quantification, because the reverse implication is obtained by applying the forward one to other elements than the obvious ones.</p>",
        "id": 422097333,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708262385
    },
    {
        "content": "<p>I think this is a niche enough case that either using <code>suffices</code> or writing a standalone lemma for the implication is a reasonable choice.</p>",
        "id": 422099469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708264534
    },
    {
        "content": "<p>(As <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> comments, it is very common that the implication is true more generally. Even cases where it isn't, the implication is often handy to have for dot notation)</p>",
        "id": 422099537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708264580
    },
    {
        "content": "<p>I just made a prototype of a <code>constructor! generalizing x y</code> tactic. It looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  y : ℤ</span>\n<span class=\"cm\">  ⊢ P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝ : ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  y : ℤ</span>\n<span class=\"cm\">  ⊢ Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 422113346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708276738
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code v1</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"constructor!\"</span> <span class=\"n\">genArg</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">Mathlib.Tactic.generalizingClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">gens</span> <span class=\"bp\">←</span>\n      <span class=\"k\">match</span> <span class=\"n\">genArg</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">genArg</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">genArg</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.generalizingClause</span><span class=\"bp\">|</span> <span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVarIds</span> <span class=\"n\">args</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">g.constructor</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">newGoals</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span> <span class=\"n\">allowSynthFailures</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">gs.toArray.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g.revert</span> <span class=\"n\">gens</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- Now, theoretically, each goal has the same local context,</span>\n      <span class=\"c1\">-- so we can feed them into each other as additional hypotheses.</span>\n      <span class=\"c1\">-- This is sort of a hack, and it yields quadratically large proof terms.</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gs'</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">gs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">gs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n        <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n        <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">gj</span> <span class=\"o\">:=</span> <span class=\"n\">gs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"mi\">2</span>\n          <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">g.assert</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gj.getType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">gj</span><span class=\"o\">)</span>\n          <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g'.intro1</span>\n        <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g'.introNP</span> <span class=\"n\">fvars.size</span>\n        <span class=\"n\">gs'</span> <span class=\"o\">:=</span> <span class=\"n\">gs'.push</span> <span class=\"n\">g'</span>\n      <span class=\"n\">return</span> <span class=\"n\">gs'.toList</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  y : ℤ</span>\n<span class=\"cm\">  ⊢ P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝ : ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  y : ℤ</span>\n<span class=\"cm\">  ⊢ Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n</div></div>",
        "id": 422113404,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708276799
    },
    {
        "content": "<p>A nice extension to this would be a <code>with</code> clause to name the hypotheses for successive goals. It also is missing code to link up variables for the unused variable checker (see how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.withReverted#doc\">docs#Lean.MVarId.withReverted</a> uses <code>pushInfoLeaf</code>)</p>",
        "id": 422113509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708276887
    },
    {
        "content": "<p>Here's an extension that handles <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>'s original case.</p>\n<p>It will auto-intro, apply constructors, and revert:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  ⊢ ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝: ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  ⊢ ∀ (x : ℕ) (y : ℤ), Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>It also interacts with this <code>generalizing</code> clause:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝: ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 422114170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708277414
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code v2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"constructor!\"</span> <span class=\"n\">genArg</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">Mathlib.Tactic.generalizingClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">gens</span> <span class=\"bp\">←</span>\n      <span class=\"k\">match</span> <span class=\"n\">genArg</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">genArg</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">genArg</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.generalizingClause</span><span class=\"bp\">|</span> <span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVarIds</span> <span class=\"n\">args</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">g.intros</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">g.constructor</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">newGoals</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span> <span class=\"n\">allowSynthFailures</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">gs.toArray.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g.revert</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g.revert</span> <span class=\"n\">gens</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- Now, theoretically, each goal has the same local context,</span>\n      <span class=\"c1\">-- so we can feed them into each other as additional hypotheses.</span>\n      <span class=\"c1\">-- This is sort of a hack, and it yields quadratically large proof terms.</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gs'</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">gs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">rfvars</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">gs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n        <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g'</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n        <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">gj</span> <span class=\"o\">:=</span> <span class=\"n\">gs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"mi\">2</span>\n          <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">g.assert</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">gj.getType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">gj</span><span class=\"o\">)</span>\n          <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g'.intro1</span>\n        <span class=\"n\">g'</span> <span class=\"bp\">←</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g'.introNP</span> <span class=\"n\">rfvars.size</span>\n        <span class=\"n\">gs'</span> <span class=\"o\">:=</span> <span class=\"n\">gs'.push</span> <span class=\"n\">g'</span>\n      <span class=\"n\">return</span> <span class=\"n\">gs'.toList</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  ⊢ ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝: ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  ⊢ ∀ (x : ℕ) (y : ℤ), Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  h✝: ∀ (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">!</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case mp</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), P x y → Q x y</span>\n\n<span class=\"cm\">  case mpr</span>\n<span class=\"cm\">  P Q : ℕ → ℤ → Prop</span>\n<span class=\"cm\">  h✝: ∀ (x : ℕ) (y : ℤ), P x y → Q x y</span>\n<span class=\"cm\">  x : ℕ</span>\n<span class=\"cm\">  ⊢ ∀ (y : ℤ), Q x y → P x y</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n</div></div>",
        "id": 422114180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708277434
    },
    {
        "content": "<p>What's the <code>!</code> in the name referring to?</p>",
        "id": 422133146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708293962
    },
    {
        "content": "<p>It means \"Lean, try <em>hard</em> to construct it!\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 422133381,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708294159
    },
    {
        "content": "<p>Yeah, and it's <code>constructor</code> with bells and whistles, which tend to be loud!</p>",
        "id": 422134838,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708295351
    }
]