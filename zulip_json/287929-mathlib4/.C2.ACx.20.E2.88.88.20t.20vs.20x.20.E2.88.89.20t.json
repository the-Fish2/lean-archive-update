[
    {
        "content": "<p>This is not a particularly significant gripe, but I was looking through some documentation ( <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Defs.html#Set.diff_eq\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Defs.html#Set.diff_eq</a> ) and I see that the documentation prefers to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>x</mi><mo>∈</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot x \\in t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>.</p>\n<p>I would find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> significantly more intuitive to parse; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>x</mi><mo>∈</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot x \\in t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> makes me think the proposition being negated is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 422049957,
        "sender_full_name": "Michael",
        "timestamp": 1708211934
    },
    {
        "content": "<p>I'm surprised it prints that way, given that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>automatically chooses your preferred syntax</p>",
        "id": 422050545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708212662
    },
    {
        "content": "<p>So this is specifically a doc-gen4 thing I think, cc <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 422050554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708212684
    },
    {
        "content": "<p>Within <code>Mathlib.Data.Set.Defs</code> this prints like doc-gen shows it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Defs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>can't do anything if the delaborator has not been declared yet I'm afraid. If you wish to see this printed properly you need to move the delaborator</p>",
        "id": 422050915,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708213198
    },
    {
        "content": "<p>Presumably there is a good reason not to postpone all pretty-printing in doc-geb until everything is imported?</p>",
        "id": 422051885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708214425
    },
    {
        "content": "<p>Well doc-gen is run on each module individually just like Lean is run on each module individually. If you want to do this that will probably slow down doc-gen a bit in terms of initial start up time per file and opens up two questions for me:</p>\n<ol>\n<li>What is \"importing everything\" in the context of a non trivial lake project. Should it just gobble up any .olean that is within reach?</li>\n<li>Does that really give you what you want? After all delaborators can be overwritten again later on (as this shows). What if std4 has one idea how to pretty print things and mathlib4 has another one for (as has happened in the past with e.g. the lambda arrow notation). The order at which the specific delaborators happen to be imported would determine the output that you see and some people would still be unhappy.</li>\n</ol>",
        "id": 422052351,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708214932
    },
    {
        "content": "<p>I think the solution here is clearly to move the delaborator.</p>",
        "id": 422061557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708226107
    }
]