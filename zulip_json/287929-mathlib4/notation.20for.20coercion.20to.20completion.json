[
    {
        "content": "<p>These lines (with <code>(α : Type*) [UniformSpace α]</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The map from a uniform space to its completion.</span>\n\n<span class=\"sd\">porting note: this was added to create a target for the `@[coe]` attribute. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">coe'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Completion</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">SeparationQuotient.mk</span> <span class=\"bp\">∘</span> <span class=\"n\">pureCauchy</span>\n\n<span class=\"sd\">/-- Automatic coercion from `α` to its completion. Not always injective. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Completion</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">coe'</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>in <code>Mathlib.Topology.UniformSpace.Completion</code> cause the coercion of <code>k : K</code> (a number field) to its completion wrt a valuation (a p-adic field) to be written as <code>↑K k</code>. Is this intended? I stared at <code>↑K</code> trying to figure out what <code>K</code> was being coerced to for a bit before it dawned on me what was going on. Is everyone else used to this and I only just noticed it?</p>",
        "id": 439560582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716207094
    },
    {
        "content": "<p>That looks like a bug in the delaborator</p>",
        "id": 439563531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716208142
    },
    {
        "content": "<p>I noticed it during the port (and haven't been touching anything that triggers it since then)</p>",
        "id": 439564631,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716208525
    },
    {
        "content": "<p>Maybe someone should file an issue</p>",
        "id": 439564704,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716208555
    },
    {
        "content": "<p>I'm on a train but will do it later if nobody else does it first.</p>",
        "id": 439566397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716209147
    },
    {
        "content": "<p>It's not a bug in the delaborator, it's a misapplied <code>@[coe]</code> attribute. The assumption with <code>@[coe]</code> is that the first explicit argument is the value being coerced. However, the first explicit argument of <code>coe'</code> is the <em>type</em> of the value being coerced.</p>",
        "id": 439608025,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716222360
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Completion</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">SeparationQuotient.mk</span> <span class=\"bp\">∘</span> <span class=\"n\">pureCauchy</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">Lean.Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Meta.registerCoercion</span> <span class=\"bp\">``</span><span class=\"n\">Completion.coe</span>\n    <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">numArgs</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">coercee</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"o\">})</span>\n\n<span class=\"sd\">/-- Automatic coercion from `α` to its completion. Not always injective. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Completion</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Completion.coe</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 439609123,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716222685
    },
    {
        "content": "<p>Having an explicit argument here is weird. One could also argue this should not be a coercion but this is another debate.</p>",
        "id": 439612666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716223828
    },
    {
        "content": "<p>Assuming it's a good idea for it to be a coercion, a benefit to having the type being explicit here is that <code>((↑) : α → Completion α)</code>, which appears frequently in the file, appears as <code>Completion.coe α</code>, which is more readable than just <code>Completion.coe</code>.</p>",
        "id": 439614117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716224301
    },
    {
        "content": "<p>I think that <code>((↑) : α → Completion α)</code> is more explicit than <code>Completion.coe α</code>.</p>",
        "id": 439617503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716225465
    },
    {
        "content": "<p>I agree, although I think I would also like if we had a cleaner canonical notation for \"the coercion map between foo and bar\".</p>",
        "id": 439617683,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716225530
    },
    {
        "content": "<p>I have a hard time imagining how it could be more concise and explicit than the above spelling.</p>",
        "id": 439617812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716225583
    },
    {
        "content": "<p>At least by removing some parentheses ?</p>",
        "id": 439618007,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716225638
    },
    {
        "content": "<p>Indeed that would be nice.</p>",
        "id": 439618075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716225662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I meant the way it pretty prints. There's no mechanism for pretty printing as <code>((↑) : α → Completion α)</code> yet.</p>",
        "id": 439619036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716226001
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 439619075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716226020
    },
    {
        "content": "<p>The module consistently uses this notation in the source code at least.</p>",
        "id": 439619191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716226067
    },
    {
        "content": "<p>The name for this map is very inconsistent. If it's a uniformly continuous function it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.Completion.coe%27#doc\">docs#UniformSpace.Completion.coe'</a>. If it's a uniform additive group homomorphism it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.Completion.toCompl#doc\">docs#UniformSpace.Completion.toCompl</a>. If it's a uniform ring homomorphism it's called  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.Completion.coeRingHom#doc\">docs#UniformSpace.Completion.coeRingHom</a>.</p>",
        "id": 439619742,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716226257
    }
]