[
    {
        "content": "<p>I have (perhaps unwisely) defined certain functions via if-then-else, and am now trying to prove things about them. The <code>split</code> tactic has been useful at times, but sometimes it unpacks too much. More specifically, if I have something of the form <code>if p then q else r</code> and a hypothesis that states that <code>p</code> is true, is there a way to simplify this to just <code>q</code> (or similarly, if I have that <code>p</code> is false, can I simplify to <code>r</code>?)</p>\n<p>You can see the relevant part in <a href=\"/user_uploads/3121/5tlP6cqfpdiYeI32ulnxacYR/MWE.lean\">MWE.lean</a>. I am also open to suggestions for better ways to write what I am trying to define here (namely, I have a series of covers indexed by sets, where two sets in particular are special and need to be handled individually).</p>",
        "id": 421696831,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1708015417
    },
    {
        "content": "<p>Yes, there is the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_pos#doc\">docs#if_pos</a> (or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dif_pos#doc\">docs#dif_pos</a> if it's dependent)</p>",
        "id": 421697097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708015484
    },
    {
        "content": "<p>That works! Or well, it mostly works, for whatever reason I am now having a <code>rw[if_neg]</code> that is timing out. Any idea why that might be? Here's a new <a href=\"/user_uploads/3121/hXrTfQ629lvH_IBZkEfguztC/MWE.lean\">MWE.lean</a></p>",
        "id": 421702557,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1708017057
    },
    {
        "content": "<p>You can usually do <code>simp [h]</code> if <code>h : p</code> is your hypothesis. (And you can use <code>simp? [h]</code> to see what lemma it's invoking.)</p>\n<p>This is how you can pass in additional hypotheses to dispatch side conditions for simp lemmas.</p>",
        "id": 421709214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708019330
    },
    {
        "content": "<p>You can also try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(On the phone right now).</p>\n<p>I wonder if there should be a tactic for “very careful evaluating” for cleaning up after if and case splits like these, and possibly have such tactics run them implicitly.</p>",
        "id": 421719894,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708023247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"530359\">Connor Gordon</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Applying.20hypotheses.20to.20if.20then.20else/near/421702557\">said</a>:</p>\n<blockquote>\n<p>That works! Or well, it mostly works, for whatever reason I am now having a <code>rw[if_neg]</code> that is timing out. Any idea why that might be? Here's a new <a href=\"/user_uploads/3121/hXrTfQ629lvH_IBZkEfguztC/MWE.lean\">MWE.lean</a></p>\n</blockquote>\n<p>There's no timeout for me. Are you on an old mathlib?</p>",
        "id": 421727998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708026242
    }
]