[
    {
        "content": "<p>I need quaternion algebras for FLT and people are looking for things to do, so I'm about to start on them. I'm stuck on the definition :-) If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a field then a quaternion algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a (non-commutative) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> with centre <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, 4-dimensional over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, and having no nontrivial two-sided ideals. Everything else is fine, but are we able to talk about the lattice of two-sided ideals of a non-commutative ring yet?</p>",
        "id": 436665466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714646965
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon#doc\">docs#RingCon</a> has a lattice instance now <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 436666780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714647441
    },
    {
        "content": "<p>I assume <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuaternionAlgebra#doc\">docs#QuaternionAlgebra</a> doesn't work for you?</p>",
        "id": 436666893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714647481
    },
    {
        "content": "<p>That gives a construction, but Kevin wants a characteristic predicate, basically</p>",
        "id": 436667382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714647641
    },
    {
        "content": "<p>Yes that's right, that's like asking if <code>iota -&gt; K</code> works for vector spaces over <code>K</code>. I am defining <code>IsQuaternionAlgebra</code></p>",
        "id": 436667416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714647656
    },
    {
        "content": "<p>I'm guessing that asking for \"all the left-ideals of dimension different from two\" does not cut it, right?  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436668416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714648049
    },
    {
        "content": "<p><code>IsSimpleOrder (RingCon K)</code> should capture \"no nontrivial two-sided ideals\" I think</p>",
        "id": 436668574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714648095
    },
    {
        "content": "<p>In a beautifully obscure way too :-)</p>",
        "id": 436668809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714648179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> your definition upstairs is for CSA's of degree 2, right? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M_2(K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span> is also an example.</p>",
        "id": 436669349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714648352
    },
    {
        "content": "<p>(Not saying that is bad.)</p>",
        "id": 436669380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714648369
    },
    {
        "content": "<p>But for me a quaternion algebra must be a division algebra...</p>",
        "id": 436669459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714648398
    },
    {
        "content": "<p>Re: they're CSAs: Yes. I am in a slight quandary about all this. All I need is quaternion algebras over fields, and very quickly I will be needing things which are only true for quaternion algebras because I'll need assumptions about base extensions to the reals being the Hamiltonian quaternions. But I could do CSAs over fields or even Azumaya algebras over commutative rings.</p>\n<p>I think it's pretty standard to allow M_2(K) to be a quaternion algebra. It's just a division ring. I have two books on quaternion algebras in front of me and both allow M_2(K).</p>",
        "id": 436669693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714648480
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ciOssC7Dbl7GFDOOsnR8s7xA/Screenshot-from-2024-05-02-12-15-56.png\">Screenshot-from-2024-05-02-12-15-56.png</a><br>\nThat's Pierce \"Associative algebras\" which I think is the bible</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ciOssC7Dbl7GFDOOsnR8s7xA/Screenshot-from-2024-05-02-12-15-56.png\" title=\"Screenshot-from-2024-05-02-12-15-56.png\"><img src=\"/user_uploads/3121/ciOssC7Dbl7GFDOOsnR8s7xA/Screenshot-from-2024-05-02-12-15-56.png\"></a></div>",
        "id": 436669951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714648582
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 436670109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714648655
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuaternionAlgebra#doc\">docs#QuaternionAlgebra</a> is wrong in characteristic 2 (in the sense that it doesn't agree with the literature, there are more examples than those), just like <code>EllipticCurve R</code> is wrong for a general commutative ring <code>R</code> (but also very useful)</p>",
        "id": 436674208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714650169
    },
    {
        "content": "<p>If you don't allow M_2(K) to be an example of a quaternion algebra, then it makes life difficult when you want to talk about tensoring with the completion of K at a prime, which is definitely going to be important for FLT. </p>\n<p>Lots of books / papers seem to square this circle by writing \"quaternion algebra\" for any deg 2 CSA, and \"quaternion <em>division</em> algebra\" when you really want to exclude M_2(K).</p>",
        "id": 436679313,
        "sender_full_name": "David Loeffler",
        "timestamp": 1714651916
    },
    {
        "content": "<p>Yeah, my opinion shouldn't be taken too seriously. I've never worked extensively with specifically quaternion algebras.</p>",
        "id": 436679729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714652066
    },
    {
        "content": "<p>I would have said \"deg 2 CSA\". But I can understand why people prefer to call them \"quaternion algebra\". The name is much nicer.</p>",
        "id": 436679832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714652102
    },
    {
        "content": "<p>And reserving \"quaternion division algebra\" for the division case seems like a good solution!</p>",
        "id": 436679910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714652129
    },
    {
        "content": "<p>I'm currently travelling with very little free time so I cannot finish the below but I believe it is correct and I think it is worth bearing in mind regarding the headline question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Bimodule</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MulOpposite</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">TensorProduct.Algebra.module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">D</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">D</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">RingCon</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span>\n      <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">p.neg_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">p.add_mem</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">⟩</span>\n      <span class=\"n\">mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hwx</span> <span class=\"n\">hyz</span>\n        <span class=\"n\">replace</span> <span class=\"n\">hwx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Subbimodule.smul_mem'</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hwx</span>\n        <span class=\"n\">replace</span> <span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Subbimodule.smul_mem</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">hyz</span>\n        <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">p.add_mem</span> <span class=\"n\">hwx</span> <span class=\"n\">hyz</span>\n      <span class=\"n\">add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_sub_add_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">p.add_mem</span> <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Subbimodule.mk</span>\n      <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n        <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">⊢</span>\n          <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">r.add</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n        <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">r.refl</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">r.mul</span> <span class=\"o\">(</span><span class=\"n\">r.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">r.mul</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">r.refl</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- This proof is sloooow for some reason</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_mp_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">smul_eq_mul_unop</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingCon.rel_mk</span><span class=\"o\">,</span> <span class=\"n\">Con.rel_mk</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Equiv.coe_fn_mk</span><span class=\"o\">,</span> <span class=\"n\">RingCon.le_def</span><span class=\"o\">,</span> <span class=\"n\">RingCon.rel_mk</span><span class=\"o\">,</span> <span class=\"n\">Con.rel_mk</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 436920306,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1714754256
    },
    {
        "content": "<p>I suspect RingCon is much faster in terms of elaboration, but that equivalence is certainly something we should have.</p>",
        "id": 436944284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714763721
    },
    {
        "content": "<p>Has there been any update on this?</p>",
        "id": 441261045,
        "sender_full_name": "Steven Rossi",
        "timestamp": 1716995383
    },
    {
        "content": "<p>+1. I have some undergraduate students working on central simple algebras and they're working around this for now. Jujian Zhang suggested making an instance of type <code>SetLike (RingCon R) R</code> :-) I have no idea what people like <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> will think of that!</p>",
        "id": 441270579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716998234
    },
    {
        "content": "<p>I'm about two weeks away from having some time to devote to ideals, but I don't see any immediate problem with having that instance.</p>",
        "id": 441271861,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1716998643
    },
    {
        "content": "<p>Can we somehow use the contents of this file? <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Bimodule.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Bimodule.html</a></p>",
        "id": 441271956,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716998675
    },
    {
        "content": "<p>This has been discussed at length before (although it's understandable you haven't seen it). The issue is that we need ideals in <em>non-unital</em> rings too, which that approach doesn't allow for.</p>",
        "id": 441272104,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1716998724
    },
    {
        "content": "<p>Is there a reason that we haven't just introduced right and two sided ideals in the context of rings with identities just for the sake of users? Then we prove RingCon equivalence and introduce the non unital case later</p>",
        "id": 441285387,
        "sender_full_name": "Steven Rossi",
        "timestamp": 1717003857
    },
    {
        "content": "<p>Just asking because it seems like it was intended when Mathlib.RingTheory.Ideal.Basic was written based off the Todo</p>",
        "id": 441285476,
        "sender_full_name": "Steven Rossi",
        "timestamp": 1717003900
    },
    {
        "content": "<p>I'm certain that the general theory of ideals in mathlib was written by an undergraduate under my supervision in 2018 without any thought whatsoever going into how to deal with the non-commutative case. We needed them for schemes, which are built on the theory of commutative rings.</p>",
        "id": 441288990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717005445
    },
    {
        "content": "<p>I have a summer student with the goal of contributing to mathlib.  The student is interested in algebra so I proposed looking into CSAs.</p>",
        "id": 441373949,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717042246
    },
    {
        "content": "<p>I think Azumaya algebras would be too much.</p>",
        "id": 441374262,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717042454
    },
    {
        "content": "<p>Is anyone working on implementing Wedderburn--Artin?  My student can start with that.</p>",
        "id": 441374269,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717042465
    },
    {
        "content": "<p>I agree that CSA/Quaternion algebra should include the split algebra M_n(K).</p>",
        "id": 441374452,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717042590
    },
    {
        "content": "<p>There's a bit of code in the flt repo that I believe relates to this, btw</p>",
        "id": 441381813,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717046255
    },
    {
        "content": "<p>I have a working full proof the statement that every CSA is a matrix ring over a division ring, written last week by some students at Imperial. I'm seeing them today and I'll talk about PRing.</p>",
        "id": 441388072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717049572
    },
    {
        "content": "<p>They also proved that the centre of the CSA and the division ring coincide. One of the people involved is currently in China for a short visit and this has held things up a bit</p>",
        "id": 441388242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717049655
    },
    {
        "content": "<p>Happy to figure out how to collaborate here! We're only doing what I need for FLT, which is some concrete consequences regarding base change of quaternion algebras. We're following Bourbaki algebra chapter 8</p>",
        "id": 441388479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717049774
    },
    {
        "content": "<p>I have stated Wedderburn--Artin (existence, not uniqueness) as a <code>proof_wanted</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/36a9da67e9f7d861837f652aba6820e33328a0df/Mathlib/RingTheory/SimpleModule.lean#L342-L347\">here</a>, but haven't got around to work on it (working on elliptic curves lately). I intended to follow <a href=\"https://en.wikipedia.org/wiki/Wedderburn%E2%80%93Artin_theorem#Proof\">the Wikipedia proof</a> and I'd be curious to see what the Imperial students came up with. Tackling the simple case first could be a way to structure the proof for the general (semisimple) case; it would be better to talk about simple artinian rings (without specifying a base field) instead of CSAs for this purpose, though. It's pretty easy to show a simple artinian ring is semisimple, and that a semisimple ring R that is isogeneous as an R-module (e.g. the matrix ring over a division ring) is simple:</p>\n<p><a href=\"/user_uploads/3121/T-pi-gcvQk-h-IWE2uPSTwFR/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/0a_F_IIUEdp0yaqpWC60ErTW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/T-pi-gcvQk-h-IWE2uPSTwFR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/T-pi-gcvQk-h-IWE2uPSTwFR/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0a_F_IIUEdp0yaqpWC60ErTW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0a_F_IIUEdp0yaqpWC60ErTW/image.png\"></a></div><p>(from Lorenz's <a href=\"https://link.springer.com/book/10.1007/978-0-387-72488-1\">Algebra II</a>)</p>\n<p>I also have a <a href=\"#narrow/stream/287929-mathlib4/topic/Bases.20of.20topologies/near/423923141\">list of TODOs</a> once an IsTwoSided predicate (typeclass) is introduced.</p>",
        "id": 441520649,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717091992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> or <span class=\"user-mention\" data-user-id=\"699016\">@Edison Xie</span> can you PR your proof that a CSA is a matrix ring over a division ring? And also the <code>SetLike (RingCon R) R</code> API?</p>",
        "id": 441530074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717095003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> so does it make sense for me and my student to work on proving Wedderburn--Artin?</p>",
        "id": 441569769,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717107248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13401\">#13401</a> This is a PR about interpreting <code>RingCon</code> as two-sided ideals</p>",
        "id": 441580877,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1717112294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"716077\">Lior Silberman</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/441569769\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> so does it make sense for me and my student to work on proving Wedderburn--Artin?</p>\n</blockquote>\n<p><a href=\"https://github.com/ImperialCollegeLondon/FLT/blob/0ee1a45987dda283d6210c398dc17c9a9dd96eeb/FLT/for_mathlib/CrazySimple.lean#L573\">Here</a> is a version of Wedderburn--Artin (sorry free) `. The statement is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">Wedderburn_Artin'</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsArtinianRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simple</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsSimpleOrder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RingCon</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">≃+*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n</code></pre></div>\n<p><a href=\"https://github.com/ImperialCollegeLondon/FLT/blob/0ee1a45987dda283d6210c398dc17c9a9dd96eeb/FLT/for_mathlib/CrazySimple.lean#L746\">Here</a> is a version of Wedderburn--Artin (sorry-free as well). The statement is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--- the variables are not completely shown in the statement</span>\n<span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">Wedderburn_Artin_algebra_version</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">sim</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsSimpleOrder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RingCon</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)]:</span>\n<span class=\"w\">    </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">div_ring</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">alg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n</code></pre></div>\n<p>Here <code>K</code> is a field, <code>B</code> a ring. <code>IsSimpleOrder (RingCon B)</code> is a weird way of saying <code>B</code> is a simple ring (in the sense that it has no non-trivial proper two-sided-ideals) and <code>M[Fin n, S]</code> is the n-by-n matrix with entries in <code>S</code>.</p>\n<p>But we <strong>don't</strong> have anything to say about <code>SemiSimple</code> rings</p>",
        "id": 441581301,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1717112509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/441272104\">said</a>:</p>\n<blockquote>\n<p>This has been discussed at length before (although it's understandable you haven't seen it). The issue is that we need ideals in <em>non-unital</em> rings too, which that approach doesn't allow for.</p>\n</blockquote>\n<p>Disclaimer : I unfortunately did not read the discussion on two-sided-ideals. But the approach in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13401\">#13401</a> works for nonunital rings in the sense that the following compiles</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NonUnitalNonAssocRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SetLike</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RingCon</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">coe_injective'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p><code>SetLike (RingCon R) R</code> works for any <code>NonUnitalNonAssocRing R</code>, and any <code>I : RingCon R</code> is an abelian group as well.<br>\nI am not sure if it works for a semiring though (because in the proof of <code>coe_injective'</code>, I used subtraction).</p>",
        "id": 441583954,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1717113787
    },
    {
        "content": "<p>I'm pretty sure the ideal model fails for semirings anyway; certainly you can't quotient by them any more (unlike <code>RingCon</code>, which you can).</p>",
        "id": 441584340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717113960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"716077\">Lior Silberman</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/441569769\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> so does it make sense for me and my student to work on proving Wedderburn--Artin?</p>\n</blockquote>\n<p>I thinks we already have the proof in our file</p>",
        "id": 441600060,
        "sender_full_name": "Edison Xie",
        "timestamp": 1717122961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/441530074\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> or <span class=\"user-mention silent\" data-user-id=\"699016\">Edison Xie</span> can you PR your proof that a CSA is a matrix ring over a division ring? And also the <code>SetLike (RingCon R) R</code> API?</p>\n</blockquote>\n<p>I think Jujian made the SetLike theorem and the fact that CSA is a matrix ring over division ring follows from wedderburn?</p>",
        "id": 441600245,
        "sender_full_name": "Edison Xie",
        "timestamp": 1717123046
    },
    {
        "content": "<p>It appears that you proved Wedderburn--Artin for simple artinian rings but not for general semisimple rings. Here's an outline of the approach I have in mind:</p>\n<ul>\n<li>\n<p>First we want to decompose a semisimple module into a <strong>direct</strong> sum of simple submodules. To state this we should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLattice.Independent#doc\">docs#CompleteLattice.Independent</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLattice.SetIndependent#doc\">docs#CompleteLattice.SetIndependent</a>: see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLattice.independent_iff_dfinsupp_lsum_injective#doc\">docs#CompleteLattice.independent_iff_dfinsupp_lsum_injective</a>. We can show more generally that any submodule of a semisimple module is the supremum of an independent set of submodules, and the proof is by Zorn's lemma: there exists a maximal independent set contained in the submodule, whose supremum must equal the submodule, otherwise we can take a simple submodule in a complement of the supremum and add it to the independent set. This part is similar to the existence of a basis of a vector space.</p>\n</li>\n<li>\n<p>The number of summands isomorphic to a simple R-module (irreducible representation) S in a direct sum decomposition of a semisimple R-module M is an invariant (called multiplicity) and <a href=\"#narrow/stream/116395-maths/topic/Covolume.20of.20a.20Z-lattice/near/426275150\">can be defined</a> as the dimension (Module.rank) of <code>S →ₗ[R] M</code> over the division ring <code>(Module.End R S)ᵐᵒᵖ</code>. We may not need to define the multiplicity if we only care about existence of a decomposition into a product of matrix rings, not uniqueness.</p>\n</li>\n<li>\n<p>We can group together isomorphic summands to form isotypic components. This doesn't actually require a direct sum decomposition; you can simply take the sum (supremum) of all submodules isomorphic to a particular simple module, and no other simple module can appear as a submodule of this supremum (otherwise the projection of some summand to this submodule is nonzero, but there's no nonzero linear map between two different simple modules).</p>\n</li>\n<li>\n<p>If the semisimple module is finitely generated (Submodule.FG) then any direct sum decomposition can only have finitely many nonzero summands (in particular simple summands). (Proof: the generators only have nonzero components in finitely many summands; the other direct summands must be zero.) Any ring considered as a module over itself is generated by one element, 1. So a semisimple ring decomposes into a direct sum of finitely many simple modules over itself. </p>\n</li>\n<li>\n<p>From the proof in one of the pictures above, in a simple artinian ring we can take a minimal (nonzero) left ideal, which is a simple module, and the ring is a sum of isomorphic copies of this module, and therefore isotypic. Its direct sum decomposition into simples also consists solely of this simple module, and so it's isomorphic to a Finsupp module <code>ι →₀ S</code> (also isomorphic to <code>ι → S</code> since <code>ι </code> is finite), not just a DFinsupp/DirectSum. We have <code>Module.End R (ι →₀ S) ≃+* Matrix ι ι (Module.End R S)</code>, which together with <a href=\"https://github.com/ImperialCollegeLondon/FLT/blob/0ee1a45987dda283d6210c398dc17c9a9dd96eeb/FLT/for_mathlib/CrazySimple.lean#L212\">this isomorphism</a> concludes the proof of Wedderburn--Artin for simple artinian rings. For general semisimple rings there can be multiple isotypic components, and the whole endomorphism ring is the direct product of the endomorphism rings of the isotypic components.</p>\n</li>\n<li>\n<p>A CSA is by definition a finite dimensional algebra over a field, which is artinian by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsArtinianRing.of_finite#doc\">docs#IsArtinianRing.of_finite</a>, and we can get rid of <a href=\"https://github.com/ImperialCollegeLondon/FLT/blob/0ee1a45987dda283d6210c398dc17c9a9dd96eeb/FLT/for_mathlib/CrazySimple.lean#L592\">this proof</a>.</p>\n</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"716077\">@Lior Silberman</span> If your student want to pursue this I can certainly review drafts and PR(s).</p>",
        "id": 441875026,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717230320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> thanks! -- I'll have my student follow this approach.</p>",
        "id": 441959111,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717273577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> the student is <span class=\"user-mention\" data-user-id=\"724854\">@Jiang Xu Wan</span></p>",
        "id": 442381919,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717451932
    },
    {
        "content": "<p>We'll follow the following outline</p>\n<ol start=\"0\">\n<li>Fix a (possibly non-commutative) ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</li>\n<li>For a simple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> define the isotypic component <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as the lattice join of the homomorphic images of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the direct sum of an independent set of homomorphic images; their number well-defined. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>M</mi><mi>S</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{End}(M_S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the matrix ring over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mi>R</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{End}_R(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li>Any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M\\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n<li>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>M</mi><mi>S</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{M_S\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> are independent (i.e. their sum is direct).</li>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is semisimple and artinian, the sum of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> (the complement would contain a simple module).</li>\n<li>If, further, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is finitely generated only finitely many isotypic components are nonzero and each is of finite dimension.</li>\n<li>With these hypotheses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mi>R</mi></msub><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{End}_R(M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>  is a finite product of matrix rings.</li>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a semisimple artinian ring then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mtext>opp</mtext></msup><mo>≅</mo><msub><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mi>R</mi></msub><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R^{\\textrm{opp}} \\cong \\mathrm{End}_R(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord textrm mtight\">opp</span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li>Either (1) the opposite of a semisimple artinian ring is semisimple and artinian; or (2) the opposite of a product of matrix rings over division rings is a matrix ring over division rings.</li>\n</ol>",
        "id": 442400192,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717458340
    },
    {
        "content": "<p>Thanks for the outline; I just realized I was confusing \"isotypic\" with \"isogeneous\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>if the number of simple direct summands is infinite, then it's not isomorphic to mathlib's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a>, which is simply the type of two-dimensional arrays without the restriction that each row only has finitely many nonzero elements, and which doesn't have a ring structure when the index type is infinite.</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>doesn't need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to be artinian: mathlib knows a submodule (in particular the complement) of a semisimple module is semisimple, so if it's nonzero then it contains a simple submodule, because mathlib also knows a semisimple module is the supremum of all simple submodules.</li>\n</ol>\n</li>\n<li>\n<ol start=\"8\">\n<li>holds for any semiring, not necessary semisimple artinian. It's already shown in the CrazySimple branch, but <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Algebra.Module.LinearMap.End%0A%0Adef%20equivEndMop%20%7BR%7D%20%5BSemiring%20R%5D%20%3A%20R%20%E2%89%83%2B*%20(Module.End%20R%20R)%E1%B5%90%E1%B5%92%E1%B5%96%20where%0A%20%20toFun%20r%20%3A%3D%20.op%0A%20%20%20%20%7B%20toFun%20%3A%3D%20fun%20r'%20%E2%86%A6%20r'%20*%20r%0A%20%20%20%20%20%20map_add'%20%3A%3D%20fun%20_%20_%20%E2%86%A6%20right_distrib%20_%20_%20_%0A%20%20%20%20%20%20map_smul'%20%3A%3D%20fun%20_%20_%20%E2%86%A6%20mul_assoc%20_%20_%20_%20%7D%0A%20%20invFun%20f%20%3A%3D%20f.unop%201%0A%20%20left_inv%20%3A%3D%20one_mul%0A%20%20right_inv%20%3A%3D%20by%0A%20%20%20%20rintro%20%E2%9F%A8_%E2%9F%A9%3B%20apply%20MulOpposite.unop_injective%3B%20ext%3B%20exact%20one_mul%20_%0A%20%20map_mul'%20_%20_%20%3A%3D%20congr_arg%20MulOpposite.op%20%3C%7C%20by%20ext%3B%20symm%3B%20apply%20mul_assoc%0A%20%20map_add'%20_%20_%20%3A%3D%20congr_arg%20MulOpposite.op%20%3C%7C%20by%20ext%3B%20apply%20left_distrib\">here</a> is a computable construction.</li>\n</ol>\n</li>\n<li>\n<ol start=\"9\">\n<li>I think we need to show (2) to deduce Wedderburn--Artin and (1) will be a consequence of W--A. Semisimplicity of a ring is currently defined to mean the ring as a left module over itself is semisimple, and it's a nontrivial fact that it's equivalent to it being semisimple as a right module. It will also be a consequence that a semisimple ring is artinian (the <code>proof_wanted</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/ae0be75669055ab0f6b13dc09730cf5d263dc6de/Mathlib/RingTheory/Artinian.lean#L575\">here</a>) (but a simple ring might not be!). (Alternatively, the direct sum decomposition into finitely many simples shows it's of finite length, hence artinian.)</li>\n</ol>\n</li>\n</ul>",
        "id": 442434910,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717474814
    },
    {
        "content": "<p>Re: 9. Yes, I already realized that.  We'll prove (2) using the fact that the opposite of a division ring is also a division ring, and deduce (1) from the theorem</p>",
        "id": 442435279,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717475000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Matrix, MulOpposite<br>\nhelped me find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.transposeRingEquiv#doc\">docs#Matrix.transposeRingEquiv</a></p>",
        "id": 442435728,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717475240
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.isCentralScalar\">Matrix.isCentralScalar</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.transposeRingEquiv\">Matrix.transposeRingEquiv</a>, and <a href=\"https://loogle.lean-lang.org/?q=Matrix%2C%20MulOpposite\">27 more</a></p>",
        "id": 442435729,
        "sender_full_name": "loogle",
        "timestamp": 1717475241
    },
    {
        "content": "<p>Re: 3/5.  I would define a module to be semisimple if every submodule has a complement.  This would include an infinite direct sum of simple modules, among other things. </p>\n<p>Adding the artinian assumption means every submodule contains a simple one. </p>\n<p>If \"semisimple\" means \"finite direct sum of simple modules\" then you're right.</p>",
        "id": 442435745,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717475253
    },
    {
        "content": "<p>Yeah, I think the current mathlib definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSemisimpleModule#doc\">docs#IsSemisimpleModule</a> is that the lattice of submodule is a complemented lattice.</p>",
        "id": 442435891,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717475331
    },
    {
        "content": "<p>But we do know a semisimple module is the supremum of its simple submodules: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSemisimpleModule.sSup_simples_eq_top#doc\">docs#IsSemisimpleModule.sSup_simples_eq_top</a><br>\nas well as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSemisimpleModule.submodule#doc\">docs#IsSemisimpleModule.submodule</a></p>",
        "id": 442436124,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717475462
    },
    {
        "content": "<p>Sorry, after my previous edit of <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/442434910\">the post</a> I didn't notice the wrong numbering produced by the way Zulip handles markdown ...</p>",
        "id": 442436368,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717475621
    },
    {
        "content": "<p>An infinite direct sum of simple modules is complemented but not artinian</p>",
        "id": 442436474,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717475670
    },
    {
        "content": "<p>I agree, I am only claiming that any semisimple module (not necessarily artinian) is the direct sum of its isotypic components.<br>\nIf the module is the ring itself, then it's f.g. and can't be an infinite direct sum, so it's a finite direct sum of simples and therefore of finite length and artinian.</p>",
        "id": 442436802,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717475868
    },
    {
        "content": "<p>Got it.  In 5,6 we'll assume f.g. = artinian (best add a proof of the equivalence), and then at step 8 will argue that a semisimple ring is f.g.</p>",
        "id": 442437026,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717476002
    },
    {
        "content": "<p>Regarding the opposite: it's not true that the opposite of a matrix ring is the same matrix ring -- it's the matrix ring over the opposite coefficient ring.  Is the proof you found for commutative coefficient rings?</p>",
        "id": 442437218,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717476111
    },
    {
        "content": "<p>Checked: it is</p>",
        "id": 442437406,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717476213
    },
    {
        "content": "<p>Yeah, commutativity comes from the CommSemigroup instance, so mathlib doesn't have the desired RingEquiv apparently ... I also found nothing with <code>Pi.semiring, MulOpposite</code>.</p>",
        "id": 442437788,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717476430
    },
    {
        "content": "<p>We can write one</p>",
        "id": 442437924,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717476499
    },
    {
        "content": "<p>At least we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite.instDivisionRing#doc\">docs#MulOpposite.instDivisionRing</a> ...</p>",
        "id": 442437978,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717476537
    },
    {
        "content": "<p>For 5 I'm claiming the following is true and I don't think you need to assume anything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">SimpleModule</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsSemisimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">IsSemisimpleModule</span><span class=\"bp\">.</span><span class=\"n\">sSup_simples_eq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">sSup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">le_antisymm</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">sSup_le</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">congr_arg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span>\n<span class=\"w\">    </span><span class=\"n\">IsSemisimpleModule</span><span class=\"bp\">.</span><span class=\"n\">sSup_simples_eq_top</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">map_top</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">range_subtype</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"n\">conv_lhs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">sSup_le</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hS</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">le_sSup</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">constructor</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">comap_subtype_self</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_top</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_setOf</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hS</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">IsSimpleModule</span><span class=\"bp\">.</span><span class=\"n\">congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">equivMapOfInjective</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">injective_subtype</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">by_contra!</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">hN</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IsSemisimpleModule</span><span class=\"bp\">.</span><span class=\"n\">sSup_simples_eq</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">sSup_empty</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_of_forall_not_mem</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"n\">hS</span><span class=\"bp\">.</span><span class=\"m\">2</span>\n</code></pre></div>",
        "id": 442438315,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717476664
    },
    {
        "content": "<p>I'm not sure: I don't think a complemented lattice need have minimal elements.</p>",
        "id": 442438897,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1717476901
    },
    {
        "content": "<p>Hmm, it looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/CompactlyGenerated/Basic.html#exists_setIndependent_of_sSup_atoms_eq_top\">exists_setIndependent_of_sSup_atoms_eq_top</a> directly gives a direct sum decomposition into simples, given <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSemisimpleModule.sSup_simples_eq_top#doc\">docs#IsSemisimpleModule.sSup_simples_eq_top</a> (which is proved using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isAtomistic_of_complementedLattice#doc\">docs#isAtomistic_of_complementedLattice</a>, which uses the fact that the lattice of submodules is a compactly generated complete modular lattice).</p>",
        "id": 442440293,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717477452
    },
    {
        "content": "<p>Okay, it's a bit cumbersome to convert between sSup of submodules of a submodule and sSup in the original module, but I've worked out a proof and updated my post above.</p>",
        "id": 442444902,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717479654
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/442438315\">The proofs</a> can be simplified a lot using the atom(ist)ic API, and I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/13636\">#13636</a>.</p>\n<p>Here's an easy way to see the submodule lattice of a semisimple R-module is atomic: every nonzero element generates a cyclic submodule isomorphic to R/I for some ideal I. Take a maximal ideal M containing I, then the submodule M/I of R/I has a complement, which must be isomorphic to (R/I)/(M/I)=R/M, a simple R-module.</p>",
        "id": 443484573,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717862440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I'm running into an issue involving the definition of an isotypic component; in particular, I'm struggling to get the clauses to work properly. </p>\n<p>Here is one definition of isotypic component I've written: (I've written out multiple definitions of isotypic component and been playing around to see which one will lead to the easiest proofs later on, but the exact contents of the definitions are likely not creating the issue)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isotypic</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">sSup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">Bijective</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I am using this definition in the sum of all isotypic components of M:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isotypic_sup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsSemisimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">sSup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">isotypic</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The definition of isotypic component isn't perfect as we it only makes sense to talk about isotypic components when $S$ is a simple $R$-module, but when I add the clause [IsSimpleModule R S] to the definition of isotypic component and get: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isotypic</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">sSup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">Bijective</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>then the above definition of isotypic_sup has an error, where the part I = isotypic S is labelled with the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span><span class=\"w\"> </span><span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">↥</span><span class=\"n\">S</span>\n</code></pre></div>\n<p>In the end, I want to have the definition of isotypic component include the clause  [IsSimpleModule R S], so is there a way to resolve the above issue?</p>",
        "id": 446708748,
        "sender_full_name": "Jiang Xu Wan",
        "timestamp": 1719260450
    },
    {
        "content": "<p>Another independent issue concerning specific definition of isotypic is how to induce an instance of Module R N if we have (N : Submodule R M). I have found the instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Submodule/Basic.html#SubmoduleClass.module\">SubmoduleClass.module</a>, but I'm not quite sure how to use it.</p>\n<p>Edit: I might be able to work around this issue?</p>",
        "id": 446713265,
        "sender_full_name": "Jiang Xu Wan",
        "timestamp": 1719261456
    },
    {
        "content": "<blockquote>\n<p>when I add the clause [IsSimpleModule R S] to the definition of isotypic component and get: ... then the above definition of isotypic_sup has an error, where the part I = isotypic S is labelled with the error</p>\n</blockquote>\n<p>I think if you change <code>∃ (S : Submodule R M), IsSimpleModule R S ∧ I = isotypic S</code> to <code>∃ (S : Submodule R M) (_ : IsSimpleModule R S) : I = isotypic S</code> then the error should disappear. However, I don't recommend you add the clause [IsSimpleModule R S] to the definition of isotypic component.</p>\n<p>Comments on the definition of <code>isotypic</code>:</p>\n<ul>\n<li>It seems strange to make <code>R</code> and <code>M</code> implicit arguments</li>\n<li><code>Function.Bijective</code> is unnecessary (you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.toEquiv#doc\">docs#LinearEquiv.toEquiv</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.bijective#doc\">docs#Equiv.bijective</a>)</li>\n<li>In mathlib you don't add assumptions to a def that isn't absolutely necessary, so for example here I wouldn't include [IsSimpleModule] in the def <code>isotypic</code>, nor include [IsSemisimpleModule] in <code>isotypic_sup</code>, to avoid creating unnecessary goals like the <code>IsSimpleModule R ↥S</code> that you encountered. In fact the unused_argument linter would probably complain if you do include them. When proving theorems about the defs, you are of course free to add whatever conditions needed.</li>\n</ul>\n<blockquote>\n<p>Another independent issue concerning specific definition of isotypic is how to induce an instance of Module R N if we have (N : Submodule R M). I have found the instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Submodule/Basic.html#SubmoduleClass.module\">SubmoduleClass.module</a>, but I'm not quite sure how to use it.</p>\n</blockquote>\n<p>I don't think you need to explicit invoke the instance; it automatically endows <code>↥N</code> with an <code>R</code>-module structure given <code>N : Submodule R M</code>.</p>",
        "id": 446727999,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1719266610
    },
    {
        "content": "<p>The reason for restricting <code>isotypic(S)</code> to simple modules is that otherwise the two natural definitions<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mo stretchy=\"false\">{</mo><mi>N</mi><mo>⊂</mo><mi>M</mi><mo>:</mo><mi>N</mi><mo>≅</mo><mi>S</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\sum \\{ N\\subset M: N\\cong S\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">}</span></span></span></span><br>\nand<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mo stretchy=\"false\">{</mo><mtext>Im</mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">}</mo><mrow><mi>f</mi><mo>∈</mo><msub><mtext>Hom</mtext><mi>R</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\sum \\{ \\textrm{Im} (f) \\}_{f\\in\\textrm{Hom}_R(S,M)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord textrm\">Im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord textrm mtight\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1433em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span><br>\ndisagree</p>",
        "id": 446738544,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1719270536
    },
    {
        "content": "<p>Even worse, the theorem \"the sum of the isotypic components is direct\" would be false.</p>",
        "id": 446738770,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1719270675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I am aware that the <code>Function.Bijective</code> is unnecessary from the perspective that $f$ being a linear equivalence already means that it is bijective; the issue is that since I'm using an existential quantitier on $f$, I need to follow up with some proposition. Do you have any suggestions on how to fix this? i.e. is there a better way to write out that $S$ and $N$ need to be isomorphic to each other</p>",
        "id": 446739602,
        "sender_full_name": "Jiang Xu Wan",
        "timestamp": 1719271201
    },
    {
        "content": "<p>How about <code>Nonempty (S \\equiv N)</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nonempty\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nonempty</a>)</p>",
        "id": 446740575,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1719271800
    },
    {
        "content": "<p>Then <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Nonempty.html#Nonempty.some\">Nonempty.some</a> gives you the linear equiv (via axiom of choice if you don't mind)</p>",
        "id": 446740682,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1719271853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"716077\">Lior Silberman</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/446738770\">said</a>:</p>\n<blockquote>\n<p>Even worse, the theorem \"the sum of the isotypic components is direct\" would be false.</p>\n</blockquote>\n<p>Junyan's point above is that the theorem would not be false, because that theorem would have an <code>[IsSimpleModule]</code> argument!</p>",
        "id": 446753070,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719278877
    },
    {
        "content": "<p>The theorem would be true, but it would not match how mathematicians think here.  Instead of defining the notion from the literature we</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/446753070\">said</a>:</p>\n<blockquote>\n<p>Junyan's point above is that the theorem would not be false, because that theorem would have an <code>[IsSimpleModule]</code> argument!</p>\n</blockquote>\n<p>I understand that -- but this isn't the theorem the reader would expect.  I'm new here, so I'm happy to follow your lead, but that means first making an arbitrary generalization of a standard notion (which therefore should not be called \"isotypical component\" but something else), and then in every application adding an extra condition to return to the notion that is in use.</p>\n<p>We'll do as you say.</p>\n<p>If you are aware of any point in the literature where either generalization is used this would be different of course.</p>",
        "id": 446760251,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1719282021
    },
    {
        "content": "<p>It's the same principle as defining division without the requirement that the denominator must be nonzero, because we don't want to supply the nonzeroness condition every time we write <code>a/b</code>. When <code>b</code> is zero we just assign the junk value 0 to <code>a/b</code>. And we still call it division even though it doesn't satisfy what you expect of a division (e.g. <code>a/(a/b)=b</code> may not be true if <code>a=0</code>) outside of its intended domain, so I see no reason why we can't call the definition <code>isotypic</code> without the <code>IsSimpleModule</code> assumption. In <code>isotypic</code> we don't even need to assign any junk value using <code>if then else</code>, which is nice.</p>\n<p>Sometimes people choose junk values to make certain lemmas hold outside of the intended domain (e.g. 0⁻¹=0 makes <code>a⁻¹⁻¹=a</code> universally true, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=minpoly#doc\">docs#minpoly</a> is defined to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=minpoly.aeval#doc\">docs#minpoly.aeval</a> universally true but not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=minpoly.monic#doc\">docs#minpoly.monic</a>), but that's not a requirement.</p>",
        "id": 446770946,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1719287982
    },
    {
        "content": "<p>One of my first lean experiences was defining the square root of a nonnegative real number as a sup and then being told that I should delete \"nonnegative\" in the definition because why make a function which demands an input and then never uses it? Turns out the sup of the empty set was defined to be 0. It's a very common phenomenon in lean formalisation to define things in more generality than makes mathematical sense. The hypotheses go in the theorems, not the definitions, in the model of formalisation which mathlib uses</p>",
        "id": 446780038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719293095
    },
    {
        "content": "<p>Also, for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cfc#doc\">docs#cfc</a>. The fact that it doesn't take proposition arguments or bundled functions is a very important feature, in sharp contrast to the (mainly not for user consumption) <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cfcHom#doc\">docs#cfcHom</a></p>",
        "id": 446948530,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719336430
    },
    {
        "content": "<p>So does any of you have the proof of uniqueness of wedderburn theorem yet?</p>",
        "id": 448022059,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719691188
    },
    {
        "content": "<p>We really need that :((</p>",
        "id": 448022067,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719691197
    },
    {
        "content": "<p>Can you formalise the statement?</p>",
        "id": 448026992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719692691
    },
    {
        "content": "<p>of course we do we had it for decades no one can solve this</p>",
        "id": 448027556,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719692898
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">IsDiag</span>\n\n<span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"M[\"</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"s2\">\",\"</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"s2\">\"]\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">R</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Wedderburn_Artin_divisionRing_unique_algebra_version</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 448027706,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719692975
    },
    {
        "content": "<p>This doesn't compile :-(</p>",
        "id": 448031304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719694882
    },
    {
        "content": "<p>Our version of the theorem will have uniqueness</p>",
        "id": 448033440,
        "sender_full_name": "Lior Silberman",
        "timestamp": 1719696169
    },
    {
        "content": "<p>good to know :)</p>",
        "id": 448034047,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699016\">Edison Xie</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/448027556\">said</a>:</p>\n<blockquote>\n<p>of course we do we had it for decades no one can solve this</p>\n</blockquote>\n<p>You mean \"I can't solve this\", right? :-)</p>",
        "id": 448034148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719696433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/448034148\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"699016\">Edison Xie</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/448027556\">said</a>:</p>\n<blockquote>\n<p>of course we do we had it for decades no one can solve this</p>\n</blockquote>\n<p>You mean \"I can't solve this\", right? :-)</p>\n</blockquote>\n<p>I mean no one in our group could :((</p>",
        "id": 448034257,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696478
    },
    {
        "content": "<p>Do you have a maths proof?</p>",
        "id": 448034361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719696501
    },
    {
        "content": "<p>Yes but we somehow just stuck at the simple module part I sent u earlier</p>",
        "id": 448034416,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696526
    },
    {
        "content": "<p>All the other parts are working now</p>",
        "id": 448034465,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696543
    },
    {
        "content": "<p>What's the simple module part?</p>",
        "id": 448034519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719696562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"M[\"</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"s2\">\",\"</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"s2\">\"]\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"n\">R</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">](</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\">  </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">    </span><span class=\"n\">smul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">id_apply</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">id_apply</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">map_one'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">one_smul</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">map_zero'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">zero_smul</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">commutes'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MonoidHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OneHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMapClass</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">smul_def'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">      </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MonoidHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OneHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">AddHom</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Wdb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this</p>",
        "id": 448034680,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696611
    },
    {
        "content": "<p>Do you have a maths proof?</p>",
        "id": 448034796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719696661
    },
    {
        "content": "<p>and the proof is in <a href=\"https://stacks.math.columbia.edu/tag/074E\">https://stacks.math.columbia.edu/tag/074E</a> here, lemma 11.4.6 (4)</p>",
        "id": 448034821,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696669
    },
    {
        "content": "<p>and the equivalence in the</p>\n<p><span class=\"user-mention silent\" data-user-id=\"699016\">Edison Xie</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two-sided.20ideals/near/448034821\">said</a>:</p>\n<blockquote>\n<p>and the proof is in <a href=\"https://stacks.math.columbia.edu/tag/074E\">https://stacks.math.columbia.edu/tag/074E</a> here, lemma 11.4.6 (4)</p>\n</blockquote>\n<p>and the equivalence setup in this is the file MoritaEquivalence in the repository I invited u in</p>",
        "id": 448035211,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 448035218,
        "sender_full_name": "Edison Xie",
        "timestamp": 1719696795
    }
]