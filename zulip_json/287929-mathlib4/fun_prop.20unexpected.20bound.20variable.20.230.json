[
    {
        "content": "<p>does anyone know how to interpret the error message \"unexpected bound variable <a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a>\" in this context?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">Real.continuous_fourierChar</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">IsROrC.continuous_re</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">IsROrC.continuous_im</span>\n</code></pre></div>",
        "id": 421974689,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708144466
    },
    {
        "content": "<p>It is a bug in <code>fun_prop</code> :) The tactic is still rough around the edges ,I will look into it.</p>",
        "id": 421982239,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708152529
    },
    {
        "content": "<p>Hope you don't mind, I debugged this partially for fun in case it helps (you may have reached the same conclusion by now!): it seems that we index out of bounds when writing <code>let yVal := args[argId]!</code> in <code>splitMorToCompOverArgs</code>. In the example using <code>IsROrC.continuous_re</code>, <code>argId</code> is <code>5</code>, but <code>args</code> has size <code>3</code> (<code>#[K, inst, x]</code>).</p>\n<p>(The error message is because the <code>default</code> element of <code>Expr</code> is <code>.bvar 0</code>, which is what <code>[_]!</code> uses when out of bounds. On the web interface the panic isn't passed through.)</p>",
        "id": 421985606,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708154710
    },
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FunProp.Attr</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">fun_prop</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DFunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">imp</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_thm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">test_thm</span>\n</code></pre></div>",
        "id": 421985706,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708154812
    },
    {
        "content": "<p>Ohh thanks for figuring out what went wrong :) I just tested in on my new version of <code>fun_prop</code> which has much cleaner implementation and the problem is gone.</p>",
        "id": 421986091,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708155243
    },
    {
        "content": "<p>Nice! What command(s) do you use for debugging this sort of thing?</p>",
        "id": 422037195,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708198390
    }
]