[
    {
        "content": "<p>Recently (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12386\">#12386</a>) <code>RingOfIntegers</code> was promoted from a subalgebra to a type. I propose doing the same thing to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DedekindDomain.finiteAdeleRing#doc\">docs#DedekindDomain.finiteAdeleRing</a> , because <code>K_hat</code>, a.k.a. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>v</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>K</mi><mi>v</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_{v&lt;\\infty} K_v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0777em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the thing it's a subring of, is an auxiliary object whereas <code>finiteAdeleRing</code> a.k.a. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">A</mi><mi>K</mi><mi>f</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{A}_K^f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2605em;vertical-align:-0.2935em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.967em;\"><span style=\"top:-2.4065em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2935em;\"><span></span></span></span></span></span></span></span></span></span> is used as a ring, e.g. you tensor things with it, put a topology on it, consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">GL_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of it and so on, so I think it deserves to be a type.</p>\n<p>I made it a type in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13021\">#13021</a> by just literally writing <code>: Type _</code> after the definition, and then leaving it as a sub-K-algebra (the main contribution of the PR is beefing up the subring structure to a subalgebra structure). But the underlying type is a subtype of <code>K_hat</code> defined by a predicate <code>isFiniteAdele</code>, so I could literally define <code>finiteAdeleRing</code> (or rather <code>FiniteAdeleRing</code>)  as a subtype and then put a ring structure on it afterwards. As it is, it's defined as a subring so inherits a ring structure when promoted to a type. Is there any preference between leaving it like this (\"define as a subring/subalgebra and then coerce to a type\") and redefining it as <code>{x : K_hat / x.IsFiniteAdele}</code> and then building the ring structure on the subtype directly?</p>",
        "id": 440167752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716406377
    },
    {
        "content": "<p>Both definitions have the same defeq, right?</p>",
        "id": 440168590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716406695
    },
    {
        "content": "<p>Personally I'd prefer the \"coercion of subalgebra\" approach</p>",
        "id": 440168674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716406735
    }
]