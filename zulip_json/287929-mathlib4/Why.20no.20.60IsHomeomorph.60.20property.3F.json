[
    {
        "content": "<p>For simple functions between types, there is both <code>Function.Bijective</code>, a property encoding that a function is invertible, and <code>Equiv</code>, a structure carrying both the function and its inverse. This makes it possible to have theorems like <code>bijective_iff : Bijective f ↔ ...</code> when a function is only bijective under certain conditions, and still allows you to refer to the corresponding equiv as <code>Equiv.ofBijective (bijective_iff.mpr ...)</code>. For homeomorphisms though, it seems to me that there is only the <code>Homeomorph</code> structure extending <code>Equiv</code> and no corresponding <code>IsHomeomorph</code> property. Why is that the case?</p>",
        "id": 435012711,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1713886622
    },
    {
        "content": "<p>I get that equivs are easier to work with because they directly bundle all the relevant maps and properties, and that properties like <code>IsHomeomorph</code> would thus get used less often in comparison, but it still seems like a bit of an oversight to me that currently the easiest ways to write \"f is a homeomorphism\" (at least that I know of) are <code>Continuous f ∧ IsOpenMap f ∧ Bijective f</code>and <code>∃ h : Homeomorph X Y, h = f</code></p>",
        "id": 435012828,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1713886659
    },
    {
        "content": "<p>One potential issue is that if we define <code>IsHomeomorph</code>, we are then tempted to state each lemma that mentions homeomorphisms twice, once using <code>Homeomorph</code> and once using <code>IsHomeomorph</code>.</p>\n<p>You are correct that in the current situation it is indeed a bit cumbersome to state that a given function is a homeomorphism. We could add an <code>IsHomeomorph</code> predicate, and have a bit of API to conveniently transform between <code>Homeomorph</code> and <code>IsHomeomorph</code>.</p>",
        "id": 435015616,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713887585
    },
    {
        "content": "<p>I think the API for homeomorphisms in general is underdeveloped. I would be in favor of an <code>IsHomeomorph</code> predicate.</p>",
        "id": 435040988,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713895495
    },
    {
        "content": "<p>Shouldn't this kind of predicate be defined more or less automatically, together with some basic API ? As suggested by floris, this is painful to have to do this by hand for every such structure.</p>",
        "id": 435045369,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713897134
    },
    {
        "content": "<p>I would argue that we <em>don't</em> want to do it for every such structure (unless we do a wider refactor to separate data from properties every, including in bundled structures). Homeomorphisms are a bit of a special case, especially because we unbundle large portions of topology.</p>",
        "id": 435046897,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713897712
    },
    {
        "content": "<p>Probably not for all, but the basic math vocabulary is built on the (noncategorical) point of view of structures for which isomorphisms are bijections that preserve everything , hence play an important rôle.</p>",
        "id": 435056893,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713901586
    },
    {
        "content": "<p>(From the univalent type theoretic point of view, isomorphisms would just be type equalities! <a href=\"https://www.sciencedirect.com/science/article/pii/S0019357713000694\">https://www.sciencedirect.com/science/article/pii/S0019357713000694</a>)</p>",
        "id": 435057399,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713901775
    },
    {
        "content": "<p>Antoine, what I mean is that we don't have this unbundling for most kinds of morphisms. For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsMonoidHom#doc\">docs#IsMonoidHom</a> technically exists, but it has been deprecated for ages now.</p>",
        "id": 435062509,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713903725
    },
    {
        "content": "<p>My (meager) point is that <code>IsHomeomorph</code> is of a different nature than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsMonoidHom#doc\">docs#IsMonoidHom</a>. The former is about isomorphisms, and is basically intrinsic, the second one is about morphisms and requires the choice of an adequate definition.</p>",
        "id": 435064431,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713904586
    },
    {
        "content": "<p>I think what Jireh means is that it makes sense to talk about homeomorphisms in an unbundled way because we already do the same with continuous maps a lot, but that that isn't true for monoid morphisms?</p>",
        "id": 435064751,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1713904737
    },
    {
        "content": "<p>also, a monoid isomorphism is just a monoid morphism that's bijective, right? so there's no need for an extra predicate for that, <code>Bijective</code> already is one</p>",
        "id": 435064944,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1713904826
    },
    {
        "content": "<p>I've gone ahead and opened a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12533\">#12533</a>) adding such a predicate together with a few properties and characterisations that I think would be useful - does that look about right? I'm not very experienced with designing API like this so I imagine there's probably still lots of things to improve, but I hope this should be a good start</p>",
        "id": 436187720,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1714449497
    }
]