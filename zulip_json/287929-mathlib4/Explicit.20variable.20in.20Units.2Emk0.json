[
    {
        "content": "<p>In the following lemma (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.mk0#doc\">docs#Units.mk0</a>) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I would suggest that <code>(a : G₀)</code> is left implicit. Is there a reason why it is not? I have seen that <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>  worked on this, perhaps he has a comment.</p>",
        "id": 426129221,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710251411
    },
    {
        "content": "<p>That's just from the port. This hasn't been touched since Mathlib3, where I assume the point was that you often may want to delay the proof obligation, and in Lean 3 it was more of an issue because you had to do <code>@</code>. In Lean 4 this is less of a problem.</p>\n<p>I don't have strong feelings here.</p>",
        "id": 426130135,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710251655
    },
    {
        "content": "<p>I see your point. I would suggest to make it implicit, but will wait for some reactions here before opening a PR.</p>",
        "id": 426130256,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710251698
    },
    {
        "content": "<p>If you make it implicit, then you will see <code>mk0 _</code> in the goal view and have no idea which unit is being talked about</p>",
        "id": 426133941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710252712
    },
    {
        "content": "<p>In which context? I mean, if a lemma needs a unit and you have in your context an <code>h : a ≠ 0</code>, then you can feed your lemma with <code>mk0 h</code>. When would you see <code>mk0 _ </code>?</p>",
        "id": 426134127,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710252752
    },
    {
        "content": "<p>Can't you change that with <code>pp.proofs</code> or some options?</p>",
        "id": 426134163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710252764
    },
    {
        "content": "<p>After that, in the infoview, you will see <code>mk0 _</code> in the goal, for example.</p>",
        "id": 426135272,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710253080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Explicit.20variable.20in.20Units.2Emk0/near/426135272\">said</a>:</p>\n<blockquote>\n<p>After that, in the infoview, you will see <code>mk0 _</code> in the goal, for example.</p>\n</blockquote>\n<p>Ah, I see. Well, but shall we privilege the code in function of the infoview's behaviour? This is something that changes \"often\"</p>",
        "id": 426135499,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710253144
    },
    {
        "content": "<p>Like I said, I think it's an option you can select.</p>",
        "id": 426138633,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710253950
    },
    {
        "content": "<p>But that behavior has long been the norm.</p>",
        "id": 426138714,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710253979
    },
    {
        "content": "<p>OK, I'll live with it (and without too much suffering <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 426138791,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710254001
    },
    {
        "content": "<p>Of course, you can always just use an underscore if you already have the proof available.</p>",
        "id": 426138877,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710254033
    },
    {
        "content": "<p>Sure, that's what I am doing and I ended up wondering if it is normal.</p>",
        "id": 426139006,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710254056
    },
    {
        "content": "<p>I agree that argument should stay explicit</p>",
        "id": 426188838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710268072
    },
    {
        "content": "<p>is <code>proofs.withType</code> off by default now? I would expect to see <code>.mk0 (_ : a ≠ 0)</code></p>",
        "id": 426192321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710269375
    },
    {
        "content": "<p>We could write a custom delaborator to print that way despite the default</p>",
        "id": 426208282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710275881
    },
    {
        "content": "<p>But the result is longer than the underscore spelling</p>",
        "id": 426208420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710275930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Explicit.20variable.20in.20Units.2Emk0/near/426192321\">said</a>:</p>\n<blockquote>\n<p>is <code>proofs.withType</code> off by default now? I would expect to see <code>.mk0 (_ : a ≠ 0)</code></p>\n</blockquote>\n<p>Yes, it was recently disabled by default because showing the types can be quite verbose</p>",
        "id": 426284267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710319185
    }
]