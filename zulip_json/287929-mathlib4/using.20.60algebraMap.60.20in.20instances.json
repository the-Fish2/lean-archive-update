[
    {
        "content": "<p>With the change in transparency from Lean 3 to Lean 4, it is a bad idea to build instances using <code>algebraMap</code> since it is not <code>reducible</code> and typeclass synthesis calls unification with reducible and instances transparency. </p>\n<p>The path to making <code>algebraMap</code> reducible goes all the way down to making <code>Function.comp</code> reducible. This is also a bad idea. </p>\n<p>It seems like the only way out is to declare data, eg <code>toFun</code> explicitly, when building the instance. </p>\n<p>Do people have more clever thoughts to escape the current situation?</p>",
        "id": 422683662,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708541351
    },
    {
        "content": "<p>Unbundling <code>algebraMap</code> fixes this, right?</p>",
        "id": 422729054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708563711
    },
    {
        "content": "<p>Which is good for other reasons anyway (we can use the same function for towers of monoids)</p>",
        "id": 422729126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708563754
    },
    {
        "content": "<blockquote>\n<p>goes all the way down to making <code>Function.comp</code> reducible</p>\n</blockquote>\n<p>I'm increasingly beginning to  think that independently, Function.comp <em>should</em> be <code>reducible</code>, as it was in Lean 3</p>",
        "id": 422775628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708593194
    },
    {
        "content": "<p>I think that the case for <code>comp</code> being reducible is the same as for <code>id</code> being reducible</p>",
        "id": 422777399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708593940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/using.20.60algebraMap.60.20in.20instances/near/422729126\">said</a>:</p>\n<blockquote>\n<p>Which is good for other reasons anyway (we can use the same function for towers of monoids)</p>\n</blockquote>\n<p>You mean something like the <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/419429970\"><code>Lift</code> classes I talked about here?</a></p>",
        "id": 422781237,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1708595405
    }
]