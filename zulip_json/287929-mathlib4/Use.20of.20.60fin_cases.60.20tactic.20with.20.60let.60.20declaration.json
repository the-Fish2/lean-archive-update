[
    {
        "content": "<p>How do I use the <code>fin_cases</code> tactic with a <code>let declaration</code>? According to the docs, the <code>using</code> clause hasn't been added to mathlib4, but can I really not run this example (also from the docs) without naming the generated hypotheses? </p>\n<div class=\"codehilite\" data-code-language=\"example\"><pre><span></span><code>  let a := f 3\n  fin_cases a using ha\n</code></pre></div>\n<p>It generates the error </p>\n<div class=\"codehilite\" data-code-language=\"tactic\"><pre><span></span><code>dependent elimination failed, failed to solve equation\n  { val := 0, isLt := _ } = a```. I assume this is because it gets hung up on `Fin 0`.\n</code></pre></div>",
        "id": 423303397,
        "sender_full_name": "Will Bradley",
        "timestamp": 1708906543
    },
    {
        "content": "<p>Is this the full code you're referring to? (From <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.finCases#doc\">docs#Lean.Elab.Tactic.finCases</a>) It's helpful to provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FinCases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">3</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 423303888,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708906990
    },
    {
        "content": "<p>Maybe the <code>using</code> variant wasn't ported. Here is a workaround</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FinCases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"k\">with</span> <span class=\"n\">ha</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">a</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 423303994,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708907086
    },
    {
        "content": "<p>fin_cases has a lot of issues and one of the things in my todo list is to rewrite it</p>",
        "id": 423399190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708955224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674953\">Will Bradley</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Use.20of.20.60fin_cases.60.20tactic.20with.20.60let.60.20declaration/near/423303397\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"tactic\"><pre><span></span><code>dependent elimination failed, failed to solve equation\n  { val := 0, isLt := _ } = a\n</code></pre></div>\n<p>I assume this is because it gets hung up on <code>Fin 0</code>.</p>\n</blockquote>\n<p>The error is that it's seeing <code>{ val := 0, isLt := _ } = f 3</code> and for \"dependent elimination\" to succeed, which is used in <code>cases</code> inside the tactic, it needs one side of this to be a free variable, or it needs both sides to be a constructor application (and then it recurses).</p>",
        "id": 423443497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708967132
    }
]