[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"c1\">-- fails without bump</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">80000</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>Clearly <code>RingHom</code>s are an instance of <code>MonoidHomClass</code>, but Lean doesn't try <code>RingHomClass.toMonoidHomClass</code> until it's given up on several other things. The list it tries (in reverse order) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">MulRingSeminormClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"n\">MulEquivClass.instMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MonoidWithZeroHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">RingHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulSemiringActionHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulCharClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMonoidHomClass.toMonoidHomClass</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I was hoping that Yury's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10544\">#10544</a> would put paid to this nonsense, but even though we don't have the OrderHoms in this list any more, Lean's algorithm of \"try most recently defined instances first\" means that it tries looking for <code>ContinuousMonoidHomClass (↥(𝓞 K) →+* K) (↥(𝓞 K)) K</code> first, and the completely ludicrous <code>#synth TopologicalSpace (𝓞 K)</code> (there is no topology anywhere in the question, so this is doomed to failure) takes over 0.2 seconds to fail. </p>\n<p>It's hard to point the finger at anything here; Lean just seems to ask a huge number of stupid questions and takes too long to realise that they're stupid. The profiler looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">160795</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011076</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.normedRing</span> <span class=\"n\">to</span> <span class=\"n\">NormedRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">017978</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.normedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">NormedCommRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010052</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.seminormedRing</span> <span class=\"n\">to</span> <span class=\"n\">SeminormedRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">023295</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IntermediateField.toField</span> <span class=\"n\">to</span> <span class=\"n\">Field</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035223</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">019341</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">117823</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">091417</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DivisionRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">054837</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">257074</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">138810</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">022135</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">Field.henselian</span> <span class=\"n\">to</span> <span class=\"n\">HenselianLocalRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">022303</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">ValuationRing.of_field</span> <span class=\"n\">to</span> <span class=\"n\">ValuationRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">022662</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">ValuationRing.of_field</span> <span class=\"n\">to</span> <span class=\"n\">ValuationRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">022018</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">ValuationRing.of_field</span> <span class=\"n\">to</span> <span class=\"n\">ValuationRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">058106</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">Field.instLocalRingToSemiringToDivisionSemiringToSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LocalRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">038654</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.to_principal_ideal_domain</span> <span class=\"n\">to</span> <span class=\"n\">IsPrincipalIdealRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">020477</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">DivisionRing.isPrincipalIdealRing</span> <span class=\"n\">to</span> <span class=\"n\">IsPrincipalIdealRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010096</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010205</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">068382</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010016</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016449</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010516</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">066137</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016047</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">015671</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011469</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011076</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DivisionRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016001</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012722</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">024936</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010741</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010219</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DivisionRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010018</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">071225</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035450</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011253</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.12709</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011747</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">057460</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>I don't know what to do about this issue, but it makes number fields hard to use.</p>",
        "id": 421856153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708089433
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> help?</p>",
        "id": 421858125,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708090081
    },
    {
        "content": "<p>It does! It still times out, but we only need to double once to 40000 (on master we need 50000, on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> we only need 30000, so this is definitely a step in the right direction)</p>",
        "id": 421858981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708090387
    },
    {
        "content": "<p>Furthermore, I see <code>OrderMonoidHomClass.toMonoidHomClass</code> is back in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> (the thing Yury removed in the merged-yesterday <a href=\"https://github.com/leanprover-community/mathlib4/pull/10544\">#10544</a>) so there's a chance that merging master into that branch will actually remove the heartbeat bump completely.</p>",
        "id": 421859318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708090508
    },
    {
        "content": "<p>Note that Yury is not done with <a href=\"https://github.com/leanprover-community/mathlib4/pull/10544\">#10544</a>: he was also planning to separate the algebraic and topological properties of monoids, it just hasn't been done yet, but it should also give you a good gain.</p>",
        "id": 421859855,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708090692
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a>, the profiler says this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">127925</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012172</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.normedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">NormedCommRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">024413</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IntermediateField.toField</span> <span class=\"n\">to</span> <span class=\"n\">Field</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016359</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">078029</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">079443</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DivisionRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">052683</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095724</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010863</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">Field.henselian</span> <span class=\"n\">to</span> <span class=\"n\">HenselianLocalRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010334</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">ValuationRing.of_field</span> <span class=\"n\">to</span> <span class=\"n\">ValuationRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010595</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">ValuationRing.of_field</span> <span class=\"n\">to</span> <span class=\"n\">ValuationRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">025099</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">Field.instLocalRingToSemiringToDivisionSemiringToSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LocalRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">018363</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.to_principal_ideal_domain</span> <span class=\"n\">to</span> <span class=\"n\">IsPrincipalIdealRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">019646</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">013119</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011887</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>which is a clear improvement (e.g. everything is under 0.1 seconds now) (I suspect that the profiler isn't reporting things &lt; 0.01 second, which is why the list is shorter).</p>",
        "id": 421859856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708090692
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> re the sorries in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> : the problem in <code>ContinuousFunctionalCalculus.lean</code> seems to be a diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.normedRing</span> <span class=\"o\">(</span><span class=\"n\">elementalStarAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">NormedCommRing.toNormedRing</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>I have a 5 hour train journey ahead of me this evening -- let me know if I can help with this PR.</p>",
        "id": 421873097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708095013
    },
    {
        "content": "<p>Thanks. I have a fix for that. See <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/instance.20priorities.20and.20parents\">#lean4 &gt; instance priorities and parents</a> for the underlying issue</p>",
        "id": 421873275,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708095072
    },
    {
        "content": "<p>Otherwise, it could definitely use some eyes since it is basically scratch work atm</p>",
        "id": 421873397,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708095111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> this line from <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> makes me very happy <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<blockquote>\n<p>Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus   instructions    -31.4%</p>\n</blockquote>",
        "id": 421880793,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708097226
    },
    {
        "content": "<p>Yeah, Matt brings joy to the community. I remember feeling just the same way (as did Amelia) when his PRs were making group cohomology file instructions go down by 30%.</p>",
        "id": 421883141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708097948
    },
    {
        "content": "<p>Unfortunately that may be because of the <code>sorry</code>’s in that commit <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 421884462,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708098297
    },
    {
        "content": "<p>Fastest proof is no proof <span aria-label=\"brain\" class=\"emoji emoji-1f9e0\" role=\"img\" title=\"brain\">:brain:</span></p>",
        "id": 421886498,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708098916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20inference.20and.20number.20fields/near/421873097\">said</a>:</p>\n<blockquote>\n<p>BTW <span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> re the sorries in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> : the problem in <code>ContinuousFunctionalCalculus.lean</code> seems to be a diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.normedRing</span> <span class=\"o\">(</span><span class=\"n\">elementalStarAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">NormedCommRing.toNormedRing</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>I have a 5 hour train journey ahead of me this evening -- let me know if I can help with this PR.</p>\n</blockquote>\n<p>Somewhere the <code>SubringClass</code> instance is the only thing available to build one a <code>NormedRing</code>. Bumping priorities of the added classes built via <code>Subring</code>'s does nothing</p>",
        "id": 421894161,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708100668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20inference.20and.20number.20fields/near/421880793\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> this line from <a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> makes me very happy <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<blockquote>\n<p>Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus   instructions    -31.4%</p>\n</blockquote>\n</blockquote>\n<p>It looks like -9% with a working file</p>",
        "id": 421908684,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708105360
    },
    {
        "content": "<p>On the example at the start of this topic, after merging master, it is just at the border of <code>20000</code> heartbeats. It goes through without the bump but tracing the instance synthesis pushes it over</p>",
        "id": 421908931,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708105446
    },
    {
        "content": "<p>So if Yury makes more changes then we should be back on track :-)</p>\n<p>BTW</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.normedRing</span> <span class=\"o\">(</span><span class=\"n\">elementalStarAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">NormedCommRing.toNormedRing</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works on master (on line 78 of <code>Analysis.NormedSpace.Stat.ContinuousFunctionalCalculus</code>)</p>",
        "id": 421919983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708109670
    },
    {
        "content": "<p>I don’t understand why you need all this fancy algebra to crash instance synthesis. Look at how a sober example works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- deterministic time out</span>\n</code></pre></div>",
        "id": 421922258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708110609
    },
    {
        "content": "<p>Now I’ll stop derailing this thread and open another one.</p>",
        "id": 421922542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708110761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20inference.20and.20number.20fields/near/421919983\">said</a>:</p>\n<blockquote>\n<p>BTW</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.normedRing</span> <span class=\"o\">(</span><span class=\"n\">elementalStarAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">NormedCommRing.toNormedRing</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works on master (on line 78 of <code>Analysis.NormedSpace.Stat.ContinuousFunctionalCalculus</code>)</p>\n</blockquote>\n<p>This works on the current version also. Even <code>by with_reducible_and_instances rfl</code> works</p>",
        "id": 421949366,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708122870
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10617\">#10617</a> is ready for review now. About ~2T less instructions.</p>",
        "id": 423110624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708731128
    },
    {
        "content": "<p>This looks amazing!</p>",
        "id": 423111846,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708731886
    },
    {
        "content": "<p>Should this solve all the various problems with <code>𝓞 K</code> once and for all?</p>",
        "id": 423111927,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708731956
    },
    {
        "content": "<p>It will help but not completely resolve I think</p>",
        "id": 423112660,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708732501
    }
]