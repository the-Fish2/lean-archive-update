[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> : I think that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a> should be a mixin class that takes <code>StarRing</code> as a parameter. The reasoning comes down to two issues.</p>\n<p>The first is that we need to be able to make <code>C(α, R)</code> into a star-ordered ring for certain values of <code>R</code>. Right now, we can do this only for particular values of <code>R</code>, but we have no type class assumptions that we can put on <code>R</code> (at least, no existing ones, and any new one would be ad-hoc) to guarantee that <code>C(α, R)</code> is a star-ordered ring. This is problematic for working with the functional calculus (because we want to be able to say that <code>cfcHom</code> is monotone on functions, which follows from the fact that it is star homomorphism, but only if the domain and codomain are star-ordered rings.</p>\n<p>The second is that we will eventually want <code>C(α, A)</code> to be a star-ordered ring whenever <code>A</code> is a C⋆-algebra, but, as I indicated before, there will be no way to assume this as a hypothesis.</p>\n<p>Do any of you have qualms about this change?</p>",
        "id": 430691609,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712021641
    },
    {
        "content": "<p>I'm OK with it!</p>",
        "id": 430739382,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1712046966
    },
    {
        "content": "<p><del>Sounds fine by me</del> Sounds harmless, but I don't understand the motivation yet.</p>",
        "id": 430741239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712047628
    },
    {
        "content": "<p>Though I don't immediately understand why making it a mixin helps with your first point</p>",
        "id": 430741402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712047687
    },
    {
        "content": "<blockquote>\n<p>The second is that we will eventually want C(α, A) to be a star-ordered ring whenever A is a C⋆-algebra, but, as I indicated before, there will be no way to assume this as a hypothesis.</p>\n</blockquote>\n<p>Can this work? I forget the spelling of \"C⋆-algebra\" in mathlib, but on the assumption it has a base ring argument, you can't conclude <code>StarOrderedRing</code> from it because that typeclass does not have that argument. (it's the <code>Module R M</code> not being allowed to imply <code>AddCommMonoid M</code> thing)</p>",
        "id": 430742134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712047949
    },
    {
        "content": "<p>For the second point, it\"s not a problem because the scalar ring is a fixed type (<code>\\C</code> for now, and later <code>\\R</code> too).</p>",
        "id": 430788116,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712063716
    },
    {
        "content": "<p>For the first point, I want to be able to say that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cfcHom#doc\">docs#cfcHom</a> is order preserving when the domain and codomain are star ordered rings. But (a) there is no hypothesis I can currently assume on <code>R</code> to make the continuous <code>R</code>-valued functions a star-ordered ring, and (b) I can't just assume <code>[StarOrderedRing C(\\alpha, R)]</code> because that puts a second star operation on the continuous functions.</p>",
        "id": 430788920,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712063967
    },
    {
        "content": "<p>To me it makes sense, I’ve always found it a bit weird to bundle algebra and order instead of having compatibility mixins (which we can do now with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CovariantClass#doc\">docs#CovariantClass</a> and friends).</p>",
        "id": 430789584,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712064169
    }
]