[
    {
        "content": "<p>In the linked code <a href=\"https://github.com/leanprover-community/mathlib4/pull/13463/files#diff-0e85160543270c3e17ee0dccb9d4dfef5316069b47db4d288a89c1a67ded1c07R67-R76\">https://github.com/leanprover-community/mathlib4/pull/13463/files#diff-0e85160543270c3e17ee0dccb9d4dfef5316069b47db4d288a89c1a67ded1c07R67-R76</a> there are two lemmas both of which I would like to be (d)simp lemmas, but the first lemma would simplify the LHS of the second lemma, so that the linter complains: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">pushforward_obj_map_apply</span><span class=\"w\"> </span><span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  (((pushforward φ).obj M).map f) m</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  (((pushforward φ).obj M).map f) m</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [@pushforward_obj_obj, @Functor.comp_obj, @Functor.op_obj]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>Here, <code>pushforward_obj_obj</code> simplifies (in a rather invisible manner) the LHS of <code>pushforward_obj_map_apply</code>. (Similar issues happen all the time with lemmas involving <code>DFunLike.coe</code>.)</p>\n<p>At the declaration of the second lemma <code>pushforward_obj_map_apply</code>, would there be a way to say (via an attribute?): I know that the LHS is not in simpNF, please simpNF it for me!</p>\n<p>If this were possible, I feel it would ease very much the development of category theory and algebraic geometry!</p>",
        "id": 443101462,
        "sender_full_name": "Joël Riou",
        "timestamp": 1717690275
    },
    {
        "content": "<p>I also encountered such a problem at <a href=\"https://github.com/leanprover-community/mathlib4/pull/13412\">#13412</a> and here's a mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Logic</span><span class=\"bp\">.</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">e_apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c1\">-- fails because `A` gets rewritten to `Nat` first.</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">simpNF</span><span class=\"w\"> </span><span class=\"c1\">-- fails (as expected)</span>\n</code></pre></div>",
        "id": 443102264,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717690519
    }
]