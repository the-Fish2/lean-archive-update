[
    {
        "content": "<p>I have a definition that only works in Odd rank (More Info in <a href=\"#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean\">this</a> thread. My idea was to define a separate OddFintype typeclass that only allows Fintypes with an odd cardinality. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OddFintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OddFintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a smarter way to do this (and if not, should something like this be in the mathlib?)</p>",
        "id": 431701274,
        "sender_full_name": "Christian K",
        "timestamp": 1712433179
    },
    {
        "content": "<p>In that specific case, <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> gave you a definition that works for all ranks, so I would formalise it instead of restricting your current definition</p>",
        "id": 431701529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712433347
    },
    {
        "content": "<p>Probably it is too hard for you, though. In that case, restrict to the 3D case and we can think about generality later</p>",
        "id": 431701593,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712433373
    },
    {
        "content": "<p>Here's a setup for a finite type with odd cardinality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OddCard</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- quickly written proof:</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OddCard</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">OddCard.odd</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_finite_iff_infinite</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.card_eq_zero_of_infinite</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">key</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OddCard</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Many times you don't need <code>Fintype</code>, since instead you just need the mere fact that something is <code>Finite</code>. It's easier to work with a proposition (like <code>Finite</code> or <code>OddCard</code>) instead of data-carrying classes (like <code>Fintype</code>).</p>\n<p>Here, I'm using a trick that <code>Nat.card</code> can only be nonzero if the type is finite.</p>",
        "id": 431701773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712433532
    },
    {
        "content": "<p>You can also work with <code>[Fintype α] [OddCard α]</code> together without worrying that the <code>OddCard</code> will have any data that conflicts with the <code>Fintype</code> instance.</p>",
        "id": 431701887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712433628
    },
    {
        "content": "<p>Yeah, it is too hard... But the thing I'm trying to do here is to generalize SO and later equidecomposability to get it into mathlib. Were can I learn about the things I need to generalize equidecomposability? Or is it just too ambitious (at least for me, as a non - mathematictian)?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20Fintype/near/431701593\">said</a>:</p>\n<blockquote>\n<p>Probably it is too hard for you, though. In that case, restrict to the 3D case and we can think about generality later</p>\n</blockquote>",
        "id": 431701920,
        "sender_full_name": "Christian K",
        "timestamp": 1712433660
    },
    {
        "content": "<p>I have no clue and I'm a master student, so <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 431701946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712433688
    },
    {
        "content": "<p>Hopefully Scott can tell you</p>",
        "id": 431701954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712433701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20Fintype/near/431701887\">said</a>:</p>\n<blockquote>\n<p>You can also work with <code>[Fintype α] [OddCard α]</code> together without worrying that the <code>OddCard</code> will have any data that conflicts with the <code>Fintype</code> instance.</p>\n</blockquote>\n<p>Ohhh, thank you, I did not know about OddCard, this is very nice</p>",
        "id": 431701955,
        "sender_full_name": "Christian K",
        "timestamp": 1712433703
    },
    {
        "content": "<p>To be clear, I defined <code>OddCard</code> in my post</p>",
        "id": 431702009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712433724
    },
    {
        "content": "<p>Also, I'm not sure this <code>OddCard</code> is good or bad to have around in mathlib, but in any case, <em>if</em> it's a good idea, then this is how I would probably go about designing it.</p>",
        "id": 431702031,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712433760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20Fintype/near/431702009\">said</a>:</p>\n<blockquote>\n<p>To be clear, I defined <code>OddCard</code> in my post</p>\n</blockquote>\n<p>Ok, I should have read better..... anyways, thank you. In my case, I think it is not worth bothering with using OddCard to define SU and SO, I'll just wait for someone smarter to  do it ....</p>",
        "id": 431702164,
        "sender_full_name": "Christian K",
        "timestamp": 1712433907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20Fintype/near/431701946\">said</a>:</p>\n<blockquote>\n<p>I have no clue and I'm a master student, so <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Ok, I'm gonna just go back to studying for my high school math exam then..... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  (maybe some day....)</p>",
        "id": 431702443,
        "sender_full_name": "Christian K",
        "timestamp": 1712434189
    },
    {
        "content": "<p>Why not just assume 2 is invertible? (And then just be able to define SO as the kernel of the determinant.) That seems like a pretty reasonable assumption for getting started, and people who care about characteristic 2 can be responsible for switching from \"kernel of determinant\" to \"kernel of Dickson\" later, without it really needing to interact with anything <span class=\"user-mention\" data-user-id=\"652766\">@Christian K</span> wants to do.</p>",
        "id": 431710306,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712442167
    },
    {
        "content": "<p>It seems like this might be a case where excessive generality from the beginning is discouraging a potential contributor. :-)</p>",
        "id": 431710331,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712442197
    },
    {
        "content": "<p>Yes, you make a good point.</p>",
        "id": 431712322,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712444630
    },
    {
        "content": "<p>Regarding whether mathlib should have the typeclass; often for this type of one-off thing, we just use <code>Fact (Odd &lt;| Nat.card X)</code></p>",
        "id": 431749692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712482639
    },
    {
        "content": "<p>It can always be promoted to a named typeclass later</p>",
        "id": 431749721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712482651
    },
    {
        "content": "<p>Ok thank you for your friendly help, I'll read up on what 2 being invertible means and define SO that way (I started it so I'm gonna finish it).</p>",
        "id": 431985072,
        "sender_full_name": "Christian K",
        "timestamp": 1712586845
    },
    {
        "content": "<p>I'm continuing this here because I think it makes the most sense. I added the requirement that 2 is invertible like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/--`Matrix.specialUnitaryGroup` is the group of unitary `n` by `n` matrices where the determinant</span>\n<span class=\"sd\">is 1-/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">specialUnitaryGroup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.restrict</span> <span class=\"n\">detMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n</code></pre></div>\n<p>(link to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11708\">PR</a>)</p>",
        "id": 432980181,
        "sender_full_name": "Christian K",
        "timestamp": 1712955260
    }
]