[
    {
        "content": "<p>I'm sending here the frustration I shared about earlier on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9477\">#9477</a>:</p>\n<p>I expected a first contribution to be reviewed and merged in a day or two, but a combination of things has drawn this process out much longer than that, and it has  caused my experience to slowly feel frustrating. Let me break down the factors that led to this, that me and other people have identified; some are out of anyone's control, while I think some could be solved by improved documentation or tooling:</p>\n<ul>\n<li>Lean together happened last week, so a lot of active users were busy with preparing or attending talks</li>\n<li>There was already a bit of backlog on the pull requests (there are ~5 pages of PRs that are actively maintained)</li>\n<li>I'm new and haven't yet fully internalized things like the naming scheme, the way <code>to_additive</code> works, etc.</li>\n<li>There isn't an easy way to run lints locally</li>\n<li>There isn't a formatter (there are talks about it on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7217\">#7217</a>, but no robust solution exists yet)</li>\n<li>There isn't an easy way to build documentation locally</li>\n</ul>\n<hr>\n<p>For lints, you <em>can</em> run <code>#lint</code>, but I think it'd be nice to have a <code>lake exe lint</code> command that would do it for you (ideally it would accept as input a list of files to check), so that this step can quickly be ran from the terminal.</p>\n<hr>\n<p>There are talks about writing a formatter, and there have been some attempts before. I do believe that getting a formatter up and running should be a big priority, since it would move most of the coding style issues that may be be pointed out in a review to something solved automatically, and done from the terminal.</p>\n<hr>\n<p>From what I can see, documentation isn't built on non-master branches in the CI, so I have to build things locally if I want to check that I didn't screw up something. Doing so has been surprisingly difficult:</p>\n<ul>\n<li>the instructions in the README are incorrect (you first need to run <code>lake -R -Kdoc=on update</code> to retrieve the <code>doc-gen4</code> dependency, then <code>lake -Kdoc=on build Mathlib:docs</code> to start the build, and the output is placed in <code>.lake/build/doc</code>, not in <code>build/doc</code>)</li>\n<li>the docs take ages to build (~2h for a cold run, and ~10' for a hot run); this is in contrast with languages like Rust where a cold run takes 2 minutes at most</li>\n<li>re-running <code>lake -Kdoc=on build Mathlib:docs</code>does <em>not</em> update files changed; instead, I have to nuke the corresponding generated file in the build directory for it to behave as expected</li>\n<li>the above issue means that when switching branches or rebasing, the docs have to be rebuilt from scratch (which takes 2 hours ☺)</li>\n<li>there are quirks related to documentations that aren't caught by linter rules:<ul>\n<li>if <code>--/</code> is put at the end of a comment and the comment is multi-line, then a <code>-</code> will be placed on a new line after the text above, turning it into a title or creating an empty list (as in the module documentation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.MorphismProperty.IsCompatibleWithShift#doc\">docs#CategoryTheory.MorphismProperty.IsCompatibleWithShift</a>)</li>\n<li><code>to_additive</code> doesn't copy over documentation by default (as in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FreeAddMonoid.uniqueAddUnits#doc\">docs#FreeAddMonoid.uniqueAddUnits</a>)</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>I do think that the last three issues are something that, if solved or improved, would make contributions much easier for both new contributors, old contributors and reviewers.</p>",
        "id": 412854157,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705273828
    },
    {
        "content": "<p>Regarding documentation, the current solution is quite simple: we don’t expect contributors to check that the documentation is generated correctly during the PR process. Of course it would be better to have the tooling, but for now I’d say you can count on the reviewer to point out mistakes, and if anything bad happens you can open a PR with the \"easy\" tag to fix it and it will probably be merged in at most a day.</p>",
        "id": 412855016,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705274692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/412854157\">said</a>:</p>\n<blockquote>\n<p>I expected a first contribution to be reviewed and merged in a day or two, but a combination of things has drawn this process out much longer than that,</p>\n</blockquote>\n<p>In the past year or two, the project became much bigger and our procedures and tooling are still adjusting. We're working on this but most people here are volunteers who contribute in their free time, not paid developers. In particular, AFAIK, there are exactly 0 people who are being paid for reviewing PRs.</p>\n<p>Thank you for your feedback!</p>",
        "id": 412855067,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705274761
    },
    {
        "content": "<p>Regarding the timescale, unfortunately the reality right now is that your expectations are usually not met. I don’t have precise data points, but from experience I would say that the typical time for a new contributor to get his first PR merged is about a week, and it can get much longer for too ambitious PRs. Of course we would all love to get that time down, and any feedback on that is much appreciated, but I just want you to know what to expect.</p>",
        "id": 412855545,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705275227
    },
    {
        "content": "<blockquote>\n<p>In the past year or two, the project became much bigger and our procedures and tooling are still adjusting. We're working on this but most people here are volunteers who contribute in their free time, not paid developers. In particular, AFAIK, there are exactly 0 people who are being paid for reviewing PRs.</p>\n</blockquote>\n<p>That is true, I should have phrased this differently, please pardon my clumsy wording. I wasn't expecting the review to be done in a few days, but I was hoping that the review process would allow me to synchronously write my contributions and get them merged.</p>\n<p>I really do appreciate all the work that has gone into mathlib, and I think mathlib is one of humanity's most honorable ongoing projects :)</p>",
        "id": 412855551,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705275232
    },
    {
        "content": "<blockquote>\n<p>Regarding the timescale, unfortunately the reality right now is that your expectations are usually not met.</p>\n</blockquote>\n<p>I'll have to adapt my working style around that, yeah. In the past I spent a lot of time on projects where I could simply rebase branches willy-nilly onto one another, and it would take me long enough to implement changes on new feature branches that by the time I'm done, the previous changes that I rely on were most likely already merged.</p>\n<p>I'll be attempting a different method, inspired by LeanAPAP, where I do all of the contributions in one go on a draft branch, then split those over time into small, neatly-separated PRs, cherry-picking suggestions made in reviews back to the main draft branch.</p>",
        "id": 412855933,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705275600
    },
    {
        "content": "<p>Yes, I think a lot of people here use that kind of workflow.</p>",
        "id": 412856217,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705275823
    },
    {
        "content": "<p>Regarding the linter you can run <code>lake exe runLinter Mathlib</code> locally indeed for the main linters (and a separate script in <code>scripts</code> for the style linters.). Almost everything that CI does is inside the main mathlib repo (or a dependency). Why do we not recommend this to newcomers so often though? One reason is that in order to lint all of mathlib you need to build all of mathlib, and this takes some time so many people choose to let CI do it for them. Of course if you have a great machine to work on this workflow may not be optimal for you</p>",
        "id": 412856320,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705275890
    },
    {
        "content": "<p>Regarding the formatter, there is some basic work on autofixes in the aforementioned style linter scripts <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/scripts/lint-style.py\">https://github.com/leanprover-community/mathlib4/blob/master/scripts/lint-style.py</a>. Looking at your PR the <code>&lt;-</code> being changed to a left arrow is absolutely something that script could and should do for you. Myself I have these linters and auto-fixers run automatically whenever I save a lean file</p>",
        "id": 412856639,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705276151
    },
    {
        "content": "<p>But yeah I agree with many of your points, and many of us would like to see these things improved. It is simply a question of enough motivated people having enough time available to do so, it's not a conscious choice of this community not to try and improve the first PR experience or anything like that.</p>",
        "id": 412856779,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705276267
    },
    {
        "content": "<p>I think you also very very much underestimate the difficulty of writing a code formater for a language that is as extensible as Lean. This has nothing to do with writing a code formater for python or javascript.</p>",
        "id": 412877435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705287191
    },
    {
        "content": "<p>And I'm also very curious to know what are the open source projects that you contributed to and where PRs get merged in a day or two.</p>",
        "id": 412877825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705287525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/412877825\">said</a>:</p>\n<blockquote>\n<p>And I'm also very curious to know what are the open source projects that you contributed to and where PRs get merged in a day or two.</p>\n</blockquote>\n<p>When I opened my first mathlib3 PR (very messy, didn't complete it), I've got a very detailed review next day (AFAIR, from Mario). For me, this was probably the most important argument for joining the project. But the library was so much smaller back then, both in size and in the number of open PRs...</p>",
        "id": 412879176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705288618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/412855545\">said</a>:</p>\n<blockquote>\n<p>Regarding the timescale, unfortunately the reality right now is that your expectations are usually not met. I don’t have precise data points, but from experience I would say that the typical time for a new contributor to get his first PR merged is about a week, and it can get much longer for too ambitious PRs. Of course we would all love to get that time down, and any feedback on that is much appreciated, but I just want you to know what to expect.</p>\n</blockquote>\n<p>My first PR took at least a couple of months. My second PR, took over a year, even after detailed review and verbal approval. I try to understand that reviewing PRs is hard work, especially by volunteers, but the experience is definitely frustrating, by nobody’s fault. In fact, I’m very impressed by the detailed review I did get, from the four or so reviewers I encountered.</p>\n<p>All this also depends on the area of maths you work on. There’s definitely a bias towards algebra, and I usually take any delay in reviews to mean I’m doing something new, and fewer people are comfortable reviewing it.</p>\n<p>But I wonder if there’s a better system to prevent very constructive PRs from rotting for months just because the one or two relevant reviewers get too busy. Perhaps there should be a process / standard for training and onboarding more and more qualified reviewers.</p>",
        "id": 413079496,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705380011
    },
    {
        "content": "<p>Has anyone made a plot of (PRs per day)/(number of reviewers) as a function of time? I argue it should be at least linear.</p>",
        "id": 413080135,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705380497
    },
    {
        "content": "<p>On second thought, the growth of mathlib <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">looks linear</a>, and we ought to have been attracting more and more contributors, so my hypothesis is that the growth is reviewer-limited. This suggests directing more resources to training more reviewers.</p>",
        "id": 413080559,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705380834
    },
    {
        "content": "<p>I think specifically it is more \"willingness\" / \"availability\" than \"expertise\" / \"credentialling\" that is the limiting factor.</p>\n<p>While there is a designated status \"reviewer\", of course anyone and everyone can and should review. That status is a combination incentive/reward and signal that the maintainers will typically quickly merge something approved by a \"reviewer\".</p>\n<p>I do tend to agree with the idea that review availability may well be the principal limiting factor.</p>",
        "id": 413081951,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381816
    },
    {
        "content": "<p>Note, we do have a <a href=\"https://leanprover-community.github.io/contribute/pr-review.html\">PR review guide</a> which teaches the basics of reviewing Mathlib PRs to any interested party. In fact, it is even designed to be <em>graduated</em> in the sense that it teaches the easiest tasks associated with reviewing first and then progresses to harder questions to answer.</p>",
        "id": 413087264,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705385695
    },
    {
        "content": "<p>Note also: the squeaky wheel often gets the grease. If you have a PR languishing, explicitly requesting a review (or what it would take to finish up) on Zulip can help be the impetus.</p>",
        "id": 413087872,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705386095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/413080559\">said</a>:</p>\n<blockquote>\n<p>On second thought, the growth of mathlib <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">looks linear</a>, and we ought to have been attracting more and more contributors, so my hypothesis is that the growth is reviewer-limited. This suggests directing more resources to training more reviewers.</p>\n</blockquote>\n<p>We don't have statistics for the length of the PR (or the review) queue, right? (Rust has <a href=\"https://rust-lang.github.io/rustc-pr-tracking/\">this</a>, which is great.) My impression is that the queue is getting longer and longer (with the usual fluctuations), which makes me believe reviewer capacity is definitely a bottleneck here.</p>",
        "id": 413146438,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705409236
    },
    {
        "content": "<p><a href=\"https://bit.ly/3cKk3ld\">#queue</a> is at ~170 right now. Before the Lean 3 to Lean 4 transition I recall it rarely being above 100.</p>",
        "id": 413150767,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705410730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/413080559\">said</a>:</p>\n<blockquote>\n<p>This suggests directing more resources to training more reviewers.</p>\n</blockquote>\n<p>I think we need more reviewers, too.<br>\nI would especially like to point out that on the list<br>\n<a href=\"https://github.com/leanprover-community/mathlib4?tab=readme-ov-file#maintainers\">https://github.com/leanprover-community/mathlib4?tab=readme-ov-file#maintainers</a><br>\nthere are currently no maintainers dedicated to the <code>Computability</code> and <code>Data</code> sections.<br>\nAs a result, I frequently have trouble finding people to review my PRs in these areas.</p>",
        "id": 413151711,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705411080
    },
    {
        "content": "<p>On the side of tooling, however, I think Lean 4 is doing great for how young the language is!</p>",
        "id": 413152279,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705411271
    },
    {
        "content": "<p><a href=\"https://bit.ly/3cKk3ld\">#queue</a> will be coming down soon I believe. Looking at it the Monday or Tuesday after Lean Together isn't really representative. The week before I think it was closer to 100.</p>\n<p>But yes, more people <em>participating in review</em> (note: they don't need to be labeled as \"reviewers\" with that title) is essential. This is the reason we have the PR review guide.</p>",
        "id": 413154475,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705411992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> are you having trouble with getting <em>any</em> reviews (indicative of the fact that we have very few people working in computability as a whole) or with getting <em>already reviewed</em> (even by a non-maintainer) PRs merged?</p>",
        "id": 413154749,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705412082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Frustration.20around.20existing.20tooling.20and.20the.20review.20process/near/413154749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> are you having trouble with getting <em>any</em> reviews (indicative of the fact that we have very few people working in computability as a whole) or with getting <em>already reviewed</em> (even by a non-maintainer) PRs merged?</p>\n</blockquote>\n<p>Troubles with getting PRs merged are expected. Waiting for reviews could be cut down, however.</p>",
        "id": 413155086,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705412174
    },
    {
        "content": "<p>I actually named the branch for <a href=\"https://github.com/leanprover-community/mathlib4/pull/9736\">#9736</a> <code>trabant</code> because just after that PR was opened there were exactly <strong>601</strong> open PRs</p>",
        "id": 413156470,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705412589
    }
]