[
    {
        "content": "<p>I have made a library rewrite tactic, using my <code>RefinedDiscrTree</code>, which works with shift-clicking, using <code>ProofWidgets</code>. It suggests rewrites for the selected expression. When choosing a selection, it will paste a suitable application of the <code>rw</code> tactic into the editor. For now I've called it <code>rw??</code>, since <code>rw?</code> is already taken by the not point&amp;click library rewrite tactic.</p>\n<p>The code is here:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10612\">https://github.com/leanprover-community/mathlib4/pull/10612</a></p>\n<p>It is co-authored by <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> .</p>",
        "id": 422037733,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708198974
    },
    {
        "content": "<p>The cache isn't pre-built currently, so it takes a minute to build.</p>",
        "id": 422038201,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708199494
    },
    {
        "content": "<p>This sounds great!</p>",
        "id": 422061918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708226581
    },
    {
        "content": "<p>The cache has been figured out as well now.</p>",
        "id": 422273207,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708360618
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ugVgj9H3BQd_flf_20i45Fem/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ugVgj9H3BQd_flf_20i45Fem/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ugVgj9H3BQd_flf_20i45Fem/image.png\"></a></div><p>Here is a screenshot of what the tactic looks like. The results are partitioned into sections, where each section corresponds to a particular pattern from the discrimination tree. The sections are sorted by how good the pattern matches. Within each section, the lemmas are sorted by number of parameters, then by whether it is left to right or right to left, and then by string length of the name. In this example you can see that the patterns <code>a * b⁻¹</code> and <code>a * a⁻¹</code> are different to my discrimination tree, and <code>a * a⁻¹</code> gets a better score.</p>",
        "id": 422282293,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708364147
    },
    {
        "content": "<p>If the same pattern appears in multiple places, then we insert <code>{occs := .pos [..] }</code> into the <code>rw</code> tactic call.</p>",
        "id": 422282886,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708364431
    },
    {
        "content": "<p>Wouldn’t it be more efficient to display what the goal would become (still will diff highlighting)?</p>",
        "id": 422284192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708365152
    },
    {
        "content": "<p>Or simply what the selected subterm would become. Seeing the whole lemma signature is really cluttered.</p>",
        "id": 422284326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708365216
    },
    {
        "content": "<p>And needing to use the color code to understand where is the result is also very inefficient (even for the lucky people who can see colors). We don’t care whether we are rewriting from left to right or right to left since the widget will handle that (I guess).</p>",
        "id": 422284529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708365323
    },
    {
        "content": "<p>I also think it would be nice if the interface could provide the option of <em>not</em> specifying the occurence when users want to rewrite everywhere.</p>",
        "id": 422284701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708365406
    },
    {
        "content": "<p>I agree that printing the whole lemma makes it cluttered, and that we shouldn't need the colour code to figure out which way the rewriting goes. At the same time, I don't want each lemma to take up more lines than it currently does, because the list of possible lemmas can get quite long, so printing the whole entire new goal for every lemma isn't an option.</p>\n<p>So, A possible change would be to display the new sub-term for each lemma. However, this doesn't provide full information, because some lemmas create new extra goals if the lemma has extra hypotheses (or uninstantiated variables). For this, one would have to also show the new side-goals to the user. There are some details to be filled in about the exact layout, but I think it is the best way.</p>",
        "id": 422287631,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708366928
    },
    {
        "content": "<p>As for rewriting everywhere, it is easy enough to delete the occurrence part from the <code>rw</code> tactic. If this was supported by the widget, how would you envision this option being selected by the user?</p>",
        "id": 422287858,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708367062
    },
    {
        "content": "<p>I agree that new goals also need to be displayed somehow. And being able to rewrite everywhere is very low priority compared to figuring out those other questions.</p>",
        "id": 422292699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708369818
    },
    {
        "content": "<p>By the way, on the topic of new goals, the <code>rw</code> tactic is too eager with introducing new goals into the tactic state. I think it should only add metavariables to the tactic state that are created by that <code>rw</code> call. For example in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>after the <code>rw</code> tactic there are suddenly 2 goals for instantiating <code>?n</code>.</p>",
        "id": 422296465,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708371883
    },
    {
        "content": "<p>It should be easy to fix.</p>",
        "id": 422296544,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708371927
    },
    {
        "content": "<p>Also, if the type of the lemma is not displayed, then it would be nice if the lemma name was displayed as an expression, so that hovering over it displays the lemma type, and ctrl+clicking on it would take you to its definition. In that case the button for doing the rewrite would be separate from the lemma name.</p>",
        "id": 422307092,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708376832
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/gSuUf7GuvpWhoTv9EuzNW7qP/image.png\">image.png</a><br>\nI've made some changes, and this is the new view. The side goals are shown on a new line with a <code>⊢</code>. I would like to have the button on the same line as the lemma, so that the view is more compact and more results can be seen at the same time.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gSuUf7GuvpWhoTv9EuzNW7qP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gSuUf7GuvpWhoTv9EuzNW7qP/image.png\"></a></div>",
        "id": 422477788,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708453941
    },
    {
        "content": "<p>I'm not at all experienced in making interfaces, so if you know this better, feel free to help.</p>",
        "id": 422478246,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708454097
    },
    {
        "content": "<p>I should also mention that the widget crashes a lot. Whenever I go to a different file to make some edits and then come back to my test file to test the changes, shift-clicking on the goal makes lean stop working. I then have to press ctrl+shift+x to reload the file and then it magically works again. It seems to also be avoided by deleting the <code>rw??</code> tactic manually and retyping it, but not always.</p>",
        "id": 422478820,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708454291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422478820\">said</a>:</p>\n<blockquote>\n<p>I should also mention that the widget crashes a lot. Whenever I go to a different file to make some edits and then come back to my test file to test the changes, shift-clicking on the goal makes lean stop working. I then have to press ctrl+shift+x to reload the file and then it magically works again. It seems to also be avoided by deleting the <code>rw??</code> tactic manually and retyping it, but not always.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 422481034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708455145
    },
    {
        "content": "<p>Is the layout issue coming from using the TryThis framework?</p>",
        "id": 422481157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708455194
    },
    {
        "content": "<p>For the buttons I use <code>ProofWidgets.MakeEditLink</code>. I don't know though whether it is responsible for the crashing</p>",
        "id": 422481463,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708455304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422284701\">said</a>:</p>\n<blockquote>\n<p>I also think it would be nice if the interface could provide the option of <em>not</em> specifying the occurence when users want to rewrite everywhere.</p>\n</blockquote>\n<p>Perhaps this could be handled through a code action that shows up after the tactic is pasted (the gif below demonstrates a rough prototype).</p>\n<p><a href=\"/user_uploads/3121/YDYCBQOuKNP8Q7fUcyeTf677/rw_config_delete_demo.gif\">rw_config_delete_demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YDYCBQOuKNP8Q7fUcyeTf677/rw_config_delete_demo.gif\" title=\"rw_config_delete_demo.gif\"><img src=\"/user_uploads/3121/YDYCBQOuKNP8Q7fUcyeTf677/rw_config_delete_demo.gif\"></a></div>",
        "id": 422619263,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1708522633
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/jNPygSt3TYiENgQUMPz-4Bdf/image.png\">image.png</a><br>\nHere's a new iteration of a similar layout. Let me know which changes you think should be kept and which not.<br>\nThe idea of putting a button on the same line as the result turns out to be more tricky than I thought, because it is unclear where the button should go exactly and what happens when there is not enough space.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jNPygSt3TYiENgQUMPz-4Bdf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jNPygSt3TYiENgQUMPz-4Bdf/image.png\"></a></div>",
        "id": 422663798,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708534540
    },
    {
        "content": "<p>I think that including <code>rw</code> is only cluttering the list.</p>",
        "id": 422665356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708534968
    },
    {
        "content": "<p>One could even argue we don’t care about the lemma name, only about the new expression and the side goals.</p>",
        "id": 422665516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708535011
    },
    {
        "content": "<p>If we're not showing the lemma names, then there will be multiple library results that look exactly the same, and they just differ by which lemma gets pasted. So in that case some filtering of equal results could be done.</p>\n<p>It's surprising to see how many lemmas in Mathlib have multiple names, and I feel like sometimes one name is more \"correct\" than another. e.g. <code>Mathlib.Tactic.RingNF.mul_assoc_rev</code> doesn't feel right instead of <code>mul_assoc</code>. Is there a way  to filter out such silly duplicates from the beginning? Otherwise, I sort the lemmas by whether they are left-to-right or right-to-left, and then by name length. So for reverse associativity, <code>Mathlib.Tactic.RingNF.mul_assoc_rev</code> will show up first :(</p>",
        "id": 422672300,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708537024
    },
    {
        "content": "<p>I suppose I could filter out all lemmas in the namespace <code>Mathlib.Tactic</code>.</p>",
        "id": 422672584,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708537103
    },
    {
        "content": "<p>Yes those lemmas are completely internal to the tactic.</p>",
        "id": 422675288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708538124
    },
    {
        "content": "<p>Ok, I will exclude all lemmas in the <code>Mathlib</code> namespace.</p>",
        "id": 422681790,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708540593
    },
    {
        "content": "<p>On the topic of it crashing, when it crashes and when I have <code>set_option profiler true</code> enabled, I get a long log of errors that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">DivisionCommMonoid</span> <span class=\"n\">took</span> <span class=\"mi\">110</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Mul</span> <span class=\"n\">took</span> <span class=\"mi\">120</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">LE</span> <span class=\"n\">took</span> <span class=\"mi\">106</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">LE</span> <span class=\"n\">took</span> <span class=\"mi\">121</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">LE</span> <span class=\"n\">took</span> <span class=\"mi\">107</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">113</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">111</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">102</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">103</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">145</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Fintype</span> <span class=\"n\">took</span> <span class=\"mi\">103</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Mul</span> <span class=\"n\">took</span> <span class=\"mi\">100</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">LE</span> <span class=\"n\">took</span> <span class=\"mi\">108</span><span class=\"n\">ms</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>So apparently my program is still running in some form.</p>",
        "id": 422682193,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708540780
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 422684410,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708541638
    },
    {
        "content": "<p>Something I liked about the original view is that you could tell for each section what matching pattern the section corresponded to. So in that example these patterns are <code>a * a⁻¹</code>, <code>a * b⁻¹</code> and <code>a * b</code> respectively. So I'm considering putting the matching pattern as a title for each section. However I'm not sure how to display this exactly, because the patterns <code>a * b</code> with type <code>Nat</code>, or <code>a * b</code> with a general type are different patterns. What do you think about this?</p>",
        "id": 422688647,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708543250
    },
    {
        "content": "<p>I think that ambiguity is fine.</p>",
        "id": 422689067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708543430
    },
    {
        "content": "<p>I do prefer getting that additional information</p>",
        "id": 422689977,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708543807
    },
    {
        "content": "<p>I assume Patrick is talking about the ambiguity in the type information, and Emilie about showing the pattern at all?</p>",
        "id": 422690270,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708543930
    },
    {
        "content": "<p>Yes this is what is was talking about.</p>",
        "id": 422690488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708544035
    },
    {
        "content": "<p>You assumed right :)</p>",
        "id": 422693247,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708544566
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Z4Pn3K_u9tHQ1t983qVR9qKP/image.png\">image.png</a><br>\nHere's my updated version with the pattern information. I show the pattern as it appears in the first lemma.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z4Pn3K_u9tHQ1t983qVR9qKP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Z4Pn3K_u9tHQ1t983qVR9qKP/image.png\"></a></div><p>Now each of the sections is its own drop-down, so that you can close it to more easily to look at other sections.</p>",
        "id": 422702365,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708548379
    },
    {
        "content": "<p>I still think it would be nicer to hide the lemma name and make the new expression being the link. This way users would click on what they want to see after rewriting.</p>",
        "id": 422703774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708549026
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Q2OXbe9U115z82gIgdLs_Iwy/image.png\">image.png</a><br>\nHere's what that may look like:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Q2OXbe9U115z82gIgdLs_Iwy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Q2OXbe9U115z82gIgdLs_Iwy/image.png\"></a></div>",
        "id": 422707263,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708550683
    },
    {
        "content": "<p>Notice that one of the rewrites looks like it is an identity rewrite. This is the lemma <code>MonCat.mul_of</code>, and it rewrites the type of the multiplication. It feels a bit uncomfortable that such a lemma exists where the two sides look exactly the same.</p>",
        "id": 422709164,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708551622
    },
    {
        "content": "<p>The lemma is used only once in mathlib, and where it is used, simply removing it doesn't break the proof <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/RepresentationTheory/Action/Basic.lean#L381\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/RepresentationTheory/Action/Basic.lean#L381</a></p>",
        "id": 422711223,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708552640
    },
    {
        "content": "<p>How hard would it be to support an option to choose between having a compressed view (which I guess would be the default), and having a longer view (with the name of the theorems suggested)?</p>",
        "id": 422713364,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708553690
    },
    {
        "content": "<p>It would be easy to do this with a config argument in the tactic.</p>\n<p>But I imagine it is better if there is a button saying <code>switch to detailed view</code>, so that you can do the switch directly. I'm not sure how to implement that. But I can imagine such a design pattern being useful in general and maybe this could be a good addition to <code>ProofWidgets</code>.</p>",
        "id": 422714547,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708554297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422478820\">said</a>:</p>\n<blockquote>\n<p>I should also mention that the widget crashes a lot. Whenever I go to a different file to make some edits and then come back to my test file to test the changes, shift-clicking on the goal makes lean stop working. I then have to press ctrl+shift+x to reload the file and then it magically works again. It seems to also be avoided by deleting the <code>rw??</code> tactic manually and retyping it, but not always.</p>\n</blockquote>\n<p>Hi, I tried the branch but couldn't reproduce this. What do you mean exactly by Lean stopping to work? Is it that in the editor panel, if you edit something, Lean no longer reports errors or messages? It would help to know the exact sequence of things you did to get into such a situation.</p>",
        "id": 422716637,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708555416
    },
    {
        "content": "<p>What happened was that I shift-click an expression, and then the expression gets highlighted, but the widget completely freezes. Even if I move the cursor, the widgets stays how it is.</p>\n<p>But recently it seems to be happening less. And also for me it is hard to reproduce, since it seems to happen whenever I leave the file open while working on another file for a while and then I come back.</p>",
        "id": 422717096,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708555675
    },
    {
        "content": "<p>And yes, lean no longer reports errors or messages</p>",
        "id": 422717277,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708555766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422717277\">said</a>:</p>\n<blockquote>\n<p>And yes, lean no longer reports errors or messages</p>\n</blockquote>\n<p>In the editor panel? Whether they show up in the infoview is quite independent of whether they show up in the editor. I would be very surprised if the infoview crashing influenced the editor. The one exception to that is if it freezes up the entire VSCode window, which may actually be what's happening in your case. This can happen if you print out lots and lots of expressions (e.g. there are tons of applicable rewrites)</p>",
        "id": 422717889,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708556117
    },
    {
        "content": "<p>I believe that errors weren't showing up in the editor either, although I'd have to double check it when the error occurs.</p>",
        "id": 422718221,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708556308
    },
    {
        "content": "<p>Sure, if it happens again feel free to ping me with what you did exactly and I can look into it :) A short recording would be even better</p>",
        "id": 422718532,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708556484
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/UKj24WhuAlH_yPCh_jBTc0-j/Widgetbug.mp4\">Widgetbug.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/UKj24WhuAlH_yPCh_jBTc0-j/Widgetbug.mp4\" title=\"Widgetbug.mp4\"><video preload=\"metadata\" src=\"/user_uploads/3121/UKj24WhuAlH_yPCh_jBTc0-j/Widgetbug.mp4\"></video></a></div><p>I started recording this video after the bug had started. But to initiate the bug I didn't do anything in particular. I just added some set_option to the beginning and tried the tactic again. And after reloading this worked fine again. In the video you can see me typing in the editor, but the letters are appearing quite a bit more slowly than I'm typing them. By not reloading the window for a while in this state, my laptop fan start making noise.</p>",
        "id": 422726776,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708562038
    },
    {
        "content": "<p>Okay, here is what I think is happening: while the function <code>LibraryWrite.rpc</code> is still processing, all the rest of UI is blocked (in particular, editor requests are not being responded to). If you waited for a while it <em>would</em> eventually update (it does on my machine), but at any rate the blocking behaviour is an issue.</p>",
        "id": 422864433,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708621831
    },
    {
        "content": "<p>More precisely: the Lean server uses tasks to respond to requests from the editor and the infoview. Every time something changes (e.g. the cursor moves, or we shift-click select something), a new request is sent and a new task is started in the server to respond to it. This task occupies one thread in the thread pool; but there is a fixed amount of threads in the thread pool (depending on how many CPU cores you have iirc). So if the task is long-running (because, for instance, it searches the whole library for applicable rewrites), it might happen that a bunch of these long-running tasks will occupy the entire thread pool, thus leaving no room for tasks that would respond to editor requests. There are fundamentally two underlying issues: one is that the infoview sends too many requests, and the server ends up doing redundant/duplicate work; the other is that there is no way to cancel RPC requests. The latter one we could theoretically hack around in ProofWidgets (except for <a href=\"#narrow/stream/270676-lean4/topic/Should.20cancelling.20a.20purely.20mapped.20task.20cancel.20the.20original.3F\">this issue</a>), but a proper solution would involve changing the RPC protocol to support that.</p>",
        "id": 422928534,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708648221
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/ProofWidgets4/pull/46\">ProofWidgets4#46</a> should help with these performance issues. But you'll have to wait until it is all merged :)</p>",
        "id": 422939002,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708655025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422681790\">said</a>:</p>\n<blockquote>\n<p>Ok, I will exclude all lemmas in the <code>Mathlib</code> namespace.</p>\n</blockquote>\n<p>I think you should only exclude lemmas in <code>Mathlib.Tactic</code>.</p>\n<p>I am still hoping to convince the maintainers that <em>everything</em> in Mathlib needs to be in the <code>Mathlib</code> namespace! :-)</p>",
        "id": 422946757,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708660958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Does the infoview need its own task scheduler?</p>",
        "id": 422948013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708661942
    },
    {
        "content": "<p>I hope not! The point is just that there are sometimes tasks on the server that we launch due to a UI action and want to cancel early when the user decides to view something else instead.</p>",
        "id": 422948126,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708662026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422946757\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422681790\">said</a>:</p>\n<blockquote>\n<p>Ok, I will exclude all lemmas in the <code>Mathlib</code> namespace.</p>\n</blockquote>\n<p>I think you should only exclude lemmas in <code>Mathlib.Tactic</code>.</p>\n<p>I am still hoping to convince the maintainers that <em>everything</em> in Mathlib needs to be in the <code>Mathlib</code> namespace! :-)</p>\n</blockquote>\n<p>There is absolutely no internal difference between the current status quo vs this + open Mathlib at the start of every file right? And then externally the benefits are huge</p>",
        "id": 422982939,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708681917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/422928534\">said</a>:</p>\n<blockquote>\n<p>So if the task is long-running (because, for instance, it searches the whole library for applicable rewrites)</p>\n</blockquote>\n<p>Under normal circumstances (i.e. when this bug doesn't happen) <code>rw??</code> runs in less than a second.</p>",
        "id": 422988715,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708684098
    },
    {
        "content": "<p>Hm, when trying it out it would consistently take a few seconds between clicking a subexpression and seeing the list of rewrites.</p>",
        "id": 423068347,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708711412
    },
    {
        "content": "<p>Ah, good to know, this might be because I have a new laptop.</p>",
        "id": 423157413,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1708769719
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0SENupgUIg_vyuXgSWlyFwPs/widgetStartFinish.mp4\">widgetStartFinish.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/0SENupgUIg_vyuXgSWlyFwPs/widgetStartFinish.mp4\" title=\"widgetStartFinish.mp4\"><video preload=\"metadata\" src=\"/user_uploads/3121/0SENupgUIg_vyuXgSWlyFwPs/widgetStartFinish.mp4\"></video></a></div><p>I've got another clue on what is going wrong. I added a <code>dbg_trace \"Starting\";</code> to the start of my <code>server_rpc_method</code>, and another dbg_trace to the end which tells the amount of miliseconds since starting. I would have expected the function to be called at most once whenever the cursor is moved or an expression is selected in the goal. However, the function is being called repeatedly, and computing the library result is done on many different threads at the same time, and whenever a thread finishes, it starts again with computing the library results. My hypothesis is that this only sometimes leads to a crash but that it is the underlying problem.</p>",
        "id": 423652886,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709052452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 423652969,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709052476
    },
    {
        "content": "<p>This is exactly right, thanks for the report! I fixed it in the PR linked above, specifically <a href=\"https://github.com/leanprover-community/ProofWidgets4/pull/46/commits/f58f34aaced36a136e5b213a37482077cc3e4b34\">this commit</a>.</p>",
        "id": 423671694,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709058591
    },
    {
        "content": "<p>When a rewrite lemma adds an extra goal, such as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IsUnit.mul_inv_cancel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>then the rewrite call that I paste into the editor is <code>rw [IsUnit.mul_inv_cancel ?_]</code>. However, this doesn't specify the value of <code>a</code>, because it is an implicit argument. But for the purpose of this tactic, the argument <code>a</code> really should be explicit. This causes a problem when the pattern <code>a * a⁻¹</code> appears in multiple places with different values of <code>a</code>. This is because in the code for finding the occurrence, I assume that the <code>a</code> is already instantiated (since the argument <code>?_</code> has a known type). Ideally I would want the rewrite call to be something like <code>rw [IsUnit.mul_inv_cancel (?_ : IsUnit g)]</code>.</p>\n<p>I could also set the option <code>pp.explicit</code> to true, but that would also mean that <code>+</code> would be written as <code>HAdd.hAdd</code> which is not desirable. Maybe another way would be to print it such that only the lemma itself gets all its arguments explicit. It could also be possible to not provide any arguments to the lemma by default, and deal with the occurrences like that, but I think that would be a bit less efficient.</p>\n<p>What do you think about this?</p>",
        "id": 423681798,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709062424
    },
    {
        "content": "<p>I experimented with hacking together <a href=\"https://live.lean-lang.org/#code=import%20Lean%0Aimport%20Mathlib%0A%0Aopen%20Lean%20Elab%20Term%20PrettyPrinter%20Delaborator%20SubExpr%0A%0A%23check%20delabApp%0A%23check%20delabAppCore%0A%0A--%20the%20function%20below%20is%20modified%20from%20the%20ones%20above%0A%0Adef%20customDelabApp%20%3A%20Delab%20%3A%3D%20do%0A%20%20let%20tagAppFn%20%E2%86%90%20getPPOption%20getPPTagAppFns%0A%20%20let%20e%20%E2%86%90%20getExpr%0A%20%20let%20maxArgs%20%3A%3D%20e.getAppNumArgs%0A%20%20let%20args%20%3A%3D%20e.getBoundedAppArgs%20maxArgs%0A%20%20let%20paramKinds%20%E2%86%90%20getParamKinds%20(e.getBoundedAppFn%20maxArgs)%20args%0A%20%20delabAppExplicitCore%20args.size%20(delabAppFn%20tagAppFn)%20paramKinds%20tagAppFn%0Awhere%0A%20%20delabAppFn%20(tagAppFn%20%3A%20Bool)%20%3A%20Delab%20%3A%3D%0A%20%20%20%20withOptionAtCurrPos%20%60pp.tagAppFns%20tagAppFn%20do%0A%20%20%20%20%20%20if%20(%E2%86%90%20getExpr).consumeMData.isConst%20then%0A%20%20%20%20%20%20%20%20withMDatasOptions%20delabConst%0A%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20delab%0A%20%20%20%20%20%20%0A%23eval%20show%20TermElabM%20_%20from%20do%0A%20%20let%20t%20%E2%86%90%20%60(add_comm%20(1%20%2B%201)%205)%0A%20%20let%20e%20%E2%86%90%20Term.elabTerm%20t%20none%0A%20%20let%20(stx%2C%20_)%20%E2%86%90%20delabCore%20e%20(delab%20%3A%3D%20customDelabApp)%0A%20%20return%20stx.raw.reprint.get!%0A\">a delaborator</a>  that pretty prints the function application with all implicits included, without the downsides of using <code>pp.explicit</code>.</p>",
        "id": 423832290,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1709131270
    },
    {
        "content": "<p>Yeah that is one of the options I was thinking of. For implementation though I think it is easier to just turn the lemma arguments into <code>String</code> first, and then combine them with spaces in between, adding brackets where necessary. And writing the instance arguments with an underscore. (Because the function converting Syntax to String seems to add spaces incorrectly)</p>",
        "id": 423915251,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709159884
    },
    {
        "content": "<p>What I could do is to only use this alternative way of writing when there are uninstantiates metavariables.</p>",
        "id": 423915604,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709160061
    },
    {
        "content": "<p>I find it suspicious to read that Syntax to String doesn’t work. Are you sure your syntax is correct?</p>",
        "id": 423915647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709160086
    },
    {
        "content": "<p>Maybe <code>Syntax.reprint</code> is a bad function? It just adds spaces everywhere unnecessarily</p>",
        "id": 423915797,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709160152
    },
    {
        "content": "<p>Why not using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.ppTerm#doc\">docs#Lean.PrettyPrinter.ppTerm</a> ?</p>",
        "id": 423916113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709160295
    },
    {
        "content": "<p>How do we get the <code>PPContext</code> though?</p>",
        "id": 423916654,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709160530
    },
    {
        "content": "<p>Why do you want one?</p>",
        "id": 423917002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709160668
    },
    {
        "content": "<p>Oh sorry I was looking at the wrong <code>ppTerm</code></p>",
        "id": 423917263,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709160786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/423915797\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>Syntax.reprint</code> is a bad function? It just adds spaces everywhere unnecessarily</p>\n</blockquote>\n<p>Indeed it also gives errors sometimes as it skips the \"parenthesizer\" step.</p>",
        "id": 423959236,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1709189304
    },
    {
        "content": "<p>I've now made a new version that prints the lemma application explicitly when there are new goals, based on <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>'s approach.<br>\nI also made it so that the pasted string is not affected by any <code>set_option</code>s that the user might set.</p>",
        "id": 424302089,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709317075
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 424523103,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709483768
    },
    {
        "content": "<p>What is the opinion on having a view with lemma names as an alternative to the one where you just see the new expressions? I think not seeing the lemma names is generally nicer, but for users interested in learning the lemma names it could be useful to be able see them.</p>",
        "id": 424712441,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709574550
    },
    {
        "content": "<p>I'm thinking of adding some filtering to the rewrites: if two rewrites result in the same new expression then to only display one of them, especially if one has no side goals and another one does. I'm already filtering out rewrites that don't change the expression. But in the version with lemma names, I don't want to filter because in that view you want to see the names of all lemmas that apply.</p>",
        "id": 424712457,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709574555
    },
    {
        "content": "<p>Another question about filtering is whether to only filter within each section, or also between sections. For example there is commutativity of <code>Nat</code> and commutativity of general addition, which do the same rewrite, but they are in different sections. In that case it seems more intuitive to display both results.</p>",
        "id": 424712467,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709574560
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/iTDUj-9poMLcXzwwoMMtQqrU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iTDUj-9poMLcXzwwoMMtQqrU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iTDUj-9poMLcXzwwoMMtQqrU/image.png\"></a></div><p>You can see here that there are some duplicates</p>",
        "id": 424712986,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709574728
    },
    {
        "content": "<p>I think that filtering out duplicate results is essential. But indeed having a variant which display the lemma name without filtering could be useful in case some stupid lemma applies and would look weird in the proof script.</p>",
        "id": 424713404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709574871
    },
    {
        "content": "<p>I just noticed that a later result in this example is <code>Linarith.eq_of_eq_of_eq</code>. Is there a way to tell whether a lemma is defined inside <code>Mathlib.Tactic</code>, so that I can filter out all of those?</p>",
        "id": 424714226,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709575186
    },
    {
        "content": "<p>Do you know of a good way to switch the view (to the version with lemma names) while being in the widget? Or do you think it would be preferable to have to write something like <code>(config := {showLemmaNames := true})</code>?</p>",
        "id": 424714848,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709575413
    },
    {
        "content": "<p>You could easily have a check-box somewhere near the top of the widget controlling what is shown.</p>",
        "id": 424739400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709583332
    },
    {
        "content": "<p>I tried to do the filtering of duplicate lemmata using equality on the <code>Expr</code>s, but I ran into the issue that sometimes the instances are defeq, but not equal, for example the <code>1</code>s given by<code>inv_mul_self</code> and <code>IsUnit.inv_mul_cancel</code> are not equal.<br>\nDoing pairwise <code>isDefEq</code> seems like it could be quite expensive.<br>\nSince the user can only differentiate between the expressions based on the printed string, I think it might be better to do the filtering using these <code>String</code>s. This then also solves the problem of <code>MonCat.mul_of.{u_1} {A : Type u_1} [inst✝ : Monoid A] (a b : A) : a * b = a * b</code>, where the two sides are defeq, but not equal. It is super confusing when this lemma shows up in the library search.</p>",
        "id": 424750872,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709587830
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/K71ezMIWdA9e01QNRMyIEWD_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K71ezMIWdA9e01QNRMyIEWD_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/K71ezMIWdA9e01QNRMyIEWD_/image.png\"></a></div><p>This is what the above example looks like with the filtering.</p>",
        "id": 424750971,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709587883
    },
    {
        "content": "<p>I don't really like the solution of filtering on the string, because it doesn't seem principled, but I think it is the best solution.</p>",
        "id": 424751137,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709587955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/423671694\">said</a>:</p>\n<blockquote>\n<p>This is exactly right, thanks for the report! I fixed it in the PR linked above, specifically <a href=\"https://github.com/leanprover-community/ProofWidgets4/pull/46/commits/f58f34aaced36a136e5b213a37482077cc3e4b34\">this commit</a>.</p>\n</blockquote>\n<p>This has now landed in the most recent mathlib. The RPC function will not be called excessively many times, and you can add some <code>IO.checkCanceled</code> calls in long-running loops for extra-quick cancellation of redundant tasks to reduce CPU usage.</p>",
        "id": 424809486,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709623487
    },
    {
        "content": "<p>Would it be possible to show the library results to the user while they are still being computed? The computation checks the results one by one, so it would be natural if the results could appear one by one. This might help speed up the interaction.</p>",
        "id": 424845439,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709637003
    },
    {
        "content": "<p>I've updated to the most recent mathlib. The tactic runs a lot faster now: the example of <code>g⁻¹ * g</code> now runs in 200ms. This is partially because I let <code>isDefEq</code> run in the reducible transparency instead of default. I can't tell whether the rest of the speedup is because of the update to ProofWidgets, or because of other updates in Lean. Because of this speedup, I removed the bound on the amount of heartbeats that the tactic can use.</p>\n<p>Thanks to the ProofWidgets update, the function now only gets called one time after a shift click, which is great.</p>\n<p>I also played a bit with <code>IO.checkCancelled</code>, but it seemed to always return <code>false</code>.</p>",
        "id": 424866435,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709644488
    },
    {
        "content": "<p>(It seems reasonable to expect the ProofWidgets update to cause the speedup, but I seem to remember having run the function directly, and that not being faster, meaning that ProofWidgets wasn't the reason)</p>",
        "id": 424867236,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709644744
    },
    {
        "content": "<p>The current version of <code>rw??</code> does not check whether the selected expression is in the main goal. So if you have multiple goals, and you select an expression not in the first goal, then the pasted rewrite will be applied to the wrong goal. I don't know how to check that the selected expression is in the main goal. I get the <code>MVarId</code> of this goal, but I cannot compare it to <code>Lean.Elab.Tactic.getMainGoal</code> because it isn't running inside a <code>TacticM</code> monad. Any ideas?</p>",
        "id": 424881579,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709649024
    },
    {
        "content": "<p>I don’t remember how I did it in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Widget/SelectPanelUtils.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Widget/SelectPanelUtils.lean</a> but it was clearly possible.</p>",
        "id": 424886802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709650424
    },
    {
        "content": "<p>Ok, I managed to do it.</p>",
        "id": 424918752,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709658813
    },
    {
        "content": "<p>Another problem is with shadowed variables. When the user selects an expression in an unreachable hypothesis, or an expression containing an unreachable variable, the pasted tactic string doesn't work because it contains a <code>✝</code> symbol.</p>",
        "id": 424919465,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709659029
    },
    {
        "content": "<p>I suppose that this would be a reason to not provide arguments to the rewrite lemma.</p>",
        "id": 424919652,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709659094
    },
    {
        "content": "<p>If this really bothers you then you could output a rename_i call first.</p>",
        "id": 424919961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709659203
    },
    {
        "content": "<p>On the topic of shadowed variables, I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">md.lctx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">sanitizeNames.run'</span> <span class=\"o\">{</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>which I copied since similar functions also use this. But when I removed it it seemed to make no difference.</p>",
        "id": 424920928,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709659557
    },
    {
        "content": "<p>I can’t help here. Every time I write this line it is cargo cult coding.</p>",
        "id": 424928014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709661782
    },
    {
        "content": "<blockquote>\n<p>I also played a bit with IO.checkCancelled, but it seemed to always return false.</p>\n</blockquote>\n<p>Ah sorry, you need to also use <code>@[server_rpc_method_cancellable]</code> instead of <code>@[server_rpc_method]</code>.</p>",
        "id": 424957571,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709672939
    },
    {
        "content": "<p>Ah thanks, I tried it again but I'm still confused. If I don't change the implementation, and just use <code>@[server_rpc_method_cancellable]</code> instead of <code>@[server_rpc_method]</code>, then it is able to cancel the computation. When I quickly select and unselect an expression, the runtime of the function (measured by the profiler and <code>profileitM</code>) is shorter. This wouldn't happen with <code>@[server_rpc_method]</code>.</p>\n<p>I also tried using <code>IO.checkCancelled</code>: in the function computing the results, I put this before checking each lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">IO.checkCanceled</span> <span class=\"k\">then</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"cancelled\"</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n        <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>When I quickly select and unselect an expression, what usually happens is that the computation is cancelled, but the trace message doesn't appear. But if I try over and over, the trace message does appear in 10%-ish of the cases.</p>",
        "id": 424975798,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709680849
    },
    {
        "content": "<blockquote>\n<p>what usually happens is that the computation is cancelled, but the trace message doesn't appear</p>\n</blockquote>\n<p>How do you know it was  cancelled if you don't see the <code>dbg_trace</code> output? It does happen quite often that the computation is quick enough to finish before the cancellation gets through to the server.</p>",
        "id": 424979642,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709682962
    },
    {
        "content": "<p>The time given by the profiler is consistently a bit above 200ms, and when I quickly select and deselect, it is around 100ms. If I do it a bit more slowly it gets closer to 200ms.</p>",
        "id": 424980045,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709683094
    },
    {
        "content": "<p>And with <code>@[server_rpc_method]</code>, the time doesn't depend on how quickly I deselect.</p>",
        "id": 424980477,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709683318
    },
    {
        "content": "<p>I see! This is because your message gets printed only if the <code>IO.checkCanceled</code> in your code is hit. However, Lean core has a bunch of places (look for <code>check_system</code>) which also check this; they do not print any message but rather raise an \"elaboration interrupted\" exception. You can confirm this is happening by wrapping your code in a <code>try .. catch</code> and printing out the exception, which will show up every time (unless your check hits, in which case \"cancelled\" will be printed).</p>",
        "id": 424982412,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709684329
    },
    {
        "content": "<p>Ah, that makes sense. <code>IsDefEq</code> and <code>whnf</code> already do this check, so there is no need to manually add it.</p>",
        "id": 424985023,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709686039
    },
    {
        "content": "<p>I figured out that <code>Environment.header</code> has the information about all imported modules, including the module names and the constants defined in each module. So by getting the constants from there, I can skip over everything from modules starting with <code>`Mathlib.Tactic</code></p>",
        "id": 425068935,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709726131
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/26XLLIJGkmtHC-ua_QmcMf0n/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/26XLLIJGkmtHC-ua_QmcMf0n/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/26XLLIJGkmtHC-ua_QmcMf0n/image.png\"></a></div><p>The tactic tries 2 kinds of lemmas, lemmas that are in the cache, and lemmas that are defined in the current file. This is the same as for the other library search tactics in mathlib. However, this approach is only complete if you're working in a file that imports <code>Mathlib</code> and nothing else. I feel like it would be better if it is also able to find lemmas that are imported but are not in <code>Mathlib</code>. Do you think this is useful? It might have the drawback that indexing all these extra lemmas could take a long time. This can be partially solved by caching it for the duration that the file is open.</p>",
        "id": 425077324,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709729085
    },
    {
        "content": "<p>It is crucial for projects depending on Mathlib. There are quite a few of them currently running or about to start running.</p>",
        "id": 425105037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709736750
    },
    {
        "content": "<p>For instance the analytic number theory project will certainly want to use <code>rw??</code> using its own lemmas.</p>",
        "id": 425105215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709736805
    },
    {
        "content": "<p>Do these other projects have access to a CI that could build the cache? Or are they small enough where locally building the DiscrTree for non-mathlib lemmas is feasible?</p>",
        "id": 425106373,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709737086
    },
    {
        "content": "<p>We should definitely write documentation about setting up CI. All those projects are hosted on GitHub and can run CI there since they don’t have the huge CI needs of Mathlib. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> will also probably want to say something about the future of this in reservoir.</p>",
        "id": 425107470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709737334
    },
    {
        "content": "<p>Ok, in that case I could leave the implementation the same, and expect those projects to extend the mathlib cache.</p>",
        "id": 425113885,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709738827
    },
    {
        "content": "<p>I would strongly recommend looking at Joe Hendrix's lazy DiscrTree implementation that powers the new <code>exact?</code>. It is sufficient fast that no cache is required anymore.</p>",
        "id": 425205283,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709772463
    },
    {
        "content": "<p>In particular, Mathlib's CI step building the <code>exact?</code> cache is now completely pointless: no one looks at that cache!</p>",
        "id": 425205378,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709772500
    },
    {
        "content": "<p>However the cache for <code>rw?</code> is still used, because it hasn't been upgrade to use a lazy discr tree.</p>",
        "id": 425205444,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709772518
    },
    {
        "content": "<p>That's a good point, although I think it will take quite some work to get my DiscrTree to work lazily. Both because I will have to understand exactly how it is implemented in LazyDiscrTree, and because my current implementation is in two steps: first getting the expression in the discrimination tree form, and then inserting it, which doesn't lend itself for laziness.</p>",
        "id": 425213214,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709777291
    },
    {
        "content": "<p>I seem to remember reading that initializing the LazyDiscrTree takes a non-trivial amount of time. Has that been solved somehow?</p>",
        "id": 425281337,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709810342
    },
    {
        "content": "<p>I played around with <code>IncDiscrTreeFinder.mkImportFinder</code>, the function that initiates the <code>LazyDiscrTree</code>. It takes around 1.5s on my machine, but if I copy the definition and run that instead, then it takes over 30s. I tried replicating this on the lean playground, and there the difference is less severe, with an increase from 2s to 6s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">LazyDiscrTree</span> <span class=\"n\">LibrarySearch</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">constantsPerTask</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">6500</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addImport</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">constInfo</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">InitEntry</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">DeclMod</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">forallTelescope</span> <span class=\"n\">constInfo.type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">type</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">InitEntry.fromExpr</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">DeclMod.none</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.key</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Iff</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">e.mkSubEntry</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">DeclMod.mp</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">e.mkSubEntry</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">DeclMod.mpr</span><span class=\"o\">))</span>\n      <span class=\"n\">pure</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">pure</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkImportFinder</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">CandidateFinder</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"n\">none</span>\n  <span class=\"n\">pure</span> <span class=\"k\">fun</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ngen</span> <span class=\"bp\">←</span> <span class=\"n\">getNGen</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">childNGen</span><span class=\"o\">,</span> <span class=\"n\">ngen</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ngen.mkChild</span>\n    <span class=\"n\">setNGen</span> <span class=\"n\">ngen</span>\n    <span class=\"k\">let</span> <span class=\"n\">importTree</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">ref.get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getDM</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n      <span class=\"n\">profileitM</span> <span class=\"n\">Exception</span>  <span class=\"s2\">\"librarySearch launch\"</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n        <span class=\"n\">createImportedEnvironment</span> <span class=\"n\">childNGen</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">constantsPerTask</span> <span class=\"o\">:=</span> <span class=\"n\">constantsPerTask</span><span class=\"o\">)</span> <span class=\"n\">addImport</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">imports</span><span class=\"o\">,</span> <span class=\"n\">importTree</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">importTree.getMatch</span> <span class=\"n\">ty</span>\n    <span class=\"n\">ref.set</span> <span class=\"n\">importTree</span>\n    <span class=\"n\">pure</span> <span class=\"n\">imports</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"search\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">mkImportFinder</span> <span class=\"c1\">-- IncDiscrTreeFinder.mkImportFinder</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">a</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span> <span class=\"s2\">\"{b.size}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">search</span> <span class=\"n\">Nat.zero</span> <span class=\"c1\">-- 5299</span>\n</code></pre></div>",
        "id": 425524903,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709906709
    },
    {
        "content": "<p>What I also don't understand is why the profiler claims that this <code>search</code> tactic takes only about 1s. It clearly takes at least as long as running <code>mkImportFinder</code> which takes more time.</p>",
        "id": 425528317,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709907829
    },
    {
        "content": "<p><del>While looking at the new <code>LibrarySearch</code> code, I found this function that I think is defined incorrectly:</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Return an action that returns true when  the remaining heartbeats is less</span>\n<span class=\"sd\">than the currently remaining heartbeats * leavePercent / 100.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkHeartbeatCheck</span> <span class=\"o\">(</span><span class=\"n\">leavePercent</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">maxHB</span> <span class=\"bp\">←</span> <span class=\"n\">getMaxHeartbeats</span>\n  <span class=\"k\">let</span> <span class=\"n\">hbThreshold</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRemainingHeartbeats</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">leavePercent</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span>\n  <span class=\"c1\">-- Return true if we should stop</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span>\n    <span class=\"k\">if</span> <span class=\"n\">maxHB</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"n\">false</span>\n    <span class=\"k\">else</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRemainingHeartbeats</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hbThreshold</span>\n</code></pre></div>\n<p><del>because the inequality that it checks is basically <code>h &lt; h * leavePercent / 100</code> where <code>h</code> is the remaining heartbeats.</del> </p>\n<p>NeverMind, I didn't spot that it was a nested <code>MetaM</code> inside a <code>MetaM</code></p>",
        "id": 425531736,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709908932
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425531868,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709908984
    },
    {
        "content": "<blockquote>\n<p>It takes around 1.5s on my machine, but if I copy the definition and run that instead, then it takes over 30s.</p>\n</blockquote>\n<p>Maybe that’s becuase as long as it is part of core, it is compiled to native code,  but when the code is part of a library, it is run by lean’s interpreter?</p>",
        "id": 425532188,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709909082
    },
    {
        "content": "<p>Is there any way around that? i.e. can I run my own code as native code?</p>",
        "id": 425532632,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709909200
    },
    {
        "content": "<p>I am not firm on the details; but I think the <code>precompiledModules</code> option plays a role</p>",
        "id": 425532755,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709909239
    },
    {
        "content": "<p>Why is there a difference between the interpreter, and native code? And does this mean that if <code>LazyDiscrTree</code> was defined in Mathlib, then it would be this slow? If so, then I have little hope of making my <code>RefinedDiscrTree</code> lazy in Mathlib.</p>",
        "id": 425535715,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709910111
    },
    {
        "content": "<p>I believe <code>IncDiscrTreeFinder.mkImportFinder</code> uses parallel computation to speed things up, so that might explain why there is the difference in speed, if the interpreter doesn't do the parallel computation.</p>",
        "id": 425536079,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709910232
    },
    {
        "content": "<p>Although that happens in <code>createImportedEnvironment</code>, of which I didn't copy the definition, so it doesn't really make sense</p>",
        "id": 425537583,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709910699
    },
    {
        "content": "<p>The interpreter certainly supports parallelism, it's just slower</p>",
        "id": 425539541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1709911315
    },
    {
        "content": "<p>Here's a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.LazyDiscrTree.createImportedEnvironment</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">constantsPerTask</span> <span class=\"o\">:=</span> <span class=\"mi\">6500</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>this takes around 6s on my laptop.</p>",
        "id": 425544063,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709912829
    },
    {
        "content": "<p>The above example directly calls a function from core, so then shouldn't it be compiled to native code? I don't understand why it is still so slow.</p>",
        "id": 425808053,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710106738
    },
    {
        "content": "<p>Maybe the closure <code>(fun _ _ =&gt; pure #[])</code> is expensive to call when interpreted and called often?</p>",
        "id": 425808230,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710106903
    },
    {
        "content": "<p>Ah, that would make sense</p>",
        "id": 425808344,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710106991
    },
    {
        "content": "<p>On the topic of the interface of <code>rw??</code>, I expect it is usual to want to do multiple library  rewrites in a row. This is slightly inconvenient because you have to write <code>rw??</code> again every time, and every rewrite gets its own <code>rw</code> call instead of one combined <code>rw</code> call.</p>\n<p>I thought one way to solve this would be to allow <code>rw??</code> to take arguments just like <code>rw</code>, and that instead of producing a <code>rw</code> tactic call, it can produce a <code>rw??</code> tactic call, so that you can keep library rewriting. But, in that case the final proofs would have <code>rw??</code> in them instead of <code>rw</code>, so you might have to manually remove the <code>??</code> everywhere.</p>",
        "id": 425808608,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710107283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/425532755\">said</a>:</p>\n<blockquote>\n<p>I think the <code>precompileModules</code> option plays a role</p>\n</blockquote>\n<p>I tried setting the option <code>precompileModules := true</code> in the lakefile for Mathlib. Pre-compiling all of Mathlib takes long, so I work on a small subset of Mathlib. Before setting the option, the example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">LazyDiscrTree</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.LazyDiscrTree.createImportedEnvironment</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">constantsPerTask</span> <span class=\"o\">:=</span> <span class=\"mi\">6500</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>took about 1.2s. Importing it to another file and running <code>foo</code> there gives the same time. With the option set to true, the same example takes about 50s, while running <code>foo</code> in another file that imports it takes less than 0.1s. So the compilation does indeed work, but somehow evaluating functions defined in the file itself becomes painfully slow.</p>\n<p>My understanding is that when running a tactic from mathlib, this is not pre-compiled, and therefore slower than it should be. My question then is, should we pre-compile everything in <code>Mathlib.Tactic</code>, so that tactics are much faster?</p>",
        "id": 425819934,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710118539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">40</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">LazyDiscrTree</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">LazyDiscrTree.createImportedEnvironment</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">constantsPerTask</span> <span class=\"o\">:=</span> <span class=\"mi\">6500</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>produces the following messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">58</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">59</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">67</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">43</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">77</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">78</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">54</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">104</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">46</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">foo._rarg._lambda_1._boxed</span> <span class=\"n\">took</span> <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>The exact values vary, but each time these times account for most of the calculation time. So <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> is right, but I don't understand how lean can spend 100ms calculating <code>fun _ _ =&gt; #[]</code>.</p>",
        "id": 426196155,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710270841
    },
    {
        "content": "<p>I was going to complain about this being a problem when <code>precompileModules := true</code>, because then under certain circumstances the same calculation takes around 40s. But looking at the profiler messages, it turns out that even the usual 1s is problematic.</p>",
        "id": 426196742,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710271084
    },
    {
        "content": "<p>It seems my laptop is in a different mood now, and the profiler now gives much smaller values in the messages, closer to 10ms. But the total time of <code>foo</code> is still a bit less than 1s.</p>",
        "id": 426231887,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710287695
    },
    {
        "content": "<p>I tried to set <code>precompileModules := true</code> in all of mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11362\">https://github.com/leanprover-community/mathlib4/pull/11362</a>), but it takes too long to build. Is there a way to set <code>precompileModules := true</code> only for a few files? I would like to try to precompile only a few files, and then use the functions defined there on all of Mathlib.</p>",
        "id": 426585786,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710435314
    },
    {
        "content": "<p>I believe I once read that you can define two libraries, the first one with that flag, and set the modules of interest as roots of that first module, it works.</p>\n<p>But I fear this will not be acceptable for mathlib, because the compiled modules cannot be shared in the cache (they are platform dependent), and mathlib without a full cache isn’t fun either.</p>",
        "id": 426586881,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710435635
    },
    {
        "content": "<p>Ah, so core Lean being platform dependent is ok, but for Mathlib this is not acceptable?</p>",
        "id": 426588642,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710436101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/426588642\">said</a>:</p>\n<blockquote>\n<p>Ah, so core Lean being platform dependent is ok, but for Mathlib this is not acceptable?</p>\n</blockquote>\n<p>core Lean has the capability to distribute platform dependent binaries through <code>elan</code>, all other parts of the Lean eco system currently do not have such  a capability</p>",
        "id": 426602503,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1710440561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/424739400\">said</a>:</p>\n<blockquote>\n<p>You could easily have a check-box somewhere near the top of the widget controlling what is shown.</p>\n</blockquote>\n<p>Could someone help me with this? I have no prior JavaScript or Html experience, and so far I've avoided JavaScript by using a <code>widget_module</code> that was already made in Lean. But I'm not sure If one can make a check-box controlling what is shown using just Html.</p>",
        "id": 426619290,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710446622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/426619290\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/424739400\">said</a>:</p>\n<blockquote>\n<p>You could easily have a check-box somewhere near the top of the widget controlling what is shown.</p>\n</blockquote>\n<p>Could someone help me with this? I have no prior JavaScript or Html experience, and so far I've avoided JavaScript by using a <code>widget_module</code> that was already made in Lean. But I'm not sure If one can make a check-box controlling what is shown using just Html.</p>\n</blockquote>\n<p>You cannot :( One of the major limitations of <code>mk_rpc_widget%</code> (see the docstring) is that the component it outputs cannot have state</p>",
        "id": 426620128,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710446954
    },
    {
        "content": "<p>I can help with this next week, though!</p>",
        "id": 426620150,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710446968
    },
    {
        "content": "<p>Another option that I imagine might be useful is whether it shows lemmas that introduce new goals. Because often you want to just rewrite and not get any extra goals from it.</p>",
        "id": 426620576,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710447160
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Y-5wxC6tn1GSgd_wQ6vr0NsP/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/WcCoWWP1ucZReSekMkfan1K2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y-5wxC6tn1GSgd_wQ6vr0NsP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Y-5wxC6tn1GSgd_wQ6vr0NsP/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WcCoWWP1ucZReSekMkfan1K2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WcCoWWP1ucZReSekMkfan1K2/image.png\"></a></div><p>I've implemented the two different views, and for now you can switch between them with a config argument. When showing the lemma names, it shows all lemmas that apply instead of filtering them. I also fixed the font of the replacement button to be the code font.</p>",
        "id": 426751779,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710511941
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/2qX0gKOEsWnQiGlt1q3171Cp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2qX0gKOEsWnQiGlt1q3171Cp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2qX0gKOEsWnQiGlt1q3171Cp/image.png\"></a></div><p>And the lemma names are hoverable</p>",
        "id": 426752129,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710512046
    },
    {
        "content": "<p>Great!</p>",
        "id": 426763641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710515419
    },
    {
        "content": "<p>When the tactic creates new goals, it takes the usernames from the forall binders in the lemma, but this sometimes causes name clashes when there already is a metavariable with that user name. I fixed it by making a function similar to <code>LocalContext.getUnusedName</code>, which creates an unused name from the suggested name.</p>\n<p>However, it turns out that Lean is not careful at all with usernames of metavariables. In this example, there just happen to exist (instantiated) metavariables with usernames <code>n</code> and <code>α</code>, for no apparent reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">α</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a : ℕ := 1</span>\n<span class=\"cm\">  b : Type := ℕ</span>\n<span class=\"cm\">  ⊢ 1 + 3 = 4</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>similarly, <code>rw</code> has some dubious name management for the metavariables it makes. Also curious is that there are <code>MVarId.setTag</code> and <code>MVarId.setUserName</code> which are identical functions for setting the user name, but for getting it there is only <code>MVarId.getTag</code>.</p>",
        "id": 426821030,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710536326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> wrote some typescript for having a checkbox at the top that controls which view is shown. Is it ok in Mathlib to have Typescript/Javascript, or should this be added to Proofwidgets instead?</p>",
        "id": 427672471,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710848284
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xyJFc0tuKg6-g9XPAh00t_b_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xyJFc0tuKg6-g9XPAh00t_b_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/xyJFc0tuKg6-g9XPAh00t_b_/image.png\"></a></div><p>This is what it looks like. Let me know what you think. I'm slightly worried that the checkbox can get in the way of your view when you don't want to use it.</p>",
        "id": 427677844,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710850067
    },
    {
        "content": "<p>I agree the current look of the checkbox is pretty distracting.</p>",
        "id": 427740422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710859915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/427672471\">said</a>:</p>\n<blockquote>\n<p>Is it ok in Mathlib to have Typescript/Javascript, or should this be added to Proofwidgets instead?</p>\n</blockquote>\n<p>Does it mean it requires users of Mathlib to have a working node toolchain? If yes then it’s definitely not ok. But if you simply mean shipping some unreadable minified JS file sitting in a corner then I think it’s ok.</p>",
        "id": 427740786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710859994
    },
    {
        "content": "<p>Also note you should probably think beyong Mathlib. Unless you have a surprising giant Mathlib dependency then I think Std will want this.</p>",
        "id": 427740993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710860048
    },
    {
        "content": "<p>yeah, it would be an unreadable JS file</p>",
        "id": 427781504,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710870804
    },
    {
        "content": "<p>There is one Mathlib dependency, which is that the <code>RefinedDiscrTree</code> code contains some names like <code>Pi.instAdd</code> from <code>Mathlib.Algebra.Group.Pi.Basic</code>. This is because I unfold this specific instance of addition, in order to treat <code>fun x =&gt; f x + g x</code> the same as <code>f + g</code>.</p>",
        "id": 427782188,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710871063
    },
    {
        "content": "<p>I could imagine reimplementing this so that you can instead dynamically add a reduction procedure by tagging the function. And then the <code>RefinedDiscrTree</code> would always try all of these custom reduction procedures when looking up or inserting. Then this bit of the code could sit in Mathlib, while the main part is in Std.</p>",
        "id": 427788723,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710873308
    },
    {
        "content": "<p>I mean, <code>Pi.instAdd</code> can just move up. The operations on function types are something everyone needs, while the algebraic typeclasses carrying axioms can stay in Mathlib.</p>",
        "id": 427818464,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710885536
    },
    {
        "content": "<p>My code also contains <code>Pi.instInv</code>, so then <code>Inv</code> would also have to move up</p>",
        "id": 427819118,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710885909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/427740422\">said</a>:</p>\n<blockquote>\n<p>I agree the current look of the checkbox is pretty distracting.</p>\n</blockquote>\n<p>Does anyone have ideas on how best to deal with this?</p>",
        "id": 428024313,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710973033
    },
    {
        "content": "<p>If you'd like to match the aesthetics of the rest of the infoview, the thing to do is to replace the checkbox by an icon at the same height as the 'Rewrite suggestions' header, similarly to how there are icons to the right of 'Expected type' and 'Tactic state'</p>",
        "id": 428025423,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710973645
    },
    {
        "content": "<p>What sort of icon would work here?</p>",
        "id": 428025655,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710973772
    },
    {
        "content": "<p>There is a big list <a href=\"https://microsoft.github.io/vscode-codicons/dist/codicon.html\">here</a>, or you can just use some clickable blue text like the 'try this' links.</p>",
        "id": 428038528,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710981218
    },
    {
        "content": "<p>I just spotted how the tactic state allows you to filter what is shown by hovering over the filter icon. Copying this behaviour is probably the best way to do it.<br>\n<a href=\"/user_uploads/3121/jYHJvbyA0Lk3Y5AJX1ePXvYA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jYHJvbyA0Lk3Y5AJX1ePXvYA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jYHJvbyA0Lk3Y5AJX1ePXvYA/image.png\"></a></div>",
        "id": 428039464,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710981934
    },
    {
        "content": "<p>That would also allow for more options/filters to be added in a way that doesn't disturb the original look.</p>",
        "id": 428039735,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710982169
    },
    {
        "content": "<p>Just want to mention that if you <em>were</em> in a situation that needed a checkbox, the canonical way to match the theme might be to use the official <a href=\"https://github.com/microsoft/vscode-webview-ui-toolkit/blob/main/src/checkbox/README.md\">VS code webview UI toolkit checkbox</a>. (I’m not sure if the infoview actually incorporates and exposes these elements yet, though—this is just “in principle”.)</p>",
        "id": 428041067,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710983276
    },
    {
        "content": "<p>We do not expose that toolkit, we instead just use CSS to style things consistently; for instance to get codicons, you can do something like <a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/4be5bfce5cd14401549a2c9728c964717cfa2c1e/widget/src/penroseCanvas.tsx#L416\">this</a></p>",
        "id": 428058800,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710997709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/428039464\">said</a>:</p>\n<blockquote>\n<p>I just spotted how the tactic state allows you to filter what is shown by hovering over the filter icon. Copying this behaviour is probably the best way to do it.<br>\n<a href=\"/user_uploads/3121/jYHJvbyA0Lk3Y5AJX1ePXvYA/image.png\">image.png</a></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/vscode-lean4/blob/c060ecb1f45698f9614c80d24a8f5afc2c6020be/lean4-infoview/src/infoview/goals.tsx#L247\">Here</a> is the implementation of that</p>",
        "id": 428058934,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710997843
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Kt0ARowAnGyuIGY_nBQB_M8o/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Kt0ARowAnGyuIGY_nBQB_M8o/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Kt0ARowAnGyuIGY_nBQB_M8o/image.png\"></a></div><p>I've put a filter button to the right of \"Rewrite suggestions:\", in the same style as the tactic state. It acts as a button for switching between filtered and non-filtered view. It defaults to the filtered view. I also experimented with using the filled filter icon for the filtered case, but since the filtered view is the default I found this more distracting than useful.</p>",
        "id": 429115624,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711227964
    },
    {
        "content": "<p>Something I find a bit awkward is that I only added the minified JS file and not the original TypeScript, meaning that nobody else can see the TypeScript. I feel like this could be a problem for both maintainability and transparency.</p>",
        "id": 429115884,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711228183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/429115884\">said</a>:</p>\n<blockquote>\n<p>Something I find a bit awkward is that I only added the minified JS file and not the original TypeScript, meaning that nobody else can see the TypeScript. I feel like this could be a problem for both maintainability and transparency.</p>\n</blockquote>\n<p>Yep, it is pretty awkward and as of now we don't have any good solution. What we have been doing so far is to put the TypeScript sources in a package <code>foo</code> that mathlib depends on which is such that <code>foo</code> can build TypeScript, but mathlib can just pull in a <code>foo</code> build archive that contains the JS outputs. Currently this specification uniquely determines <code>foo = ProofWidgets4</code>; if the widget doesn't depend on anything mathlib-specific, you could PR it there and I would review the PR.</p>",
        "id": 429117438,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1711229285
    },
    {
        "content": "<p>The other option is to write it in a readable <code>.js</code> file (i.e., without types) instead and just <code>include_str</code> that file.</p>",
        "id": 429117496,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1711229339
    },
    {
        "content": "<p>I see. The TypeScript uses <code>HtmlDisplay</code> which is defined in but not exported by ProofWidgets, so it would be natural to add it to ProofWidgets. But I feel like it may be better to wait with PRing it there until we agree that this is indeed the right interface for <code>rw??</code>.</p>",
        "id": 429123246,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711233827
    },
    {
        "content": "<p>I discovered that there is a <code>no_index</code> annotation used to influence the <code>DiscrTree</code> indexing, so I now implemented this in the <code>RefinedDiscrTree</code>.</p>\n<p>However this can cause the pattern to be printed incorrectly, printing also the part that is inside a <code>no_index</code> annotation. Is there a way to tell the pretty printer to use an ellipsis for expressions annotated with <code>no_index</code>?</p>",
        "id": 429190272,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711281148
    },
    {
        "content": "<p>I also noticed that the comment</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- See note [no_index around OfNat.ofNat]</span>\n</code></pre></div>\n<p>appears all over Mathlib, but I can't seem to find this note.</p>",
        "id": 429190614,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711281273
    },
    {
        "content": "<p>We have to use <code>no_index</code> around <code>OfNat.ofNat n</code> where <code>n</code> is a variable due to <a href=\"https://github.com/leanprover/lean4/pull/2867\">lean4#2867</a></p>",
        "id": 429222476,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711296030
    },
    {
        "content": "<p>Here is the library note: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a746c523bc0f831c9d1f39d77c382ac798748e02/Mathlib/Data/Nat/Cast/Defs.lean#L67\">https://github.com/leanprover-community/mathlib4/blob/a746c523bc0f831c9d1f39d77c382ac798748e02/Mathlib/Data/Nat/Cast/Defs.lean#L67</a></p>",
        "id": 429222629,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711296093
    },
    {
        "content": "<p>I think you meant <a href=\"https://github.com/leanprover/lean4/pull/2867\">lean4#2867</a></p>",
        "id": 429225302,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711298150
    },
    {
        "content": "<p>Thanks, edited</p>",
        "id": 429225394,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711298201
    },
    {
        "content": "<p>As far as I can tell, you've mostly fixed the issue in your draft PR that changes the behaviour of <code>DiscrTree</code>, which is to keep the <code>OfNat.ofNat</code> around number literals, instead of removing it as is the current behaviour. This would remove the need for the <code>no_index</code> annotations and thus would improve performance.</p>\n<p>There are still some minor issues with <code>OfNat.ofNat</code> appearing twice or not appearing at all around number literals. But this could also be handled by the <code>DiscrTree</code>.</p>\n<p>Is that right?</p>",
        "id": 429258954,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711321985
    },
    {
        "content": "<p>Once this lands in Lean, I'll copy the behaviour over to <code>RefinedDiscrTree</code></p>",
        "id": 429258995,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711322033
    },
    {
        "content": "<p>Yep, although my current thinking is that it should not be the <code>DiscrTree</code>'s job to fold nested <code>OfNat.ofNat</code>. Provided that it <em>doesn't</em> fold them, you could write a simp lemma <code>OfNat.ofNat (OfNat.ofNat n) = OfNat.ofNat n</code></p>",
        "id": 429260950,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711323613
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5blYKGSwCxSbirqWCIrS3d9v/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5blYKGSwCxSbirqWCIrS3d9v/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5blYKGSwCxSbirqWCIrS3d9v/image.png\"></a></div><p>I think that when you want to rewrite something, one natural thing to do is to replace the expression by its definition. However, not every definition has a corresponding rewrite lemma in Mathlib, for example <code>Function.Surjective</code> doesn't have this. This means that <code>rw??</code> doesn't suggest replacing this by its definition.</p>\n<p>I still have an open PR in std, with a tactic <code>unfold'</code> which allows you to unfold a targeted expression, where unfolding can be replacing a constant or free variable by its definition, or unfolding a projection, or doing beta, eta or zeta reduction. I think it would be great if the <code>rw??</code> suggestions would contain one section with the unfolded versions of the expression. When selecting one of these, we could paste the <code>unfold'</code> tactic. But it is also possible to do any definitional rewrite with <code>rw [show current = replacement from rfl]</code>. I could imagine this actually being better because it shows in the tactic call what the replacement will be. And then there is no need to wait for the other PR.</p>\n<p>Often, replacing by definition isn't strictly necessary, but it can still be very useful to see the replaced definition in the goal.</p>",
        "id": 429500239,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711397369
    },
    {
        "content": "<p>These unfolding suggestions could also be implemented in some other tactic, e.g. <code>unfold??</code>, so that these results can be seen without doing the more expensive library search. Then the question would be whether we also want to see them when using <code>rw??</code>.</p>",
        "id": 429503966,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711398320
    },
    {
        "content": "<p>I think it’s nice to see them. Maybe there could be some visual indication that this is the definition.k</p>",
        "id": 429509670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711400745
    },
    {
        "content": "<p>Here's what I have now:</p>\n<p><a href=\"/user_uploads/3121/Jwl05CS4vX4mK0PqWKvX5UM0/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/OB-p0_uOC_tlRJOdbJzd0Xro/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Jwl05CS4vX4mK0PqWKvX5UM0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Jwl05CS4vX4mK0PqWKvX5UM0/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OB-p0_uOC_tlRJOdbJzd0Xro/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OB-p0_uOC_tlRJOdbJzd0Xro/image.png\"></a></div><p>Let me know any suggestions for the interface.</p>",
        "id": 429528186,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711409226
    },
    {
        "content": "<p>And I've defined <code>unfold?</code> to show just the definitional rewrites</p>",
        "id": 429528442,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711409388
    },
    {
        "content": "<p>I'm not so sure how to feel about this mess though</p>\n<p><a href=\"/user_uploads/3121/p_LTaCtTH5ZRvErv74_JWmh6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/p_LTaCtTH5ZRvErv74_JWmh6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/p_LTaCtTH5ZRvErv74_JWmh6/image.png\"></a></div><p>For these complicated expressions, the pasting into the editor tends to not be clean; for example I had to turn of match  notation, and then still it isn't able to type check it unless I manually add the type for the literals 1 and 5</p>",
        "id": 429533699,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711412983
    },
    {
        "content": "<p>Why is the <code>Function.Surjective</code> pattern duplicated in your first screen-shot?</p>",
        "id": 429540829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711418067
    },
    {
        "content": "<p>The ordinal stuff in the last screen-shot is indeed a nightmare but I don’t know what to do.</p>",
        "id": 429540907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711418147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/429540829\">said</a>:</p>\n<blockquote>\n<p>Why is the <code>Function.Surjective</code> pattern duplicated in your first screen-shot?</p>\n</blockquote>\n<p>You can see the difference by hovering over the <code>f</code>. The first one is <code>f : α → α</code> and the second one is <code>f : α → β</code>.</p>",
        "id": 429598638,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711439234
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PTzASymCUaewWTrEV3ZxJY8C/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PTzASymCUaewWTrEV3ZxJY8C/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PTzASymCUaewWTrEV3ZxJY8C/image.png\"></a></div><p>Here's some more funny business, which seems to be a symptom of non-structurally recursive definitions.</p>",
        "id": 429601874,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711440785
    },
    {
        "content": "<p>Is there a way to get the naïve definition of a non-structurally recursive definition, instead of this funny <code>_unary</code> stuff? For example in the case of Nat.div that would be <code>if 0 &lt; y ∧ y ≤ x then Nat.div (x - y) y + 1 else 0</code></p>",
        "id": 429617872,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711446735
    },
    {
        "content": "<p>You can get the unfolding equation for a function defined by wfrec (or any other recursive function):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">n</span>\n<span class=\"n\">termination_by</span> <span class=\"mi\">10</span> <span class=\"bp\">-</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- _private.Test.0.foo._unfold</span>\n<span class=\"c1\">-- ∀ (n : Nat), foo n = if n &lt; 10 then foo (n + 1) else n</span>\n<span class=\"n\">run_meta</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">eqn</span> <span class=\"bp\">←</span> <span class=\"n\">getUnfoldEqnFor</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">foo</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no unfold equation\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{eqn}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">eqn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{type}\"</span>\n</code></pre></div>",
        "id": 429624889,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711449019
    },
    {
        "content": "<p>Is there also a way to see whether the definition is defined by wf recursion? So that I can case split on that.</p>",
        "id": 429632241,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711451653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> would know this.</p>",
        "id": 429637858,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711453918
    },
    {
        "content": "<p>I figured it out, I need the function <code>Elab.WF.eqnInfoExt.find?</code>, which also provides the definition.</p>",
        "id": 429637963,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711453945
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Jd9km7Ka6HWqB2LauijGTW6L/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Jd9km7Ka6HWqB2LauijGTW6L/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Jd9km7Ka6HWqB2LauijGTW6L/image.png\"></a></div><p>This is what it does now for division. I guess the next thing to do would be figuring out how to unfold decidable if-else statement.</p>",
        "id": 429638794,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711454267
    },
    {
        "content": "<p>Would it make sense to only show the first unfolding? If the user wants to go further, they can click on it and then see the next one, can’t they?  (Maybe the produced tactic syntax could combine consecutive unfolding steps?)</p>",
        "id": 429639447,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711454494
    },
    {
        "content": "<p>For something like division, I think the result <code>Div.div</code> is the least useful one, which would be the first unfolding. So I think it makes sense to show more in that case.</p>",
        "id": 429639725,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711454590
    },
    {
        "content": "<p>Also, at least for wf recursion, it’s probably better to treat them as opaque and only use the <code>foo.eq_def</code> and (better, if applicable) <code>foo.eq_1</code>… lemmas that lean produces (these are the names on <code>master</code>, they have different names before that.)</p>",
        "id": 429639760,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711454610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">lvls</span> <span class=\"o\">:=</span> <span class=\"n\">e.getAppFn</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">Elab.WF.eqnInfoExt.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">info.value.instantiateLevelParams</span> <span class=\"n\">info.levelParams</span> <span class=\"n\">lvls</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">e.getAppArgs</span>\n</code></pre></div>\n<p>This is the code for unfolding the well founded recursive expression <code>e</code>. I think it is pretty clean</p>",
        "id": 429640236,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711454778
    },
    {
        "content": "<p>I presume you mean the lemmas <code>foo._unfold</code> and <code>foo._eq_1</code>, <code>foo._eq_2</code> ..., which are generated by <code>getUnfoldEqnFor?</code> and <code>getEqnsFor?</code> respectively</p>",
        "id": 429640670,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711454943
    },
    {
        "content": "<p>Right! These lemmas on master have public names (<code>.eq_def</code>, <code>.eq_1</code>) and are generated on demand, so <code>rw [foo.eq_def]</code> would be the canonical way to rewrite a recursive definition. (And using <code>rw [foo.eq_1]</code> instead will lead to smaller terms without lots of <code>case</code> on the right hand side)</p>",
        "id": 429643983,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711456155
    },
    {
        "content": "<p>(BTW, you might want to test your code with mutually recursive functions as well, not sure if <code>info.value</code> will be the right one then)</p>",
        "id": 429644173,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711456209
    },
    {
        "content": "<p>There seems to be nothing wrong with mutually recursive functions.</p>",
        "id": 429649147,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711457884
    },
    {
        "content": "<p>Ok, good. I think I confused something in the back of my mind here, nevermind then :-)</p>",
        "id": 429649321,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711457936
    },
    {
        "content": "<p>What is interesting, is that for structural recursive definitions, there is this thing called smart unfolding, which automatically unfolds the match expressions. The result if that for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>My code always finds the same definition, <code>match n with | 0 =&gt; 0 | Nat.succ n =&gt; f n</code>, but when I drop the <code>termination_by</code> from the definition, then because I use <code>unfoldDefinition?</code>, it only succeeds when it can successfully execute the match with 0 or <code>Nat.succ</code>.</p>",
        "id": 429650035,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711458129
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/mJR3O1tki_1ESyBGoe5NWZey/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mJR3O1tki_1ESyBGoe5NWZey/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mJR3O1tki_1ESyBGoe5NWZey/image.png\"></a></div><p>This is in the case without the <code>termination_by</code>.</p>",
        "id": 429650510,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711458270
    },
    {
        "content": "<p>This is actually really weird, it also doesn't do smart unfolding on non-recursive definitions:</p>\n<p><a href=\"/user_uploads/3121/FgCukyYfCf6VvkqahQU32LNn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FgCukyYfCf6VvkqahQU32LNn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FgCukyYfCf6VvkqahQU32LNn/image.png\"></a></div>",
        "id": 429651267,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711458543
    },
    {
        "content": "<p>That's intended; smart unfolding equations are not generated by default for non-recursive defs.</p>",
        "id": 429652493,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711459012
    },
    {
        "content": "<p>Is it also intended that the presence of a smart unfolding equation causes some expressions to not unfold even though they would unfold with normal unfolding?</p>",
        "id": 429652886,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711459138
    },
    {
        "content": "<p>That's a question for Leo I'm afraid.</p>",
        "id": 429659830,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711461155
    },
    {
        "content": "<p>Jovan, I don’t remember if I already wrote this, but it would be nice to make sure that you keep a clean separation between the interface and all the heavy lifting code in your work. There may be other uses of the back-end work.</p>",
        "id": 429669267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711463813
    },
    {
        "content": "<p>Thanks Patrick, I have now rewritten the code, so that there is a function <code>getRewrites</code> which returns all of the applicable rewrites (the heavy lifting part). And then this is used by the front-end functions.</p>\n<p>I also added a filter to the unfolding section, forbidding it from showing unfolds that contain a constant satisfying <code>Name.isInternalDetail</code>. This removes most of the messy unfolds that we don't want.</p>\n<p>I also realized that I should apply <code>whnfCore</code> after each unfold. So now I think there is no visible difference anymore between smart unfolding and normal unfolding. This also for example automatically unfolds if-else statements.</p>",
        "id": 430072154,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711634063
    },
    {
        "content": "<p>It is a bit tricky to make a test file for the <code>rw??</code> tactic, because the tests depend on which expression is selected in the infoview. Is it required/important to have a test file, and if so, how would I do it?</p>",
        "id": 430259001,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711720238
    },
    {
        "content": "<p>Also, would it be good to have a command like <code>#rw??</code> that allows you to see the rewrite suggestions for an arbitrary expression?</p>",
        "id": 430259257,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711720356
    },
    {
        "content": "<p>Last time I asked <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> there was no way to write tests for the widget part. But you can definitely write tests for the heavy-lifting part. And having a <code>#rw??</code> is one way of doing it easily.</p>",
        "id": 430274638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711726774
    },
    {
        "content": "<p>By the way, do we need to keep <code>rw?</code> if we get <code>rw??</code>. It would be more consistent to only get the powerful one.</p>",
        "id": 430274798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711726833
    },
    {
        "content": "<p>Yeah, replacing <code>rw?</code> seems like a good idea.</p>",
        "id": 430336888,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711758193
    },
    {
        "content": "<p>I made another change to the unfolding, so that it doesn't show unfoldings of <code>default_instance</code> instances projections. In particular this means that for functions like <code>HAdd.hAdd</code> that unfold to <code>Add.add</code>, I don't show the <code>Add.add</code> unfolding. I don't want to show these because those type classes are purely notational and don't have significant meaning.</p>",
        "id": 430337161,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711758362
    },
    {
        "content": "<p>I noticed this very slow instance synthesis that slows down <code>rw??</code> at the lemma <code>HasSum.mul_eq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">T3Space</span> <span class=\"n\">ℂ</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">-/</span>\n</code></pre></div>\n<p>But setting the heartbeat limit to 21000 makes it succeed, after 600ms.</p>",
        "id": 430337842,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711758792
    },
    {
        "content": "<p>This lemma <code>HasSum.mul_eq</code> does the rewrite <code>s * t = u</code> (with a bunch of hypotheses). This doesn't seem to me like something anyone would ever want to rewrite with, so I now made it so that lemmas of the form <code>a = b</code> where <code>b</code> is a variable that doesn't appear in <code>a</code>, are not indexed in the discrimination tree. This saves a lot of time when rewriting with the pattern <code>x + y : Complex</code>.</p>",
        "id": 430400204,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711813997
    },
    {
        "content": "<p>I've also implemented the <code>#rw??</code> command. This view is rendered as a <code>MessageData</code>, so that the output can be put in a <code>logInfo</code>. I think it is less clear than the original view.</p>\n<p><a href=\"/user_uploads/3121/K5yRAS6X9vL6sRudUksMSQK-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K5yRAS6X9vL6sRudUksMSQK-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/K5yRAS6X9vL6sRudUksMSQK-/image.png\"></a></div>",
        "id": 430400389,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711814146
    },
    {
        "content": "<p>This is mostly a debugging and testing command, right? So having a less clear about is not too bad.</p>",
        "id": 430404255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711817670
    },
    {
        "content": "<p>I mentioned earlier that I didn't like that detecting duplicate rewrites is based on the printed string (in fact, setting pp.explicit to true could change the behaviour). I figured out now how to do this in a more principled way: I define <code>isExplicitEq</code> which gives that two expressions are equal if the explicit parts are equal, and the implicit parts are <code>isDefEq</code>. So if two expressions are only different in an implicit or an instance argument and that part is definitionally the same, we still count them as equal.</p>",
        "id": 430503749,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711915666
    },
    {
        "content": "<p>A funny consequence of this is that when rewriting <code>42 : Real</code>,  there are 5 lemmas that turn this into <code>↑42</code>, and it's quite tricky to tell the difference because the replacement expression doesn't have hover information (because it is a button). 4 of these correspond to the inner 42 being a <code>Nat</code>, <code>Int</code>, <code>Rat</code> or <code>Real</code>, and the last one has the inner 42 being <code>nat_lit 42</code> (so it is not an application of <code>OfNat.ofNat</code>). That last one is also suggested by the unfolding section, but <code>rw [show 42 = ↑42 from rfl]</code> doesn't work there; you would need to write <code>rw [show (42:Real) = Nat.cast (nat_lit 42) from rfl]</code>.</p>",
        "id": 430515816,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711927293
    },
    {
        "content": "<p>I'm now also removing lemmas from <code>Init.Omega</code> in addition to <code>Mathlib.Tactic</code>.</p>",
        "id": 430516655,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711928171
    },
    {
        "content": "<p>My suggestion would be to instead provide some kind of extensible mechanism for users to mark which kinds of lemmas they do not want used; it is not very scalable to hardcode it in the tactic implementation. Attributes, environment extensions, and options (as in <code>set_option</code>) are some ways to provide configurability.</p>",
        "id": 430533293,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1711942296
    },
    {
        "content": "<p>Do you imagine this marking to happen in the library, saying which lemmas should be avoided by <code>rw??</code>, or by the user that is using <code>rw??</code> with a <code>set_option</code>? Or both?</p>",
        "id": 430578479,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711970126
    },
    {
        "content": "<p>The configuration is in principle controlled by a function of type <code>(moduleName declName : Name) -&gt; Bool</code> (possibly in the <code>MetaM</code> monad). I suppose one way to have this configurable would be to have two tags, add and remove, which allow you to specify which lemmas you want and which you don't want with a function of the above type. And then the more recently tagged functions overwrite the less recent ones. So in this case there would be a tagged function excluding stuff in Mathlib.Tactic and one excluding stuff in Init.Omega.</p>",
        "id": 430580779,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711971710
    },
    {
        "content": "<p>The easiest for now would be to just have an extensible list of prefixes for modules from which lemmas are ignored, for now being <code>Init.Omega</code> and <code>Mathlib.Tactic</code>. This is also nice for building the discrimination tree, as we can just skip all declarations in these modules. I also think it is fair to expect a good library to separate lemmas that are part of the API from lemmas that aren't supposed to be seen by users.</p>",
        "id": 430664575,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712006023
    },
    {
        "content": "<p>As far as implementing something goes, an option would be easiest for you, I think. It is just one call to <code>register_option</code>. Though there is no <code>Array</code> datatype for options, so it'd have to be a string with a list of modules that should be excluded. An option is 'global' in some sense since one has to list <em>all</em> the modules they want excluded rather than appending to some ambient list, but it'd work.</p>\n<blockquote>\n<p>I also think it is fair to expect a good library to separate lemmas that are part of the API from lemmas that aren't supposed to be seen by users.</p>\n</blockquote>\n<p>This is true, but it is a problem with Lean <del>(and dependent type theory)</del> in general, not with this widget: there is no proper abstraction/encapsulation mechanism. Certainly if there were a list of namespaces whose contents are exported (because they have to, due to the abstraction issues), but which shouldn't be shown by default in <code>rw?</code>, <code>apply?</code>, <code>exact?</code> and so on (e.g. because they are implementation details of something), all those tactics might want to use it.</p>",
        "id": 430688546,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712019936
    },
    {
        "content": "<blockquote>\n<p>Lean (and dependent type theory) in general, not with this widget: there is no proper abstraction/encapsulation mechanism</p>\n</blockquote>\n<p>I think Coq users would beg to differ (c.f. \"modules\" from ML / Coq)</p>",
        "id": 430688742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712020077
    },
    {
        "content": "<p>What do you mean with abstraction/encapsulation?</p>",
        "id": 430692909,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712022118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/430688742\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Lean (and dependent type theory) in general, not with this widget: there is no proper abstraction/encapsulation mechanism</p>\n</blockquote>\n<p>I think Coq users would beg to differ (c.f. \"modules\" from ML / Coq)</p>\n</blockquote>\n<p>You're right, I shouldn't make claims about languages I am not very familiar with; edited. Do you know how/if Coq modules account for the fact that despite signature-based encapsulation, users might still want to peek inside the definition of a function in order to prove something about it? Is it just forbidden? (FWIW, I think the right choice <em>is</em> to forbid that and provide a type signature sufficiently strong to imply any sensible extensional property (so in particular, not contingent properties of a specific implementation)).</p>",
        "id": 430697805,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712025073
    },
    {
        "content": "<p>Furthermore do you know how/if Coq modules account for definitions that <em>must</em> be exposed to have dependent type-checking of an implementation go through? The canonical example is that with <code>zeros n : vec n</code>, <code>zeros n : vec (n+0)</code> <em>needs</em> to look inside <code>(+)</code>, and so that particular definition cannot remain fully abstract (c.f. <a href=\"https://arxiv.org/abs/2210.05420\">controlling unfolding</a>))?</p>",
        "id": 430698124,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712025275
    },
    {
        "content": "<blockquote>\n<p>I think the right choice is to forbid that and provide a type signature sufficiently strong to imply any sensible extensional property</p>\n</blockquote>\n<p>Expanding a bit, I only suggest this for CS-y algorithm implementations; e.g., if you have an implementation of a queue, you probably want to prove that it is, in fact, a queue, and leave the rest behind an abstract signature. On the other hand, a mathematical function one may wish to leave unfoldable donwstream (assuming one wants access to defeqs). I acknowledge the distinction is not always well-drawn.</p>",
        "id": 430699124,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712025947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/430692909\">said</a>:</p>\n<blockquote>\n<p>What do you mean with abstraction/encapsulation?</p>\n</blockquote>\n<p>The introduction to the 'unfolding' paper linked above covers some of the modularity issues plaguing DTT. There were once rumors of work on a module system for Lean; I am not sure what the status of that is. Such features are desirable to provide statically checkable abstraction boundaries. Among other things, abstraction can be used to inform downstream consumers of a package which definitions they can freely use, and which ones are implementation details that may break at any time.</p>\n<p>But in the case of <code>Init.Omega</code> we just discussed, it's a simpler thing. The issue is that as soon as you import <code>omega</code>, every definition in the implementation (e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval\">this stuff</a>) is imported wholesale into your environment, and the implementation details are not marked as such in any way. This is exactly why you end up needing an option/attribute/whatever to figure that out. Namespaces that are not open by default make this a non-issue for human-written proofs (because why would you <code>open Lean.Omega</code>?), but automation (i.e., tactics, like <code>rw??</code>) will go through the entire environment including <code>Lean.Omega</code>. There technically is a mechanism to prevent that: you can annotate definitions with <code>private</code>. It used to be the case that <code>private</code> definitions could not be made un-<code>private</code> downstream (e.g. if you do actually need to use some internal function from an imported module, and are okay with it breaking under you on version bumps) and people would complain, but now there is <a href=\"https://github.com/leanprover/std4/blob/d4161291e2a4c1c92d710bf670570aa79bf0d6ef/Std/Tactic/OpenPrivate.lean\">open private</a> so that it's a non-issue. Nevertheless, the <code>private</code> mechanism is not really a first-class feature. For instance, afaict there is no <code>private section</code> or <code>private namespace</code>. So the <code>omega</code> implementers would have to mark <em>every definition</em> <code>private</code>, which is rather annoying.</p>",
        "id": 430701622,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712027206
    },
    {
        "content": "<p>And to balance out the complaining somewhat, the usual disclaimer: this stuff is difficult, and I acknowledge the hard work the Lean design team is doing :)</p>",
        "id": 430702004,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712027449
    },
    {
        "content": "<p>I've implemented the option for excluding modules. The default value is <code>\"Init.Omega Mathlib.Tactic\"</code>.<br>\nFor example this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">librarySearch.excludedModules</span> <span class=\"s2\">\"Mathlib\"</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">info: Pattern n + 1</span>\n<span class=\"cm\">· Nat.succ n</span>\n<span class=\"cm\">  Nat.add_one</span>\n<span class=\"cm\">· Int.toNat (↑n + 1)</span>\n<span class=\"cm\">  Int.toNat_ofNat_add_one</span>\n\n<span class=\"cm\">Pattern n + m</span>\n<span class=\"cm\">· 1 + n</span>\n<span class=\"cm\">  Nat.add_comm</span>\n<span class=\"cm\">· Nat.add n 1</span>\n<span class=\"cm\">  Nat.add_eq</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">rw</span><span class=\"bp\">??</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 431015682,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712154075
    },
    {
        "content": "<p>I've also added some trace messages, so now, using <code>trace.profiler</code>, you can see which lemmas were slow to check.</p>",
        "id": 431016212,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712154213
    },
    {
        "content": "<p>Currently whenever an error (such as a max heartbeat error) happens when checking a lemma, it is caught and not propagated anywhere. Would it be useful to show such errors somehow? For example in the place where the lemma would have been, it could say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">An</span> <span class=\"n\">error</span> <span class=\"n\">occurred</span> <span class=\"n\">while</span> <span class=\"n\">checking</span> <span class=\"n\">the</span> <span class=\"kd\">lemma</span> <span class=\"bp\">&lt;</span><span class=\"kd\">lemma</span> <span class=\"n\">name</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">the</span> <span class=\"n\">error</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 431017553,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712154579
    },
    {
        "content": "<p>I also wonder if there is a nice way to display a lemma name with hover information. The problem is that when printing it as an expression, it gets the <code>@</code> symbol prepended if it has implicit arguments, which I don't want. The way I currently circumvent this is very ugly: I first compute it with the <code>@</code> symbol, and then I try to replace the text with just the lemma name.</p>",
        "id": 431018477,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712154842
    },
    {
        "content": "<p>A while ago I switched to doing unification with rewrite lemmas in the <code>reducible</code> transparency setting, which is quite a bit faster than <code>default</code>. However, this misses some lemmas that could otherwise unify, because of the fact that <code>RefinedDiscrTree</code> indexes <code>fun x =&gt; f x + g x</code> the same as <code>f + g</code> (this only unifies in at least the <code>instances</code> transparency) and indexes <code>fun x =&gt; x</code> the same as <code>id</code> (this only unifies in at least the <code>default</code> transparency), whenever these appear as strict subexpressions. This only comes up when you have a higher order function/predicate such as <code>Continuous</code>, but that is quite rare when rewriting, so I think this is no big deal.</p>\n<p>At some point I'll write a version of <code>isDefEq</code> that uses the <code>RefinedDiscrTree</code> normal form. This would correctly handle the above examples and be at least as efficient as <code>isDefEq</code> with <code>reducible</code> transparency.</p>",
        "id": 431290492,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712230573
    },
    {
        "content": "<p>Some things that could be added are:</p>\n<ul>\n<li>rewriting with local hypotheses. I'm not so sure how useful this is because I think in that case people would prefer to use <code>rw</code> directly.</li>\n<li>trying to close new goals using a discharger, like <code>solve_by_elim</code>. I'm not sure if this is worth it as it will probably make the tactic a bit slower, and in most cases we rewrite with lemmas that don't generate new goals anyways.</li>\n</ul>",
        "id": 431519608,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712322148
    },
    {
        "content": "<p>If there is nothing more to add, I'll mark the PR as awaiting-review.</p>",
        "id": 431519838,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712322229
    },
    {
        "content": "<p>I think the first point would be to have since it still helps with cases where the pattern appears in several places and you want to rewrite only once, right?</p>",
        "id": 431566084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712335463
    },
    {
        "content": "<p>That's true, although the occurrence syntax for rewriting isn't that hard to use directly.</p>\n<p>If I do add it, I think the most natural way is to have separate sections at the start for the local hypothesis rewrites, instead of putting these in between the other library rewrites. I also do this with the lemmas from the current file, putting them in separate sections before the rest.</p>",
        "id": 431614325,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712356821
    },
    {
        "content": "<p>While implementing this, I found out that the lemma that is currently being proved is also available as a local hypothesis (so it can be used recursively). I presume we do not want to suggest this as a rewrite?</p>",
        "id": 431623961,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712364806
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pqddLc1ay-mDutZbj1DMoWcZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pqddLc1ay-mDutZbj1DMoWcZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pqddLc1ay-mDutZbj1DMoWcZ/image.png\"></a></div><p>I've implemented this now.</p>\n<p>When searching for lemmas in the current file, or in the local hypotheses, I first compute the respective discrimination trees, and then lookup as usual. This is a bit of a funny use of a discrimination tree as I'm building it for one time use, but I think it is efficient enough that this is no problem.</p>",
        "id": 431675306,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712411641
    },
    {
        "content": "<p>Something else I was wondering is whether it is desired to have rewrite results that have new metavariables in the replacement expression. Currently I only exclude rewrites where the replacement is a new metavariable.</p>",
        "id": 431676901,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712412915
    },
    {
        "content": "<p>Another thing is instantiating metavariables through rewriting. I haven't implemented this so far since it is an uncommon situation, but the discrimination tree allows for this kind of lookup. Do you think this is desirable? One disadvantage could be that when you click on an expression with a metavariable in it and you don't want to instantiate it, then the result gets cluttered with rewrites that do instantiations that you don't want. Although this could be solved by sorting it so that the instantiating rewrites are shown last.</p>",
        "id": 431677622,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712413443
    },
    {
        "content": "<p>It seems like the tactic is basically ready for use? Is it possible to start reviewing the code for merging into mathlib? I figure people will have a better idea of features they would like added once they've had some time using the tactic.</p>",
        "id": 431678044,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1712413801
    },
    {
        "content": "<p>Yes, I'll put it on awaiting-review</p>",
        "id": 431678146,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712413898
    },
    {
        "content": "<p>I agree that it is probably in a state where getting actual user feedback could be useful to make the final decisions.</p>",
        "id": 431679547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712415028
    },
    {
        "content": "<p>But you will probably need to split the PR to get reviews. There are at least three pieces: the refined discrimination tree, the unfold widget and the rewriting stuff. Maybe you could even split the rewriting stuff into the backend and the widget because they probably require different people reviewing the code.</p>",
        "id": 431679915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712415331
    },
    {
        "content": "<p>How does splitting a PR work?</p>",
        "id": 431693217,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712426859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/429117438\">said</a>:</p>\n<blockquote>\n<p>If the widget doesn't depend on anything mathlib-specific, you could PR it there and I would review the PR.</p>\n</blockquote>\n<p>I've PR-ed the TypeScript now in Proofwidgets.</p>",
        "id": 431707995,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712439905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Point.26Click.20library.20rewrite.20tactic/near/431693217\">said</a>:</p>\n<blockquote>\n<p>How does splitting a PR work?</p>\n</blockquote>\n<p>You simply open new PRs with part of the code.</p>",
        "id": 431710740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712442661
    },
    {
        "content": "<p>But the rewrite code depends on the discrimination tree code, how do I use the code from one PR in the other?</p>",
        "id": 431710818,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712442769
    },
    {
        "content": "<p>The PRs will be stacked; i.e. one will contain a superset of the changes of the other.</p>",
        "id": 431710836,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712442811
    },
    {
        "content": "<p>Alternatively, just make the discrtree PR first, and keep the rest in a private branch.</p>",
        "id": 431710839,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712442827
    },
    {
        "content": "<p>Is it really a good idea to split into a bunch of different PR's? Because then it will get much harder to keep track of changes and also to test them. If someone wants to review the discrimination tree part, they can just look in that file in the current PR, right?</p>",
        "id": 431711655,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712443848
    },
    {
        "content": "<p>Experience proves that splitting works a lot better. You will be very frustrated otherwise because most likely <em>nothing</em> will happen if you stick to your giant PR that requires many different reviewer skills. Since I think this is really important work, I think you should split.</p>",
        "id": 431712672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712445085
    },
    {
        "content": "<p>Ok, here is the separate PR for <code>RefinedDiscrTree</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11968\">#11968</a></p>",
        "id": 431714851,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712447734
    },
    {
        "content": "<p>(in case you didn't spot it, CI has failed)</p>",
        "id": 431716205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712449031
    },
    {
        "content": "<p>It warns about unused imports, and suggests some other imports. But these suggestions are nonsense</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"kn\">import</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp.SimpCongrTheorems</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.Tactic.IndependentOf</span><span class=\"o\">]</span> <span class=\"n\">instead</span>\n</code></pre></div>\n<p>I've replaced it with the actual minimal imports, hopefully it succeeds now.</p>",
        "id": 431716872,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712449746
    },
    {
        "content": "<p>can you be more specific?</p>",
        "id": 431717048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712449987
    },
    {
        "content": "<p>The full two warnings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">RefinedDiscrTree.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kn\">import</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">shake</span> <span class=\"c1\">--fix` to fix this, or `lake exe shake --update` to ignore)</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">RefinedDiscrTree.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"kn\">import</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp.SimpCongrTheorems</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.Tactic.IndependentOf</span><span class=\"o\">]</span> <span class=\"n\">instead</span>\n</code></pre></div>\n<p>My code doesn't contain anything related to simp or the independentOf tactic, so it is weird that it suggests importing these files.</p>",
        "id": 431717134,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712450160
    },
    {
        "content": "<p>What I did to minimize the import is replace <code>import Lean.Meta</code> with <code>import Lean.Meta.DiscrTree</code></p>",
        "id": 431717190,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712450192
    },
    {
        "content": "<p>I added an <code>--explain</code> mode to shake to explain where the references are coming from. For that commit, it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">Mathlib.Lean.Meta.RefinedDiscrTree</span> <span class=\"n\">requires</span> <span class=\"n\">Lean.Meta.Tactic.Simp.SimpCongrTheorems</span>\n    <span class=\"n\">because</span> <span class=\"n\">Std.Range.forIn.loop._at.Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores._spec_1._lambda_1._cstage2</span>\n    <span class=\"n\">refers</span> <span class=\"n\">to</span> <span class=\"n\">Lean.throwError._at.Lean.Meta.mkSimpCongrTheorem._spec_4</span>\n  <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">Mathlib.Lean.Meta.RefinedDiscrTree</span> <span class=\"n\">requires</span> <span class=\"n\">Lean.Meta.Tactic.IndependentOf</span>\n    <span class=\"n\">because</span> <span class=\"n\">Lean.Meta.RefinedDiscrTree.DTExpr.eqv.go._cstage2</span>\n    <span class=\"n\">refers</span> <span class=\"n\">to</span> <span class=\"n\">Lean.HashSetImp.contains._at.Lean.MVarId.isIndependentOf._spec_1</span>\n</code></pre></div>",
        "id": 431719928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712453064
    },
    {
        "content": "<p>In other words, lean is adding spurious dependencies because certain specializations of some functions have been precompiled upstream somewhere</p>",
        "id": 431719980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712453125
    },
    {
        "content": "<p>That's interesting. I presume we don't want such imports? I think they would be confusing. And they aren't suggested anymore now that I've minimized the import.</p>",
        "id": 431720814,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712453950
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11981\">#11981</a></p>",
        "id": 431738691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712472777
    },
    {
        "content": "<p>Which won't compile because it (predictably) uncovers some new unnecessary imports. Can I interest someone in taking over the PR and fixing the imports? (<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> perhaps?)</p>",
        "id": 431738807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712472900
    },
    {
        "content": "<p>Currently in an airplane but I can take a look in a few hours</p>",
        "id": 431739023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712473139
    },
    {
        "content": "<p>I pushed the suggestions, hope they work :)</p>",
        "id": 431745453,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712479378
    },
    {
        "content": "<p>They didn't</p>",
        "id": 431745757,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712479685
    },
    {
        "content": "<p>By the way, in the new update to vscode, they've added a feature where section titles are shown in the minimap (<a href=\"https://code.visualstudio.com/updates/v1_88#_minimap-section-headers\">https://code.visualstudio.com/updates/v1_88#_minimap-section-headers</a>). I think it would be amazing to have something like this in Lean. I have some titles in my code using the suggested <code>/-! ### My title -/</code> form, but they don't really help because they don't stand out from the rest of the file in any way on the minimap.</p>",
        "id": 431748727,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712482129
    },
    {
        "content": "<p>I've now also made a separate PR for the <code>unfold?</code> tactic: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12016\">#12016</a><br>\nThis one is quite a bit smaller, so should be easier to review.</p>",
        "id": 432026326,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712595679
    },
    {
        "content": "<p>An issue I hadn't realized before is that sometimes <code>rw</code> fails with an error saying \"motive is not type correct\". This is currently not detected by <code>rw??</code>. So whenever the motive is not type correct it still shows the library rewrites and these can still be pasted into the editor, but then give this error. I could detect this, so that instead of showing the library rewrites, it explains why this particular subexpression cannot be rewritten. Is this desired, or do we still want to see the library rewrites, even if <code>rw</code> doesn't work there? Or a warning message, followed by the library rewrites?</p>\n<p>Here's an example:</p>\n<p><a href=\"/user_uploads/3121/R9s_mbHH7lbTr2O2HCjfD15m/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/R9s_mbHH7lbTr2O2HCjfD15m/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/R9s_mbHH7lbTr2O2HCjfD15m/image.png\"></a></div>",
        "id": 433599299,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1713299159
    },
    {
        "content": "<p>I think we just don't want to see those results at all.</p>",
        "id": 433639991,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713323100
    },
    {
        "content": "<p>I've fixed it now. Instead of showing the results, it says<br>\n<code>The selected expression cannot be rewritten, because the motive is not type correct. This usually occurs when trying to rewrite a term that appears as a dependent argument.</code></p>",
        "id": 433715235,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1713347160
    },
    {
        "content": "<p>I've also done this for the unfolding part of the tactic, as this uses <code>rw [show current = replacement from rfl]</code> to do the replacement. However, even when the motive is not type correct, replacing something by something definitionally equal still is valid. If this is enough of a problem, we could make a <code>rw_defEq</code> tactic that takes as arguments <code>current</code> and <code>replacement</code>, and does the rewrite assuming <code>current</code> and <code>replacement</code> are <code>defEq</code></p>",
        "id": 433716518,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1713347535
    },
    {
        "content": "<p>I've made another little fix: If you try to rewrite <code>Nat.Coprime 2 3</code>, there used to be a section of results labelled <code>n = 1</code>, because <code>Nat.Coprime</code> is a reducible constant reducing to <code>Nat.gcd m n = 1</code>. But these lemma's don't actually work with <code>rw</code>, because in addition to definitional equality with reducible transparency, <code>rw</code> requires the <code>HeadIndex</code> and the number of arguments of the head to match exactly. So now I also check that these match.</p>",
        "id": 434215504,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1713464348
    },
    {
        "content": "<p>I recently reimplemented how the <code>RefinedDiscrTree</code> handles Pi type instances. Now it does this for the following operations: <code>+</code>, <code>*</code>, <code>-</code>, <code>/</code>, <code>⁻¹</code>, <code>+ᵥ</code>, <code>•</code> ,<code>^</code>. I thought that I had done all the relevant pi type instances. However I found that there is also the alternative instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/GroupAction/Pi.html#Pi.smul'\">Pi.smul'</a>. And there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Basic.html#Pi.sdiff\">Pi.sdiff</a> for set difference.</p>\n<p>Is there a complete list of these Pi type instances somewhere, and are they common enough that they will appear in someone's library search?</p>\n<p>This is not so relevant for rewriting, but more relevant to something like <code>apply?</code>, which I will want to make in the future using this discrimination tree, and for <code>funprop</code>, which uses this discrimination tree.</p>",
        "id": 436155973,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714431530
    },
    {
        "content": "<p>There are also types such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.add_apply\">PiLp</a> that are a copy of a Pi type and that get a copy of the standard Pi type instance on some of these operations. These things are not handled separately by my discrimination tree, but I think that's fine.</p>",
        "id": 436171834,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714440449
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Cast/Basic.html#Pi.instNatCast\">Pi.instNatCast</a> which I deal with by stripping away any lambdas that appear in front of number literals. I don't reduce over-applications of number literals, since it seems very unlikely to me that anyone would leave those in an expression anyways.</p>",
        "id": 436172407,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714440775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> I started looking at your PR's surrounding  <a href=\"https://github.com/leanprover-community/mathlib4/pull/11768\">#11768</a>. As far as I can tell the only things your tactic uses from Mathlib are some widget utilities in <code>Mathlib.Tactic.Widget.SelectSidePanelUtil</code>.</p>\n<p>So I was wondering, what's the motivation to add it to mathlib instead of providing it as a standalone package which is imported in mathlib, similar to e.g. <code>aesop</code>? Maybe the standalone approach would be easier to maintain?</p>",
        "id": 446884741,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719322577
    },
    {
        "content": "<p>I simply hadn't considered the standalone package idea, so I also don't know if that's easier.</p>\n<p>Another way in which it depends on Mathlib is via the discrimination tree, where the code deals with some pi instances, and the Inv.inv constant. But it doesn't import these constants, because it just contains the constants as a <code>Name</code>.</p>\n<p>If you think the stand alone package approach is better, I could try that.</p>",
        "id": 446891590,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1719323715
    },
    {
        "content": "<p>Something else I was considering was to do what the <code>LazyDiscrTree</code> does in my own discrimination tree. The original reason I rejected this was because building the lazy discrimination tree from scratch takes too long. But this starting tree could be cached via the same caching mechanism, making the cached data much smaller, and easier to extend with further imports.</p>",
        "id": 446892984,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1719324014
    },
    {
        "content": "<p>I don't know if it's necessarily better. I just know that it's a lot of code and I understand why it hasn't been reviewed in quite some time. And I was just wondering if there would be repeatedly long review times whenever there are additions/changes. Having it separate might increase the maintainability, but you'd know better about the technical details. </p>\n<p>Simply wanted to ask first before looking at it in more detail :)</p>",
        "id": 446897879,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719325161
    },
    {
        "content": "<p>Oh, I just noticed that the main content of  <a href=\"https://github.com/leanprover-community/mathlib4/pull/11968\">#11968</a> (or an older version thereof?) already made it into mathlib as <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean\">Mathlib.Tactic.FunProp.RefinedDiscrTree</a></p>",
        "id": 446901882,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719326092
    },
    {
        "content": "<p>That sounds reasonable.</p>\n<p>Something that would have to be figured out is how to set up mathlib CI to build the cache (I don't really know how it works I just copied what <code>rw?</code> did)</p>",
        "id": 447011838,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1719354973
    },
    {
        "content": "<p>Yes fun_prop uses an old version of my refined discrimination tree</p>",
        "id": 447011892,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1719355002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span>, maybe I'm misunderstanding here, but Mathlib no longer builds a cache for <code>exact?</code> or <code>rw?</code>, and we do not want to go back to doing this sort of thing.</p>",
        "id": 447023540,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719359672
    },
    {
        "content": "<p>(so if you copied what Mathlib's <code>rw?</code> did in the past, please don't!)</p>",
        "id": 447023588,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719359688
    },
    {
        "content": "<p>Ah, I see. I indeed copied the old behaviour of <code>rw?</code>.</p>",
        "id": 447137457,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1719384944
    },
    {
        "content": "<p>The new behaviours (up in the lean4) repo  is very different, and doesn't require any caching, but is quite complicated! (i.e. I hope I don't have to touch it :-)</p>",
        "id": 447137852,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719385088
    }
]