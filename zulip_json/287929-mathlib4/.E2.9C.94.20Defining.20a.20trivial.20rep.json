[
    {
        "content": "<p>Hi there, I am trying to define a trivial representation of a group G on the space of tempered distributions. Here is my MWE; I keep getting \"function expected at \\R, term has type Type.\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DirectSum.Module</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.MonoidAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Endomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Upto</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Calculus</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Distribution.SchwartzSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Rd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Rd</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">Rd</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Representation.trivial</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span>  <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">SchwartzMap</span> <span class=\"n\">Rd</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">_L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410951398,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704253679
    },
    {
        "content": "<p>I don't think that's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>... what are your imports?</p>",
        "id": 410953313,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704254904
    },
    {
        "content": "<p>Added!</p>",
        "id": 410953966,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704255370
    },
    {
        "content": "<p>is <code>→_L[ℝ]</code> supposed to be <code>→L[ℝ]</code>?</p>",
        "id": 410954713,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704256024
    },
    {
        "content": "<p>Ah, yes, thanks - I still get the error though, even removing the L[\\R] altogether</p>",
        "id": 410954845,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704256161
    },
    {
        "content": "<p>another issue is the outer parentheses around <code>(ℝ  G (SchwartzMap Rd ℝ) →_L[ℝ] ℝ)</code>... Lean parses this as \"call the function ℝ with the arguments <code>G (SchwartzMap Rd ℝ) →_L[ℝ] ℝ</code>, which is why it's complaining about expecting a function</p>",
        "id": 410954856,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704256176
    },
    {
        "content": "<p>so you should get rid of those outer parentheses</p>",
        "id": 410954923,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704256212
    },
    {
        "content": "<p>or restructure them if you meant to place the opening parenthesis elsewhere</p>",
        "id": 410955052,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704256344
    },
    {
        "content": "<p>Oh wow good to know. I think that got me somewhere because now it says failed to synthesize instance<br>\n  Monoid (Type u_3). Which I believe refers to it not seeing the space of distributions as a monoid?</p>",
        "id": 410955283,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704256537
    },
    {
        "content": "<p>With the final line now being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Representation.trivial</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">SchwartzMap</span> <span class=\"n\">Rd</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410955426,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704256626
    },
    {
        "content": "<p>try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Representation.trivial</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">SchwartzMap</span> <span class=\"n\">Rd</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410955843,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704257030
    },
    {
        "content": "<p>the problem was that the second and third arguments to <code>Representation.trivial</code> are implicit (as indicated by curly brackets in the type signature)... adding <code>@</code> forces the arguments to be explicit</p>",
        "id": 410955926,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704257102
    },
    {
        "content": "<p>Thank you! Implicit, meaning it wanted me to define G and the module (third argument) beforehand as variables using curly braces only?</p>",
        "id": 410956751,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704257793
    },
    {
        "content": "<p>Implicit in the sense that Lean can infer them in some scenarios and doesn't expect them to be passed in</p>",
        "id": 410956898,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704257950
    },
    {
        "content": "<p>Got it. Thanks for the help here!</p>",
        "id": 410957183,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704258088
    },
    {
        "content": "<p>Sure, no problem!</p>",
        "id": 410957325,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704258138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677363\">Noam Kantor</span> has marked this topic as resolved.</p>",
        "id": 411270024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704406511
    }
]