[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">Pi</span><span class=\"bp\">.</span><span class=\"n\">Bounds</span>\n<span class=\"c1\">-- set_option trace.linarith true</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi_gt_3141592</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>doesn't work in Lean 4, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">bounds</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi_gt_3141592</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>worked in Lean 3.</p>",
        "id": 440811750,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1716801416
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20regression.20on.20real.20numbers/near/440811750\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/linarith.20regression\">#mathlib4 &gt; linarith regression</a> by <span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span>.</p>",
        "id": 440811808,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716801436
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">Pi</span><span class=\"bp\">.</span><span class=\"n\">Bounds</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">3.141592</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi_gt_3141592</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"n\">linarith</span>\n</code></pre></div>\n<p>works, but fails without the <code>norm_num</code> line, so it's a <code>OfScientific</code> issue.</p>",
        "id": 440813421,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716801966
    },
    {
        "content": "<p>More minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">Pi</span><span class=\"bp\">.</span><span class=\"n\">Bounds</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">  </span><span class=\"n\">linarith</span>\n</code></pre></div>\n<p>fails without the <code>norm_num</code>.</p>",
        "id": 440813614,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716802030
    },
    {
        "content": "<p>Interestingly, <code>set_option trace.linarith</code> suggests that it does almost succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">hypotheses</span><span class=\"o\">:</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">conjunctions</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"n\">terms</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">proofs</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">comparisons</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">replace</span><span class=\"w\"> </span><span class=\"n\">negations</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">comparisons</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"n\">nats</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">ints</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">strengthen</span><span class=\"w\"> </span><span class=\"n\">strict</span><span class=\"w\"> </span><span class=\"n\">inequalities</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">int</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">comparisons</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">zero</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Preprocessing</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cancel</span><span class=\"w\"> </span><span class=\"n\">denominators</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">preprocessing</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"o\">:</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">hypotheses</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">different</span><span class=\"w\"> </span><span class=\"n\">types</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">contradiction</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">linarith</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">expression</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">negative</span>\n</code></pre></div>",
        "id": 440828962,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716807295
    },
    {
        "content": "<p>Ah nevermind, that's because the simplex algorithm oracle returns an empty proof when it fails.</p>",
        "id": 440830174,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716807793
    },
    {
        "content": "<p><code>linarith (config := { oracle := Linarith.CertificateOracle.fourierMotzkin })</code> will fail rather than returning an empty proof.</p>",
        "id": 440830216,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716807818
    },
    {
        "content": "<p>Okay, I don't know enough about the implementation of linarith to diagnose what's going wrong beyond that point.</p>",
        "id": 440834535,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716809436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20regression.20on.20real.20numbers/near/440830174\">said</a>:</p>\n<blockquote>\n<p>Ah nevermind, that's because the simplex algorithm oracle returns an empty proof when it fails.</p>\n</blockquote>\n<p>This sounds like a bug</p>",
        "id": 440837438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716810504
    }
]