[
    {
        "content": "<p>Is there a policy on named instance parameters? Are they to be avoided in general or is it okay to skip some heartbeats? Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span>\n  <span class=\"n\">trivial</span>\n<span class=\"c1\">-- 674 heartbeats</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Module.Finite.out</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"n\">trivial</span>\n<span class=\"c1\">-- 979 heartbeats</span>\n</code></pre></div>\n<p>The named instance parameter pattern is quite frequent in the <code>Module.Finite</code>, <code>Algebra.Finite</code>, <code>Module.FinitePresentation</code> etc. cases.</p>",
        "id": 439823927,
        "sender_full_name": "Christian Merten",
        "timestamp": 1716299756
    },
    {
        "content": "<p>Do you know you can do <code>obtain ⟨s, hs⟩ := ‹Module.Finite R M›</code>?</p>",
        "id": 439824244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716299829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Named.20instance.20parameters/near/439824244\">said</a>:</p>\n<blockquote>\n<p>Do you know you can do <code>obtain ⟨s, hs⟩ := ‹Module.Finite R M›</code>?</p>\n</blockquote>\n<p>I did not, thanks! Is this the same as <code>obtain ⟨s, hs⟩ := (inferInstance : Module.Finite R M)</code>? Heartbeat wise your suggestion is at 982.</p>",
        "id": 439826336,
        "sender_full_name": "Christian Merten",
        "timestamp": 1716300327
    },
    {
        "content": "<p><code>‹Foo›</code> is the same as <code>(by assumption : Foo)</code></p>",
        "id": 439826675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716300427
    },
    {
        "content": "<p>I think named instance params are fine.</p>",
        "id": 439826724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716300447
    },
    {
        "content": "<p>Heartbeats for <code>‹_›</code> should be basically zero</p>",
        "id": 439826753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716300454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Named.20instance.20parameters/near/439826753\">said</a>:</p>\n<blockquote>\n<p>Heartbeats for <code>‹_›</code> should be basically zero</p>\n</blockquote>\n<p>If more then 300 slower is \"basically zero\", then I agree (I guess compared to the max of 200000 it is indeed basically zero).</p>",
        "id": 439826991,
        "sender_full_name": "Christian Merten",
        "timestamp": 1716300528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Named.20instance.20parameters/near/439826724\">said</a>:</p>\n<blockquote>\n<p>I think named instance params are fine.</p>\n</blockquote>\n<p>So is there a preference? Up to personal style or is the <code>‹_›</code> variant preferred?</p>",
        "id": 439827269,
        "sender_full_name": "Christian Merten",
        "timestamp": 1716300610
    },
    {
        "content": "<p>I don't think changing a proof to use a named instance argument is worth 300 heartbeats. I personally think it's better to only interact with instances through the typeclass system, since it helps ensure that you're only dealing with the instances you'd actually get through typeclass search. For a <code>Prop</code>-valued class this matters less, but it's the principle of it.</p>\n<p>(It's a bit unfortunate that <code>Module.Finite.out</code> doesn't take its <code>R</code> and <code>M</code> arguments explicitly. I suspect this inconvenience is why you might see so many uses of explicit instances for <code>Module.Finite</code>.)</p>",
        "id": 439871456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716314198
    },
    {
        "content": "<p>I would say a good rule of thumb is that if a heartbeat savings is less than about 10,000, it must come at <em>no</em> cost to readability.</p>",
        "id": 439916996,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716329887
    },
    {
        "content": "<p>Note also that naming instances doesn't just affect readability in your proof; it also changes how your lemma appears in the docs / when people hover over it.</p>",
        "id": 439920856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716331382
    }
]