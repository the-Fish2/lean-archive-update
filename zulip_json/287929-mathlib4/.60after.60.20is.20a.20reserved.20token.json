[
    {
        "content": "<p>The following fails unless you remove the import:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ExtendDoc</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">),</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422995677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708686765
    },
    {
        "content": "<p>Can we a have a linter to prevent this kind of mistake?</p>",
        "id": 422995712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708686783
    },
    {
        "content": "<p>The cause is presumably</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"extend_docs\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"before\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"after\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>",
        "id": 422996004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708686898
    },
    {
        "content": "<p>I introduced the <code>ExtendDoc</code> command, but I did not realize that it would cause this issue.  I do not know how to fix it, though...</p>",
        "id": 423002965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708689916
    },
    {
        "content": "<p>There's some magic parser that means \"don't make this globally reserved\", but I don't remember what it's called...</p>",
        "id": 423003781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708690245
    },
    {
        "content": "<p>Ok, <code>exfalso</code> seems to be available as a variable name: I'll see if that is enough of a hint!</p>",
        "id": 423004613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708690582
    },
    {
        "content": "<p>I would look at a word that appears in the middle of other syntax, not at the start</p>",
        "id": 423004790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708690674
    },
    {
        "content": "<p>Ok, in fact, that did not give me many more clues...</p>",
        "id": 423004904,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708690707
    },
    {
        "content": "<p><code>using</code> has the same problem as <code>after</code>, but <code>only</code> does not.</p>",
        "id": 423005032,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708690766
    },
    {
        "content": "<p><code>&amp;\"before\"</code></p>",
        "id": 423005622,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708690966
    },
    {
        "content": "<p>Should we fix <code>using</code> too?</p>",
        "id": 423005702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708690994
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"x\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">hello</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"c1\">-- error</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"y\"</span> <span class=\"n\">ident</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"hi\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 423005965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708691078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60after.60.20is.20a.20reserved.20token/near/423005702\">said</a>:</p>\n<blockquote>\n<p>Should we fix <code>using</code> too?</p>\n</blockquote>\n<p>I guess so: I'll scan for lines containing (more or less) <code>sintax.*[^&amp;]\"</code> and see what I find.</p>",
        "id": 423006103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708691142
    },
    {
        "content": "<p>Just to be clear: \"every\" use of <code>using</code> in syntax should be replaced by <code>&amp;\"using\"</code> and whitespace inside the quotes does not matter.  Correct?</p>",
        "id": 423006989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708691461
    },
    {
        "content": "<p>I am a little worried, since I also found</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathport</span><span class=\"bp\">/</span><span class=\"n\">Syntax.lean</span><span class=\"o\">:</span><span class=\"mi\">221</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> S -/</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">transport</span><span class=\"o\">)</span> <span class=\"s2\">\"transport\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" using \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 423007080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708691500
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10881\">#10881</a></p>",
        "id": 423008862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708692209
    },
    {
        "content": "<p>I wonder if I should also add a test file that creates a few variables called <code>using, before, after</code> and importing all tactics.</p>",
        "id": 423008990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708692254
    },
    {
        "content": "<p>no, <code>using</code> (and any other word appearing after <code>term</code>) must be a keyword</p>",
        "id": 423009878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708692617
    },
    {
        "content": "<p><code>using</code> is already a keyword because it is used in <code>induction</code></p>",
        "id": 423009964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708692659
    },
    {
        "content": "<p>Ok, so I'll revert the change and only make <code>before</code> and <code>after</code> non-keywords.</p>",
        "id": 423010051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708692701
    },
    {
        "content": "<p>Done, the PR is still the same: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10881\">#10881</a></p>",
        "id": 423010576,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708692929
    }
]