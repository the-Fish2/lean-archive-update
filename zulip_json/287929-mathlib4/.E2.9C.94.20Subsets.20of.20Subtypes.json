[
    {
        "content": "<p>I was wondering if there is a good way to do the following:<br>\nI have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>And I want to talk about and work with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">↑</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>This is the approach I'm trying to take but it seems a bit unwieldy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_set</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Set</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">uncoe_set</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">coe_set</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe_set</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Membership.mem</span><span class=\"o\">,</span> <span class=\"n\">Set.Mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">elem_in_coe</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"n\">coe_set</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe_set</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Membership.mem</span><span class=\"o\">,</span> <span class=\"n\">Set.Mem</span><span class=\"o\">]</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">coe_set</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Is there a better way to do this?</p>\n<p>(For what it's worth, I am trying to prove things about linear orders and am trying to treat subsets as linear orders themselves.)</p>",
        "id": 435842311,
        "sender_full_name": "Eric Paul",
        "timestamp": 1714288236
    },
    {
        "content": "<p><code>Subtype.val</code> is the coercion <code>b → α</code>. So the preimage <code>a.preimage Subtype.val : Set b</code> with the notation <code>b ↓∩ a</code> is what you want.</p>",
        "id": 435848264,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714293385
    },
    {
        "content": "<p>Ah perfect. Thank you very much.</p>",
        "id": 435890905,
        "sender_full_name": "Eric Paul",
        "timestamp": 1714323094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512030\">Eric</span> has marked this topic as resolved.</p>",
        "id": 435890914,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714323118
    }
]