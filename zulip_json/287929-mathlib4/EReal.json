[
    {
        "content": "<p>Context: The abscissa of (absolute) convergence of an L-series is naturally an <code>EReal</code> (i.e., between -∞ and ∞ inclusive). So I need to work with <code>EReal</code>s in this context. See also <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/sInf.20.28Real.2EtoEReal.20'.20'.20.2E.2E.2E.29/near/410765558\">here</a>.</p>\n<p>My most fundamental question in this regard is: can we hide the ugly implementation-detail asymmetry of the definition and have <code>cases x</code> (with <code>x : EReal</code>) accept three match arms of the form <code>⊥ =&gt; ...</code>, <code>⊤ =&gt; ...</code> and <code>(Real.toEReal y) =&gt; ...</code>? I can use <code>match x with</code>, but then I have to write <code>some (some y)</code> in the last alternative and in many cases change that to <code>↑y</code> manually to be able to work with it.</p>\n<p>One attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">EReal.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">motive</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ht</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span> <span class=\"n\">y</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">casesEReal</span><span class=\"o\">)</span> <span class=\"s2\">\"casesEReal\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">casesEReal</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">refine</span> <span class=\"n\">EReal.elim</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">casesEReal</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- 3 goals: ⊢ P ⊥, ⊢ P ⊤, y: ℝ ⊢ P ↑y</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But it would be nice to teach the existing <code>cases</code>, <code>rcases</code>etc. to use <code>EReal.elim</code>. Is this at all possible?</p>",
        "id": 410834535,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704196208
    },
    {
        "content": "<p>Isn't it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal.rec#doc\">docs#EReal.rec</a> (up to the order of parameters)?</p>",
        "id": 410836812,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704197469
    },
    {
        "content": "<p>I missed that somehow.<br>\nStill, <code>induction x using EReal.rec</code> feels a bit unnatural as there is no induction hypothesis.</p>",
        "id": 410837029,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197614
    },
    {
        "content": "<p>Sadly, custom default recursors are not there yet. We've been wanting them for a while.</p>",
        "id": 410837258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704197748
    },
    {
        "content": "<p>... and <code>induction x using EReal.rec with y</code> apparently does not work to name the real number in the main case...</p>",
        "id": 410837367,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197791
    },
    {
        "content": "<p>...using <code>case</code> labels is also ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_between_ofReal_left</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha₁</span><span class=\"o\">,</span> <span class=\"n\">ha₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_between</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">EReal.rec</span>\n  <span class=\"n\">case</span> <span class=\"n\">intro.intro.h_bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt_bot</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha₁</span>\n  <span class=\"n\">case</span> <span class=\"n\">intro.intro.h_top</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_top_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha₂</span>\n  <span class=\"n\">case</span> <span class=\"n\">intro.intro.h_real</span> <span class=\"n\">a₀</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ha₁</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ha₂</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 410837444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/EReal/near/410837367\">said</a>:</p>\n<blockquote>\n<p>... and <code>induction x using EReal.rec with y</code> apparently does not work to name the real number in the main case...</p>\n</blockquote>\n<p>Have you tried <code>induction' x using EReal.rec with y</code>?</p>",
        "id": 410837476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704197872
    },
    {
        "content": "<p>Can that be improved so that the case have names like <code>bot</code>,  <code>top</code> and <code>ofReal</code>?</p>",
        "id": 410837491,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197879
    },
    {
        "content": "<p>Once again, this is a missing Lean feature that we've been petitioning for</p>",
        "id": 410837580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704197916
    },
    {
        "content": "<p><code>induction'</code> allows to name the variable, but I got the impression that <code>induction' </code> is a crutch used for the port of mathlib.</p>",
        "id": 410837618,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197942
    },
    {
        "content": "<p>It was originally presented that way, but the new <code>induction</code> syntax is so unergonomic that I really doubt we'll actually switch from <code>induction'</code> to <code>induction</code> everywhere.</p>",
        "id": 410837686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704197995
    },
    {
        "content": "<p>I assume using the <code>case</code> names is preferred as that does not rely implicitly on the order of arguments of <code>EReal.rec</code>. So it would be nice to have nicer names.</p>",
        "id": 410837689,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704197996
    },
    {
        "content": "<p>That too is really up for debate.</p>",
        "id": 410837750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704198012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/EReal/near/410837686\">said</a>:</p>\n<blockquote>\n<p>It was originally presented that way, but the new <code>induction</code> syntax is so unergonomic that I really doubt we'll actually switch from <code>induction'</code> to <code>induction</code> everywhere.</p>\n</blockquote>\n<p>I think this is the long-term idea, although I'm not a tremendous fan either, to be honest.</p>",
        "id": 410837794,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704198036
    },
    {
        "content": "<p>You can tag your lemma with <code>@[eliminator]</code> seems to work fine to me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">EReal.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">motive</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ht</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span> <span class=\"n\">y</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">casesEReal</span><span class=\"o\">)</span> <span class=\"s2\">\"casesEReal\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">casesEReal</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">refine</span> <span class=\"n\">EReal.elim</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">casesEReal</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- 3 goals: ⊢ P ⊥, ⊢ P ⊤, y: ℝ ⊢ P ↑y</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- 3 goals: ⊢ P ⊥, ⊢ P ⊤, y: ℝ ⊢ P ↑y</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410852653,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704205424
    },
    {
        "content": "<p>Then also <code>cases' x with y</code> works.<br>\nHowever, the yellow lightbulb appearing on <code>cases</code> still generates cases <code>none</code> and <code>some val</code>...</p>",
        "id": 410853050,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205615
    },
    {
        "content": "<p>Would it be reasonable to add this to Mathlib as well?</p>",
        "id": 410853106,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205642
    },
    {
        "content": "<p>I think so yes, I think we are missing out by not using this feature more.<br>\nAnd the light bulb thing sounds like a bug indeed!</p>",
        "id": 410853217,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704205691
    },
    {
        "content": "<p>I don't think the code action supports <code>cases using</code></p>",
        "id": 410853259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205718
    },
    {
        "content": "<p>But <code>cases</code> works without <code>using</code>?</p>",
        "id": 410853363,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205766
    },
    {
        "content": "<p>yes?</p>",
        "id": 410853451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205803
    },
    {
        "content": "<p>sorry I'm not sure what the bug report is here</p>",
        "id": 410853495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205810
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">EReal.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ofReal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">motive</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">top</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofReal</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ofReal</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410853501,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205814
    },
    {
        "content": "<p>oh, you are using <code>@[eliminator]</code> as an auto-<code>using</code></p>",
        "id": 410853556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205842
    },
    {
        "content": "<p>yeah that's not supported either</p>",
        "id": 410853575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205848
    },
    {
        "content": "<p>Which eliminator is picked by <code>cases</code> and which by the  lightbulb?</p>",
        "id": 410853584,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205852
    },
    {
        "content": "<p>in fact it will probably cause things to be really weird since it will generate case names that don't match what cases thinks</p>",
        "id": 410853657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205885
    },
    {
        "content": "<p>the code action only ever looks at the inductive type</p>",
        "id": 410853690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205901
    },
    {
        "content": "<p>i.e. as if you didn't use <code>using</code> or <code>@[eliminator]</code></p>",
        "id": 410853709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205910
    },
    {
        "content": "<p>I guess <a href=\"https://github.com/leanprover/std4/blob/03a0f24da542fcf3fd60d9a9de9db6c5af0391f7/Std/CodeAction/Misc.lean#L283\">https://github.com/leanprover/std4/blob/03a0f24da542fcf3fd60d9a9de9db6c5af0391f7/Std/CodeAction/Misc.lean#L283</a> is the relevant code, the code action just uses <code>typename.casesOn</code></p>",
        "id": 410853724,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704205916
    },
    {
        "content": "<p>So we should redefine <code>EReal.casesOn</code>? (If that's possible...)</p>",
        "id": 410853841,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704205955
    },
    {
        "content": "<p>what's the goal?</p>",
        "id": 410853906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704205980
    },
    {
        "content": "<p>To have <code>cases x</code> give the natural trichotomy on <code>x : EReal</code> (and the lightbulb to do the same).</p>",
        "id": 410853996,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704206020
    },
    {
        "content": "<p>the lightbulb thing is a bug, it doesn't reflect what cases actually does and gives wrong hints as a result. Assuming that issue is fixed, are there any other bugs?</p>",
        "id": 410854008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704206025
    },
    {
        "content": "<p>The goal is that in the presence of <code>@[eliminator]</code> the light bulb produces working code</p>",
        "id": 410854016,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704206028
    },
    {
        "content": "<p>No I think thats it!</p>",
        "id": 410854058,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704206043
    }
]