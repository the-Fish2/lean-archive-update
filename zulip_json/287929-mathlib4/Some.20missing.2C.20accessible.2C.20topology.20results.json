[
    {
        "content": "<p>Hi, in my efforts to track progress on pi-base, I noticed that the following topology results are still open (docstrings refer to theorems in <a href=\"https://topology.pi-base.org\">https://topology.pi-base.org</a>) so feel free to pick one and make a PR! I'm a bit too busy at this moment, otherwise I'll probably add them at some distant point in the future. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"c1\">--T000212:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">--T000259:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">HereditarilyLindelofSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">--T000302:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">R1Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">PseudoMetrizableSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">--T000345:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">CompletelyRegularSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 421827386,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708078160
    },
    {
        "content": "<p>I can't seem to find those on the pi-base website :/</p>",
        "id": 421840586,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708082865
    },
    {
        "content": "<p>Searching on pi-base with numbers seems to be a bit weird sometimes. My go-to strategy is to click any theorem and change the URL for the desired number, e.g.:<br>\nT212 : <a href=\"https://topology.pi-base.org/theorems/T000212/\">https://topology.pi-base.org/theorems/T000212/</a><br>\nT259 : <a href=\"https://topology.pi-base.org/theorems/T000259/\">https://topology.pi-base.org/theorems/T000259/</a><br>\nT302 : <a href=\"https://topology.pi-base.org/theorems/T000302/\">https://topology.pi-base.org/theorems/T000302/</a><br>\nT345 : <a href=\"https://topology.pi-base.org/theorems/T000345/\">https://topology.pi-base.org/theorems/T000345/</a></p>\n<p>Also, note that the results I just wrote are slightly differently phrased from those in pi-base, as we have some different (naming) conventions, e.g. <br>\nCountableSpace -&gt; Countable <br>\nFirstCountableSpace -&gt; FirstCountableTopology<br>\nHas A Group Topology -&gt; [Group X] and [TopologicalGroup X]</p>",
        "id": 421842969,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708083893
    },
    {
        "content": "<p>Also, I needed to tell Lean that we have a [TopologicalSpace X], which pi-base doesn't need to specify of course.</p>",
        "id": 421843044,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708083931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span> Can you now produce some sort of json dictionary that maps back-and-forth between pi-base results and mathlib results?</p>",
        "id": 421843409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708084091
    },
    {
        "content": "<p>If you can, then we should render that dictionary on the website, if you agree.</p>",
        "id": 421843444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708084108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20missing.2C.20accessible.2C.20topology.20results/near/421843444\">said</a>:</p>\n<blockquote>\n<p>If you can, then we should render that dictionary on the website, if you agree.</p>\n</blockquote>\n<p>I think that would be very nice, but this is very much WIP still. I need to learn more Lean programming I guess, as I'm currently using Julia for the conversion. I can convert Mathlib properties and theorems to their Lean counterparts and write them to <code>.lean</code> files. I think rendering the dictionary on the website would be very nice, but I'm not familiar with these things, so it'll take quite some time to figure that out. </p>\n<p>If someone is more experienced with this and would like access to <a href=\"https://github.com/JADekker/PiBaseTracking\">https://github.com/JADekker/PiBaseTracking</a> to make the necessary modifications or if someone can suggest what exactly I should do, I would be more than happy!</p>",
        "id": 421843941,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708084324
    },
    {
        "content": "<p>As this is very much WIP, I haven't written too much documentation either, as things are bound to be changed/optimised at some point!</p>",
        "id": 421844343,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708084490
    },
    {
        "content": "<p>I figured I'd post some missing theorems for now, so that people looking for small projects can have some fun with them!</p>",
        "id": 421844427,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708084511
    },
    {
        "content": "<p>I could certainly make .md or .json files with lean versions of the definitions and theorems from all the .md files from pi-base, if you like? That would allow us to get a 1-1 correspondence between pi-base pages and lean-version. Let me try that this afternoon!</p>",
        "id": 421844871,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708084695
    },
    {
        "content": "<p>It would be interesting to try to prove the theorems that you generate using <code>exact?</code>. If there's a match, that can generate an entry in the db.</p>",
        "id": 421845438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708084921
    },
    {
        "content": "<p>Hopefully this can automate a bunch of the work (-;</p>",
        "id": 421845506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708084933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20missing.2C.20accessible.2C.20topology.20results/near/421845506\">said</a>:</p>\n<blockquote>\n<p>Hopefully this can automate a bunch of the work (-;</p>\n</blockquote>\n<p>Currently, I automatically get files with all theorems, each of which is checked by exact?, so if the file is error free, we’re done… but checking all theorems separately and automated would certainly be better and allow us to also program exceptions for theorems that can be proven but not by exact? because of some special reason. Let me try to write code in Lean for this, may take a few days though as I’m doing this in my spare time</p>",
        "id": 421845943,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708085112
    },
    {
        "content": "<p>(I'll happily take on T000345 as a break from my Rubin's theorem stuff)</p>",
        "id": 421846159,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708085214
    },
    {
        "content": "<p>Do we not have that uniform spaces are completely regular?</p>",
        "id": 421870504,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708094231
    },
    {
        "content": "<p>I have a working proof that <code>TopologicalGroup G</code> → <code>UniformSpace G</code>, but I guess we're missing one step to get to <code>CompletelyRegularSpace G</code></p>",
        "id": 421870817,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708094315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20missing.2C.20accessible.2C.20topology.20results/near/421870504\">said</a>:</p>\n<blockquote>\n<p>Do we not have that uniform spaces are completely regular?</p>\n</blockquote>\n<p>I could only find <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/UniformSpace/Separation.html#UniformSpace.to_regularSpace\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/UniformSpace/Separation.html#UniformSpace.to_regularSpace</a></p>",
        "id": 421872233,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708094756
    },
    {
        "content": "<p>That's unfortunately not proving much new in my case, since we already have an instance for <code>TopologicalGroup G → RegularSpace G</code></p>",
        "id": 421872430,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708094816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20missing.2C.20accessible.2C.20topology.20results/near/421870817\">said</a>:</p>\n<blockquote>\n<p>I have a working proof that <code>TopologicalGroup G</code> → <code>UniformSpace G</code>, but I guess we're missing one step to get to <code>CompletelyRegularSpace G</code></p>\n</blockquote>\n<p>We already have <code>TopologicalGroup</code> -&gt; <code>UniformSpace</code>: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalGroup.toUniformSpace#doc\">docs#TopologicalGroup.toUniformSpace</a></p>",
        "id": 421872850,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708094940
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 421872913,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708094956
    },
    {
        "content": "<p>But indeed I don’t think we have any other instance of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompletelyRegularSpace#doc\">docs#CompletelyRegularSpace</a></p>",
        "id": 421873063,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708095003
    },
    {
        "content": "<p>Looking into this, most (if not all) proofs that a <code>UniformSpace</code> is a <code>CompletelyRegularSpace</code> rely on the <a href=\"https://en.wikipedia.org/wiki/Uniform_space#Pseudometrics_definition\">pseudometric definition</a> of a uniform space.<br>\nWe have the first step of the construction of the pseudometric family, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.pseudoMetricSpace#doc\">docs#UniformSpace.pseudoMetricSpace</a>, but we don't have the next steps, which are to first create for any <code>V ∈ 𝓤 X</code> a uniformity generated by a countable filter, that will be coarser than <code>𝓤 X</code>, and then show that <code>𝓤 X = sInf { uniformity generated from V | V ∈ 𝓤 X }</code>.<br>\nI can poke at it then and there, but if someone else who actually knows what they're doing wants to do it, then I won't complain :p</p>",
        "id": 421942370,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708119463
    },
    {
        "content": "<p>Alright, I have a working proof of <code>UniformSpace X → CompletelyRegularSpace X</code></p>",
        "id": 422040116,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708201374
    },
    {
        "content": "<p>Although I am worried that the two are supposed to be equivalent; I'll need to look into the actual books to find a proof for the reverse implication</p>",
        "id": 422040555,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708201803
    },
    {
        "content": "<p>Time for a PR!</p>",
        "id": 422040578,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708201812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20missing.2C.20accessible.2C.20topology.20results/near/422040555\">said</a>:</p>\n<blockquote>\n<p>Although I am worried that the two are supposed to be equivalent; I'll need to look into the actual books to find a proof for the reverse implication</p>\n</blockquote>\n<p>Are they really equivalent?</p>",
        "id": 422040697,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708201927
    },
    {
        "content": "<p>That's what pi-base and wikipedia claim; I can kind of see how they would be, since the condition for a completely regular space gives you a kind of metric, which you can then use to define a filter of entourages</p>",
        "id": 422040809,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708202067
    },
    {
        "content": "<p>Yes, indeed, I find the same now that you mention. Weird that we have the two definitions then… perhaps you can try to shiw the equivalence, in which case we might be able to get rid of one of the two definitions? There might be some double work in the API at present if they’re equivalent…</p>",
        "id": 422041019,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708202295
    },
    {
        "content": "<p><code>CompletelyRegularSpace</code> has substantially fewer lemmas, so the duplication is minimal</p>",
        "id": 422041105,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708202398
    },
    {
        "content": "<p>Problem T345 has progressively gotten more and more difficult :p</p>",
        "id": 422041301,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708202605
    },
    {
        "content": "<p>But also more rewarding when resolved, we could get rid of a duplicate definition if it is correct</p>",
        "id": 422041893,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708203223
    },
    {
        "content": "<p>Asking whether they are equivalent is meaningless. One of them is a property of a topological structure and the other one is extra data. What is equivalent is having a completely regular topology and the <em>existence</em> of a uniform structure inducing the given topology.</p>",
        "id": 422061846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708226473
    },
    {
        "content": "<p>I see, thank you! I think it would still be nice to have the appropriate reverse implication!</p>",
        "id": 422078602,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708244221
    },
    {
        "content": "<p>CompletelyRegularSpace was added relatively recently in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7926\">#7926</a>, and I too <a href=\"https://github.com/leanprover-community/mathlib4/pull/7926#issuecomment-1781951628\">noted</a> that the equivalence with uniformizability is missing. I searched for a proof and first found the <a href=\"https://projecteuclid.org/journals/bulletin-of-the-american-mathematical-society-new-series/volume-45/issue-1/Review--Andr%c3%a9-Weil-Sur-les-Espaces-%c3%a0-Structure-Uniforme/bams/1183501062.full\">original reference by Andre Weil</a>, and then <a href=\"https://www.google.com/books/edition/General_Topology/-o8xJQ7Ag2cC?hl=en&amp;gbpv=0\">Willard's *General Topology*</a> which contains a proof as Theorem 38.2. <br>\n<a href=\"/user_uploads/3121/smYWax9NZX5W0eWi1_W7a7mi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/smYWax9NZX5W0eWi1_W7a7mi/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/smYWax9NZX5W0eWi1_W7a7mi/image.png\"></a></div>",
        "id": 422082927,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708248507
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10678\">#10678</a> proves the first half of this equivalence.<br>\nOnce the other half of the equivalence is proven, we would be able to replace <code>CompletelyRegularSpace X</code> with some <code>UniformizableSpace X</code> class, which says that there exists a <code>UniformSpace.Core X</code> that agrees with the ambient topology, and use the equivalence to either get the existing proposition of <code>CompletelyRegularSpace</code>, or to construct a <code>UniformizableSpace X</code> from that proposition</p>",
        "id": 422091670,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708256950
    },
    {
        "content": "<p>I think we can stick with the name CompletelyRegularSpace rather than replacing it with a new name UniformizableSpace. What we should do is to prove <code>CompletelyRegularSpace X ↔ ∃ (u : UniformSpace X), UniformSpace.toTopologicalSpace = t</code> assuming <code>[t : TopologicalSpace X]</code>. And we could provide something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.metrizableSpaceMetric#doc\">docs#TopologicalSpace.metrizableSpaceMetric</a>.</p>",
        "id": 422108840,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708272855
    },
    {
        "content": "<p>That would work too, yeah :)</p>",
        "id": 422119955,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708282371
    },
    {
        "content": "<p>I'm a bit late to the discussion, but I would just like to mention <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pseudometric.20def.20of.20uniform.20space/near/297855180\">this old thread</a> where I also proved the \"family of metrics\" definition of uniform spaces, and Adam suggested a potential alternative approach. I'll have a look at your PR tomorrow and think about which approach sounds the most efficient.</p>",
        "id": 422132591,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708293500
    },
    {
        "content": "<p>I pretty much did something very similar to yours, with <code>UniformSpace.uniformity_eq_iInf_uniformSpaceOf</code> corresponding to what you had proven back then (although I didn't know about your existing proof, which would have made my day easier)</p>",
        "id": 422132932,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708293770
    },
    {
        "content": "<p>Yeah sorry, I'm not proud of these never-PR-ed pieces of code...</p>",
        "id": 422133189,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708293974
    },
    {
        "content": "<p>Ah well, technically it was proven decades ago in multiple math papers already. I can definitely have a look at your and see where my proof can be optimized, though</p>",
        "id": 422133322,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708294094
    }
]