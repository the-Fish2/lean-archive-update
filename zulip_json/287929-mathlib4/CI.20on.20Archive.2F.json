[
    {
        "content": "<p>after <a href=\"https://github.com/leanprover-community/mathlib4/pull/11507\">mathlib4#11507</a>, some files in <code>Archive</code> don't build. Isn't CI supposed to catch that?</p>",
        "id": 427935814,
        "sender_full_name": "David Renshaw",
        "timestamp": 1710943656
    },
    {
        "content": "<p>(PR incoming to fix the <code>Archive/</code> files...)</p>",
        "id": 427936107,
        "sender_full_name": "David Renshaw",
        "timestamp": 1710943727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11535\">mathlib4#11535</a></p>",
        "id": 427936752,
        "sender_full_name": "David Renshaw",
        "timestamp": 1710943890
    },
    {
        "content": "<p>As you can see on <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8350648107/job/22857519289\">https://github.com/leanprover-community/mathlib4/actions/runs/8350648107/job/22857519289</a>, the build failed on Archive, but it was still marked as successful. There is indeed something fishy with our CI.</p>",
        "id": 427941420,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710945022
    },
    {
        "content": "<p>Also, the <code>build archive</code> step packs everything (including mathlib) and tries to upload it again...</p>",
        "id": 427941867,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710945138
    },
    {
        "content": "<p>and so does the <code>build counterexample</code> step.</p>",
        "id": 427942029,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710945180
    },
    {
        "content": "<p>I wonder if we should make the two steps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">pipefail</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"env LEAN_ABORT_ON_PANIC=1 lake build Archive -KCI | tee stdout.log\"</span>\n<span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">pipefail</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"env LEAN_ABORT_ON_PANIC=1 lake build Counterexamples -KCI | tee stdout.log\"</span>\n</code></pre></div>\n<p>in analogy with the master build step.</p>",
        "id": 427948874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710946880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, the CI failure on Archive would have been caught had shake run on it. Is there a specific reason we are not running shake on Archive?</p>",
        "id": 427949307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710946997
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11540\">#11540</a> fails on the archive build failure and should work otherwise.</p>",
        "id": 427956413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710948678
    },
    {
        "content": "<p>Now that the fix PR has been merged, I merged master in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11540\">#11540</a>, to make sure that now it passes its own CI.</p>",
        "id": 427961642,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710950105
    },
    {
        "content": "<p>Linting now, with successful previous steps.</p>\n<p>This does not address the issue with re-uploading the cache, but maybe that can come later?  There have been many changes to how CI works in the last week and I prefer to make atomic fixes...</p>",
        "id": 427962169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710950259
    },
    {
        "content": "<p>Surprisingly, the lean4checker step failed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Cloning</span> <span class=\"n\">into</span> <span class=\"bp\">'</span><span class=\"n\">lean4checker'...</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4checker</span><span class=\"bp\">/'</span><span class=\"o\">:</span> <span class=\"n\">gnutls_handshake</span><span class=\"o\">()</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">pull</span> <span class=\"n\">function.</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">128</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Rerunning the jobs.</p>",
        "id": 427964491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710950838
    },
    {
        "content": "<p><code>gnutls_handshake() failed</code> does not sound like a kernel type-checking issue…</p>",
        "id": 427964913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710950937
    },
    {
        "content": "<p>Yes, I think that this is a transient error: it was the lean4checker step in CI, but not really the lean4checker talking.</p>",
        "id": 427965503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710951093
    },
    {
        "content": "<p>I was simply showing surprise since I normally consider the lean4checker step as \"the likeliest to pass\".</p>",
        "id": 427965706,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710951147
    },
    {
        "content": "<p>The second run was successful!</p>",
        "id": 427970427,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710952445
    },
    {
        "content": "<p>Hmm, I also got</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/leanprover-community/import-graph.git<span class=\"w\"> </span>./.lake/packages/importGraph\nerror:<span class=\"w\"> </span>stderr:\nCloning<span class=\"w\"> </span>into<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/importGraph'</span>...\nfatal:<span class=\"w\"> </span>unable<span class=\"w\"> </span>to<span class=\"w\"> </span>access<span class=\"w\"> </span><span class=\"s1\">'https://github.com/leanprover-community/import-graph.git/'</span>:<span class=\"w\"> </span>GnuTLS<span class=\"w\"> </span>recv<span class=\"w\"> </span>error<span class=\"w\"> </span><span class=\"o\">(</span>-54<span class=\"o\">)</span>:<span class=\"w\"> </span>Error<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>pull<span class=\"w\"> </span><span class=\"k\">function</span>.\nerror:<span class=\"w\"> </span>external<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span><span class=\"sb\">`</span>git<span class=\"sb\">`</span><span class=\"w\"> </span>exited<span class=\"w\"> </span>with<span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">128</span>\n</code></pre></div>\n<p>on a random PR (in a different spot, \"build cache\", not <code>lean4checker</code>), which seems at least superficially related.</p>",
        "id": 427987376,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710957573
    },
    {
        "content": "<p>I wonder if this is a trend/something worth handling generically somehow...</p>",
        "id": 427987543,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710957620
    },
    {
        "content": "<p>(Re-running the job makes it work, as expected.)</p>",
        "id": 427987832,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710957721
    },
    {
        "content": "<p>I believe that  <a href=\"https://github.com/leanprover-community/mathlib4/pull/11540\">#11540</a> might be a fix for CI: it failed when Archive was broken and it works now that Archive is no longer broken.</p>",
        "id": 428001169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710962707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/427949307\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>, the CI failure on Archive would have been caught had shake run on it. Is there a specific reason we are not running shake on Archive?</p>\n</blockquote>\n<p>It would require either some changes to <code>shake</code> or some duplicated work to run it three times on Mathlib, Archive, Counterexamples</p>",
        "id": 428041139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710983331
    },
    {
        "content": "<p>because it will only suggest changes for files from the same project as the specified root file (as defined by the first component of the module name)</p>",
        "id": 428041202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710983399
    },
    {
        "content": "<p>But shaking Archive and Counterexamples isnt very important, right? Those files are rarely imported elsewhere, so it also doesnt matter too much what their own imports are</p>",
        "id": 428054961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710994399
    },
    {
        "content": "<p>s/rarely/never/</p>",
        "id": 428054985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710994435
    },
    {
        "content": "<p>except possibly Counterexamples importing other Counterexamples? Not sure if that happens</p>",
        "id": 428055042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710994457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428054961\">said</a>:</p>\n<blockquote>\n<p>But shaking Archive and Counterexamples isnt very important, right? Those files are rarely imported elsewhere, so it also doesnt matter too much what their own imports are</p>\n</blockquote>\n<p>The issue here is that there was a file A imported in a file B, which itself was imported in an archive file C, with C needing the content of both A and B. shake suggested removing the import A -&gt; B, but because it is blind to the archive it didn't suggest adding the import A -&gt; C.</p>",
        "id": 428079854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711010650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428041202\">said</a>:</p>\n<blockquote>\n<p>it will only suggest changes for files from the same project as the specified root file (as defined by the first component of the module name)</p>\n</blockquote>\n<p>Yes so this seems like a fundamental limitation which prevents shake from doing the right in the situation I just described</p>",
        "id": 428079974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711010713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428079854\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428054961\">said</a>:</p>\n<blockquote>\n<p>But shaking Archive and Counterexamples isnt very important, right? Those files are rarely imported elsewhere, so it also doesnt matter too much what their own imports are</p>\n</blockquote>\n<p>The issue here is that there was a file A imported in a file B, which itself was imported in an archive file C, with C needing the content of both A and B. shake suggested removing the import A -&gt; B, but because it is blind to the archive it didn't suggest adding the import A -&gt; C.</p>\n</blockquote>\n<p>I think this kind of cross-project analysis should be considered out of scope for shake. Because you can say the same thing about missing changes to the <code>SphereEversion</code> project or what have you</p>",
        "id": 428164585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711036964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428079974\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/428041202\">said</a>:</p>\n<blockquote>\n<p>it will only suggest changes for files from the same project as the specified root file (as defined by the first component of the module name)</p>\n</blockquote>\n<p>Yes so this seems like a fundamental limitation which prevents shake from doing the right in the situation I just described</p>\n</blockquote>\n<p>It's not a fundamental limitation, it's a basic filter performed at the beginning. The way shake works, it always computes information about every module imported from the specified root modules, it just suppresses errors originating e.g. in unshaken files in <code>Lean</code></p>",
        "id": 428165001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711037071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20on.20Archive.2F/near/427948874\">said</a>:</p>\n<blockquote>\n<p>I wonder if we should make the two steps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">pipefail</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"env LEAN_ABORT_ON_PANIC=1 lake build Archive -KCI | tee stdout.log\"</span>\n<span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">pipefail</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"env LEAN_ABORT_ON_PANIC=1 lake build Counterexamples -KCI | tee stdout.log\"</span>\n</code></pre></div>\n<p>in analogy with the master build step.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11612\">#11612</a> makes this change</p>",
        "id": 429134085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711243037
    },
    {
        "content": "<p>There is also <a href=\"https://github.com/leanprover-community/mathlib4/pull/11540\">#11540</a> that does that change.</p>",
        "id": 429150869,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711254362
    }
]