[
    {
        "content": "<p>With the new notation defined in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Subset.html\">Mathlib.Data.Set.Subset</a> for <code>preimage_val</code>, would people be interested in converting the existing theorems in Mathlib to use this notation? A simple loogle <a href=\"https://loogle.lean-lang.org/?q=Subtype.val+%E2%81%BB%C2%B9%27+_\">search</a> shows at least 49 theorems that reference <code>Subtype.val ⁻¹'</code>, but do not use the <code>↓∩</code> notation. Personally, I think the new notation is much clearer and would happily submit a PR.</p>",
        "id": 435280958,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713996812
    },
    {
        "content": "<p>Can you explain how you're using loogle to conclude that these theorems do not use the new notation (in the source code)?</p>",
        "id": 435282894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713997961
    },
    {
        "content": "<p>Note I find <a href=\"https://loogle.lean-lang.org/?q=open+Set.Notation+in+_+%E2%86%93%E2%88%A9+_\">44 theorems</a> if I search for things which _do_ use that notation!</p>",
        "id": 435282979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713998021
    },
    {
        "content": "<p>As far as I can tell when grepping Mathlib, Data.Set.Subset is the only file that actually uses the notation. So, I just ignored the loogle results from that file.</p>",
        "id": 435283794,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713998534
    },
    {
        "content": "<p>I demonstrated potential changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12418\">#12418</a>. Would be interested in hearing if anyone thinks this is a downgrade.</p>",
        "id": 435297841,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714009485
    },
    {
        "content": "<p>Perhaps it's worth noting that <code>Subtype.val ⁻¹'</code> is more general than <code>↓∩</code>, since the former works on subtypes but the latter only on sets</p>",
        "id": 435459627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714075654
    },
    {
        "content": "<p>Yea, I realized that when Topology.Algebra.StarSubalgebra failed to compile. Should I change the definition of <code>↓∩</code> to work with subtypes? I can look into it tonight or tomorrow.</p>",
        "id": 435461479,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714076488
    },
    {
        "content": "<p>The <code>↓∩</code> notation was intentionally designed for sets, to make sure it elaborates in a predictable way with <code>s ↓∩ t</code> having type <code>Set s</code>.</p>\n<p>If generalizing it doesn't mean needing to introduce type ascriptions, then that might be ok.</p>",
        "id": 435465283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714078054
    },
    {
        "content": "<p>What goes wrong in <code>Topology.Algebra.StarSubalgebra</code>?</p>",
        "id": 435465470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714078133
    },
    {
        "content": "<p><code>Topology.Algebra.StarSubalgebra</code> is not fully battle-tested (i.e., not that much depends on it). It's possible there are issues that need fixing.</p>",
        "id": 435467302,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714078879
    },
    {
        "content": "<p>The error was a <code>convert</code> within <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarSubalgebra.closedEmbedding_inclusion#doc\">docs#StarSubalgebra.closedEmbedding_inclusion</a> that was unable to unify.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">range_subtype_map</span> <span class=\"n\">id</span> <span class=\"bp\">?</span><span class=\"n\">m.7619</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">range_subtype_map</span> <span class=\"n\">id</span> <span class=\"bp\">?</span><span class=\"n\">m.7619</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">Subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">?</span><span class=\"n\">m.7619</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m.7613</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">↓∩</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m.7612</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">Subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">?</span><span class=\"n\">m.7619</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.7627</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The fix isn't very difficult, but it does point out that the notation isn't as powerful as just <code>Subtype.val ⁻¹'</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- a/Mathlib/Topology/Algebra/StarSubalgebra.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Topology/Algebra/StarSubalgebra.lean</span>\n<span class=\"gu\">@@ -52,10 +52,8 @@ theorem closedEmbedding_inclusion {S₁ S₂ : StarSubalgebra R A} (h : S₁ ≤</span>\n<span class=\"w\"> </span>  { embedding_inclusion h with\n<span class=\"w\"> </span>    isClosed_range := isClosed_induced_iff.2\n<span class=\"w\"> </span>      ⟨S₁, hS₁, by\n<span class=\"gd\">-          convert (Set.range_subtype_map id _).symm</span>\n<span class=\"gd\">-          · rw [Set.image_id]; rfl</span>\n<span class=\"gd\">-          · intro _ h'</span>\n<span class=\"gd\">-            apply h h' ⟩ }</span>\n<span class=\"gi\">+        convert (Set.range_subtype_map id (fun _ a ↦ h a)).symm</span>\n<span class=\"gi\">+        rw [Set.image_id]; rfl ⟩ }</span>\n<span class=\"w\"> </span>#align star_subalgebra.closed_embedding_inclusion StarSubalgebra.closedEmbedding_inclusion\n</code></pre></div>",
        "id": 435485456,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714090067
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12418\">#12418</a>, I went ahead and changed the rest of mathlib, but limited to cases where the left-hand of <code>↓∩</code> is a <code>Set</code>.<br>\nWhile changing things, I noticed that <code>image_restrict</code> and <code>volume_preimage_coe</code> flip the order of the sets in the type signature. Should this be changed?<br>\nAlso, the naming conventions are fairly inconsistent between <code>preimage_val</code>, <code>preimage_coe</code>,<code>preimage_subtype_coe</code>, <code>coe_preimage</code>, etc... I assume one of these should be favored? Should <code>image_preimage_coe</code> be deprecated as it's a duplicate of <code>image_preimage_val</code>?</p>",
        "id": 435574563,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714133881
    },
    {
        "content": "<p>A PR that deprecates the coe lemmas in favor of the val lemmas (and does nothing else; no notation changes yet) sounds like a good idea to me</p>",
        "id": 435578502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714135286
    },
    {
        "content": "<p>Is the current mathlib policy to replace <code>coe</code> with the actual function name?</p>",
        "id": 435580053,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714135866
    },
    {
        "content": "<p>I think so, but that might be worth a dedicated thread</p>",
        "id": 435583396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714137056
    },
    {
        "content": "<p>The argument is that <code>coe</code> doesn't exist in the final statement</p>",
        "id": 435583442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714137070
    },
    {
        "content": "<p><del>btw, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12418\">#12418</a> had a curl failure. Is it possible to re-run the CI? It seems to build successfully on my machine.</del><br>\nNevermind. I figured out how to re-run it.</p>",
        "id": 435588002,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714138552
    },
    {
        "content": "<p>Looks like you did</p>",
        "id": 435588306,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714138653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Updating.20preimage_val.20to.20use.20.E2.86.93.E2.88.A9.20notation/near/435580053\">said</a>:</p>\n<blockquote>\n<p>Is the current mathlib policy to replace <code>coe</code> with the actual function name?</p>\n</blockquote>\n<p>Personally I replace it with <code>(↑)</code></p>",
        "id": 435605982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714144404
    },
    {
        "content": "<p>That doesn't work in the name</p>",
        "id": 435606054,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714144430
    },
    {
        "content": "<p>A literal <code>coe</code> should never appear in theorem <em>statements</em></p>",
        "id": 435606526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714144566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Updating.20preimage_val.20to.20use.20.E2.86.93.E2.88.A9.20notation/near/435578502\">said</a>:</p>\n<blockquote>\n<p>A PR that deprecates the coe lemmas in favor of the val lemmas (and does nothing else; no notation changes yet) sounds like a good idea to me</p>\n</blockquote>\n<p>I did a quick search and replace in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12465\">#12465</a> and noticed that even if <code>(↑)</code> expands as a <code>Subtype.val</code>, its type won't necessarily match what <code>Subtype.val</code> itself would expand to (not sure if I am using the correct terminology). Is this the sort of behavior you are trying to avoid with wanting to deprecate coe lemmas? Does anyone know lean well enough to know when to use <code>(↑)</code> vs <code>Subtype.val</code>, and if so, could it be explained to us mortals? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 435780563,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714242686
    },
    {
        "content": "<p>Here's an example of that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">AddSubmonoid</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435782160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714244312
    },
    {
        "content": "<p>I think problably:</p>\n<ul>\n<li>The lemmas should be written with <code>(↑)</code> where possible</li>\n<li>The lemmas should be named with <code>val</code>, since this is ultimately what gets elaborated</li>\n</ul>",
        "id": 435782191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714244352
    },
    {
        "content": "<p>The actual type difference here is largely irrelevant, and having two copies of every lemma that appear the same in the docs (and in practice) is just confusing.</p>",
        "id": 435782196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714244364
    },
    {
        "content": "<p>Ok, so when I changed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens.openEmbedding%27#doc\">docs#TopologicalSpace.Opens.openEmbedding'</a> to use <code>(↑)</code>, the type of <code>openEmbedding'</code> changed. I explain the change in slightly more detail in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12465\">#12465</a>. Would this be considered an improvement? I was hoping to do these changes without changing the types of things, but this seems incredibly difficult to do without a tool like leaff.</p>",
        "id": 435783575,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714245721
    }
]