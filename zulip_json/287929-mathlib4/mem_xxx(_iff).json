[
    {
        "content": "<p>This is a question about nameing coneventions. When I was looking at <code>NumberTheory.SmoothNumbers</code> recently, I noticed lemma names like <code>mem_smoothNumbers</code> whose statement is of the form <code>x ∈ ... ↔ ...</code>, and so I thought that it should really be called <code>mem_..._iff</code>. But then I noticed that there are many other statements of that form whose name does not contain <code>_iff</code>. Using a local copy of loogle, I collected all lemmas with a statement of the form above and counted how many include <code>_iff</code> in the name. The result is : Out of the 203 lemmas found,</p>\n<ul>\n<li>50 have names including (mostly ending in) <code>_iff</code></li>\n<li>3 end in <code>_def</code></li>\n<li>and the remaining 150 do neither.</li>\n</ul>\n<p>My conclusion is that there seems to be a convention (which is probably not formally stated anywhere) that such lemmas do not need to be named <code>mem_xxx_iff</code>, but <code>mem_xxx</code> is OK. So I will not rename the lemmas in the file mentioned at the beginning. But I would still like to know if a conscious decision has been made at some point in favor of the non-<code>_iff</code> version.</p>",
        "id": 409834727,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703444031
    },
    {
        "content": "<p>In some cases, first someone added a non-iff lemma, then someone else upgraded it to an <code>iff</code> lemma adding <code>_iff</code> to the name. Then in some cases the first lemma was removed from the library.</p>",
        "id": 409834830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703444158
    },
    {
        "content": "<p>E.g., I'm upgrading some lemmas to <code>iff</code> now in a local branch but I'm going to leave old lemmas for a while (and deprecate them) for backward compatibility.</p>",
        "id": 409834914,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703444245
    },
    {
        "content": "<p>OK, so the point is to disambiguate between implications and equivalences when both are there.</p>",
        "id": 409834975,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703444301
    },
    {
        "content": "<p>Yeah, it's the same as adding an <code>_eq</code> prefix. We (mostly) only do it to disambiguate.</p>",
        "id": 409835562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703444719
    },
    {
        "content": "<p>You'll note the <code>Set</code> API is more opinionated about having the one way implications separately than the <code>Finset</code> API, hence some lemma name mismatches where the <code>Set</code> version is the <code>Finset</code> version + <code>_iff</code>.</p>",
        "id": 409835651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703444798
    },
    {
        "content": "<p>Yeah, it would be nice to have the <code>Set</code> and <code>Finset</code> APIs as parallel as possible. But this would be a lot of work (and would be likely to break a lot downstream when names change...).</p>",
        "id": 409835855,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703445010
    }
]