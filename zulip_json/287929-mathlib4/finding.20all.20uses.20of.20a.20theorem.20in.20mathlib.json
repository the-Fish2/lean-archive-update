[
    {
        "content": "<p>I'm guessing that this is easy if you know some metaprogramming. Working with a student, one of their lines of code was <code>rcases Module.Finite.out (R := R) (M := M) with ⟨S, hS⟩</code>, and when I looked at the definition of <code>Module.Finite.out</code> it struck me that perhaps <code>R</code> and <code>M</code> should just be explicit. My instinct now was to look at all occurrences of this theorem in mathlib to see if the facts backed me up, but all I can do as a non-meta user is to search for <code>Module.Finite.out</code>, which may well miss things (e.g. if <code>Module.Finite</code> is opened or if dot notation is being used).</p>\n<p>So how do I search mathlib for all actual occurrences of  <code>Module.Finite.out</code>?</p>",
        "id": 431550460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712330744
    },
    {
        "content": "<p>I'm sure there are much, much smarter ways of doing this. But what I've sometimes resorted to is changing the name (e.g. to <code>Module.Finite.outt</code>) and committing. Then CI tells me where they all are...</p>",
        "id": 431552049,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712331195
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">/</span><span class=\"n\">Matrix</span><span class=\"bp\">/</span><span class=\"n\">Charpoly</span><span class=\"bp\">/</span><span class=\"n\">LinearMap.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">FiniteType.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Finiteness.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">IntegralClosure.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">LocalProperties.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Artinian.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Module</span><span class=\"bp\">/</span><span class=\"n\">Torsion.ilean</span><span class=\"o\">:</span><span class=\"n\">Module.Finite.out</span>\n</code></pre></div>",
        "id": 431552140,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712331229
    },
    {
        "content": "<p>(As you can see, I scanned the <code>ilean</code>s...)</p>",
        "id": 431552215,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712331245
    },
    {
        "content": "<p>I think that this only finds \"explicit\" usages: if you were searching for a <code>simp</code>-lemma, then, whenever <code>simp</code> pulls that lemma in, without you mentioning explicitly, I do not think that the <code>ilean</code> would contain that usage.</p>\n<p>My mental model is \"if you get a hover information, then it is in the <code>ilean</code>\".  I do not think that you get an <code>ilean</code> reference if there is no syntax for the lemma.</p>",
        "id": 431553278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712331526
    },
    {
        "content": "<p>By the way, this is the command that I used:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>grep<span class=\"w\"> </span>-r<span class=\"w\"> </span>-o<span class=\"w\"> </span><span class=\"s1\">':Module.Finite.out\"'</span><span class=\"w\"> </span>.lake/build/lib/Mathlib/\n</code></pre></div>\n<p><code>-r</code>ecurse into subdirs, <code>-o</code>nly print the matching text (for reference).</p>\n<p>Note that the <code>:</code> before and the <code>\"</code> after are to avoid matching names that contain the name that you are searching for.</p>",
        "id": 431556040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712332321
    },
    {
        "content": "<p>You can add</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>findRefs<span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>grep<span class=\"w\"> </span>-r<span class=\"w\"> </span>-o<span class=\"w\"> </span><span class=\"s2\">\":</span><span class=\"si\">${</span><span class=\"nv\">1</span><span class=\"si\">}</span><span class=\"s2\">\\\"\"</span><span class=\"w\"> </span>.lake/build/lib/Mathlib/<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>\n<p>to your <code>bash_aliases</code> file and then, from the <code>mathlib4</code> dir you can simply do</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>findRefs<span class=\"w\"> </span>Module.Finite.out\n</code></pre></div>\n<p>and you get the output above.</p>",
        "id": 431556778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712332536
    },
    {
        "content": "<p>Also, I recently learned that if you right-click on the declaration and you look for <code>Show call hierarchy</code>, you get a list of all the places where the declaration is called.  I suspect that this would give you the same hits as the grep above, but in VSCode and clickable.  Depending on what you want to do, this can be quite convenient.</p>",
        "id": 431558261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712332972
    },
    {
        "content": "<p>If you want all uses, including indirect ones, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.getUsedConstantsAsSet#doc\">docs#Lean.Expr.getUsedConstantsAsSet</a> and check whether a given constant is used in its value.</p>",
        "id": 431558728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712333111
    },
    {
        "content": "<p>It's quite easy to do.</p>",
        "id": 431558740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712333116
    },
    {
        "content": "<p>give me about 5 mins and I can get you some code to do this.</p>",
        "id": 431558791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712333136
    },
    {
        "content": "<p>It's not very fast, but here is something:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">env.constants.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">continue</span>\n    <span class=\"k\">if</span> <span class=\"n\">val.getUsedConstantsAsSet.contains</span> <span class=\"bp\">`</span><span class=\"n\">Module.Finite.out</span> <span class=\"k\">then</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 431559127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712333239
    },
    {
        "content": "<p>this results in </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Module.Finite.exists_fin\nRingHom.Finite.to_isIntegral\nModule.Finite.finiteType\nisArtinian_of_fg_of_artinian'\nModule.Finite.base_change\nModule.Finite.of_surjective\nModule.Finite.tensorProduct\nModule.Finite.top\nSubmodule.annihilator_top_inter_nonZeroDivisors\nfinite_ofLocalizationSpan\nLinearMap.exists_monic_and_coeff_mem_pow_and_aeval_eq_zero_of_range_le_smul\nModule.Finite.prod\nModule.finite_def\nModule.Finite.pi\n</code></pre></div>",
        "id": 431559162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712333251
    },
    {
        "content": "<p>here's a slightly better version that also gives you the module names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">env.constants.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">continue</span>\n    <span class=\"k\">if</span> <span class=\"n\">val.getUsedConstantsAsSet.contains</span> <span class=\"bp\">`</span><span class=\"n\">Module.Finite.out</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">modName</span> <span class=\"o\">:=</span> <span class=\"n\">env.getModuleFor</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"s2\">\"\"</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{modName} : {n}\"</span>\n</code></pre></div>\n<p>output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Mathlib.RingTheory.Finiteness : Module.Finite.exists_fin\nMathlib.RingTheory.IntegralClosure : RingHom.Finite.to_isIntegral\nMathlib.RingTheory.FiniteType : Module.Finite.finiteType\nMathlib.RingTheory.Artinian : isArtinian_of_fg_of_artinian'\nMathlib.RingTheory.Finiteness : Module.Finite.base_change\nMathlib.RingTheory.Finiteness : Module.Finite.of_surjective\nMathlib.RingTheory.Finiteness : Module.Finite.tensorProduct\nMathlib.RingTheory.Finiteness : Module.Finite.top\nMathlib.Algebra.Module.Torsion : Submodule.annihilator_top_inter_nonZeroDivisors\nMathlib.RingTheory.LocalProperties : finite_ofLocalizationSpan\nMathlib.LinearAlgebra.Matrix.Charpoly.LinearMap : LinearMap.exists_monic_and_coeff_mem_pow_and_aeval_eq_zero_of_range_le_smul\nMathlib.RingTheory.Finiteness : Module.Finite.prod\nMathlib.RingTheory.Finiteness : Module.finite_def\nMathlib.RingTheory.Finiteness : Module.Finite.pi\n</code></pre></div>",
        "id": 431563453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712334613
    },
    {
        "content": "<p>Any advice about how we can make this more accessible? I think the API here is pretty complete. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, how would the world have to be different so that you would have been able to work this out? :-)</p>",
        "id": 431633935,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712373886
    },
    {
        "content": "<p>I am too lazy/busy/uninterested in learning how to use Lean as a programming language, because I have very little coding experience and I am spoilt by the luxury of being able to ask such questions here. In other words, it's not you, it's me!</p>",
        "id": 431700651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712432696
    },
    {
        "content": "<p>Anyway, the conclusion of this experiment (having run through most of the examples found above) is that it's probably fine that <code>out</code> takes implicit inputs, but anyone who wants to change it would run into <a href=\"https://github.com/leanprover/lean4/pull/3574\">lean4#3574</a> anyway (i.e. you can't change it, you would have to write <code>out'</code>, which might to be honest be not a bad idea anyway).</p>",
        "id": 431708215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712440111
    }
]