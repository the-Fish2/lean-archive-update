[
    {
        "content": "<p>In Mathlib, many manually set instance priorities are around 100 (90, 95, 100, 110 or so). However, while looking at <code>Data.Complex.Module</code>, I noticed lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Register as an instance (with low priority) the fact that a complex vector space is also a real</span>\n<span class=\"cm\">vector space. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">900</span><span class=\"o\">)</span> <span class=\"n\">Module.complexToReal</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Playing around, it turns out that 1000 is the default priority:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Nat.foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">999</span><span class=\"o\">)</span> <span class=\"n\">Nat.foo'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">43</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- with priority 1000: get `Nat.foo'` below</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- `Nat.foo`</span>\n</code></pre></div>\n<p>(Incidentally, this answers my question</p>\n<blockquote>\n<p>The correct thing to try is <code>Algebra.toSMul</code>, but increasing its priority to 1000 does not seem to have any effect (I wonder why)</p>\n</blockquote>\n<p>from another thread. I should have taken 1001 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n<p>This raises the question whether the priorities around 100 are actually <em>intended</em> to be quite a bit lower than the default.</p>",
        "id": 432862956,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712912778
    },
    {
        "content": "<p>In Mathlib, 100 is the priority that we write by default for \"blanket instances\", i.e. those instances whose conclusions are a typeclass applied to free variables. Then my assumption is that these numbers around 100 are chosen to tweak priorities among these blanket instances</p>",
        "id": 432971826,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712951393
    },
    {
        "content": "<p>Then the next question is whether this \"blanket instance\" default priority is indeed applied to all such blanket instances (and also where this is documented...).</p>",
        "id": 432972082,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712951497
    },
    {
        "content": "<p>The reason everything is 100 is because in lean 3, 100 was autogenerated by the <code>extends</code> keyword</p>",
        "id": 432987662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712958876
    },
    {
        "content": "<p>So priority 100 was chosen anywhere we want \"the same low priority as the default low priority\"</p>",
        "id": 432987698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712958902
    },
    {
        "content": "<p>There is a lean4 issue that tracks restoring this behavior</p>",
        "id": 432987751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712958928
    },
    {
        "content": "<p>I also ran through possible instance priority changes to the default for parent projections and nothing was a clear W.</p>",
        "id": 432991671,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712961200
    },
    {
        "content": "<p>Blanket instance priority is documented here <a href=\"https://github.com/leanprover-community/mathlib4/blob/72721e375679fd7c7e0647775c028bcb9b91dedf/Mathlib/Algebra/HierarchyDesign.lean#L222\">https://github.com/leanprover-community/mathlib4/blob/72721e375679fd7c7e0647775c028bcb9b91dedf/Mathlib/Algebra/HierarchyDesign.lean#L222</a></p>",
        "id": 432997221,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712965140
    }
]