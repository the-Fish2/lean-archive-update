[
    {
        "content": "<p>The proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">CoprodI</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">CoprodI</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_of</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"o\">(</span><span class=\"n\">CoprodI</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">setOf</span> <span class=\"n\">C</span>\n      <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">h_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">h_one</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.prop</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of.codRestrict</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">h_of</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"n\">change</span> <span class=\"n\">MonoidHom.id</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">S.subtype.comp</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>in <code>Mathlib.GroupTheory.CoprodI</code> is currently breaking on <code>nightly-testing</code>, but I'm a bit hesitant to put effort into tracking down the cause for the change, because the proof looks sort of icky to begin with! (In particular, the <code>convert</code> / <code>change</code> / <code>congr</code> steps.)</p>\n<p>Would anyone be interested in writing a new proof here? Either just coming up with something cleaner on <code>master</code>, or working on <code>nightly-testing</code> so you can be sure you're dealing with the error there (on <code>change</code>) would be great.</p>",
        "id": 435106341,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713931920
    },
    {
        "content": "<p>I'm on it</p>",
        "id": 435113209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713936671
    },
    {
        "content": "<p>I'm bad at fixing a proof without touching theorems around it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12391\">#12391</a></p>",
        "id": 435121395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713941218
    },
    {
        "content": "<p>LGTM! <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span></p>",
        "id": 435122087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713941564
    }
]