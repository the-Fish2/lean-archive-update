[
    {
        "content": "<p>Hello, is there a way to make <code>linear_combination</code> use a particular tactic (in my case, I want it to use <code>(try simp only [Int.negSucc_eq, Int.ofNat_eq_coe, Nat.succ_eq_add_one]); (try push_cast); ring_nf</code>) as the normalization tactic throughout an entire file?</p>\n<p>Or, more generally, is there a way to specify a particular option for a tactic throughout a file?</p>",
        "id": 439952318,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716349876
    },
    {
        "content": "<p>The use case is this: I want to define the Chebyshev polynomials at negative integers and use <code>linear_combination</code> to prove things about them. Here's a stripped down version of what I have. Note how often you see <code>linear_combination (norm := ((try simp only [Int.negSucc_eq, Int.ofNat_eq_coe, Nat.succ_eq_add_one]); (try push_cast); ring_nf))</code>. I'm sure there must be a way to not have to type that every time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"sd\">/-- `T n` is the `n`-th Chebyshev polynomial of the first kind. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_add_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T.eq_3</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n      <span class=\"n\">T.eq_4</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n    <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_sub_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n    <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_sub_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n    <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n    <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T_neg_one</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">T.induct</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">case1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">case2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">case3</span> <span class=\"n\">n</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">T_add_two</span> <span class=\"n\">n</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">T_sub_two</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">*</span> <span class=\"n\">ih1</span> <span class=\"bp\">-</span> <span class=\"n\">ih2</span> <span class=\"bp\">-</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">case4</span> <span class=\"n\">n</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">T_add_one</span> <span class=\"n\">n</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">T_sub_one</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">*</span> <span class=\"n\">ih1</span> <span class=\"bp\">-</span> <span class=\"n\">ih2</span> <span class=\"bp\">+</span> <span class=\"n\">h₁</span> <span class=\"bp\">-</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 439952867,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716350238
    },
    {
        "content": "<p>Define a <code>macro</code>.</p>",
        "id": 439952906,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716350268
    },
    {
        "content": "<p>Thank you for the answer. Unfortunately, I know very little about metaprogramming, so I am not sure how to do that. I managed to make a macro for <code>(try simp only [Int.negSucc_eq, Int.ofNat_eq_coe, Nat.succ_eq_add_one]); (try push_cast); ring_nf)</code>, which makes things a little less verbose, but I don't know how to make a macro for <code> linear_combination (norm := ((try simp only [Int.negSucc_eq, Int.ofNat_eq_coe, Nat.succ_eq_add_one]); (try push_cast); ring_nf))</code>.</p>",
        "id": 439953938,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716350954
    },
    {
        "content": "<p>I'm curious, how did you make that first macro?</p>",
        "id": 439954547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716351516
    },
    {
        "content": "<p>Is the issue that you aren't sure how to pass in the argument to <code>linear_combination</code>? Here's an option.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_tactic \"</span> <span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">linear_combination</span>\n      <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_sub_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_tactic</span> <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439954789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716351741
    },
    {
        "content": "<p>I did this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"int_ring_nf\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"o\">(</span>\n  <span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">try</span> <span class=\"n\">push_cast</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 439954811,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716351776
    },
    {
        "content": "<p>Thanks! I'll see if I can use this. But maybe I'll just stick to specifying the option explicitly.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Use.20option.20for.20tactic.20throughout.20file/near/439954789\">said</a>:</p>\n<blockquote>\n<p>Is the issue that you aren't sure how to pass in the argument to <code>linear_combination</code>? Here's an option.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"my_tactic \"</span> <span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">linear_combination</span>\n      <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.negSucc_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">push_cast</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">))</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_sub_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_tactic</span> <span class=\"n\">T_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 439954863,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1716351805
    }
]