[
    {
        "content": "<p>I'm unsure what the current stance is on private definitions and lemmas; I'm thinking of marking a few things in my formalization of Rubin's theorem as private, because to me they're just implementation detail, namely:</p>\n<ul>\n<li>defining an intermediary function before proving it is bijective and using <code>Equiv.ofBijective</code> — the function is only really exposed if one unfolds the generated <code>Equiv</code>, and I have a theorem that makes this result public already (<a href=\"https://github.com/leanprover-community/mathlib4/blob/83a930b5d41439e79af214a4ccb4f4170df800f7/Mathlib/Topology/Algebra/Group/Rubin/Isomorphism.lean#L92-L154\">example snippet from my branch</a>)</li>\n<li>wrappers around <code>Exists.choose</code> and <code>Exists.choose_spec</code> — I have to apply <code>Exists.choose</code> inside of a <code>biInter</code>, and I haven't found a better way to do this without making the proof next to unreadable (<a href=\"https://github.com/leanprover-community/mathlib4/blob/83a930b5d41439e79af214a4ccb4f4170df800f7/Mathlib/Topology/Algebra/Group/InjectiveAction.lean#L71-L136\">example snippet from my branch</a>)</li>\n<li>in general, one-time-use lemmas that are very unlikely to see any use outside of one or two upcoming theorem</li>\n<li>strictly weaker statements, like proving <code>≤</code> before proving <code>=</code> from <code>le_antisymm</code></li>\n</ul>\n<p>The big issue I am seeing with private definitions is that you cannot <code>unfold</code> them, but in a perfect world <code>unfold</code>-ing shouldn't be necessary outside of the module proving theorems about the definition.</p>",
        "id": 419363408,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706835658
    },
    {
        "content": "<p>Mathlib generally avoids <code>private</code> and instead uses names like <code>foo_aux</code> instead, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.adjointAux#doc\">docs#ContinuousLinearMap.adjointAux</a> for example</p>",
        "id": 419365432,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1706837062
    },
    {
        "content": "<p>I think there were implementation issues with private in lean 3 but they may be solved in lean 4, so I don't think there's a strong reason to avoid it on that account. It may make it harder to prove new API lemmas elsewhere though, for example in preparation for upstreaming</p>",
        "id": 419392837,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706856243
    },
    {
        "content": "<p>I agree with your use cases. I mark definitions private when they fulfill one of your requirements.</p>",
        "id": 419397032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706859000
    },
    {
        "content": "<p>And I believe the pattern Moritz is referring to should be stopped</p>",
        "id": 419397111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706859028
    },
    {
        "content": "<p>Maybe the rule should be that if you put <code>aux</code> in the name, it should also be private? I think keeping the aux in private names is fine, as it avoids local naming conflicts</p>",
        "id": 419404081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706859880
    },
    {
        "content": "<p>Yeah sure (and I've mostly been doing that). <code>private</code> names don't really matter, so you do you</p>",
        "id": 419414414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706864656
    },
    {
        "content": "<p>I think for definitions we should still avoid <code>private</code>. For theorems it's mostly fine</p>",
        "id": 419424719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706868444
    },
    {
        "content": "<p>but the argument that you never know when someone will want to prove more things about that definition you made and thought was only relevant for two theorems still applies in mathlib itself</p>",
        "id": 419424892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706868490
    },
    {
        "content": "<p>I personally do not really like <code>private</code>, but I like the idea of some flagging of definitions that are intended as stepping stones.  So, personally, I find the <code>aux</code> naming a good practice.</p>",
        "id": 419425628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706868757
    },
    {
        "content": "<p>My view is that <code>private</code> is a good way of avoiding downstream use of the declaration.  This makes perfect sense for a programming language developper that wants to have some internals, but only worry about not changing the outward-facing programs.</p>\n<p>In Mathlib, the subject is... mathematics!  Everyone should have access to whatever they want!</p>",
        "id": 419426073,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706868909
    },
    {
        "content": "<p>well there is still the issue of backward compatibility and migration, which makes it useful to have a notion of \"these things you can count on, those things are refactored frequently and you should coordinate with X and Y if you want to use them\"</p>",
        "id": 419426922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706869223
    },
    {
        "content": "<p>I'm not sure <code>private</code> is exactly the right mechanism for this though</p>",
        "id": 419426984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706869254
    },
    {
        "content": "<p>In my projects, almost everything is private. It sometimes leads to a clash of opinions when I end up contributing my results to Mathlib. Namely <a href=\"https://github.com/leanprover-community/mathlib4/pull/9705\">#9705</a> ...</p>",
        "id": 419427417,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706869439
    },
    {
        "content": "<p>these are mathlib wide design decisions, I would advise you to go with the prevailing style and separately pursue changing that style if you want</p>",
        "id": 419428315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706869713
    },
    {
        "content": "<p>Yeah, I usually aim to accommodate my work the the Mathlib ways. Sometimes it is hard tho, because this design decision raises the bar for how well my implementation details have to be handled. Hence my PR is currently in the \"awaiting author\" state.</p>",
        "id": 419430264,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706870415
    },
    {
        "content": "<p>I'm not sure what that means, the bar is the same either way</p>",
        "id": 419432193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706871026
    },
    {
        "content": "<p>an <code>*Aux</code> function can be written in a way which is convenient for the known use cases just like a private function</p>",
        "id": 419432341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706871074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Private.20definitions.20and.20lemmas/near/419424892\">said</a>:</p>\n<blockquote>\n<p>but the argument that you never know when someone will want to prove more things about that definition you made and thought was only relevant for two theorems still applies in mathlib itself</p>\n</blockquote>\n<p>It definitely doesn't apply to the things I mark <code>private</code> in Bhavik and I's formalisation of combinatorics where concepts do not correspond to a single general theorem but rather to a collection of analogous statements with varying asymptotic behavior depending on the application.</p>",
        "id": 419457839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706880608
    },
    {
        "content": "<p>I don't know what that means</p>",
        "id": 419461942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706882092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Private.20definitions.20and.20lemmas/near/419363408\">said</a>:</p>\n<blockquote>\n<ul>\n<li>wrappers around <code>Exists.choose</code> and <code>Exists.choose_spec</code> — I have to apply <code>Exists.choose</code> inside of a <code>biInter</code>, and I haven't found a better way to do this without making the proof next to unreadable (<a href=\"https://github.com/leanprover-community/mathlib4/blob/83a930b5d41439e79af214a4ccb4f4170df800f7/Mathlib/Topology/Algebra/Group/InjectiveAction.lean#L71-L136\">example snippet from my branch</a>)</li>\n</ul>\n</blockquote>\n<p>This seems to be a combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite.to_properlyDiscontinuousSMul#doc\">docs#Finite.to_properlyDiscontinuousSMul</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7596/files#diff-d66b24393425fef30e9d52cf6a48be1fff9d27a30b1be02f706d3037f103aae6R486-R488\">this lemma</a> I proved.</p>\n<p>Also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.OrderEmbedding.injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.inj'</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 419528160,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706905092
    },
    {
        "content": "<p>Yeah I figured in the meantime this lemma could go, I was focused on something else when I wrote this :)</p>",
        "id": 419533986,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706907451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Private.20definitions.20and.20lemmas/near/419424892\">said</a>:</p>\n<blockquote>\n<p>but the argument that you never know when someone will want to prove more things about that definition you made and thought was only relevant for two theorems still applies in mathlib itself</p>\n</blockquote>\n<p>If this happens, then arguably this definition is worthy of an <code>aux</code>-less name; but I guess the difference is that it's easier for downstream users to work around a weird name than it is to direct them to <code>import private</code> or whatever the command is</p>",
        "id": 419536126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706908507
    },
    {
        "content": "<blockquote>\n<p>This seems to be a combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite.to_properlyDiscontinuousSMul#doc\">docs#Finite.to_properlyDiscontinuousSMul</a> and this lemma I proved.</p>\n</blockquote>\n<p>I see that my version doesn't subsume yours because your code doesn't mention compactness and allows for a set <code>s</code> not necessarily equal to the whole group. Nevertheless I think the statements are similar in spirit so I hope my code could help you simplify yours :)</p>",
        "id": 419536558,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706908750
    },
    {
        "content": "<p>I'd have to ponder this a bit more, I don't see immediately how I can use your theorem, since I don't think I can get to a <code>ProperlyDiscontinuousSMul</code> from my context</p>",
        "id": 419539202,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706910057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Private.20definitions.20and.20lemmas/near/419536126\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Private.20definitions.20and.20lemmas/near/419424892\">said</a>:</p>\n<blockquote>\n<p>but the argument that you never know when someone will want to prove more things about that definition you made and thought was only relevant for two theorems still applies in mathlib itself</p>\n</blockquote>\n<p>If this happens, then arguably this definition is worthy of an <code>aux</code>-less name; but I guess the difference is that it's easier for downstream users to work around a weird name than it is to direct them to <code>import private</code> or whatever the command is</p>\n</blockquote>\n<p>I don't think this follows. You can have a function which is intended as a building block for another function, which has complex arguments, which nevertheless has useful lemmas about it. It doesn't become any easier to name as a result</p>",
        "id": 419553341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917339
    },
    {
        "content": "<p>A lot of the <code>List</code> functions are like that</p>",
        "id": 419553401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917375
    },
    {
        "content": "<p><code>List.reverseAux</code> actually gets used quite a lot in mathlib because it has really nice defeqs</p>",
        "id": 419553459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917426
    }
]