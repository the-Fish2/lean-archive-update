[
    {
        "content": "<p>In <code>AIM/representable</code>, I have an object <code>X : C</code> in some category <code>C</code>. I also have an isomorphism between <code>X</code> and some pullback <code>pullback f g</code>. Is there API for immediately giving <code>X</code> the induced structure of a pullback of <code>f</code> and <code>g</code>? i.e. precomposing <code>pullback.fst</code> and <code>pullback.snd</code> with the isomorphism to get a new limit cone.</p>\n<p>The files <code>Shapes/Pullbacks</code>and <code>Shapes/CommSq</code> are somewhat confusing to me as there seems to be a million options for phrasing things, and it is not clear to me which one it is I need. Once I have figured this API out, I think I will add a bunch of documentation to <code>Shapes/Pullbacks</code>.</p>",
        "id": 447962817,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719657492
    },
    {
        "content": "<p>Should I be trying to use the <code>IsPullback</code> API from <code>Shapes/CommSq</code>? Or would it be better to phrase this in a different way?</p>",
        "id": 447963643,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719657894
    },
    {
        "content": "<p>Okay I seem to have found <code>cone.extend</code>, so I guess this is what I need.</p>",
        "id": 447964325,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719658225
    },
    {
        "content": "<p>We should have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsPullback.ofIso#doc\">docs#CategoryTheory.IsPullback.ofIso</a></p>",
        "id": 447975438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719666925
    },
    {
        "content": "<p>Hmmm… maybe not?</p>",
        "id": 447975525,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719666986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Construct.20a.20pullback.20from.20an.20isomorphism/near/447975438\">said</a>:</p>\n<blockquote>\n<p>We should have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsPullback.ofIso#doc\">docs#CategoryTheory.IsPullback.ofIso</a></p>\n</blockquote>\n<p>I ended up using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit.extendIso#doc\">docs#CategoryTheory.Limits.IsLimit.extendIso</a>, but maybe its worth to add some API for this directly in the case of pullbacks</p>",
        "id": 447975584,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719667058
    },
    {
        "content": "<p>Errr it’s <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsPullback.of_iso_pullback#doc\">docs#CategoryTheory.IsPullback.of_iso_pullback</a> because it’s a prop</p>",
        "id": 447975603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719667079
    },
    {
        "content": "<p>The <code>IsPullback</code> api is pretty good. I would recommend using it</p>",
        "id": 447975723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719667171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Construct.20a.20pullback.20from.20an.20isomorphism/near/447975723\">said</a>:</p>\n<blockquote>\n<p>The <code>IsPullback</code> api is pretty good. I would recommend using it</p>\n</blockquote>\n<p>but then I need to construct the projections <code>fst</code> and <code>snd</code> manually, and I would want this to be automatic</p>",
        "id": 447977771,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719668552
    },
    {
        "content": "<p>Can you provide a mwe with the expected workflow? I’ll be away from the computer until the evening, but I can look then if no one else responds</p>",
        "id": 447980916,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719669975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Construct.20a.20pullback.20from.20an.20isomorphism/near/447980916\">said</a>:</p>\n<blockquote>\n<p>Can you provide a mwe with the expected workflow? I’ll be away from the computer until the evening, but I can look then if no one else responds</p>\n</blockquote>\n<p>I think in the end I found what I needed, but I will add some docs at some point soon to maybe explain how to do this somewhere.</p>\n<p>The following approach works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kd\">universe</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">HasLimits</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Φ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"bp\">≅</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">pullbackCone</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PullbackCone</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">limit.cone</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cospan</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">extend</span><span class=\"w\"> </span><span class=\"n\">Φ.hom</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">pullbackConeFst</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pullbackCone</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">pullbackConeSnd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pullbackCone</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">pullbackConeIsLimit</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsLimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pullbackCone</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">IsLimit.extendIso</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">limit.isLimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cospan</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n</code></pre></div>\n<p>So what ended up making things work nicely was when I realized that I could use <code>Cone.extend</code> but specify its type as <code>PullbackCone f g</code>, because <code>PullbackCone</code> is just an abbrev, and then get access to the <code>PullbackCone</code> API.</p>\n<p>Possibly, it could be worth it to add an abbrev somewhere for <code>pullbackCone</code> in the above code (and call it something like <code>pullback.ofIso</code>.</p>",
        "id": 447983146,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1719671876
    }
]