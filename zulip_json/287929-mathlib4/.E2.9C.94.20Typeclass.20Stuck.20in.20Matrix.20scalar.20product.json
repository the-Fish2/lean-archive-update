[
    {
        "content": "<p>Hello everyone! I am working with Matrices and found very handy how scalar product is simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">m</span> <span class=\"c1\">--  m : Matrix (Fin 2) (Fin 2) ℕ</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"c1\">-- !![2, 4; 6, 8]</span>\n</code></pre></div>\n<p>Even so, when I am using it in a theorem it \"fails to synthesize instance HMul\", like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">times2Matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">M</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  HMul ℕ (Matrix (Fin n) (Fin 2) ℕ) (Matrix (Fin n) (Fin 2) ℕ)</span>\n</code></pre></div>\n<p>What can I do about it? In general I would like to know how to resolve such Typeclass problems. Below is the full example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">m</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">times2Matrix</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 438123562,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715449378
    },
    {
        "content": "<p>I’m surprised the <code>2 * M</code> thing worked to begin with. Try using<code>2 • M</code> instead, <code>•</code> is the scalar multiplication operator.</p>",
        "id": 438123663,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1715449509
    },
    {
        "content": "<p>One last thing, how can you look up such notation from the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.smul:~:text=instance-,Matrix.smul,-%7Bm%20%3A%20Type\">docs</a> ?</p>",
        "id": 438123786,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715449678
    },
    {
        "content": "<p>Just typing in “•” in the search bar gives a result for «term_•_», which you can click through and find the <code>SMul</code> class nearby in the same file. The specific instance we care for here though is the instance for matrices: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.smul\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.smul</a></p>",
        "id": 438125475,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1715451452
    },
    {
        "content": "<p>Ok! Thank you very much!</p>",
        "id": 438126085,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715452051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 438126091,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715452058
    },
    {
        "content": "<p>The reason that <code>2*</code> worked in your first example is that <code>2</code> is twice the identity matrix the same shape as <code>m</code>. In your second example, your matrix M is not square, and lean is not smart enough to realize that the 2 now needs to be a different shape</p>",
        "id": 438155874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715488273
    }
]