[
    {
        "content": "<p>As a experiment, I tried to made <code>assert_not_exists OrderedSemiring</code> succeed in <code>RingTheory.Kaehler.Basic</code> in <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Fworking\">branch#mrb/working</a>. (Note: it is far from building all of mathlib and there are many <code>sorry</code>'s) </p>\n<p>The intent was to spot check the impact on performance from not having the projections from ordered algebra classes on typeclass synthesis.</p>\n<p>Here its profile output </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">12</span>.2ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span><span class=\"m\">59</span>.6ms\n<span class=\"w\">    </span>dsimp<span class=\"w\"> </span>122ms\n<span class=\"w\">    </span>elaboration<span class=\"w\"> </span>859ms\n<span class=\"w\">    </span>import<span class=\"w\"> </span>380ms\n<span class=\"w\">    </span>initialization<span class=\"w\"> </span>16ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">2</span>.8s\n<span class=\"w\">    </span>linting<span class=\"w\"> </span>100ms\n<span class=\"w\">    </span>parsing<span class=\"w\"> </span><span class=\"m\">23</span>.2ms\n<span class=\"w\">    </span>simp<span class=\"w\"> </span><span class=\"m\">2</span>.41s\n<span class=\"w\">    </span>tactic<span class=\"w\"> </span>execution<span class=\"w\"> </span><span class=\"m\">2</span>.32s\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">2</span>.15s\n<span class=\"w\">    </span>typeclass<span class=\"w\"> </span>inference<span class=\"w\"> </span>15s\n<span class=\"w\">    </span>Command<span class=\"w\"> </span>being<span class=\"w\"> </span>timed:<span class=\"w\"> </span><span class=\"s2\">\"lake env lean --profile Mathlib/RingTheory/Kaehler/Basic.lean\"</span>\n<span class=\"w\">    </span>User<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>seconds<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">25</span>.95\n<span class=\"w\">    </span>System<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>seconds<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>.43\n<span class=\"w\">    </span>Percent<span class=\"w\"> </span>of<span class=\"w\"> </span>CPU<span class=\"w\"> </span>this<span class=\"w\"> </span>job<span class=\"w\"> </span>got:<span class=\"w\"> </span><span class=\"m\">99</span>%\n<span class=\"w\">    </span>Elapsed<span class=\"w\"> </span><span class=\"o\">(</span>wall<span class=\"w\"> </span>clock<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>h:mm:ss<span class=\"w\"> </span>or<span class=\"w\"> </span>m:ss<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>:26.45\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>shared<span class=\"w\"> </span>text<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>unshared<span class=\"w\"> </span>data<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>stack<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>total<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Maximum<span class=\"w\"> </span>resident<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">1104592</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>resident<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Major<span class=\"w\"> </span><span class=\"o\">(</span>requiring<span class=\"w\"> </span>I/O<span class=\"o\">)</span><span class=\"w\"> </span>page<span class=\"w\"> </span>faults:<span class=\"w\"> </span><span class=\"m\">110</span>\n<span class=\"w\">    </span>Minor<span class=\"w\"> </span><span class=\"o\">(</span>reclaiming<span class=\"w\"> </span>a<span class=\"w\"> </span>frame<span class=\"o\">)</span><span class=\"w\"> </span>page<span class=\"w\"> </span>faults:<span class=\"w\"> </span><span class=\"m\">221275</span>\n<span class=\"w\">    </span>Voluntary<span class=\"w\"> </span>context<span class=\"w\"> </span>switches:<span class=\"w\"> </span><span class=\"m\">25</span>\n<span class=\"w\">    </span>Involuntary<span class=\"w\"> </span>context<span class=\"w\"> </span>switches:<span class=\"w\"> </span><span class=\"m\">2144</span>\n<span class=\"w\">    </span>Swaps:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>File<span class=\"w\"> </span>system<span class=\"w\"> </span>inputs:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>File<span class=\"w\"> </span>system<span class=\"w\"> </span>outputs:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Socket<span class=\"w\"> </span>messages<span class=\"w\"> </span>sent:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Socket<span class=\"w\"> </span>messages<span class=\"w\"> </span>received:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Signals<span class=\"w\"> </span>delivered:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Page<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>bytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">16384</span>\n<span class=\"w\">    </span>Exit<span class=\"w\"> </span>status:<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>vs current master </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">12</span>.9ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span><span class=\"m\">60</span>.3ms\n<span class=\"w\">    </span>dsimp<span class=\"w\"> </span>128ms\n<span class=\"w\">    </span>elaboration<span class=\"w\"> </span>888ms\n<span class=\"w\">    </span>import<span class=\"w\"> </span>498ms\n<span class=\"w\">    </span>initialization<span class=\"w\"> </span>16ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">3</span>.14s\n<span class=\"w\">    </span>linting<span class=\"w\"> </span>105ms\n<span class=\"w\">    </span>norm_num<span class=\"w\"> </span><span class=\"m\">0</span>.653ms\n<span class=\"w\">    </span>parsing<span class=\"w\"> </span><span class=\"m\">23</span>.4ms\n<span class=\"w\">    </span>simp<span class=\"w\"> </span><span class=\"m\">2</span>.59s\n<span class=\"w\">    </span>tactic<span class=\"w\"> </span>execution<span class=\"w\"> </span><span class=\"m\">2</span>.39s\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">2</span>.23s\n<span class=\"w\">    </span>typeclass<span class=\"w\"> </span>inference<span class=\"w\"> </span>20s\n<span class=\"w\">    </span>Command<span class=\"w\"> </span>being<span class=\"w\"> </span>timed:<span class=\"w\"> </span><span class=\"s2\">\"lake env lean --profile Mathlib/RingTheory/Kaehler/Basic.lean\"</span>\n<span class=\"w\">    </span>User<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>seconds<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">31</span>.47\n<span class=\"w\">    </span>System<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>seconds<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>.60\n<span class=\"w\">    </span>Percent<span class=\"w\"> </span>of<span class=\"w\"> </span>CPU<span class=\"w\"> </span>this<span class=\"w\"> </span>job<span class=\"w\"> </span>got:<span class=\"w\"> </span><span class=\"m\">99</span>%\n<span class=\"w\">    </span>Elapsed<span class=\"w\"> </span><span class=\"o\">(</span>wall<span class=\"w\"> </span>clock<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span>h:mm:ss<span class=\"w\"> </span>or<span class=\"w\"> </span>m:ss<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>:32.26\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>shared<span class=\"w\"> </span>text<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>unshared<span class=\"w\"> </span>data<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>stack<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>total<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Maximum<span class=\"w\"> </span>resident<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">1348592</span>\n<span class=\"w\">    </span>Average<span class=\"w\"> </span>resident<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>kbytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Major<span class=\"w\"> </span><span class=\"o\">(</span>requiring<span class=\"w\"> </span>I/O<span class=\"o\">)</span><span class=\"w\"> </span>page<span class=\"w\"> </span>faults:<span class=\"w\"> </span><span class=\"m\">602</span>\n<span class=\"w\">    </span>Minor<span class=\"w\"> </span><span class=\"o\">(</span>reclaiming<span class=\"w\"> </span>a<span class=\"w\"> </span>frame<span class=\"o\">)</span><span class=\"w\"> </span>page<span class=\"w\"> </span>faults:<span class=\"w\"> </span><span class=\"m\">247703</span>\n<span class=\"w\">    </span>Voluntary<span class=\"w\"> </span>context<span class=\"w\"> </span>switches:<span class=\"w\"> </span><span class=\"m\">131</span>\n<span class=\"w\">    </span>Involuntary<span class=\"w\"> </span>context<span class=\"w\"> </span>switches:<span class=\"w\"> </span><span class=\"m\">3941</span>\n<span class=\"w\">    </span>Swaps:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>File<span class=\"w\"> </span>system<span class=\"w\"> </span>inputs:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>File<span class=\"w\"> </span>system<span class=\"w\"> </span>outputs:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Socket<span class=\"w\"> </span>messages<span class=\"w\"> </span>sent:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Socket<span class=\"w\"> </span>messages<span class=\"w\"> </span>received:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Signals<span class=\"w\"> </span>delivered:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">    </span>Page<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>bytes<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">16384</span>\n<span class=\"w\">    </span>Exit<span class=\"w\"> </span>status:<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The main difference is 15s in typeclass synthesis vs 20s depending on whether you have ordered algebra floating around.</p>\n<p>Compared other files that had to be rid of ordered algebra to reach here, this on the low end. <code>LinearAlgebra.TensorProduct.RightExactness</code> dropped by about 40%.</p>",
        "id": 447499569,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719499872
    },
    {
        "content": "<p>If you've stared a winding trace of instances synthesis, then you can viscerally appreciate the problem when there are too many projections to, say, <code>Ring</code>, in the context and the file itself doesn't deal with orders or analysis.</p>",
        "id": 447500278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500051
    },
    {
        "content": "<p>This problem will only get worse as more complicated classes are built which intertwine algebra with other hierarchies so I want to get a sense of what people think should be done:</p>\n<ol>\n<li>Nothing -- not a great option but often the choice </li>\n<li>Core fix -- I don't know what avoids this without seriously touching instance synthesis which is a no-go currently.</li>\n<li>Carefully refactor to use the import structure to cut down on the instances in scope.</li>\n<li>Manually scope the instances in some way, eg write an attribute that erases the instance and scopes it on declaring. </li>\n<li>Unbundle algebra from everything else. </li>\n</ol>\n<p>Are there other options?</p>",
        "id": 447501605,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500386
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is planning on doing a version of 5 at some point.</p>",
        "id": 447501962,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719500461
    },
    {
        "content": "<p>For ordered algebra, yes</p>",
        "id": 447502035,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500478
    },
    {
        "content": "<p>The disadvantage of 5 is that you will need a <code>[Ring R]</code> every time you want an <code>OrderedRing</code>.</p>",
        "id": 447502495,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500605
    },
    {
        "content": "<p>But nothing is hidden from the user as with 4.</p>",
        "id": 447502860,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500685
    },
    {
        "content": "<p>I tried a version of 4 (for algebra vs. order) in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a>.</p>",
        "id": 447503167,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719500754
    },
    {
        "content": "<p>Hmm. I would expect more benefits than that</p>",
        "id": 447504245,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719500993
    },
    {
        "content": "<p>Yeah, it looks like some things leak through. For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OrderedRing</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\">  </span><span class=\"c1\">-- OrderedRing.toRing</span>\n</code></pre></div>\n<p>succeeds in the <code>Kaehler.Basic</code></p>",
        "id": 447504861,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719501159
    },
    {
        "content": "<p>Ok, I started on 5. It is something I can nibble at in between other commitments</p>",
        "id": 447516540,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719504515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/the.20number.20of.20instances.20is.20too.20dang.20high/near/447516540\">said</a>:</p>\n<blockquote>\n<p>Ok, I started on 5. It is something I can nibble at in between other commitments</p>\n</blockquote>\n<p>I'm sure you're already aware of <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> thoughts and work on this, but let me an issue that I believe is relevant just in case: <a href=\"https://github.com/leanprover-community/mathlib4/issues/11757\">https://github.com/leanprover-community/mathlib4/issues/11757</a></p>",
        "id": 447518116,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1719504971
    },
    {
        "content": "<p>I have gotten to similar conclusion around <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435581626\">this message</a><br>\nIt would be great if we could decouple parts of the hierarchy more. It would be great if we can investigate option 4 more. I expect that if we scope all instances used &lt;10 times in Mathlib, that will already result in a noticeable gain.</p>",
        "id": 447545798,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719511670
    },
    {
        "content": "<p>If anyone wants something to do <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Funbundle_algebra_from_orders\">branch#mrb/unbundle_algebra_from_orders</a></p>",
        "id": 447573337,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719518711
    },
    {
        "content": "<p>Not sure when I will touch it again today</p>",
        "id": 447573400,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719518731
    },
    {
        "content": "<p>I tested my example from 2 months ago again, and it fails 30x faster now. So the combination of <a href=\"https://github.com/leanprover/lean4/pull/3996\">lean4#3996</a>, removing some instances from Mathlib and whatever else we did in the meantime did have a big effect on this.</p>",
        "id": 447589400,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719523497
    },
    {
        "content": "<p>Yes, I have a pretty clear picture of what I want to try. Nothing concrete quite yet, and I won't have time to work on this before another two weeks</p>",
        "id": 447601509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719526793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/the.20number.20of.20instances.20is.20too.20dang.20high/near/447573337\">said</a>:</p>\n<blockquote>\n<p>If anyone wants something to do <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Funbundle_algebra_from_orders\">branch#mrb/unbundle_algebra_from_orders</a></p>\n</blockquote>\n<p>And I now realize I ran off too quickly and didn't push this at post time... <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 447725120,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719569428
    },
    {
        "content": "<p>This has reached submodules now.</p>",
        "id": 447818660,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719592627
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/a966328b-3d4a-404d-98a7-1b8bf2efe3df/to/344a0242-49e9-41cd-8fdc-aafe5fa0aeb3\">Results</a> </p>\n<p>Headline: only ~2% decrease in total instructions . Observations:</p>\n<ul>\n<li>it is fairly straightforward except for the few cases where we built algebra data using ordered info, eg <code>Nonneg</code> types. </li>\n<li>writing the algebraic instances always is not terrible is pretty annoying (looking at <code>Valuation.Basic</code>)</li>\n<li>the <code>simp</code> lemmas proving algebraic statements using ordered info are still in scope and drag down performance</li>\n<li>some files really win, eg <code>Algebra.Star.NonUnitalSubalgebra</code> </li>\n<li>some  namespaces are kinda chaotic, eg <code>EllipticCurve</code></li>\n</ul>",
        "id": 448388123,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719853421
    },
    {
        "content": "<p><code>-7.632 %</code> on typeclass inference is very good, IMO.</p>",
        "id": 448388876,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719853594
    },
    {
        "content": "<p>I can make it <a href=\"http://speed.lean-fro.org/mathlib4/compare/a966328b-3d4a-404d-98a7-1b8bf2efe3df/to/915e1b8a-fe7d-4b71-a16e-21e14ce33987\">better</a> with <a href=\"https://github.com/leanprover/lean4/pull/2905\">lean#2905</a> but overall we regress</p>",
        "id": 448389326,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719853702
    },
    {
        "content": "<p>I think the best solution is to comb the import ball of yarn. It is probably the most involved though.</p>",
        "id": 448394393,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719854923
    },
    {
        "content": "<p>In this direction, <a href=\"https://github.com/leanprover-community/mathlib4/pull/14121\">#14121</a> is <code>awaiting-review</code> now</p>",
        "id": 448397853,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719856109
    },
    {
        "content": "<p>Also <a href=\"https://github.com/leanprover-community/mathlib4/pull/14355\">#14355</a></p>",
        "id": 448399588,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719856708
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TtEpQPfhrHQLUWJ7K7oV7-s3/out.pdf\">Here</a> is the graph from <code>Algebra.Order.Group.Defs</code> to <code>Algebra.Star.NonUnitalSubalgebra</code>.</p>",
        "id": 448400086,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719856857
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14336\">#14336</a> is another easy one avoiding importing <code>Algebra.Order.BigOperators.Ring.Finset</code> in <code>BigOperators.Finsupp</code> to talk about positive natural numbers.</p>",
        "id": 448403270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719857699
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14338\">#14338</a> just deletes a redundant import. Waiting to see if it is needed downstream.</p>",
        "id": 448405685,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719858403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/the.20number.20of.20instances.20is.20too.20dang.20high/near/448405685\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14338\">#14338</a> just deletes a redundant import. Waiting to see if it is needed downstream.</p>\n</blockquote>\n<p>Nope. Builds just fine. Clearly <code>easy</code> now</p>",
        "id": 448413215,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719860349
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14341\">#14341</a> avoids ordered algebra in <code>Data.Rat.Lemmas</code>.</p>",
        "id": 448429141,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719864968
    }
]