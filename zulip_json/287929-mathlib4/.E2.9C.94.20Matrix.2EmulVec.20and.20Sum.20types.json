[
    {
        "content": "<p>I may be wrong but it seems we are missing <code>rfl</code> lemmas for <code>Matrix.mulVec</code> when Sum types are involved.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Sum.elim</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Sum.elim</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Sum.elim</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Sum.elim</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- rw [Sum.elim_inl]</span>\n</code></pre></div>\n<p>In the first example, <code>rfl</code> succeeds.<br>\nIn the second example, <code>simp</code> makes no progress.<br>\nCompare with the last example, where <code>simp</code> finds the lemma.</p>\n<p>My problem is that, when <code>((Sum.elim A B : Matrix (α ⊕ β) γ ℚ) *ᵥ v) (Sum.inl a)</code> is somewhere in the goal in a non-MWE situation, when <code>simp</code> fails, I am lost. In principle, I should be able to located the term by eyes and rewrite it to <code>(A *ᵥ v) a</code> using <code>show</code> manually, but it is too much cognitive load, so I start searching for a mistake elsewhere (even tho I was on the right track). This is quite a setback.</p>\n<p>Which of the following is the case?<br>\n(a) We are missing the lemmas.<br>\n(b) We are missing <code>simp</code> attributes on them.<br>\n(c) The problem is on my side. Perhaps I shouldn't be using <code>Sum.elim</code> for matrices?</p>",
        "id": 420643287,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707481901
    },
    {
        "content": "<p><code>Sum.elim</code> should not be used on matrices, because it produces a function not a matrix</p>",
        "id": 420645193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707482596
    },
    {
        "content": "<p>Can you point me to the right API for my thing please?</p>",
        "id": 420645691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707482791
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.fromColumns#doc\">docs#Matrix.fromColumns</a></p>",
        "id": 420645738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707482810
    },
    {
        "content": "<p>Or maybe the rows version, you decide</p>",
        "id": 420645748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707482817
    },
    {
        "content": "<p>It's possible that the lemmas are still missing for those definitions, but if so they should be written</p>",
        "id": 420646268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707483006
    },
    {
        "content": "<p>I'll check it, thanks a lot!</p>",
        "id": 420646321,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707483027
    },
    {
        "content": "<p>Is <code>Sum.elim</code> fine for vectors? Or do we have a dedicated API for that as well?</p>",
        "id": 420646623,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707483156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matrix.2EmulVec.20and.20Sum.20types/near/420646268\">said</a>:</p>\n<blockquote>\n<p>It's possible that the lemmas are still missing for those definitions, but if so they should be written</p>\n</blockquote>\n<p>If it exists, it is not a <code>simp</code> lemma. This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 420646903,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707483270
    },
    {
        "content": "<p>You don't need the type ascriptions now</p>",
        "id": 420648581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707483902
    },
    {
        "content": "<p>I didn't need them previously either, but that's besides the point.</p>",
        "id": 420648817,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707483999
    },
    {
        "content": "<p>What I see is four missing (simp) lemmas. Do you agree I should add them?</p>",
        "id": 420648881,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707484033
    },
    {
        "content": "<p>I don't think your statement above is the right lemma</p>",
        "id": 420648938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484055
    },
    {
        "content": "<p>I think the right lemma has <code>Sum.elim</code> on the RHS and no <code>a</code></p>",
        "id": 420648990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484077
    },
    {
        "content": "<p>That was a MWE, not a Mathlib lemma. I'll make better ones.</p>",
        "id": 420649097,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707484107
    },
    {
        "content": "<p>All the same, my claim is that there are only two lemmas we want, not four</p>",
        "id": 420649276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484182
    },
    {
        "content": "<p>I guess there are four if you include <code>fromCols _ _ *ᵥ Sum.elim _ _ = _</code></p>",
        "id": 420649761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matrix.2EmulVec.20and.20Sum.20types/near/420648990\">said</a>:</p>\n<blockquote>\n<p>I think the right lemma has <code>Sum.elim</code> on the RHS and no <code>a</code></p>\n</blockquote>\n<p>Ah, you meant something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 420650577,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707484650
    },
    {
        "content": "<p>Existing lemmas will then take care of <code>Sum.inl</code> standing next to <code>Sum.elim</code> in my original example.</p>",
        "id": 420650839,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707484746
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 420651177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matrix.2EmulVec.20and.20Sum.20types/near/420646623\">said</a>:</p>\n<blockquote>\n<p>Is <code>Sum.elim</code> fine for vectors? Or do we have a dedicated API for that as well?</p>\n</blockquote>\n<p>Which also answers this question.</p>",
        "id": 420651818,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707485119
    },
    {
        "content": "<p>Yes, I missed that question, sorry</p>",
        "id": 420652031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707485183
    },
    {
        "content": "<p>No worries. I'll soon PR the missing lemmas and add <code>@[simp]</code> on them immediately.</p>",
        "id": 420652355,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707485294
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10379\">#10379</a></p>",
        "id": 420662642,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707488801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 420870744,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707638701
    },
    {
        "content": "<p>I think I should PR something similar for block matrices.<br>\nCurrently, this series of rewrites does the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.fromRows_fromColumn_eq_fromBlocks</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.fromRows_mulVec</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.fromColumns_mulVec_sum_elim</span><span class=\"o\">,</span> <span class=\"n\">Matrix.fromColumns_mulVec_sum_elim</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I believe these four rewrites should be a single lemma (and another lemma for <code>vecMul</code>).<br>\nIt is unclear to me, however, whether the new lemma should be labelled with <code>@[simp]</code> as the old lemmas are.<br>\nThe first step seems to go against the \"simp normal form\".</p>",
        "id": 422184065,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708331891
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.fromBlocks_mulVec_sum_elim</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">o</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">o</span> <span class=\"n\">l</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">o</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"bp\">*ᵥ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">⊕ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">⊕ᵥ</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"bp\">*ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.fromRows_fromColumn_eq_fromBlocks</span><span class=\"o\">,</span> <span class=\"n\">Matrix.fromRows_mulVec</span><span class=\"o\">,</span>\n    <span class=\"n\">Matrix.fromColumns_mulVec_sum_elim</span><span class=\"o\">,</span> <span class=\"n\">Matrix.fromColumns_mulVec_sum_elim</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422189041,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708333558
    },
    {
        "content": "<p>Please suggest which file I should add it to.<br>\nIt cannot be in <code>Mathlib.Data.Matrix.Block</code> unless we make the proof longer.<br>\nIt doesn't belong to <code>Mathlib.Data.Matrix.ColumnRowPartitioned</code> as the statement speaks about block matrices only.</p>",
        "id": 422191532,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708334433
    },
    {
        "content": "<p>I find it slightly weird that the file about row/column matrices imports the file about block matrices.<br>\nShouldn't it be the other way around?</p>",
        "id": 422195055,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708335526
    },
    {
        "content": "<p>I just needed <code>Matrix.fromBlocks_mulVec_sum_elim</code> again.<br>\nI recommend considering its addition to Mathlib.</p>",
        "id": 424620066,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709547504
    },
    {
        "content": "<p>It looks like a good lemma to me</p>",
        "id": 424620436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709547634
    },
    {
        "content": "<p>Glad to hear! Please, address the questions below the code.</p>",
        "id": 424620644,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709547716
    }
]