[
    {
        "content": "<p><code>LinearOrder</code> has a field <code>compare</code>. How can I find instances of <code>LinearOrder</code> that do <em>not</em> use the default argument <code>compareOfLessAndEq</code>?</p>",
        "id": 426160085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710259269
    },
    {
        "content": "<p><code>git grep compareOfLessAndEq</code>?</p>",
        "id": 426160288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259322
    },
    {
        "content": "<p>using that it seems that there are no such instances?</p>",
        "id": 426160618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259405
    },
    {
        "content": "<p>That wouldn't account for instances defined using angle brackets, of course.</p>",
        "id": 426160707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259427
    },
    {
        "content": "<p>oh sorry, I misunderstood</p>",
        "id": 426160919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259470
    },
    {
        "content": "<p><code>compare</code> doesn't have a default value?</p>",
        "id": 426160950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259477
    },
    {
        "content": "<p>no, it does as you said. I'm an idiot. sorry for the noise</p>",
        "id": 426161088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259516
    },
    {
        "content": "<p>I guess you could write a metaprogram that looks at all such instances, picks out the <code>compare</code> projection, looks at its value, and use something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.getUsedConstants#doc\">docs#Lean.Expr.getUsedConstants</a> to check whether it uses <code>compareOfLessandEq</code>.</p>",
        "id": 426161354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710259592
    },
    {
        "content": "<p>Yes, probably, if only I knew how to actually do that <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 426162775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710259961
    },
    {
        "content": "<p>I'm hacking something together now</p>",
        "id": 426162942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260012
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">cs.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">LinearOrder</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">continue</span>\n      <span class=\"n\">unless</span> <span class=\"n\">val.getUsedConstantsAsSet.contains</span> <span class=\"bp\">`</span><span class=\"n\">compareOfLessAndEq</span> <span class=\"k\">do</span>\n        <span class=\"n\">IO.println</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 426164578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260434
    },
    {
        "content": "<p>just an initial approximation. I didn't debug or think too carefully about whether this actually does what you want.</p>",
        "id": 426164712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260458
    },
    {
        "content": "<p>The result is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">instPNatLinearOrder</span>\n<span class=\"n\">instENatLinearOrder</span>\n<span class=\"n\">String.instLinearOrderString</span>\n<span class=\"n\">Int.instLinearOrderInt</span>\n<span class=\"n\">instPNatLinearOrder._cstage1</span>\n<span class=\"n\">instLinearOrderChar</span>\n<span class=\"kt\">Prop</span><span class=\"bp\">.</span><span class=\"n\">linearOrder</span>\n<span class=\"n\">Nat.linearOrder._cstage1</span>\n<span class=\"n\">Int.instLinearOrderInt._cstage1</span>\n<span class=\"n\">Real.linearOrder</span>\n<span class=\"n\">NONote.instLinearOrderNONote._cstage1</span>\n<span class=\"n\">NatOrdinal.linearOrder</span>\n<span class=\"n\">NONote.instLinearOrderNONote</span>\n<span class=\"n\">instENatLinearOrder._cstage1</span>\n<span class=\"n\">Bool.linearOrder</span>\n<span class=\"n\">Nat.linearOrder</span>\n</code></pre></div>",
        "id": 426164885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260499
    },
    {
        "content": "<p>Merci!</p>",
        "id": 426165470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710260637
    },
    {
        "content": "<p>Well, I don't think that's the right answer.</p>",
        "id": 426165568,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260652
    },
    {
        "content": "<p>For example, I guess <code>Bool.linearOrder</code> shouldn't be in there.</p>",
        "id": 426165883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260739
    },
    {
        "content": "<p>Oh, no maybe it's ok, since the ord instance for bool is defined as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOrdBool#doc\">docs#instOrdBool</a></p>",
        "id": 426166125,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710260795
    },
    {
        "content": "<p>But if I look up <code>Nat.linearOrder</code>, then I don't see a custom <code>compare</code> field.</p>",
        "id": 426166964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710261028
    },
    {
        "content": "<p>right, that comes from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOrdNat#doc\">docs#instOrdNat</a> which does actually use that lemma, so the code above doesn't quite do what you want.</p>",
        "id": 426167271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261119
    },
    {
        "content": "<p>Probably just need to unfold a bit... how about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">cs.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">LinearOrder</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">continue</span>\n      <span class=\"k\">let</span> <span class=\"n\">ordInst</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">LinearOrder.toOrd</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">val</span>\n      <span class=\"k\">let</span> <span class=\"n\">compare</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Ord.compare</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">ordInst</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.whnf</span> <span class=\"n\">compare</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getUsedConstantsAsSet.contains</span> <span class=\"bp\">`</span><span class=\"n\">compareOfLessAndEq</span> <span class=\"k\">do</span>\n        <span class=\"n\">IO.println</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 426167503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261179
    },
    {
        "content": "<p>That prints some things, but I still don't find any nontrivial <code>compare</code> field</p>",
        "id": 426168354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710261414
    },
    {
        "content": "<p>look at the one for bool</p>",
        "id": 426168562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261471
    },
    {
        "content": "<p>it comes from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOrdBool#doc\">docs#instOrdBool</a></p>",
        "id": 426168648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261486
    },
    {
        "content": "<p><code>compare</code> is part of <code>Ord</code>.</p>",
        "id": 426168807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261533
    },
    {
        "content": "<p>it seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instPNatLinearOrder#doc\">docs#instPNatLinearOrder</a> might be another one?</p>",
        "id": 426169144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261629
    },
    {
        "content": "<p>for some reason I can't seem to go to that definition, but <code>#check instPNatLinearOrder</code> throws no errors.</p>",
        "id": 426169520,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261756
    },
    {
        "content": "<p>Oh, I think it's because this is derived from the following line: <a href=\"https://github.com/leanprover-community/mathlib4/blob/bbf2206016a67e7d54812dcf76f830c704df378c/Mathlib/Data/PNat/Basic.lean#L24\">https://github.com/leanprover-community/mathlib4/blob/bbf2206016a67e7d54812dcf76f830c704df378c/Mathlib/Data/PNat/Basic.lean#L24</a></p>",
        "id": 426170230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710261965
    }
]