[
    {
        "content": "<p>A question that arose while I was working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a>: so if you have <code>i j : Fin (n + 1)</code>, with <code>i ≠ j</code>, then it follows that <code>n ≠ 0</code>, and so in particular you have an instance of <code>NeZero n</code>. This is relevant because, essentially, given <code>i j : Fin (n + 1)</code>, with <code>i ≠ j</code>, <code>0 : Fin n</code> always makes sense. This does come up somewhere: in particular, sometimes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a> I have <code>i j : Fin (n + 1)</code>, with <code>i ≠ j</code>, and I want to use <code>0 : Fin n</code> in the statement, and I couldn't.</p>\n<p>What I'm wondering is how to efficiently and elegantly use this fact: I don't think I can use <code>optParam</code> in the same way that I might if I wanted a proof of <code>n ≠ 0</code> in the statement, because what I want is a typeclass synthesised from a hypothesis. Is that even possible?</p>\n<p>Alternatively, in some ways this reduces to the two following facts:</p>\n<ul>\n<li>Given <code>i j : Fin (n + 1)</code>, with <code>i ≠ j</code>, I can always produce some <code>p: Fin n</code>.</li>\n<li>If I have <code>p : Fin n</code>, the notation <code>0 : Fin n</code> always makes sense (it may or may not be p).</li>\n</ul>\n<p>So can I do either of those more elegantly? Do \"typeclasses automatically synthesised from hypotheses\" even make sense?</p>",
        "id": 413212554,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705428620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> has marked this topic as resolved.</p>",
        "id": 413212569,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705428628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> has marked this topic as unresolved.</p>",
        "id": 413212583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705428633
    },
    {
        "content": "<p>Typeclass synthesis doesn't look at hypotheses, but something you do is make a function <code>neZeroOfFinNe : {i j : Fin (n + 1)} -&gt; i ≠ j -&gt; NeZero n</code> and then given <code>h : i ≠ j</code> write <code>have := neZeroOfFinNe h</code> either in your proof or as a line of a definition.</p>",
        "id": 413214825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705429474
    },
    {
        "content": "<p>Hmm, how do you fit it into a definition? Like that can be part of a statement?</p>",
        "id": 413227266,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705434232
    },
    {
        "content": "<p>You can use <code>haveI := neZeroOfFinNe h; ...</code> in a statement and have it be eliminated from the type. You can't use it for variables before the colon though.</p>",
        "id": 413227912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705434451
    },
    {
        "content": "<p>Thanks, that is perfect.</p>",
        "id": 413238122,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705438865
    },
    {
        "content": "<p>Any suggestions where such a <code>neZeroOfFinNe</code> would go? Data/Fin/Basic?</p>",
        "id": 413238160,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705438885
    },
    {
        "content": "<p>I would also have something of the likes of <code>instance neZero_of_nonTrivial_fin_succ (nt : Nontrivial (Fin n.succ)) : NeZero n</code></p>",
        "id": 413248355,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705443278
    },
    {
        "content": "<p>You also have that <code>NeZero n ↔ NonEmpty (Fin n) ↔ Nontrivial (Fin n.succ)</code>, though I don't know if the typeclass solver can handle loops. The left equivalence is covered by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.pos_iff_nonempty#doc\">docs#Fin.pos_iff_nonempty</a> already and the right equivalence can be derived from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.nontrivial_iff_two_le#doc\">docs#Fin.nontrivial_iff_two_le</a></p>",
        "id": 413249279,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705443670
    },
    {
        "content": "<p>If we had <code>instance neZero_of_nonTrivial_fin_succ [Nontrivial (Fin n.succ)] : NeZero n</code>, would that then let the solver do the inference (taking it as a typeclass)?</p>\n<p>I suspect what you want is <code>instance [Nontrivial (Fin n.succ)] : NonEmpty (Fin n)</code> and <code>instance [NonEmpty (Fin n)] : NeZero n</code>, and that way avoid the loop in the typeclass solver.</p>",
        "id": 415929752,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705454149
    },
    {
        "content": "<p>That second instance already exists in reverse</p>",
        "id": 415936789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705457734
    },
    {
        "content": "<p>Oops. I knew we had <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.pos_iff_nonempty#doc\">docs#Fin.pos_iff_nonempty</a> but didn't realise we had the instance.</p>",
        "id": 415936886,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705457783
    },
    {
        "content": "<p>That feels like... the less useful order in some ways? Idk.</p>",
        "id": 415936904,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705457798
    },
    {
        "content": "<p>Well, it follows from the fact that when n is not zero, there is a <code>Zero</code></p>",
        "id": 415937117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705457934
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 415937132,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705457943
    },
    {
        "content": "<p>It's just one of those slightly troublesome things where frankly it's basically trivial except somehow it isn't.</p>",
        "id": 415937531,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705458209
    },
    {
        "content": "<p>Annoyingly it's slightly asymmetrical as well, in the sense that you don't have a similar issue for <code>last</code> (precisely because <code>last n</code> is in Fin (n +1), I.e. there's no analogy of \"NeZero means you have a last\".</p>",
        "id": 415937891,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705458416
    },
    {
        "content": "<p>I think generalizing last in that way spoiled be reasonable?</p>",
        "id": 415938128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705458597
    },
    {
        "content": "<p>Oh, I guess it maybe ends up with a bad defeq</p>",
        "id": 415938190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705458613
    },
    {
        "content": "<p>Yeah the issue is, what would you define <code>last 0</code> as? In a sense the better notation is arguably \\top</p>",
        "id": 415938249,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705458685
    },
    {
        "content": "<p>Though obviously in general using \\bot instead of 0 would be... eccentric.</p>",
        "id": 415938271,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705458704
    },
    {
        "content": "<p>Of course you could define <code>last : Fin n</code>  as <code>rev 0</code>.</p>",
        "id": 415939075,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705459117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Typeclass.20automatic.20synthesising.20for.20statements.20a.20la.20op.2E.2E.2E/near/415938249\">said</a>:</p>\n<blockquote>\n<p>Yeah the issue is, what would you define <code>last 0</code> as?</p>\n</blockquote>\n<p><code>False.elim _</code></p>",
        "id": 415941705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705460468
    },
    {
        "content": "<p>Hmm I'm not sure that works.</p>",
        "id": 415971199,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705478544
    },
    {
        "content": "<p>It's the equivalent of <code>unreachable!()</code> in rust</p>",
        "id": 415993657,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705486447
    },
    {
        "content": "<p>right...</p>",
        "id": 415993843,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486521
    },
    {
        "content": "<p>the equivalent of <code>unreachable!()</code> in rust is <code>unreachable!</code>, the equivalent of <code>False.elim</code> in rust is <code>match x {}</code></p>",
        "id": 415993861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705486527
    },
    {
        "content": "<p>I just don't quite follow what you're eliminating.</p>",
        "id": 415993906,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486543
    },
    {
        "content": "<p><code>Fin0.elim</code> is like <code>False.elim</code> but it takes an element of <code>Fin 0</code> instead</p>",
        "id": 415994034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705486577
    },
    {
        "content": "<p>Right.</p>",
        "id": 415994079,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486596
    },
    {
        "content": "<p>you can also just pattern match on it, the compiler knows it is empty</p>",
        "id": 415994103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705486604
    },
    {
        "content": "<p>But I asked what you'd define <code>last 0</code> as if you made <code>last n</code> a member of <code>Fin n</code>.</p>",
        "id": 415994234,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486655
    },
    {
        "content": "<p>oh, I was thinking this was a function that takes a <code>Fin n</code>, of course if it's just producing a <code>Fin n</code> from nothing then you are in trouble for <code>n = 0</code></p>",
        "id": 415994389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705486701
    },
    {
        "content": "<p>Indeed. But you can make it work if you add a <code>[NeZero n]</code> typeclass.</p>",
        "id": 415994560,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486755
    },
    {
        "content": "<p>I was just remarking that that isn't currently an option.</p>",
        "id": 415994621,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705486778
    },
    {
        "content": "<p>An instance of <code>instance [NeZero n] : OrderTop (Fin n)</code> would be nice to have, I think.<br>\nAlso, speaking of <code>option</code>, you could wrap the result in an <code>Option</code></p>",
        "id": 415995048,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705486919
    },
    {
        "content": "<p>Yeah I don't know if the OrderTop instance currently works for that, I think we just have the one for <code>n +1</code>. It can be a bit of a pain writing lemmas (in the zero case) because I never know if I should have two versions or just the <code>[NeZero]</code> one.</p>",
        "id": 415995325,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487014
    },
    {
        "content": "<p>We agreed a long time ago that instances about <code>Fin (n + 1)</code> should instead be instances about <code>Fin n</code> where <code>NeZero n</code>. Feel free to fix whatever instances are not following that rule.</p>",
        "id": 415996062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487283
    },
    {
        "content": "<p>Oh really?</p>",
        "id": 415996152,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487306
    },
    {
        "content": "<p>Then I think the best strategy would be to change <code>last n</code> so that instead it's just called <code>last</code>, make it a member of Fin n, and define it as Fin.rev 0 as a bonus.</p>",
        "id": 415996341,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487376
    },
    {
        "content": "<p>Why not just use <code>⊤</code> then?</p>",
        "id": 415996568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487435
    },
    {
        "content": "<p>I was just typing that!</p>",
        "id": 415996619,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487453
    },
    {
        "content": "<p>Well, I don't know why we decided to have <code>last</code> in the first place.</p>",
        "id": 415996655,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487468
    },
    {
        "content": "<p>I think it's because it's easier to type <code>(last n)</code> than <code>(⊤ : Fin (n + 1))</code> when the expected type is unavailable.</p>",
        "id": 415996776,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487514
    },
    {
        "content": "<p>As I was saying yesterday, arguably one could also use \\bot instead of 0 in a lot of places but that is a little eccentric.</p>",
        "id": 415996863,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487530
    },
    {
        "content": "<p>Yeah but that's a different situation: <code>0</code> has an algebraic meaning that <code>last n</code> doesn't have.</p>",
        "id": 415996954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Typeclass.20automatic.20synthesising.20for.20statements.20a.20la.20op.2E.2E.2E/near/415996776\">said</a>:</p>\n<blockquote>\n<p>I think it's because it's easier to type <code>(last n)</code> than <code>(⊤ : Fin (n + 1))</code> when the expected type is unavailable.</p>\n</blockquote>\n<p>I suppose you could define <code>last n</code> as the same, make the <code>n</code> explicit.</p>",
        "id": 415996961,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Typeclass.20automatic.20synthesising.20for.20statements.20a.20la.20op.2E.2E.2E/near/415996954\">said</a>:</p>\n<blockquote>\n<p>Yeah but that's a different situation: <code>0</code> has an algebraic meaning that <code>last n</code> doesn't have.</p>\n</blockquote>\n<p>Yes I agree - but we tend to use 0 even in the order-theoretic places for Fin.</p>",
        "id": 415997057,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487597
    },
    {
        "content": "<p>Which I'm not necessarily disagreeing with, to be clear.</p>",
        "id": 415997093,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487612
    },
    {
        "content": "<p>But e.g. <code>Fin.cases</code> and <code>Fin.lastCases</code> are somewhat more about ordering than they are about algebraic properties.</p>",
        "id": 415997232,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487655
    },
    {
        "content": "<p>I'm just arguing that <code>0</code> and <code>last n</code> can't be thought about symmetrically because they have differing algebraic relevance (even though they have identical order theoretic relevance).</p>",
        "id": 415997312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487691
    },
    {
        "content": "<p>Ah I see what you mean</p>",
        "id": 415997337,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487705
    },
    {
        "content": "<p>Yes, indeed. I suppose you could talk about the algebraic properties of <code>last n</code> (for one thing, it's the additive inverse of 1...) but I can't ever see why that would be easier.</p>",
        "id": 415997465,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487761
    },
    {
        "content": "<p>Well that wouldn't be <code>last n</code>, right? That would be <code>-1</code>. Spelling matters.</p>",
        "id": 415997620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487799
    },
    {
        "content": "<p>True, true.</p>",
        "id": 415997696,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487827
    },
    {
        "content": "<p>As you say, 0 is a bit special.</p>",
        "id": 415997730,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487839
    },
    {
        "content": "<p><code>-1</code> is a bit pathological though, because it does something weird on <code>Fin 1</code></p>",
        "id": 415997895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705487883
    },
    {
        "content": "<p>Does it?</p>",
        "id": 415997957,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487893
    },
    {
        "content": "<p>I mean it's also 0, obviously.</p>",
        "id": 415998006,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487912
    },
    {
        "content": "<p>How so? It's still the additive inverse of <code>1</code>.</p>",
        "id": 415998020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487920
    },
    {
        "content": "<p>well <code>1 : Fin n</code> is <code>1</code> for every <code>n</code> except for <code>n = 1</code>, where it is <code>0</code> instead</p>",
        "id": 415998034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705487927
    },
    {
        "content": "<p>yes I'm not quite sure why it's not also 1.</p>",
        "id": 415998089,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487950
    },
    {
        "content": "<p>You mean <code>(1 : Fin n).val</code>.</p>",
        "id": 415998107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705487954
    },
    {
        "content": "<p>Oh I see what you mean.</p>",
        "id": 415998162,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705487970
    },
    {
        "content": "<p>It works out up to (propositional) equality, but it's less uniform compared to <code>last</code> which is <code>n - 1</code> for every <code>n &gt; 0</code></p>",
        "id": 415998228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705487992
    },
    {
        "content": "<p>Yes that can occasionally trip one up. Clearly the solution is to start things at <code>Fin 2</code>. <code>Fin 1</code> and <code>Fin 0</code> are silly types: let's never go there ;)</p>",
        "id": 415998367,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705488029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Typeclass.20automatic.20synthesising.20for.20statements.20a.20la.20op.2E.2E.2E/near/415998228\">said</a>:</p>\n<blockquote>\n<p>It works out up to (propositional) equality, but it's less uniform compared to <code>last</code> which is <code>n - 1</code> for every <code>n &gt; 0</code></p>\n</blockquote>\n<p>Yes in this sense <code>last</code> is closer to 0 (which makes sense!) in that it's only pathological at 0 (where nothing exists anyway).</p>",
        "id": 415998525,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705488091
    },
    {
        "content": "<p>too bad we don't have a <code>~</code> operator</p>",
        "id": 415998597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705488119
    },
    {
        "content": "<p>does <code>~~~0</code> work?</p>",
        "id": 415998670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705488128
    },
    {
        "content": "<p>as I say this is why I think I like <code>rev 0</code> as its definition.</p>",
        "id": 415998671,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705488128
    },
    {
        "content": "<p>What would <code>~</code> do?</p>",
        "id": 415998716,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705488142
    },
    {
        "content": "<p><code>rev</code></p>",
        "id": 415998738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705488148
    },
    {
        "content": "<p>Right. Yeah, would be nice.</p>",
        "id": 415998775,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705488160
    },
    {
        "content": "<p>I mean it as in the C bitwise negation operator</p>",
        "id": 415998787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705488163
    },
    {
        "content": "<p>which is <code>-n-1</code></p>",
        "id": 415998820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705488171
    },
    {
        "content": "<p>Right right. Do we use that notation for anything?</p>",
        "id": 416001806,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705489053
    },
    {
        "content": "<p>bitwise ops</p>",
        "id": 416001967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705489095
    },
    {
        "content": "<p>Which... I think this would be consistent with (on Fin (2^m)?)</p>",
        "id": 416002132,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705489139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> yeah it looks like the bounded order instance on Fin is for Fin (n + 1) instead of NeZero n. That wants changing, right?</p>",
        "id": 416018400,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705495380
    },
    {
        "content": "<p>Unfortunately the definition of last is in std so it can't really change. We could have a last' that works more as we might want...</p>",
        "id": 416018498,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705495427
    },
    {
        "content": "<p><code>NeZero</code> might make it to Std eventually</p>",
        "id": 416018656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705495477
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 416018810,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705495535
    }
]