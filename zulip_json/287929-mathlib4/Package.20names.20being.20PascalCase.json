[
    {
        "content": "<p>What is the motivation behind package names being in PascalCase? I've read <a href=\"#narrow/stream/270676-lean4/topic/what.20naming.20scheme.20to.20use.20in.20mathlib4\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/what.20naming.20scheme.20to.20use.20in.20mathlib4</a> and <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention</a> but they don't seem to explain why. I'm curious.</p>",
        "id": 442004950,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1717303513
    },
    {
        "content": "<p>Package names aren't in pascal case for the most part. E.g. the package names for batteries and mathlib4 are <code>batteries</code> and <code>mathlib</code> respectively. Other packages include <code>Qq</code>, <code>aesop</code>, <code>proofwidgets</code>, <code>Cli</code>, <code>importGraph</code> so there isn't a strict enforcement of whether they should be uppercase or lowercase, but I think lowercase is winning. The <code>Qq</code> and <code>Cli</code> packages are using the rule that the package is named after the library, and these are always in PascalCase.</p>",
        "id": 442066411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717343182
    },
    {
        "content": "<p>I think there's a misunderstanding: when I said package name I should've said module names</p>\n<p><a href=\"/user_uploads/3121/MZkJit49foZrRvKi7vqg-hjm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MZkJit49foZrRvKi7vqg-hjm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MZkJit49foZrRvKi7vqg-hjm/image.png\"></a></div>",
        "id": 442114812,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1717368747
    },
    {
        "content": "<p>I'm curious what would count as a motivation. Are you trying to work out some of the history of Lean 4's design? What's your own motivation?</p>\n<p>Usually the choice of this naming convention style is arbitrary. Pascal case for module names is what Lean 4 uses, so that's what Mathlib uses.</p>",
        "id": 442115741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717369272
    },
    {
        "content": "<p>Personally I'm a bit confused by the naming of Module (PascalCase), Package (could be any case pattern without a <code>-</code> or <code>_</code> except for <code>«doc-gen4»</code>) and Repo (could be anything with a <code>-</code> or <code>_</code>, and possibly a lean prefix/postfix, and a 4 postfix), the naming pattern between them are not consistent and quite arbitary.</p>\n<p>Mostly a user would only need to require <code>mathlib</code> (or just <code>batteries</code>) , <code>«doc-gen4»</code>, <code>checkdecls</code>, <code>Duper</code>, <code>LeanCopilot</code> etc. but almost all variants are already there (except for camelCase).</p>",
        "id": 442135453,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717382821
    },
    {
        "content": "<p>I've lost a preference on the naming convention after learning  many languages, but in one language, I simply hope it to be consistent. (One exception is C++, I can only hope so for one library, that means I have to switch styles in one function if it calls multiple libraries.)</p>",
        "id": 442136008,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717383139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Package.20names.20being.20PascalCase/near/442115741\">said</a>:</p>\n<blockquote>\n<p>I'm curious what would count as a motivation. Are you trying to work out some of the history of Lean 4's design? What's your own motivation?</p>\n<p>Usually the choice of this naming convention style is arbitrary. Pascal case for module names is what Lean 4 uses, so that's what Mathlib uses.</p>\n</blockquote>\n<p>I'm trying to develop a competitor of Lean and I'm learning from Lean. Right now it features in a better treatment of mutually recursive definitions and fully constructive funExt &amp; quotients via a set-level cubical type theory (LEM/AC will still need to be an axiom though), very similar to Arend, but Arend is based on HoTT, and we are more aligned with Lean in this regard.</p>\n<p>But it does not yet have a class system &amp; tactic framework therefore we're not ready to work on the ecosystem, but I am overlooking.</p>\n<p>I've already realized an unfortunate fact that if you imitate Haskell, using <code>data</code> as the keyword will clash with the lowercase module name <code>data</code> for functional programming data structures, such as lists and options, I think that's why Haskell used <code>Data.List</code> capitalized. But Lean uses <code>inductive </code> and has lowercase in mathlib3, but mathlib4 is uppercase. I just want to know if there's some motivations that I can learn.</p>",
        "id": 442139184,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1717384853
    },
    {
        "content": "<p>Ah, ok, interesting.</p>\n<p>Just so you know, module names in Lean will never clash with keywords. Modules are only for <code>import</code>s, but there's also a namespace system which is orthogonal to modules. This is somewhat reminiscent of Common Lisp, which differentiates between modules (for loading files) and symbol packages (for namespacing).</p>\n<p>Lean and mathlib also use Pascal case for namespaces. I hadn't really thought about how this ensures that namespaces will never conflict with keywords (which are all(?) lower case), but I suppose that could be convenient. I can't immediately think of an example clash between existing namespaces and keywords if suddenly they all became case insensitive however.</p>",
        "id": 442140267,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717385744
    },
    {
        "content": "<p>Our language design is closer to Rust and Agda in this case, where we have file level modules and file-local modules. But it is true that file level modules are significant in type checking, as we don't allow cross-module mutual recursion. But for file-local modules this is easily doable, I'm not sure if it's implemented or not, I need to check.</p>\n<p>But thanks for your questions &amp; answers! They are very helpful</p>",
        "id": 442140498,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1717385928
    },
    {
        "content": "<p><a href=\"https://www.aya-prover.org/guide/prover-tutorial.html\">https://www.aya-prover.org/guide/prover-tutorial.html</a> here's some code snippets of the language</p>",
        "id": 442140528,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1717385951
    }
]