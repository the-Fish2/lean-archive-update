[
    {
        "content": "<p>Next regression in trying to bump MIL to 4.8.0:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Index</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Fintype</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_card_eq</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">H.index_eq_card</span><span class=\"o\">,</span> <span class=\"n\">H.index_mul_card</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span>                     <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">One.instNonempty</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_of_mul_eq_mul_right</span> <span class=\"n\">card_pos</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>used to work with the <code>have foo</code>. Any idea?</p>",
        "id": 436756770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714675967
    },
    {
        "content": "<p>That might be more recent: see eg the most recent commit <a href=\"https://github.com/leanprover-community/mathlib4/pull/12386\">#12386</a></p>",
        "id": 436757230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714676133
    },
    {
        "content": "<p>Sorry, I got distracted by something else on this website. I don’t understand what you mean. Did you quote the PR you intended to quote?</p>",
        "id": 436763676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678546
    },
    {
        "content": "<p>Just saying after the bump that working PR had a nonempty regression also</p>",
        "id": 436763823,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714678595
    },
    {
        "content": "<p>Yes, I had the same problem, a nonempty instance is not found anymore.</p>",
        "id": 436763835,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714678601
    },
    {
        "content": "<p>In my case it is a very low priority instance (20 I think, I don't if this matters)</p>",
        "id": 436763922,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714678634
    },
    {
        "content": "<p>Wasn't there some talk of disabling a bunch of these generic instances (for <code>Nonempty</code>, <code>Subsingleton</code>, etc.) for performance reasons? Did that happen?</p>",
        "id": 436763989,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714678663
    },
    {
        "content": "<p>Or scoping them.</p>",
        "id": 436764029,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714678677
    },
    {
        "content": "<p>I see how this could impact performance but again it would be really sad if Lean needs help to figure out that a group is not empty.</p>",
        "id": 436764148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678717
    },
    {
        "content": "<p>I totally get that we don’t want to prove a type is not empty by chasing a module structure over an unspecified ring. But a group, please…</p>",
        "id": 436764250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678763
    },
    {
        "content": "<p>Note that the foo line is quoting <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=One.instNonempty#doc\">docs#One.instNonempty</a> that is indeed an instance</p>",
        "id": 436764299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20regression/near/436763989\">said</a>:</p>\n<blockquote>\n<p>Wasn't there some talk of disabling a bunch of these generic instances (for <code>Nonempty</code>, <code>Subsingleton</code>, etc.) for performance reasons? Did that happen?</p>\n</blockquote>\n<p>No, Kyle created <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.FastSubsingleton#doc\">docs#Lean.Meta.FastSubsingleton</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.FastIsEmpty#doc\">docs#Lean.Meta.FastIsEmpty</a> instead</p>",
        "id": 436764372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714678813
    },
    {
        "content": "<p>And I’m pretty sure that going from <code>Group</code> to <code>One</code> is also a global instance.</p>",
        "id": 436764399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678826
    },
    {
        "content": "<p>I think <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435581657\">this</a> is the message I had in mind.</p>",
        "id": 436764509,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714678872
    },
    {
        "content": "<p>And the priority of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=One.instNonempty#doc\">docs#One.instNonempty</a> is indeed very low (20).</p>",
        "id": 436764521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714678876
    },
    {
        "content": "<p>For people who did’t try the snippet, the trace is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyElemCommutatorSet</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Finset.instNonemptyElemToSetInsert</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.instNonemptyRange</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.instNonemptyElemImage</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.nonempty_Iio_subtype</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.nonempty_Ioi_subtype</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.nonempty_Iic_subtype</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.nonempty_Ici_subtype</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.instNonemptyElemInsert</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Set.univ.nonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">nonempty_lt</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonemptyOfMonad</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonemptyOfInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subtype.instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"o\">(</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x_0</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"o\">[]</span> <span class=\"n\">skip</span> <span class=\"n\">answer</span> <span class=\"n\">containing</span> <span class=\"n\">metavariables</span> <span class=\"n\">instNonemptyOfInhabited</span>\n</code></pre></div>",
        "id": 436765092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679100
    },
    {
        "content": "<p>So I think this must be related to the idea of not trying harder when something failed.</p>",
        "id": 436765174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679132
    },
    {
        "content": "<p>Here Lean thinks <code>instNonemptyOfInhabited</code> is promising, this fails and nothing else is tried? or something else?</p>",
        "id": 436765311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679168
    },
    {
        "content": "<p>I have no idea what the <code>propagating</code> part is about.</p>",
        "id": 436765423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679217
    },
    {
        "content": "<p>I’m blind. Lean was trying to tell me who is guilty here: it’s <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.instInhabitedSubtype#doc\">docs#Subtype.instInhabitedSubtype</a>. How can this be an instance?</p>",
        "id": 436766219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I only noticed <a href=\"https://github.com/leanprover-community/mathlib4/pull/12445\">mathlib4#12445</a> as a change to the Subsingleton instances (which sped up compilation by about 0.8%)</p>",
        "id": 436766326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714679548
    },
    {
        "content": "<p>I guess this instance never ever fired, but it was ignored until the recent changes.</p>",
        "id": 436766684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679681
    },
    {
        "content": "<p>It was added four years ago!</p>",
        "id": 436766709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679692
    },
    {
        "content": "<p>Kyle, could you bring this up in the FRO?</p>",
        "id": 436766998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679806
    },
    {
        "content": "<p>I could produce a Mathlib-free example but hopefully looking at the instance in isolation is enough?</p>",
        "id": 436767099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714679852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20regression/near/436766709\">said</a>:</p>\n<blockquote>\n<p>It was added four years ago!</p>\n</blockquote>\n<p>Even better, Jeremy added it 10 years ago! <a href=\"https://github.com/leanprover-community/lean/commit/3afad10a7294fd183f66cc9d4723511b799ac4ff#diff-4e22e2bb74f004d2ff7cdabcb5c01429abbc906e20befe2517679e257b4387e4R41\">https://github.com/leanprover-community/lean/commit/3afad10a7294fd183f66cc9d4723511b799ac4ff#diff-4e22e2bb74f004d2ff7cdabcb5c01429abbc906e20befe2517679e257b4387e4R41</a></p>\n<p>and then Leo made it an instance shortly after: <a href=\"https://github.com/leanprover-community/lean/commit/8743394627865655d2aa83522f326f8b3ce8bd73#diff-c9d2d4fb99a5e01195239dfdfaf733704ef95daf710493cc3c5125a6445f198bR42\">https://github.com/leanprover-community/lean/commit/8743394627865655d2aa83522f326f8b3ce8bd73#diff-c9d2d4fb99a5e01195239dfdfaf733704ef95daf710493cc3c5125a6445f198bR42</a></p>\n<p>It's been copied from Lean version to Lean version ever since.</p>",
        "id": 436767640,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714680037
    },
    {
        "content": "<p>And still some people manage to complain Lean is not stable enough. I don’t know what it would take to please them…</p>",
        "id": 436767852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714680104
    },
    {
        "content": "<p>I'm curious to see if removing this instance will have any affect on mathlib benchmarks. Draft: <a href=\"https://github.com/leanprover/lean4/pull/4055\">lean4#4055</a></p>",
        "id": 436771189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714681508
    },
    {
        "content": "<p>I love that lean is still such an adventure! We are still discovering ways to make the software better.</p>",
        "id": 436784345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714687671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20regression/near/436766219\">said</a>:</p>\n<blockquote>\n<p>I’m blind. Lean was trying to tell me who is guilty here: it’s <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.instInhabitedSubtype#doc\">docs#Subtype.instInhabitedSubtype</a>. How can this be an instance?</p>\n</blockquote>\n<p>Why didn't the <code>impossibleInstance</code> linter catch this?</p>",
        "id": 436833199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714721904
    },
    {
        "content": "<p>Probably because the linter only runs against mathlib?</p>",
        "id": 436834833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714722708
    },
    {
        "content": "<p>So in practice is it ok to add the instance by hand at the moment?</p>",
        "id": 436843337,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714726630
    },
    {
        "content": "<p>Do you mean remove? Yes you can remove it by hand, this is what I did in MIL.</p>",
        "id": 436899771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714747716
    },
    {
        "content": "<p>If this is a regression and the fix is a simple upstream deletion, can we backport this so that it ends up in rc2?</p>",
        "id": 436944577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714763844
    },
    {
        "content": "<p>Something I was trying to do with <a href=\"https://github.com/leanprover/lean4/pull/4055\">lean4#4055</a> was benchmark the removal on mathlib, but I'm not sure what the right way to do it is (and as you can see from the PR, there's a bunch of force pushes as I tried to get all the lean-pr-testing branches on the right versions). I think it could be merged right away, but I'm curious.</p>",
        "id": 436945506,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714764219
    }
]