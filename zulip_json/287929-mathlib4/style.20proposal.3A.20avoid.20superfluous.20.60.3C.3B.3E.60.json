[
    {
        "content": "<p>I think very often <code>&lt;;&gt;</code> is used solely to squeeze everything into one line, and I don't think we should do that.</p>\n<p>Sometimes <code>&lt;;&gt;</code> is actually helpful. e.g. in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.OrdConnected.strictConvex#src\">src#Set.OrdConnected.strictConvex</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases'</span> <span class=\"n\">hxy.lt_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">hlt</span> <span class=\"n\">hlt</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">openSegment_symm</span><span class=\"o\">]]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">exact</span>\n      <span class=\"o\">(</span><span class=\"n\">openSegment_subset_Ioo</span> <span class=\"n\">hlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n        <span class=\"o\">(</span><span class=\"n\">isOpen_Ioo.subset_interior_iff.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Ioo_subset_Icc_self.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hs.out</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>\n<p>would be awkward without <code>&lt;;&gt;</code>. Similarly in Imo20221Q1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases'</span> <span class=\"n\">hCA</span> <span class=\"k\">with</span> <span class=\"n\">hCA</span> <span class=\"n\">hCA</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hCA</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hCA</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hCA</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">hCA</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hab</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>But most are not like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">mono_lie_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">le_sup_left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mod_zero</span><span class=\"o\">,</span> <span class=\"n\">gcd_zero_right</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inj'</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>I think these are less readable, and for no good reason (new lines characters are expensive?), and would encourage us to encourage or require that <code>&lt;;&gt;</code> is not used when the same proof logic could be achieved with either <code>\\.</code> or <code>all_goals</code>.</p>",
        "id": 429550893,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711426085
    },
    {
        "content": "<p>So maybe the \"rule\" is that we shouldn't use <code>&lt;;&gt; [tac1, tac2, ...]</code> at the <em>end</em> of a proof?</p>",
        "id": 429583238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711428331
    },
    {
        "content": "<p>Speaking only for myself, I have a personal preference for the <code>&lt;;&gt; [tac1; tac2]</code> style to close trivial side goals, as well as to prove very short case splits. In lean 3 this was often accomplished by using e.g. <code>{refl}</code> at the end of a line after, say, an <code>induction</code> with a trivial base case; but in lean 4 this formatting leads to <code>induction e; · rfl</code> which looks pretty weird with a bullet in the middle of the line. I often use several tactics on the same line as a means of doing \"semantic line breaking\", where multiple tactics coordinate into one higher level idea. I'm aware not everyone is a fan of this style though.</p>",
        "id": 429584169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711429131
    },
    {
        "content": "<p>Okay. I'm happy to leave it at that. This one is not a big deal.</p>",
        "id": 429584224,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711429185
    },
    {
        "content": "<p>I'd be okay with being overruled on this point by the other mathlib maintainers though, I don't trust my own opinion in this regard to be reflective of mathlib maintainer consensus because a lot of people think I write too-golfed proofs</p>",
        "id": 429584393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711429318
    },
    {
        "content": "<p>I just wanted to put the counter point out there so that people had something to upvote if they disagree</p>",
        "id": 429584598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711429483
    }
]