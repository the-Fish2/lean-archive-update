[
    {
        "content": "<p>Can we make multiplication on <code>MvPolynomial</code> irreducible? The following example takes 30+ seconds to time-out, because Lean starts unfolding everything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_inj'</span> <span class=\"n\">ha</span> <span class=\"c1\">-- error. `mul_right_inj' ha` is the correct proof</span>\n</code></pre></div>",
        "id": 416778079,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1705670937
    },
    {
        "content": "<p>(this also causes <code>by exact?</code> to be very slow)</p>",
        "id": 416778327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1705671014
    },
    {
        "content": "<p>I think we should do this for <code>MonoidAlgebra</code> instead</p>",
        "id": 416808285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705680078
    },
    {
        "content": "<p>This example fails ~1200x faster on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12554\">#12554</a>.</p>",
        "id": 436303560,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714492430
    }
]