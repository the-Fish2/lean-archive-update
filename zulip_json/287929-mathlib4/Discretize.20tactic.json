[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#borelize\">tactic#borelize</a> but not the analogous tactic that would endow a type with the discrete topology and add the corresponding <code>DiscreteTopology</code> instance in the local context. <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> and <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> need the discrete uniformity version in the local class field project. I propose to have <code>discretize</code> and <code>discretize_uniformly</code> for those two tactics. For instance it allows really cool proofs like:</p>",
        "id": 436146664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714427616
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">discretize</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isCompact_iff_finite</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.image</span> <span class=\"n\">continuous_of_discreteTopology</span>\n</code></pre></div>",
        "id": 436146699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714427632
    },
    {
        "content": "<p>(and I’m told the applications to local class field theory are even more interesting).</p>",
        "id": 436146792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714427666
    },
    {
        "content": "<p>Before opening a PR to mathlib, I’d be interested to know whether there is any reason we shouldn’t have this. I don’t know who wrote the Borel version, probably <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> or <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>?</p>",
        "id": 436147060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714427794
    },
    {
        "content": "<p>It looks totally reasonable to me, apart from the fact that <code>discretize</code> is way too generic as a tactic name</p>",
        "id": 436147187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714427855
    },
    {
        "content": "<p>Any suggestion for a better name?</p>",
        "id": 436149573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714428852
    },
    {
        "content": "<p>I think <code>discretize</code> is not so bad. If you're worried about naming conflicts with something outside topology, <code>with_discrete_topology α β</code> seems the obvious solution.</p>",
        "id": 436157288,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714432011
    },
    {
        "content": "<p>Perhaps the tactic notation could be in the <code>Topology</code> scope?</p>",
        "id": 436157633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714432149
    },
    {
        "content": "<p>Should we just put the discrete metric space structure (<code>dist a b := if a = b then 0 else 1</code>)?</p>",
        "id": 436447709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714538160
    }
]