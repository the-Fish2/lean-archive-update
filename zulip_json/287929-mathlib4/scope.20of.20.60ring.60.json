[
    {
        "content": "<p>From the doc string of the basic module for <code>ring</code>, </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"w\"> </span><span class=\"ss\">`ring</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">tactic</span>\n\n<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">solving</span><span class=\"w\"> </span><span class=\"n\">equations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">commutative</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">semi</span><span class=\"o\">)</span><span class=\"n\">rings</span><span class=\"o\">,</span>\n<span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">exponents</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">contain</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"bp\">.</span>\n<span class=\"n\">Based</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www</span><span class=\"bp\">.</span><span class=\"n\">cs</span><span class=\"bp\">.</span><span class=\"n\">ru</span><span class=\"bp\">.</span><span class=\"n\">nl</span><span class=\"bp\">/~</span><span class=\"n\">freek</span><span class=\"bp\">/</span><span class=\"n\">courses</span><span class=\"bp\">/</span><span class=\"n\">tt</span><span class=\"bp\">-</span><span class=\"mi\">2014</span><span class=\"bp\">/</span><span class=\"n\">read</span><span class=\"bp\">/</span><span class=\"mf\">10.1</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"m\">61</span><span class=\"bp\">.</span><span class=\"m\">3041</span><span class=\"bp\">.</span><span class=\"n\">pdf</span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span>\n\n<span class=\"n\">More</span><span class=\"w\"> </span><span class=\"n\">precisely</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">negative</span><span class=\"w\"> </span><span class=\"n\">integers</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">variables</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">coefficients</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">rational</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">embedded</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">semi</span><span class=\"o\">)</span><span class=\"n\">ring</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">expressions</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">multiplication</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"ss\">`a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">scalar</span><span class=\"w\"> </span><span class=\"n\">multiplication</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"ss\">`n</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">`;</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">multiplier</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"ss\">`ℕ</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">exponentiation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">exponent</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"ss\">`ℕ</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">negation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"n\">ring</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Given this why are <code>div</code> and <code>inv</code> in scope?</p>",
        "id": 447496325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719498976
    },
    {
        "content": "<p>Are they?</p>",
        "id": 447496790,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719499089
    },
    {
        "content": "<p>I guess just for <code>Rat</code> for the scope</p>",
        "id": 447496850,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719499106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/scope.20of.20.60ring.60/near/447496790\">said</a>:</p>\n<blockquote>\n<p>Are they?</p>\n</blockquote>\n<p>Eg, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.evalDiv#doc\">docs#Mathlib.Tactic.evalDiv</a></p>",
        "id": 447497097,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719499165
    },
    {
        "content": "<p>Docstring </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- Divides two polynomials `va, vb` to get a normalized result polynomial.</span>\n\n<span class=\"sd\">* `a / b = a * b⁻¹`</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 447497390,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719499246
    },
    {
        "content": "<p>These functions do what they can with division, but the normal form is still polynomials so it's not that much. Having basic support means for example that they can prove <code>a / b = a * b⁻¹</code>, which is important in particular if <code>a</code> is a sum, since then you still have some polynomial structure to extract</p>",
        "id": 447531646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719508326
    },
    {
        "content": "<p>But should they or should it be in some type of extension? I mention this because it imports a good deal of machinery compared to what is used.</p>",
        "id": 447535801,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719509327
    },
    {
        "content": "<p>I said this already when the same question was raised about <code>abel</code>: I think we should separate the definition of fundamental algebraic structures from the more high powered results that use these tactics. I see no reason we can't blitz our way to <code>Field</code>, instantiate these tactics, and then redo group theory etc with more completeness. In other words: there should be a <code>Algebra.Field.Defs</code> and <code>ring</code> and <code>abel</code> should not be used in the dependencies of that file</p>",
        "id": 447564131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719516016
    },
    {
        "content": "<p>I have plans along those lines, starting with order theory (because it is shorter and because I am roughly the only one caring about it). Keep your eyes peeled.</p>",
        "id": 447603402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719527310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/scope.20of.20.60ring.60/near/447564131\">said</a>:</p>\n<blockquote>\n<p>In other words: there should be a <code>Algebra.Field.Defs</code> and <code>ring</code> and <code>abel</code> should not be used in the dependencies of that file</p>\n</blockquote>\n<p>This has been the case for a while?</p>",
        "id": 447637556,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719544023
    },
    {
        "content": "<p>Yes, now I am confused too. </p>\n<p>More directly: does it make sense to split up <code>ring</code> so that the core part avoids division and inversion?</p>",
        "id": 447725683,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719569557
    }
]