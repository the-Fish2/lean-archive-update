[
    {
        "content": "<p>I was reading through some files about inner product spaces. There seem to be some conflicting design philosophies here and there. For example Basis and OrthogonalFamily are defined in terms of morphisms rather than specific elements. But many algebraic Sub-things are defined with a carrier set in the traditional way. Shouldn't they be defined in terms of injective morphisms ? Or is it a bad idea ?<br>\nFor example, I'm thinking that one could define a <code>Subgroup</code> in this way: (Maybe it's not the best design)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Subgroup'</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>  <span class=\"c1\">-- (maybe as a class?)</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span>\n  <span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">hom</span>\n</code></pre></div>\n<p>Would there be issues with defining all Sub things in a similar way? Would that help making things more elegant?</p>",
        "id": 428385365,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711130977
    },
    {
        "content": "<p>With that approach, <code>Subgroup G</code> would no longer be a lattice.</p>",
        "id": 428385753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711131141
    },
    {
        "content": "<p>One is almost never interested in the structure of all bases of a vector space, but a single specific basis should be as flexible as possible.</p>",
        "id": 428385944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711131222
    },
    {
        "content": "<p>Otoh, the structure of all subgroups is quite interesting.</p>",
        "id": 428386030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711131246
    },
    {
        "content": "<p>This informs these different design approaches.</p>",
        "id": 428386086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711131267
    },
    {
        "content": "<p>What about this ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Subgroup''</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"n\">is_group</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">K</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span>\n  <span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">hom</span>\n</code></pre></div>",
        "id": 428386171,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711131303
    },
    {
        "content": "<p>Still not a lattice</p>",
        "id": 428386258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711131339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">GroupCat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">Subobject</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p><span aria-label=\"halo\" class=\"emoji emoji-1f607\" role=\"img\" title=\"halo\">:halo:</span></p>",
        "id": 428389092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132463
    },
    {
        "content": "<p>oh that's not right.</p>",
        "id": 428389139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132492
    },
    {
        "content": "<p>Are you sure it wouldn't be possible to make that into a lattice by embedding the subgroups into the target group, to give back meaning to intersection and union generated subgroups? (but I guess you're gonna say then just define a subgroup inside its carrier group ) <br>\nDo you know results in mathlib that uses the lattice of subgroups ? I'm not familiar with their usage, and how frequently they are used</p>",
        "id": 428389168,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711132505
    },
    {
        "content": "<p>At least </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">GroupCat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"n\">Subobject</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 428389340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132569
    },
    {
        "content": "<p>it is possible to give a lattice structure. But the main issue is that these wouln't be very convenient to work with.</p>",
        "id": 428389420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132602
    },
    {
        "content": "<p>I guess. That's why I'm wondering if that's a frequent use case</p>",
        "id": 428389486,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711132635
    },
    {
        "content": "<p>note that with your definition, you will not get a lattice as Johan said. You need to mod out by isomorphisms at some point to get a lattice.</p>",
        "id": 428389582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132682
    },
    {
        "content": "<p>Ok then I suppose it adds even more inconvenience</p>",
        "id": 428389717,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711132730
    },
    {
        "content": "<p>if you want to experiment a bit, I would focus on the case of subsets first.</p>",
        "id": 428389775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711132759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"697190\">@Julien Michel</span> Intersections of subgroups are everywhere. A particularly nice statement involving the order structure on subgroups comes from Galois theory. But there are many more examples (although they don't have catchy names).</p>",
        "id": 428389803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711132768
    },
    {
        "content": "<p>Right, so more basically being able to conveniently intersect things is important.</p>",
        "id": 428390504,
        "sender_full_name": "Julien Michel",
        "timestamp": 1711133058
    },
    {
        "content": "<p>Not really related to this, but the reason that <code>#synth (Lattice (Subobject X))</code> fails when <code>X : GroupCat</code> is because of the following, which should be fixed at some point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasPullbacks</span> <span class=\"n\">GroupCat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- ok</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasBinaryCoproducts</span> <span class=\"n\">GroupCat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasImages</span> <span class=\"n\">GroupCat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 428390706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711133154
    },
    {
        "content": "<p>Aren’t these marked subgroups or something?</p>",
        "id": 428391735,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711133543
    },
    {
        "content": "<p>Or maybe framed?</p>",
        "id": 428391807,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711133573
    },
    {
        "content": "<p>I think “framed” would be more like specifying generators of the subgroup. I don’t think I’ve seen such a concept in nature.</p>",
        "id": 428392350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711133795
    },
    {
        "content": "<p>I think about the distinction between GW invariants vs actual curve counts (not directly applicable I know)</p>",
        "id": 428392508,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711133877
    },
    {
        "content": "<p>Julien, the sup operation is also crucial. The whole story of generated subgroups in framed in this lattice mindset.</p>",
        "id": 428397814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711136106
    },
    {
        "content": "<p>Did you read the discussion at <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C08_Groups_and_Rings.html#subgroups\">https://leanprover-community.github.io/mathematics_in_lean/C08_Groups_and_Rings.html#subgroups</a>?</p>",
        "id": 428397885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711136153
    }
]