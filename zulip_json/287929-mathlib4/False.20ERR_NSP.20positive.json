[
    {
        "content": "<p>The ERR_NSP just gave me a false positive <a href=\"https://github.com/leanprover-community/mathlib4/pull/11143#discussion_r1510573258\">here</a>. The simp is actually terminal, but there is a second goal in sight</p>",
        "id": 424576063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709526893
    },
    {
        "content": "<p>I'm not sure how looking at syntax is supposed to make sense to decide whether a simp is terminal or not, actually</p>",
        "id": 424576156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709526937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/424576063\">said</a>:</p>\n<blockquote>\n<p>The ERR_NSP just gave me a false positive <a href=\"https://github.com/leanprover-community/mathlib4/pull/11143#discussion_r1510573258\">here</a>. The simp is actually terminal, but there is a second goal in sight</p>\n</blockquote>\n<p>Fair enough, but shouldn't there not be a second goal in sight?</p>",
        "id": 424576860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709527438
    },
    {
        "content": "<p>Ideally this linter gets implemented in Lean, but I'm already hoping that it will do a lot of net good in its current form.</p>",
        "id": 424576959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709527475
    },
    {
        "content": "<p>The second goal was created by the <code>rw</code> above.</p>",
        "id": 424577075,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709527564
    },
    {
        "content": "<p>I hope we're not supposed to add a focusing dot every time a <code>rw</code> creates a side goal??</p>",
        "id": 424577108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709527599
    },
    {
        "content": "<p>My style is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition1</span><span class=\"o\">]</span>\n<span class=\"n\">some_tactics</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition2</span><span class=\"o\">]</span>\n<span class=\"n\">some_more_tactics</span>\n<span class=\"bp\">·</span> <span class=\"n\">prove_side_condition2</span>\n<span class=\"bp\">·</span> <span class=\"n\">prove_side_condition1</span>\n</code></pre></div>",
        "id": 424577289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709527749
    },
    {
        "content": "<p>If I want to keep clear of the linter, I would need to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition1</span><span class=\"o\">]</span>\n<span class=\"bp\">·</span> <span class=\"n\">some_tactics</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition2</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">some_more_tactics</span>\n  <span class=\"bp\">·</span> <span class=\"n\">prove_side_condition2</span>\n<span class=\"bp\">·</span> <span class=\"n\">prove_side_condition1</span>\n</code></pre></div>\n<p>which seems suboptimal to say the least (<code>some_tactics</code> and <code>some_more_tactics</code> are usually quite long)</p>",
        "id": 424577414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709527849
    },
    {
        "content": "<p>I agree that it is necessary to be able to accumulate side conditions from rewrites without dots.</p>",
        "id": 424577825,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528074
    },
    {
        "content": "<p>Otoh, if the proof of the side condition is short, then you can often <code>swap; close_side_condition</code>.</p>",
        "id": 424577864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528102
    },
    {
        "content": "<p>Yes, but this forbids things like <code>all_goals positivity</code> (a pretty common idiom in LeanAPAP)</p>",
        "id": 424577951,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709528158
    },
    {
        "content": "<p>Or my recent favourite of <code>all_goals omega</code>.</p>",
        "id": 424578016,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528179
    },
    {
        "content": "<p>Right. So we <em>really</em> need the procrastinate tactic.</p>",
        "id": 424578026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528191
    },
    {
        "content": "<p>This is a wrapper that hides all accumulated side goals until you're done with the main goal?</p>",
        "id": 424578194,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528347
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/An.20.60exists_intro.60.20tactic.3F/near/411262030\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/An.20.60exists_intro.60.20tactic.3F/near/411262030</a><br>\nand <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20repetetive.20cases/near/422685570\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Tactic.20for.20repetetive.20cases/near/422685570</a></p>",
        "id": 424578345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528448
    },
    {
        "content": "<p>Oh yeah, I remember once opening that page and thinking \"they are really procrastinating on explaining the essentials here...\"</p>",
        "id": 424578661,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528694
    },
    {
        "content": "<p>I mean, that explanation is only a sidegoal right?</p>",
        "id": 424580814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709530325
    },
    {
        "content": "<p>Can I turn off the linter locally? It seems not since it's implemented in Python. If I can't turn it off locally, can we turn it off globally until we figure out how not to inappropriately flag correct style code?</p>",
        "id": 424598771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709540269
    },
    {
        "content": "<p>Actually, can't we just let the linter know that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span>\n<span class=\"bp\">·</span> <span class=\"n\">some_tactics</span>\n</code></pre></div>\n<p>is correct? That will create a loophole (people can just focus the goal after a non-terminal simp to ignore the linter), but I have literally never seen focusing dots being used when a single goal is in sight, so it's probably fine.</p>",
        "id": 424599470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709540549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/424577289\">said</a>:</p>\n<blockquote>\n<p>My style is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition1</span><span class=\"o\">]</span>\n<span class=\"n\">some_tactics</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lemma_with_side_condition2</span><span class=\"o\">]</span>\n<span class=\"n\">some_more_tactics</span>\n<span class=\"bp\">·</span> <span class=\"n\">prove_side_condition2</span>\n<span class=\"bp\">·</span> <span class=\"n\">prove_side_condition1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think this style isn't great, because it doesn't enforce that <code>some_more_tactics</code> operates only on a single goal. I agree that the alternative isn't very readable either, but it is at least clear which goals it operates on</p>",
        "id": 424603195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709541787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/424598771\">said</a>:</p>\n<blockquote>\n<p>Can I turn off the linter locally? It seems not since it's implemented in Python.</p>\n</blockquote>\n<p>Python linters can be turned off in a nolints file somewhere</p>",
        "id": 424603513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709541894
    },
    {
        "content": "<p>Also, if some lemma is refactored, and no longer needs a side condition, the person doing the refactor might have a harder time figuring out how to repair these proofs.<br>\nSo while I think we should do more to support this style, in such a way that it is maintainable, I don't think the style is optimal right now.</p>",
        "id": 424606102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709542798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/424603513\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/424598771\">said</a>:</p>\n<blockquote>\n<p>Can I turn off the linter locally? It seems not since it's implemented in Python.</p>\n</blockquote>\n<p>Python linters can be turned off in a nolints file somewhere</p>\n</blockquote>\n<p>The latest CI on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12569\">#12569</a> (where I got another false positive) seems to suggest otherwise: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8907813217/job/24462314781?pr=12569\">https://github.com/leanprover-community/mathlib4/actions/runs/8907813217/job/24462314781?pr=12569</a></p>",
        "id": 436475123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714556585
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 436475143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714556596
    },
    {
        "content": "<p>This false positive I really can't solve. I need the simp call in front of the aesop call else everything times out</p>",
        "id": 436475268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714556656
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, since I've generally noticed aesop getting slower and slower when I bump mathlib in my projects</p>",
        "id": 436475326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714556698
    },
    {
        "content": "<p>Are you saying that <code>simp</code> is not non-terminal?</p>",
        "id": 436476168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714557202
    },
    {
        "content": "<p>Not where the linter flagged it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12569\">#12569</a>, no. The proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">congr</span>\n<span class=\"n\">ext</span>\n<span class=\"n\">simp</span>\n<span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">mul_mem_mul</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436476360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714557317
    },
    {
        "content": "<p>It's a bit weird to have <code>simp</code> followed by <code>aesop</code> but, as I explained above, this is needed for the proof to use a reasonable amount of heartbeats, and <code>aesop</code> is not a rigid tactic so the <code>simp</code> really is not non-terminal.</p>",
        "id": 436476508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714557389
    },
    {
        "content": "<p>Can you use <code>on_goal</code>?</p>",
        "id": 436476634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714557482
    },
    {
        "content": "<p>In any case this proof deserves a comment, because it seems to be working around a timeout in <code>aesop</code></p>",
        "id": 436476720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714557519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/436476634\">said</a>:</p>\n<blockquote>\n<p>Can you use <code>on_goal</code>?</p>\n</blockquote>\n<p>Not sure how. How would the proof look like?</p>",
        "id": 436476806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714557585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/436476720\">said</a>:</p>\n<blockquote>\n<p>In any case this proof deserves a comment, because it seems to be working around a timeout in <code>aesop</code></p>\n</blockquote>\n<p>The comment is here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12569/files#diff-b8cca68e7f5f002a5bb141ac51d75c4cb3cab73b749b38a920a53e66f9a6e771R141\">https://github.com/leanprover-community/mathlib4/pull/12569/files#diff-b8cca68e7f5f002a5bb141ac51d75c4cb3cab73b749b38a920a53e66f9a6e771R141</a></p>",
        "id": 436476894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714557614
    },
    {
        "content": "<p>Sorry, I was completely confused. I thought this was about the multiple goal linter. But it is about the non-terminal linter. I agree that this seems to be a false positive.</p>",
        "id": 436489031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714565108
    },
    {
        "content": "<p>In any case, on my pretty decent desktop in my office, your current proof is still really slow. So:</p>\n<ul>\n<li>yes, it would be good if this false positive got fixed (cc <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>)</li>\n<li>yes, I would also strongly encourage that you optimize this proof for more speed. By squeezing the simp and the aesop calls, I would hope.</li>\n</ul>",
        "id": 436489863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714565637
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">additiveEnergy_eq_sum_sq'</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">multiplicativeEnergy_eq_sum_sq'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Eₘ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">multiplicativeEnergy_eq_card_filter</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">card_product</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">card_disjiUnion</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- The `swap`, `ext` and `simp` calls significantly reduce heartbeats</span>\n  <span class=\"n\">swap</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.PairwiseDisjoint</span><span class=\"o\">,</span> <span class=\"n\">Set.Pairwise</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">disjoint_left</span><span class=\"o\">,</span> <span class=\"n\">mem_product</span><span class=\"o\">,</span>\n      <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">Prod.forall</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"n\">congr</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">disjiUnion_eq_biUnion</span><span class=\"o\">,</span> <span class=\"n\">mem_biUnion</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">mul_mem_mul</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436490121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714565798
    },
    {
        "content": "<p>This is almost instant on my machine</p>",
        "id": 436490130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714565806
    },
    {
        "content": "<p>I think that this is about the text-based simp-normal form linter that was written by <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>.  The syntax-based linters (both the simp-normal form and the multiple goals one) are not in mathlib (yet?).</p>",
        "id": 436508314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714572943
    },
    {
        "content": "<p>Specifically for the simp-normal form linter, there seems to be some consensus on what the linter should flag (and the linter does that more or less reliably), but very little in the way of addressing the issue: neither <code>says</code>, nor <code>suffice</code> seem to really cover all the cases.</p>",
        "id": 436508552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714573038
    },
    {
        "content": "<p>If we are going to add in another linter that detects simps in a more nuanced way, why not just delete the old one now?</p>",
        "id": 436561185,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714592415
    },
    {
        "content": "<p>The new linter may take some time to get merged, I believe, so I think that the current one (yours) is still serving a very useful purpose.</p>",
        "id": 436561330,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714592494
    },
    {
        "content": "<p>Ok, well <a href=\"https://github.com/leanprover-community/mathlib4/pull/12585\">#12585</a> is a small change that should allow <code>aesop</code> to follow simp.</p>",
        "id": 436562287,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714592913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> feel tree to try merging this in to your PRs and see if it fixes your problem.</p>",
        "id": 436562342,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714592944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/436490130\">said</a>:</p>\n<blockquote>\n<p>This is almost instant on my machine</p>\n</blockquote>\n<p>Interesting. I can't tell the difference on mine (went from slow to slow), but I take your word for it</p>",
        "id": 436566967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714595036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/False.20ERR_NSP.20positive/near/436562342\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> feel tree to try merging this in to your PRs and see if it fixes your problem.</p>\n</blockquote>\n<p>The linter doesn't complain anymore now that I've squeezed the simp.</p>",
        "id": 436567136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714595108
    },
    {
        "content": "<p>I think that at the core of the non-terminal <code>simp</code> business there is the issue that there are situations in which there is no real palatable alternative to having a non-terminal <code>simp</code>.  There are plenty of examples where <code>simp?</code> is unwieldy, as is the resulting term, making also <code>suffices</code> undesirable.</p>",
        "id": 436567429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714595256
    },
    {
        "content": "<p>In my opinion, this is the main blocker for the \"flexible vs rigid\" linter: the linter flags what I would expect it to flag, but, sometimes, there is no real good way of pleasing the linter without silencing it.</p>",
        "id": 436567560,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714595310
    },
    {
        "content": "<p>(...and \"sometime\" is a little too often for littering the code with <code>set_options</code>.)</p>",
        "id": 436567624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714595348
    },
    {
        "content": "<p>And now I hit another false positive with <code>omega</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9000#discussion_r1589956524\">https://github.com/leanprover-community/mathlib4/pull/9000#discussion_r1589956524</a></p>",
        "id": 437013277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714821190
    },
    {
        "content": "<p>The text-based script would probably benefit from the consequence of the multiple goal linter: if a proof is well-structured, then deduction that you make from indentations reflect better the actual proof evolution.</p>",
        "id": 437023417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714830331
    },
    {
        "content": "<p>Ok I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/12663\">#12663</a> to exclude several more \"flexible\" tactics, including omega</p>",
        "id": 437054148,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714859051
    }
]