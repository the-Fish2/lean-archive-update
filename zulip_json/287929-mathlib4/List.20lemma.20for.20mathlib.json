[
    {
        "content": "<p>Hey, would you like to add the following to Data.List.DropRight ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">List.rdrop_append.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">List.rdrop</span> <span class=\"n\">l₁</span> <span class=\"n\">i</span><span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">List.rdrop_eq_reverse_drop_reverse</span><span class=\"o\">,</span> <span class=\"n\">List.reverse_append</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.length_reverse</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.drop_append</span>\n</code></pre></div>",
        "id": 435553663,
        "sender_full_name": "Yves Jäckle",
        "timestamp": 1714125235
    },
    {
        "content": "<p>I don't know that corner of mathlib very well. That said: it seems your lemma decomposes into two pieces; I'd rather have just these.</p>\n<ul>\n<li><code>rdrop</code>ing first <code>n</code> and then <code>m</code> elements is the same as rdropping <code>n+m</code></li>\n<li><code>rdrop (l₁ ++ l₂) (length l₂)  = l₁</code> (is that easier to prove?)</li>\n</ul>\n<p>BTW - not the point of your question, but since I guess you may be interested, let me mention it: I would tweak the code slightly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rdrop_append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">rdrop</span> <span class=\"n\">l₁</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">rdrop_eq_reverse_drop_reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse_append</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_reverse</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">drop_append</span>\n</code></pre></div>",
        "id": 435645383,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714159192
    },
    {
        "content": "<p>Congratulations, you nerd-sniped me :-) Here's your proof refactored to use the two above lemmas. In particular,</p>\n<ul>\n<li>the second lemma seems \"obviously\" missing</li>\n<li>your initial lemma is probably not worth including separately</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rdrop_eq_reverse_drop_reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">reverse_append</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">length_reverse</span><span class=\"o\">,</span> <span class=\"n\">drop_left</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rdrop_add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rdrop</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">rdrop</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rdrop_eq_reverse_drop_reverse</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse_eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse_reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse_reverse</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">drop_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rdrop_append</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">rdrop</span> <span class=\"n\">l₁</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₂</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rdrop_add</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rdrop</span> <span class=\"n\">l₁</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435647918,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714160227
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.rdrop_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.rdrop</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.rdrop</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rdrop</span> <span class=\"n\">j</span>  <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">List.rdrop_eq_reverse_drop_reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse_reverse</span><span class=\"o\">,</span> <span class=\"n\">drop_drop</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.rdrop_append_length.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l₁</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.rdrop_eq_reverse_drop_reverse</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">length_reverse</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">reverse_append</span><span class=\"o\">,</span> <span class=\"n\">drop_left</span><span class=\"o\">,</span> <span class=\"n\">reverse_reverse</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.rdrop_append.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.rdrop</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">List.rdrop</span> <span class=\"n\">l₁</span> <span class=\"n\">i</span><span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rdrop_add</span><span class=\"o\">,</span> <span class=\"n\">rdrop_append_length</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Edit: Now golfed to one-liners</p>",
        "id": 435648987,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714160779
    },
    {
        "content": "<p>You beat me to it :-)</p>",
        "id": 435649035,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714160818
    },
    {
        "content": "<p>I don't think my solution is necessarily better. But I like that just rw can solve this :-)</p>",
        "id": 435649244,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714160924
    },
    {
        "content": "<p>Actually, I think using simp_rw is slightly nicer, because you avoid the repetition.</p>",
        "id": 435649617,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714161099
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  so you'll add these ?</p>",
        "id": 435735491,
        "sender_full_name": "Yves Jäckle",
        "timestamp": 1714210018
    },
    {
        "content": "<p>Made the PR:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/12468\">https://github.com/leanprover-community/mathlib4/pull/12468</a><br>\n<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 435773218,
        "sender_full_name": "Yves Jäckle",
        "timestamp": 1714237035
    },
    {
        "content": "<p>Thanks, I left some comments.</p>",
        "id": 435773567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714237365
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Thanks for the advice</p>",
        "id": 435773722,
        "sender_full_name": "Yves Jäckle",
        "timestamp": 1714237537
    }
]