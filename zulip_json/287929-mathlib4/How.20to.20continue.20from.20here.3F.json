[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/9317\">#9317</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">card_edgeFinset_turanGraph_add</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">turanGraph</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edgeFinset.card</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">turanGraph</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edgeFinset.card</span> <span class=\"bp\">+</span> <span class=\"n\">r.choose</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">turanGraph</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">edgeFinset_decompose_card</span> <span class=\"o\">(</span><span class=\"n\">univ.map</span> <span class=\"o\">(</span><span class=\"n\">Fin.castAddEmb</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 431667319,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712405091
    },
    {
        "content": "<p>For context, the proof I have currently goes through another 100-line proof of the number of edges in a Turán graph, which in turn requires a ton of imports. But I figure that I don't need all of that – I should be able to use the machinery of the forward direction of this theorem (decomposition into a clique and the rest)</p>",
        "id": 431667983,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712405770
    },
    {
        "content": "<p>The problem is that after the above <code>rw</code> and a <code>congr 2</code> I get impenetrable terms like<br>\n<code>Sym2.map (fun x ↦ { val := ↑↑x, isLt := ⋯ }) (Eq.mp ⋯ (Quot.mk (Sym2.Rel ↑↑(Set.toFinset {x | ↑x &lt; n})) (x, y))) ∈ edgeFinset (turanGraph n r)</code></p>",
        "id": 431668170,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712405869
    },
    {
        "content": "<p>Is <code>univ.map (Fin.castAddEmb r).toEmbedding</code> really the best way to express the elements of <code>Fin n</code> mapped naturally to <code>Fin (n + r)</code>?</p>",
        "id": 431668351,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712406012
    },
    {
        "content": "<p>I would have expected something like <code>(Fin.castAddEmb r).range</code> to work but thay doesn't</p>",
        "id": 431668687,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712406327
    },
    {
        "content": "<p>(my parents dragged me out for dinner, please feel free to have a look at the sorries in my present code)</p>",
        "id": 431670193,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712407077
    },
    {
        "content": "<p>OK I'm back</p>",
        "id": 431672832,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712409559
    },
    {
        "content": "<p>Anyone?</p>",
        "id": 431687793,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1712422147
    }
]