[
    {
        "content": "<p>Currently the docstring of <code>nth_rewrite</code> gives no indicatinn of the syntax for specifying the occurrence number. I propose to add examples to it. <code>nth_rw</code> simply tells the user that <code>nth_rw</code> is the same as <code>nth_rewrite</code> with some <code>rfl</code> stuff. So a new user must first hunt around for <code>nth_rewrite</code> (or type it in to check the docstring). I suggest copying and adapting the docstring of <code>nth_rewrite</code>.</p>",
        "id": 444853793,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718449382
    },
    {
        "content": "<p>Please do!</p>",
        "id": 444923361,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718496863
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13877\">mathlib4#13877</a></p>",
        "id": 444976931,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718544957
    },
    {
        "content": "<p>Found what might be a potential footgun for an unsuspecting user:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n\n<span class=\"c1\">-- footgun demo</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">nth_rw</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- footnote on infoview</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">footnote:</span>\n<span class=\"cm\">ab: ℝ</span>\n<span class=\"cm\">h: a = b + a</span>\n<span class=\"cm\">⊢ a + (b + (b + (b + (b + a)))) + a + a + a = b</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>if the LHS of <code>h</code> is contained as a subterm in the RHS of <code>h</code>, then in successive <code>nth_rw</code>s the new subterm will be rewritten over and over (or affect the occurrence count). I can document this too, but it sounds like a massive footgun either way.</p>",
        "id": 445093167,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718617421
    },
    {
        "content": "<p>What is the desired behaviour? (I don't understand the problem. It seems to be doing exactly what it was asked to do.)</p>",
        "id": 445094958,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718618049
    },
    {
        "content": "<p>It is tough to reason about the behaviour when you have complex equations and many of them instead of the four simple <code>h</code>s  I have put in there. For example, if there's an unexpected occurrence of <code>a</code> in some long theorem statement  it can heavily confuse users. Instead of eliminating the <code>a</code>'s in the goal one by one you are simply substituting into the new <code>a</code> you have accidentally introduced. Basically binder substitution is hard.</p>",
        "id": 445095823,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718618374
    },
    {
        "content": "<p>Anyway, I am just goiing to document this now and leave it at that. This might be worth a separate discussion.</p>",
        "id": 445096093,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718618442
    },
    {
        "content": "<p>Using <code>nth_rw</code> with multiple lemmas is kind of insane to begin with.</p>",
        "id": 445103291,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718620940
    },
    {
        "content": "<p>I found at least one such occurrence of <code>nth_rewrite</code> in mathlib</p>",
        "id": 445103489,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718621002
    },
    {
        "content": "<p>I added a brief one-liner to explain how this works. The PR is ready for review (It's building but I guess docstrings shouldn't affect the build).</p>",
        "id": 445114964,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718625250
    },
    {
        "content": "<p>Some occurrences of <code>nth_rewrite</code> with multiples lemmas: <a href=\"https://github.com/leanprover-community/mathlib4/blob/e6faccc1239918c2369162efab84d9d829eed7e2/Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.lean#L77\">here</a>, <a href=\"https://github.com/leanprover-community/mathlib4/blob/e6faccc1239918c2369162efab84d9d829eed7e2/Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.lean#L239\">here</a>, <a href=\"https://github.com/leanprover-community/mathlib4/blob/e6faccc1239918c2369162efab84d9d829eed7e2/Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.lean#L127\">here</a>,  and <a href=\"https://github.com/leanprover-community/mathlib4/blob/e6faccc1239918c2369162efab84d9d829eed7e2/Mathlib/RingTheory/IntegralClosure.lean#L993\">a large one here</a></p>",
        "id": 445115962,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718625597
    },
    {
        "content": "<p>And one for <code>nth_rw</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/e6faccc1239918c2369162efab84d9d829eed7e2/Mathlib/Data/Nat/Nth.lean#L417\">here</a></p>",
        "id": 445116550,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718625780
    },
    {
        "content": "<p>I updated the docstrings of the PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13877\">mathlib4#13877</a>) this morning to add some examples.</p>",
        "id": 446588475,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719228020
    },
    {
        "content": "<p>I request feedback on these. I just picked the simplest example that I think showed how it all works</p>",
        "id": 446588624,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719228077
    },
    {
        "content": "<p>I left you some comments :) not an official reviewer though, so take it with a grain of salt</p>",
        "id": 446602165,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719232509
    },
    {
        "content": "<p>I liked the comments. I am responding to them right away.</p>",
        "id": 446602251,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719232542
    },
    {
        "content": "<p>About that <code>Nat.add_comm</code> example: Is it correct to say <code>nth_rw</code> rewrites the <code>nth</code> occurrence of an expression in precedence order?</p>",
        "id": 446604092,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719233090
    },
    {
        "content": "<p><del>I am trying to write things in a less computer sciencey way, so referring to things like expression trees is probably not a good way to go</del> EDIT : made the necessary changes and used your example to explain why order of precedence can make thigns weird.</p>",
        "id": 446604231,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719233134
    },
    {
        "content": "<p>About the <code>extendDocs</code> solution for the  identical copies of docstrings for <code>nth_rewrite</code> and <code>nth_rw</code>, it would work better if one could hygienically substitute parameters representing the tactic name in this case into a docstring, like the <code>s!\"..{}\"</code> format strings. Is that possible in docstring comments?</p>",
        "id": 446605146,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719233426
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> : The note about the change of occurrence count from 0 to 1 between mathlib3 and mathlib4 appears redundant and pointless after the port. Shall I remove it?</p>",
        "id": 446606601,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719233776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/docstrings.20of.20.60nth_rewrite.60.20and.20.60nth_rw.60/near/446605146\">said</a>:</p>\n<blockquote>\n<p>About the <code>extendDocs</code> solution for the  identical copies of docstrings for <code>nth_rewrite</code> and <code>nth_rw</code>, it would work better if one could hygienically substitute parameters representing the tactic name in this case into a docstring, like the <code>s!\"..{}\"</code> format strings. Is that possible in docstring comments?</p>\n</blockquote>\n<p>I don't think that's possible unfortunately, and that would need a feature request to core, I'm afraid. Would be a nice feature though.</p>",
        "id": 446622057,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719237638
    },
    {
        "content": "<p>I think this PR is ready to merge. It has 3 approving reviews and passes all checks</p>",
        "id": 447462791,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719490564
    },
    {
        "content": "<p>I assume you refer to <a href=\"https://github.com/leanprover-community/mathlib4/pull/13877\">#13877</a></p>",
        "id": 447463228,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719490724
    },
    {
        "content": "<p>yes</p>",
        "id": 447463262,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719490737
    },
    {
        "content": "<p>It was already labelled maintainer merge</p>",
        "id": 447463718,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719490892
    },
    {
        "content": "<p>Yes, but the value of the comment is not in the label, but in the bot that posts to a private zulip stream</p>",
        "id": 447464541,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719491114
    }
]