[
    {
        "content": "<p>Well, this is fun ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.IsROrC.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- ContinuousMap.algebra</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- IsScalarTower.right</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- ContinuousMap.algebra</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsScalarTower</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- failed</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.synthInstance] ❌ IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▼</span>\n<span class=\"cm\">  [] new goal IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">  [] ❌ apply @ContinuousMap.instIsScalarTowerContinuousMapInstSMulInstSMul to IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">  [] ❌ apply @IsScalarTower.right to IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▼</span>\n<span class=\"cm\">    [tryResolve] ❌ IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ≟ IsScalarTower ?m.8431 ?m.8432 ?m.8432 ▼</span>\n<span class=\"cm\">      [isDefEq] ❌ IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) =?= IsScalarTower ?m.8431 ?m.8432 ?m.8432 ▼</span>\n<span class=\"cm\">        [] ✅ 𝕜 =?= ?m.8431 ▶</span>\n<span class=\"cm\">        [] ✅ C(𝕜, 𝕜) =?= ?m.8432 ▶</span>\n<span class=\"cm\">        [] ✅ C(𝕜, 𝕜) =?= C(𝕜, 𝕜)</span>\n<span class=\"cm\">        [synthInstance] 💥 Algebra 𝕜 C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">        [] ❌ ContinuousMap.instSMul =?= Algebra.toSMul ▼</span>\n<span class=\"cm\">          [] ❌ { smul := fun r f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } } =?= Algebra.toSMul ▼</span>\n<span class=\"cm\">            [] ❌ { smul := fun r f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } } =?= ?m.8435.1 ▼</span>\n<span class=\"cm\">              [] ✅ SMul 𝕜 C(𝕜, 𝕜) =?= SMul 𝕜 C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">              [] ❌ SMul.smul =?= fun r f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } ▼</span>\n<span class=\"cm\">                [] ❌ fun r f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= fun a =&gt; SMul.smul a ▼</span>\n<span class=\"cm\">                  [] ✅ 𝕜 =?= 𝕜</span>\n<span class=\"cm\">                  [] ❌ fun f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= SMul.smul r ▼</span>\n<span class=\"cm\">                    [] ❌ fun f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= fun a =&gt; SMul.smul r a ▼</span>\n<span class=\"cm\">                      [] ✅ C(𝕜, 𝕜) =?= C(𝕜, 𝕜)</span>\n<span class=\"cm\">                      [] ❌ { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= SMul.smul r f ▼</span>\n<span class=\"cm\">                        [] ❌ { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= ?m.8435.1.1 r f ▼</span>\n<span class=\"cm\">                          [] ✅ C(𝕜, 𝕜) =?= C(𝕜, 𝕜)</span>\n<span class=\"cm\">                          [] ❌ (?m.8435.1.1 r f).toFun =?= r • ⇑f ▶</span>\n<span class=\"cm\">                          [] ❌ @ContinuousMap.mk =?= ?m.8435.1.1 ▶</span>\n<span class=\"cm\">                          [onFailure] ❌ { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= ?m.8435.1.1 r f ▶</span>\n<span class=\"cm\">                          [onFailure] ❌ { toFun := r • ⇑f, continuous_toFun := ⋯ } =?= ?m.8435.1.1 r f ▶</span>\n<span class=\"cm\">              [onFailure] ❌ { smul := fun r f =&gt; { toFun := r • ⇑f, continuous_toFun := ⋯ } } =?= ?m.8435.1 ▶</span>\n<span class=\"cm\">        [onFailure] ❌ IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) =?= IsScalarTower ?m.8431 ?m.8432 ?m.8432</span>\n<span class=\"cm\">        [onFailure] ❌ IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) =?= IsScalarTower ?m.8431 ?m.8432 ?m.8432</span>\n<span class=\"cm\">  [] ❌ apply IsScalarTower.left to IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">  [] ❌ apply @Semigroup.isScalarTower to IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">  [] ❌ apply @IsScalarTower.of_algHom to IsScalarTower 𝕜 C(𝕜, 𝕜) C(𝕜, 𝕜) ▶</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 426632397,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710451708
    },
    {
        "content": "<p>Is pasting this into <code>scratch.lean</code> file at the root of mathlib supposed to bork the server?</p>",
        "id": 426633588,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710452268
    },
    {
        "content": "<p>oh, that's even worse. I didn't even notice that. I get that it prints this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span>\n<span class=\"mi\">54</span>\n<span class=\"mi\">46</span>\n<span class=\"mi\">96</span>\n<span class=\"mi\">146</span>\n<span class=\"mi\">44</span>\n<span class=\"mi\">94</span>\n<span class=\"mi\">144</span>\n</code></pre></div>",
        "id": 426634028,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710452426
    },
    {
        "content": "<p>The borking of the server is somehow due to the tracing (of the instances, not of the defeq), which seems very bad.</p>",
        "id": 426634409,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710452623
    },
    {
        "content": "<p>It’s not the problem but <code>ContinousMap.C</code> should be <code>reducible</code></p>",
        "id": 426635521,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710453072
    },
    {
        "content": "<p>I am guessing metavariable depth is the culprit here</p>",
        "id": 426635610,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710453121
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"bp\">?</span><span class=\"n\">m.18092</span> <span class=\"bp\">=?=</span> <span class=\"n\">ContinuousMap.instSemiringContinuousMap</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">m.18092</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">ContinuousMap.instSemiringContinuousMap</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it fails to get the algebra structure here and just continuous with a metavariable</p>",
        "id": 426636083,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710453328
    },
    {
        "content": "<p>Do we need <code>Algebra R A</code> for <code>IsScalarTower.right</code>?</p>",
        "id": 426636951,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710453714
    },
    {
        "content": "<p>But it gets the algebra structure fine when you ask it, see above.</p>",
        "id": 426637170,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710453810
    },
    {
        "content": "<p>Right, for some reason it goes deeper into the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MetavarContext.depth#doc\">docs#Lean.MetavarContext.depth</a> and tries to assign it there (is my theory)</p>",
        "id": 426637701,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710454051
    },
    {
        "content": "<p>It succeeds if you replace <code>𝕜</code> with <code>ℝ</code>, but not with <code>ℂ</code>.</p>",
        "id": 426639608,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710454967
    },
    {
        "content": "<p>Your idea about metavariable context depth seems likely because of the <code>unassignable</code>, but also note that this succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">IsScalarTower.right</span> <span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 426641324,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710455822
    }
]