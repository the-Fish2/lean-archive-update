[
    {
        "content": "<p>In a message like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">DedekindDomain</span><span class=\"bp\">/</span><span class=\"n\">Ideal.lean</span><span class=\"bp\">#</span><span class=\"n\">L1</span><span class=\"o\">:</span> <span class=\"n\">ERR_NUM_LIN</span><span class=\"o\">:</span> <span class=\"mi\">1700</span> <span class=\"n\">file</span> <span class=\"n\">contains</span> <span class=\"mi\">1542</span> <span class=\"n\">lines</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"n\">to</span> <span class=\"n\">split</span> <span class=\"n\">it</span> <span class=\"n\">up</span>\n</code></pre></div>\n<p>what does the <code>1700</code> stand for?</p>",
        "id": 419415005,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706864938
    },
    {
        "content": "<p>It seems to be a <code>watermark</code>: in the file <code>scripts/lint-style.py</code> there are these lines</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>            <span class=\"c1\"># Each exception contains a \"watermark\". If the file is longer than that, we also complain.</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1500</span><span class=\"p\">:</span>\n                <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">exceptions</span> <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()]</span>\n                <span class=\"k\">if</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                    <span class=\"p\">(</span><span class=\"n\">_ERR_NUM</span><span class=\"p\">,</span> <span class=\"n\">_path</span><span class=\"p\">,</span> <span class=\"n\">watermark</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"k\">assert</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">watermark</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">500</span> <span class=\"c1\"># protect against parse error</span>\n                    <span class=\"n\">is_too_long</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">watermark</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">is_too_long</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">if</span> <span class=\"n\">is_too_long</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_exceptions</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"c1\"># add up to 200 lines of slack, so simple PRs don't trigger this right away</span>\n                    <span class=\"n\">watermark</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">+</span> <span class=\"mi\">200</span>\n                    <span class=\"n\">output_message</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"ERR_NUM_LIN\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">watermark</span><span class=\"si\">}</span><span class=\"s2\"> file contains </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> lines, try to split it up\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 419418925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706866469
    },
    {
        "content": "<p>So the answer to the question is \"it's (1542/100)*100+200 computed with nat division\"??</p>",
        "id": 419419118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706866541
    },
    {
        "content": "<p>It looks like it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 419419242,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706866565
    },
    {
        "content": "<p>That and <code>1542 &gt; 1500</code>.</p>",
        "id": 419419294,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706866588
    },
    {
        "content": "<p>Maybe it is some kind of \"buffer\": it may be saying that the file is longer than what is oped for (1500), but not enough to really complain.</p>",
        "id": 419419464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706866660
    },
    {
        "content": "<p>The point is that <code>style-exceptions.txt</code> contains all the currently offending files with exact line counts, and we don't want to give a warning whenever any of those files change at all but still give a warning if they have changed significantly since the last time they were admitted as exceptions</p>",
        "id": 419422054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706867596
    },
    {
        "content": "<p>this works because the watermark is part of the nolint key but the exact line count is not</p>",
        "id": 419422299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706867667
    },
    {
        "content": "<p>The <code>output_message</code> part makes no sense to me. The \"200 lines of slack\" doesn't apply, since it's done after <code>if is_too_long</code>, and the message printed also doesn't make sense. The logic should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">len</span><span class=\"o\">(</span><span class=\"n\">lines</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1500</span><span class=\"o\">:</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">...</span>\n    <span class=\"k\">if</span> <span class=\"n\">ex</span><span class=\"o\">:</span>\n        <span class=\"bp\">#</span> <span class=\"bp\">...</span>\n        <span class=\"n\">watermark</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"o\">(</span><span class=\"n\">watermark</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"mi\">100</span> <span class=\"bp\">+</span> <span class=\"mi\">200</span>\n        <span class=\"n\">is_too_long</span> <span class=\"bp\">=</span> <span class=\"n\">len</span><span class=\"o\">(</span><span class=\"n\">lines</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">watermark</span>\n</code></pre></div>",
        "id": 419429533,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706870149
    },
    {
        "content": "<p>No, that doesn't seem right. If the file is longer than 1500 lines, you need to put an exception in the style-exceptions file with a limit. The limit is suggested to be round(current length of the file) + 200. Once the file goes over that limit, you again get a lint failure</p>",
        "id": 419430452,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706870497
    },
    {
        "content": "<p>That is, the watermark variable in the code only calculates the suggested new limit, it doesn't affect whether the linter fails or not</p>",
        "id": 419430649,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706870553
    },
    {
        "content": "<p>Ah, that's not what I understood from the comment and printed message, but that makes sense</p>",
        "id": 419431256,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706870724
    },
    {
        "content": "<p>I'm sure the message can be improved; I was just trying to make sense of the code :)</p>",
        "id": 419431681,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706870852
    },
    {
        "content": "<p>Ugh. My PR made the lint fail, but bors didn't notice and merged anyway: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7725140864/job/21058735396\">https://github.com/leanprover-community/mathlib4/actions/runs/7725140864/job/21058735396</a></p>",
        "id": 419450889,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706878149
    },
    {
        "content": "<p>Oh, this is because of python's nasty global variables. PR in a minute</p>",
        "id": 419451307,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706878321
    },
    {
        "content": "<p>By the way, this check seems to originate in <a href=\"#narrow/stream/287929-mathlib4/topic/Linter.20for.20large.20files.3F/near/416093678\">this comment</a>.  And maybe <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> should be pinged as well!</p>",
        "id": 419454903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706879554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ERR_NUM_LIN/near/419451307\">said</a>:</p>\n<blockquote>\n<p>Oh, this is because of python's nasty global variables. PR in a minute</p>\n</blockquote>\n<p>I had noticed and wondered why. Thank you for fixing this quickly!</p>",
        "id": 419456112,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706880013
    },
    {
        "content": "<p>Maybe the solution should rather be \"Error iff the file is long and gets more than 100 lines longer in one PR\"</p>",
        "id": 419456489,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706880154
    },
    {
        "content": "<p>The current linter still prevents files from growing a tiny bit when close to the limit</p>",
        "id": 419456635,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706880203
    },
    {
        "content": "<p><del>This is more or less what happens (for a value of 100 equal to 200)</del></p>",
        "id": 419456640,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706880205
    },
    {
        "content": "<p>Maybe this is what was intended, but it's certainly not what's happening</p>",
        "id": 419456824,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706880248
    },
    {
        "content": "<p>I disagree; that still allows unbounded growth</p>",
        "id": 419456830,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706880250
    },
    {
        "content": "<p>I still think that even if you slowly creep up the size of a file, there should be a predetermined hard limit preventing you to extend even by a single line a previously long file.  Something like: you can extend an ignored file by at most 100 lines, but not past 2500 lines anyway.</p>",
        "id": 419457417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706880467
    },
    {
        "content": "<p>AIUI, the current behaviour is:</p>\n<ol>\n<li>If a file grows from 1499 to 1502 lines, the linter errors</li>\n<li>If the file already has more than 1500 lines, there will be a style exception for it, allowing between 100 and 200 lines of slack compared to when the exception was added. If there has been some time and a tiny addition pushes the file over the limit, the linter errors.</li>\n<li>If a PR adds many lines to a file that is already too long, this might trigger the linter right away.</li>\n</ol>\n<p>I see the linter error in (1) and (3) as a feature: it's a small speed-bump, a nudge that this file is too long and should be split. It can easily be silenced (add/update a style exception), but this forces you to think about it.</p>",
        "id": 419457439,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706880474
    },
    {
        "content": "<p>Splitting files meaningfully is hard. I don't want the burden to do so to fall on random contributors. Understand: I would much rather have a list of files that need splitting and split them myself.</p>",
        "id": 419458857,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706880999
    },
    {
        "content": "<p>Context: <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span> hastily split a bunch of files last year to make place for the port, and while I agree with most changes I am still struggling with some of them.</p>",
        "id": 419458992,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706881060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ERR_NUM_LIN/near/419458857\">said</a>:</p>\n<blockquote>\n<p>Splitting files meaningfully is hard. I don't want the burden to do so to fall on random contributors. Understand: I would much rather have a list of files that need splitting and split them myself.</p>\n</blockquote>\n<p>Don't we kind-of have such a list: it's in <code>style-exceptions</code>?</p>",
        "id": 419459224,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706881134
    },
    {
        "content": "<p>I agree with you, YaÃ«l, but it is also simpler to add a no-lint than embarking on a split, so this is still the path of least resistance!</p>",
        "id": 419459237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706881139
    },
    {
        "content": "<p>I would be open to upgrading our policy around the lint to \"no new exceptions\" :-)</p>",
        "id": 419459458,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706881211
    },
    {
        "content": "<p>I'm happy for this error to be continually pushed onto <code>style-exception</code>s; but every time it gets nolinted, we should have a discussion about it and maybe trying to ping relevant people.</p>",
        "id": 419463352,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706882554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ERR_NUM_LIN/near/419459237\">said</a>:</p>\n<blockquote>\n<p>I agree with you, YaÃ«l, but it is also simpler to add a no-lint than embarking on a split, so this is still the path of least resistance!</p>\n</blockquote>\n<p>If that's what people end up doing, great! What I'm afraid of is that people will end up splitting suboptimally rather than adding an exception</p>",
        "id": 419472536,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706885492
    },
    {
        "content": "<p>Maybe the linter message could suggest adding the exception, unless you really think you can split the file!</p>",
        "id": 419514437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706899632
    },
    {
        "content": "<p>I think we should allow PRs to add lines to <code>style-exception.txt</code>, but it would be great if new arrivals in <code>style-exception.txt</code> or <code>nolints.json</code> caused a bot to post to zulip</p>",
        "id": 419515054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706899820
    },
    {
        "content": "<p>\"WARNING EVERYBODY: USER @whoever JUST DID A BAD THING\"</p>",
        "id": 419516391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706900364
    },
    {
        "content": "<p>yeah, sounds great &lt;JOKE&gt;</p>",
        "id": 419516429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706900376
    },
    {
        "content": "<p>(I realize you are joking, but) the idea would be to be able to track progress toward emptying those queues since I don't think we have a very good mechanism for it right now</p>",
        "id": 419518626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706901221
    },
    {
        "content": "<p>and since we want to take the focus for this off the PR author and toward general maintenance</p>",
        "id": 419518737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706901255
    },
    {
        "content": "<p>i.e. it would be something that people like <span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> who specialize in file splitting could subscribe to to be able to be regularly reminded that mathlib still has fires to put out</p>",
        "id": 419518930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706901335
    },
    {
        "content": "<p>Yep, that's exactly what I am after. This would be great <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 419543241,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1706911971
    }
]