[
    {
        "content": "<p>I have defined reflected binary gray code and proved some theorems about it in Lean. Is this something which could be added to Mathlib? Where?</p>\n<p>I have also proved a few simple lemmas about bitwise operators - would it be OK to add them as simp lemmas? There is also a problem that <code>simp</code> uses <code>Nat.bit_false</code> and <code>Nat.bit_true</code>, which change stuff to <code>bit0</code> and <code>bit1</code>, but they are deprecated. What's going on with that?</p>\n<ul>\n<li><code>bit_testBit_zero</code>: <code>(Nat.bit b n).testBit 0 = b</code></li>\n<li><code>bit_div2</code>: <code>(Nat.bit b n).div2 = n</code></li>\n<li><code>succ_bit_true</code>: <code>Nat.bit true n + 1 = Nat.bit false (n+1)</code></li>\n<li><code>succ_bit_false</code>: <code>Nat.bit false n + 1 = Nat.bit true n</code></li>\n<li><code>succ_testBit_zero</code>: <code>(n + 1).testBit 0 = !n.testBit 0</code></li>\n<li><code>bit_testBit_nonzero (h : i ≠ 0)</code>: <code>(Nat.bit b n).testBit i = n.testBit (i-1)</code></li>\n<li><code>div2_testBit</code>: <code>n.div2.testBit i = n.testBit (i+1)</code></li>\n<li><code>xor_div2</code>: <code>(n ^^^ m).div2 = n.div2 ^^^ m.div2</code></li>\n</ul>",
        "id": 437385384,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715062777
    },
    {
        "content": "<p>Yes, it would be good to remove <code>@[simp]</code> from <code>bit_false</code> and <code>bit_true</code>.</p>",
        "id": 437385850,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715063062
    },
    {
        "content": "<p>I'm skeptical that <code>bit_testBit_nonzero</code> is useful (introduces a subtraction), but I guess the others are probably okay.</p>",
        "id": 437385942,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715063128
    },
    {
        "content": "<p>Probably <code>bit_testBit_succ : (Nat.bit b n).testBit (i + 1) = n.testBit i</code> is better?</p>",
        "id": 437401454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715069452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Gray.20code/near/437401454\">said</a>:</p>\n<blockquote>\n<p>Probably <code>bit_testBit_succ : (Nat.bit b n).testBit (i + 1) = n.testBit i</code> is better?</p>\n</blockquote>\n<p>Yeah, seems so. Then I can replace <code>by_cases i = 0</code> in my proof with <code>cases i</code> and everything is nicer</p>",
        "id": 437410743,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715072825
    },
    {
        "content": "<p>Ah, it exists already, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.testBit_bit_succ#doc\">docs#Nat.testBit_bit_succ</a></p>",
        "id": 437411574,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715073147
    },
    {
        "content": "<p>as does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.testBit_bit_zero#doc\">docs#Nat.testBit_bit_zero</a></p>",
        "id": 437411611,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715073168
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.div2_bit#doc\">docs#Nat.div2_bit</a></p>",
        "id": 437411894,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715073274
    },
    {
        "content": "<p>It's a bit annoying that everything <code>Init.Data.Nat.Bitwise.Lemmas</code> is spelled with <code>n / 2</code> while in <code>Mathlib.Data.Nat.Bits</code> everything is spelled with <code>div2</code>, but they aren't defeq</p>",
        "id": 437412312,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715073453
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3756\">lean4#3756</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12419\">#12419</a> will make them defeq and provide some lemmas.</p>",
        "id": 437459902,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715090230
    },
    {
        "content": "<p>What would be a good location for this file? <code>Mathlib.Data.Nat.GrayCode</code>?</p>",
        "id": 437491871,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715100443
    },
    {
        "content": "<p>I'd argue that gray codes should be about BitVector not Nat</p>",
        "id": 437491944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715100475
    },
    {
        "content": "<p>I first state everything as a permutation of <code>Nat</code> and then look at prefixes of it for <code>BitVec</code></p>",
        "id": 437492173,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715100543
    },
    {
        "content": "<p>It slightly annoys me that it depends on choice even though there's no reason for it to. Any idea why <code>Lean.Omega.normalize_sat</code> depends on <code>Classical.em</code>? It seems to be due to the <code>split</code>, but its condition should be decidable</p>",
        "id": 437495939,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715101921
    },
    {
        "content": "<p>... you opened a big can of worms right there</p>",
        "id": 437496805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715102242
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a></p>",
        "id": 437496870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715102272
    },
    {
        "content": "<p>If you want people to keep paying attention to your thread, I recommend not going much further in that direction :)</p>",
        "id": 437497046,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715102332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span>, there is an old request for motivation for <a href=\"https://github.com/leanprover/lean4/pull/3756\">lean4#3756</a> that hasn't been answered.</p>",
        "id": 437546520,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715123044
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12750\">#12750</a> made a pull request</p>",
        "id": 437573409,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715141719
    },
    {
        "content": "<p>Could you move the non-gray code material into a separate PR? It will make reviewing easier.</p>",
        "id": 437573825,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715142080
    },
    {
        "content": "<p>Sorry, I don't have much experience with git–how do I do that?</p>",
        "id": 437575079,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715143063
    },
    {
        "content": "<p>To keep it simple, you can just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"n\">pre_gray_code</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">CommandMaster_GrayCode</span> <span class=\"bp\">&lt;</span><span class=\"n\">filenames</span> <span class=\"n\">containing</span> <span class=\"n\">the</span> <span class=\"n\">earlier</span> <span class=\"n\">material</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">git</span> <span class=\"n\">commit</span> <span class=\"bp\">-</span><span class=\"n\">am</span> <span class=\"s2\">\"....\"</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span>\n</code></pre></div>\n<p>and make a new PR from that.</p>",
        "id": 437575891,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715143726
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12751\">#12751</a></p>",
        "id": 437585500,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715149523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Gray.20code/near/437585500\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12751\">#12751</a></p>\n</blockquote>\n<p>Is anyone available to take a look at this?</p>",
        "id": 438403718,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715618150
    },
    {
        "content": "<p>In a month, after my exams... <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 438408095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715619557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Gray.20code/near/437585500\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12751\">#12751</a></p>\n</blockquote>\n<p>LGTM</p>",
        "id": 438945878,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715840171
    },
    {
        "content": "<p>I wonder if <code>size_eq_iff_testBit</code> can be simplified more though ...</p>",
        "id": 438946007,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1715840235
    }
]