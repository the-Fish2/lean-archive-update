[
    {
        "content": "<p>Do we have anything written down about the test block in Mathlib CI:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">-</span> <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">mathlib</span>\n        <span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">test</span>\n        <span class=\"n\">uses</span><span class=\"o\">:</span> <span class=\"n\">liskin</span><span class=\"bp\">/</span><span class=\"n\">gh</span><span class=\"bp\">-</span><span class=\"n\">problem</span><span class=\"bp\">-</span><span class=\"n\">matcher</span><span class=\"bp\">-</span><span class=\"n\">wrap</span><span class=\"bp\">@</span><span class=\"n\">v3</span>\n        <span class=\"k\">with</span><span class=\"o\">:</span>\n          <span class=\"n\">linters</span><span class=\"o\">:</span> <span class=\"n\">gcc</span>\n          <span class=\"n\">run</span><span class=\"o\">:</span> <span class=\"bp\">|</span>\n            <span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">pipefail</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">            make -k -j 8 test\"</span>\n</code></pre></div>\n<p>This implicitly puts a constraint on how <code>make test</code> is meant to work, i.e. it should produce errors formatted in way that the <code>gcc</code> linter in <code>gh-problem-matcher-wrap</code> can understand.</p>\n<p>Does it currently do this?</p>\n<p>If so, can someone who understands it document it lightly? Which code is responsible for producing the correctly formatting errors? There needs to be a reference at that point to this problem matcher, so we know what not to break!</p>\n<p>If not, can we remove this?</p>",
        "id": 438912019,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715822758
    },
    {
        "content": "<p>Lean itself used to produce gcc-style errors, but no longer does</p>",
        "id": 438917688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715826702
    },
    {
        "content": "<p>Okay, let's proceed with removing the wrapper then.</p>",
        "id": 438917830,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715826773
    },
    {
        "content": "<p>Either we:</p>\n<ul>\n<li>write a custom problem matcher and get single-line diagnostics again (this is fairly easy, it's a config file with some regex)</li>\n<li>implement Lean 3's <code>--json</code> and restore the Python wrapper script</li>\n<li>Have Lean directly output GitHub annotations in the format the old Python script did</li>\n</ul>",
        "id": 438917922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715826831
    },
    {
        "content": "<p>There have been two or three other threads lamenting how error messages no longer appear on GitHub in 4.8.0, though pretending Lean was gcc was obviously a hack</p>",
        "id": 438918335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827064
    },
    {
        "content": "<p>I mean, these are all great things to try. But removing the non-functioning wrapper is the first step. :-)</p>",
        "id": 438918430,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827106
    },
    {
        "content": "<p>My first bullet would leave the wrapper in place</p>",
        "id": 438918460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827143
    },
    {
        "content": "<p>And replace the word <code>gcc</code></p>",
        "id": 438918551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827163
    },
    {
        "content": "<p>It's non-functioning code, that prevents people modifying the setup (I'm switching out to <code>lake test</code>).</p>",
        "id": 438918566,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827173
    },
    {
        "content": "<p>If someone wants to write the custom problem matcher, that's great. But it can't block other work, and leave the CI files in a broken and undocumented state.</p>",
        "id": 438918632,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827204
    },
    {
        "content": "<p>I'll create the issue for you. :-)</p>",
        "id": 438918689,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827233
    },
    {
        "content": "<p>Does <code>lake test</code> break the wrapper? I thought the wrapper just prints a magic line before and after its contents, and GitHub did the rest?</p>",
        "id": 438918824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827264
    },
    {
        "content": "<p>Nothing could break the wrapper. It is already broken.</p>",
        "id": 438918870,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827285
    },
    {
        "content": "<p>Being a no-op is not the same as crashing!</p>",
        "id": 438918951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827322
    },
    {
        "content": "<p>My point is that it is dead code, sitting in the CI file, that has now wasted 20 minutes of my time worrying about whether I need to preserve its behaviour.</p>",
        "id": 438919022,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827344
    },
    {
        "content": "<p>Being a confusing undocumented noop is not the same as crashing, but is still worse than not existing. And much worse than not existing and there being an issue about future work.</p>",
        "id": 438919072,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827380
    },
    {
        "content": "<p>Here's one such other thread: </p>\n<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Annotating.20build.20errors.20is.20broken/near/438740820\">said</a>:</p>\n<blockquote>\n<p>There used to be a workflow that would annote build errors or warnings in the \"files changed\" tab on github: this was extremely helpful. My WIP PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12879\">#12879</a> did not have these. (It builds now, so is not suitable for testing. I can restore an old non-building state if this would help.)<br>\nWas this on purpose?</p>\n</blockquote>",
        "id": 438919166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827426
    },
    {
        "content": "<p>I'll make sure to link to that in the issue. :-)</p>",
        "id": 438919291,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827454
    },
    {
        "content": "<p>I don't really agree with \"the Lean 4.8.0 release broke some downstream code, let's delete it instead of fixing that code\"</p>",
        "id": 438919404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827505
    },
    {
        "content": "<p>Though maybe an issue is a sufficient replacement</p>",
        "id": 438919690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715827594
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12946\">#12946</a> is the issue, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12945\">#12945</a> the PR</p>",
        "id": 438920200,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715827832
    },
    {
        "content": "<p>Are you sure it's a no-op for shake and the linter?</p>",
        "id": 438920561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828090
    },
    {
        "content": "<p>Indeed, I've restored the problem matcher for <code>shake</code>, on the assumption that its <code>gh-style</code> flag is compatible with the gcc matcher.</p>",
        "id": 438920804,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715828281
    },
    {
        "content": "<p>Do we know if it used to work for the linter?</p>",
        "id": 438920878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715828298
    },
    {
        "content": "<p>I think it did</p>",
        "id": 438921044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828405
    },
    {
        "content": "<p>It's possible that gh-style makes the matcher moot</p>",
        "id": 438921116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828432
    },
    {
        "content": "<p>Probably best to introduce a lint error and a shake error in the PR, and see if either are reported?</p>",
        "id": 438921142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828460
    },
    {
        "content": "<p>The doc-string in Shake says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/-- `--gh-style`: output messages that can be parsed by `gh-problem-matcher-wrap` -/</span>\n</code></pre></div>",
        "id": 438921171,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715828484
    },
    {
        "content": "<p>I can't see anything in runLinter that pays attention to the output format re: github</p>",
        "id": 438921201,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715828509
    },
    {
        "content": "<p>I'm surprised we don't directly output the GitHub annotation format</p>",
        "id": 438921274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828532
    },
    {
        "content": "<p>(as described at <a href=\"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-warning-message\">https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-warning-message</a>)</p>",
        "id": 438921390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828630
    },
    {
        "content": "<p>I just pushed a linter failure to the PR, we'll see where it ends up displayed.</p>",
        "id": 438921506,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715828697
    },
    {
        "content": "<p>Wait a minute, I definitely disagree with deleting this code. 4.8.0-rc1 broke vscode links and also gh-problem-matcher-wrap links, and the correct fix is to make the error reports match the previous format or otherwise be one of the supported formats, not to delete the very useful code that was relying on this behavior that is now broken</p>",
        "id": 439046038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715872982
    },
    {
        "content": "<p>I mentioned this issue on the same day 4.8.0-rc1 came out, but Mac's argument was that <code>file:line:col-line:col</code> is more information than the previous (and widely recognized) <code>file:line:col</code> format. I checked some other languages and most of them don't give the end position; rust gives this information in pictorial format by highlighting the whole span together with the code but the numerical line:col is just the starting position. I think it's not really needed since if you click on the link it takes you to the full highlight anyway. The broken links are a much bigger negative for me.</p>",
        "id": 439046971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715873277
    },
    {
        "content": "<p>Re: \"we shouldn't pretend lean is gcc\", I read it a bit differently. We are saying that lean produces gcc-style line/col links, which is one among several predefined options (namely <code>file:line:col</code>, by comparison to <code>&lt;file&gt;, line &lt;line&gt;, column &lt;col&gt;</code> aka \"python style\", and there are some others). There is no need for us to be inventing our own format for line/col links, this requires implementing this support in various places and seems kind of similar to trying to implement a custom unicode extension or custom syntax highlighting in terms of needing to get a bunch of unrelated entities to play along with our random choices.</p>",
        "id": 439048088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715873561
    },
    {
        "content": "<p>Okay --- very happy to close my PR, but will someone else please make a PR that adds comments at the invocations of the matcher which are not working, stating this? This does not need to wait on a solution.</p>",
        "id": 439115052,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715899844
    }
]