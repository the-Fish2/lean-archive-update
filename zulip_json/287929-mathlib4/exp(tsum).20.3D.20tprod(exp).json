[
    {
        "content": "<p>What would be the right generality for the following statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Exp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">HasSum.cexp</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasProd</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Filter.Tendsto.congr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">exp_sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Filter.Tendsto.cexp</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>(It's a one-line proof, but I think it would make sense to have it as an explicit statement.)</p>",
        "id": 436891747,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714745353
    },
    {
        "content": "<p>LGTM</p>",
        "id": 436892783,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714745668
    },
    {
        "content": "<p>Bonus points if you can add it for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedSpace.exp#doc\">docs#NormedSpace.exp</a> too</p>",
        "id": 436900445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714747930
    },
    {
        "content": "<p>What can I do with these bonus points? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436900524,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714747961
    },
    {
        "content": "<p>spend them when you apply this lemma later on in more generality than <code>ℂ</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436901523,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714748282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">RCLike</span> <span class=\"bp\">𝕂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Filter.Tendsto.NormedSpace_exp</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">NormedSpace.exp</span> <span class=\"bp\">𝕂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">NormedSpace.exp</span> <span class=\"bp\">𝕂</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">NormedSpace.exp_continuous.tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">variable</span>  <span class=\"o\">[</span><span class=\"n\">NormedCommRing</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">HasSum.NormedSpace_exp</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasProd</span> <span class=\"o\">(</span><span class=\"n\">NormedSpace.exp</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NormedSpace.exp</span> <span class=\"bp\">𝕂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Tendsto.congr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">NormedSpace.exp_sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Tendsto.NormedSpace_exp</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">HasSum.rexp</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasProd</span> <span class=\"o\">(</span><span class=\"n\">rexp</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rexp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">exp_eq_exp_ℝ</span> <span class=\"bp\">▸</span> <span class=\"n\">h.NormedSpace_exp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">HasSum.cexp</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasProd</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">exp_eq_exp_ℂ</span> <span class=\"bp\">▸</span> <span class=\"n\">h.NormedSpace_exp</span>\n</code></pre></div>",
        "id": 436907915,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714750129
    },
    {
        "content": "<p>I'll make a PR after the snooker session...</p>",
        "id": 436908223,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714750220
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12635\">#12635</a></p>",
        "id": 436933392,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714759312
    },
    {
        "content": "<p>... and before the next one starts <span aria-label=\"billiards\" class=\"emoji emoji-1f3b1\" role=\"img\" title=\"billiards\">:billiards:</span></p>",
        "id": 436933493,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714759333
    }
]