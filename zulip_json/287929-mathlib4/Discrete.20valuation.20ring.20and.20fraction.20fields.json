[
    {
        "content": "<p>If my setup is the following: I have a DVR <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and its fraction field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and for convenience I want to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> as a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>. What is the canonical lean setup? I think it could either be</p>\n<ul>\n<li>1:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsFractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with valuation <code>ValuationRing.valuation R K</code>.</p>\n<ul>\n<li>2:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ValuationSubring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with valuation <code>ValuationSubring.valuation</code>. This setup comes with more api, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ValuationSubring.valuation_eq_one_iff#doc\">docs#ValuationSubring.valuation_eq_one_iff</a> exists.</p>\n<ul>\n<li>3:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span><span class=\"w\"> </span><span class=\"n\">Γ</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Valuation</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">Γ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">valuationSubring</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In this setup <code>R</code> is <code>v.valuationSubring</code>.</p>\n<ul>\n<li>Of course one could also imagine a more flexible and unbundled approach:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span><span class=\"w\"> </span><span class=\"n\">Γ</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Valuation</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">Γ</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>plus some compatibility condition on <code>v</code> and <code>R</code>. Probably</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsValuationSubring</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>And of course I can only have <code>Algebra R K</code> instead of having <code>R</code> as a <code>Subring</code>, but this seems to be annoying.</p>",
        "id": 443961693,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718099864
    },
    {
        "content": "<p>What do you plan to do? I think we prefer <code>Algebra R K</code> unless absolutely necessary.</p>",
        "id": 443962487,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718100138
    },
    {
        "content": "<p>I am for example working with matrices in <code>K</code> which sometimes (or only partly) have coefficients in <code>R</code>. Here stating everything in terms of the image of <code>algebraMap R K</code> gets annoying, but maybe one can get around it by working with the <code>v x ≤ 1</code> condition instead.</p>",
        "id": 443962994,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718100310
    },
    {
        "content": "<p>With the <code>Algebra R K</code> approach, we would probably need something like <code>IsValuationAlgebra R K</code> similar to <code>IsValuationSubring</code> above.</p>",
        "id": 443963455,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718100454
    },
    {
        "content": "<p>Isn't <code>IsValuationAlgebra R K &lt;-&gt; IsFractionRing R K and ValuationRing R</code>? Do we need a separate class?</p>",
        "id": 443963811,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718100564
    },
    {
        "content": "<p>Or there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Valuation.Integers#doc\">docs#Valuation.Integers</a></p>",
        "id": 443964330,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718100731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Discrete.20valuation.20ring.20and.20fraction.20fields/near/443964330\">said</a>:</p>\n<blockquote>\n<p>Or there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Valuation.Integers#doc\">docs#Valuation.Integers</a></p>\n</blockquote>\n<p>Ah that is essentially what I had in mind with <code>IsValuationAlgebra R K</code>.</p>",
        "id": 443964603,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718100842
    },
    {
        "content": "<p>I am afraid though that all of this <code>algebraMap R K</code> business complicates things unneccesarily? Although, since the trend seems to be to promote sub-things to types, maybe we are forced on the <code>Algebra R K</code> route anyway?</p>",
        "id": 443965500,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718101167
    },
    {
        "content": "<p>I think that much depends if you're rather focusing on <code>K</code> and you want to build up <code>R</code> out of it, or on <code>R</code> and want sometimes to look at its fraction field. In our <a href=\"https://ujm.hal.science/ujm-04222610v2/file/CPP_paper_v2.pdf\">paper</a> with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  we opt for something in between 2 and 3</p>",
        "id": 443981071,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718106441
    },
    {
        "content": "<p>Point 1 has all the disadvantages of working with subrings, and no access to the valuation subring API.</p>",
        "id": 443981145,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718106470
    },
    {
        "content": "<p>For 3, you might want to benefit from our work (the PR's are in progress) where we define a <code>Prop</code>-valued <code>IsDiscrete</code> for a valuation, and we prove that under this assumption on the valuation, <code>[DiscreteValuationRing v.valuationSubring]</code> is automatic.</p>",
        "id": 443981362,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718106551
    },
    {
        "content": "<p>The repository is available <a href=\"https://github.com/mariainesdff/LocalClassFieldTheory\">here</a>.</p>",
        "id": 443981446,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718106586
    },
    {
        "content": "<p>Thank you for the comments. <br>\n<span class=\"user-mention\" data-user-id=\"648495\">@Christian Merten</span> and I are working on formalizing the Bruhat-Tits tree, so I guess we are starting with <code>K</code>. But it is the interplay between <code>R</code> and <code>K</code> that makes the story interesting.</p>",
        "id": 443984386,
        "sender_full_name": "Judith Ludwig",
        "timestamp": 1718107532
    },
    {
        "content": "<p>Yes, as usual <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> At any rate, feel free to reach out to us so the we can align all design choices.</p>",
        "id": 443984621,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718107592
    },
    {
        "content": "<p>At any rate, I would urge you to take into account the class <code>IsDiscrete</code> for a valuation:<br>\n<a href=\"https://github.com/mariainesdff/LocalClassFieldTheory/blob/8258a25fa8c4b31bf85e49f04e6cb1a37f2f6547/LocalClassFieldTheory/DiscreteValuationRing/Basic.lean#L131\">https://github.com/mariainesdff/LocalClassFieldTheory/blob/8258a25fa8c4b31bf85e49f04e6cb1a37f2f6547/LocalClassFieldTheory/DiscreteValuationRing/Basic.lean#L131</a><br>\n(which  is nothing more than asking that the valuation is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-valued and is surjective), because most of the algebraic properties then follow from it.</p>",
        "id": 443985435,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718107838
    },
    {
        "content": "<p>\"follow\" in the sense that they have been formalized...</p>",
        "id": 443985490,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718107859
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ValuationSubring#doc\">docs#ValuationSubring</a> but that’s mostly useful if you want to consider multiple valuations on the same field.</p>",
        "id": 443995108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718111148
    },
    {
        "content": "<p>True, although we've used a good deal of your work on that file in our project to show that two valuations actually coincide <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 443995429,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718111245
    },
    {
        "content": "<p>Concerning the original question (now that I read all of Christian's various options) I think going with either a valuation <code>v</code> (probably via the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Valued#doc\">docs#Valued</a> class) or with a valuation subring would be the smoothest.</p>",
        "id": 444019688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718116898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Discrete.20valuation.20ring.20and.20fraction.20fields/near/444019688\">said</a>:</p>\n<blockquote>\n<p>Concerning the original question (now that I read all of Christian's various options) I think going with either a valuation <code>v</code> (probably via the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Valued#doc\">docs#Valued</a> class) or with a valuation subring would be the smoothest.</p>\n</blockquote>\n<p>So you are saying that going the <code>Subring</code> route is okay?</p>",
        "id": 444024666,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718118237
    },
    {
        "content": "<p>Well, <code>ValuationSubring</code> extends <code>Subring</code>, and has a reacher API, so I do not really see the advantage of forgetting this.</p>",
        "id": 444025068,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Discrete.20valuation.20ring.20and.20fraction.20fields/near/444025068\">said</a>:</p>\n<blockquote>\n<p>Well, <code>ValuationSubring</code> extends <code>Subring</code>, and has a reacher API, so I do not really see the advantage of forgetting this.</p>\n</blockquote>\n<p>Yes yes, sorry for being unclear. By going the <code>Subring</code> route I meant not working in the general <code>Algebra R K</code> setup.</p>",
        "id": 444025776,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718118548
    },
    {
        "content": "<p>Ah, I see. The main difference is that if you \"start\" with <code>R</code>, the way you produce elements in <code>K</code> is via the <code>Algebra R K</code> setup (that can sometimes be quite smooth, but it is always under the rug in one way or another). If you plan to start with <code>K</code>, then working with <code>ValuationSubring</code> (or <code>Subring</code>) is perfectly fine. Now, \"starting with <code>R</code>\" vs \"starting with <code>K</code>\" is not very well-defined mathematically, since we normally consider the whole gadget at the same time and move freely back and forth. So it is a bit a matter of realizing whether you expect that your \"primary input\"  is <code>K</code> or <code>R</code>.</p>",
        "id": 444026558,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Discrete.20valuation.20ring.20and.20fraction.20fields/near/443985435\">said</a>:</p>\n<blockquote>\n<p>At any rate, I would urge you to take into account the class <code>IsDiscrete</code> for a valuation:<br>\n<a href=\"https://github.com/mariainesdff/LocalClassFieldTheory/blob/8258a25fa8c4b31bf85e49f04e6cb1a37f2f6547/LocalClassFieldTheory/DiscreteValuationRing/Basic.lean#L131\">https://github.com/mariainesdff/LocalClassFieldTheory/blob/8258a25fa8c4b31bf85e49f04e6cb1a37f2f6547/LocalClassFieldTheory/DiscreteValuationRing/Basic.lean#L131</a><br>\n(which  is nothing more than asking that the valuation is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-valued and is surjective), because most of the algebraic properties then follow from it.</p>\n</blockquote>\n<p>Thanks for the pointer! Is restricting to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-valued valuations necessary? I see that you define a structure <code>Uniformizer</code>, up to now I found working simply with an element <code>ϖ : R</code> with a <code>Irreducible ϖ</code> assumption convenient.</p>",
        "id": 444026583,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718118758
    },
    {
        "content": "<p>Well, the problem is that if you want to start relating the valuation of <code>x</code> to the power of the maximal ideal containing <code>x</code> and the valuation of <code>varpi</code> is not <code>1</code> you're in bad shape.</p>",
        "id": 444026943,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118822
    },
    {
        "content": "<p>We address this in the paper, especially in section 2.3</p>",
        "id": 444027395,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118895
    },
    {
        "content": "<p>We also provide some explanation about our choice of sticking with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mrow><mi>m</mi><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_{m0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 444027566,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Discrete.20valuation.20ring.20and.20fraction.20fields/near/444027395\">said</a>:</p>\n<blockquote>\n<p>We address this in the paper, especially in section 2.3</p>\n</blockquote>\n<p>Thanks, I'll check that.</p>",
        "id": 444027733,
        "sender_full_name": "Christian Merten",
        "timestamp": 1718118948
    },
    {
        "content": "<p>Don't hesitate to ask - and to suggest improvements, of course <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444028058,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1718118994
    }
]