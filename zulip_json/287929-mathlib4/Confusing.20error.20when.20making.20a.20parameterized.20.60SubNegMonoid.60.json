[
    {
        "content": "<p>This was a surprisingly weird error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"sd\">/-- RGBA colors -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Color</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Color.ext_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x.r</span> <span class=\"bp\">=</span> <span class=\"n\">y.r</span> <span class=\"bp\">∧</span> <span class=\"n\">x.g</span> <span class=\"bp\">=</span> <span class=\"n\">y.g</span> <span class=\"bp\">∧</span> <span class=\"n\">x.b</span> <span class=\"bp\">=</span> <span class=\"n\">y.b</span> <span class=\"bp\">∧</span> <span class=\"n\">x.a</span> <span class=\"bp\">=</span> <span class=\"n\">y.a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk.injEq</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Componentwise operations</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">neg</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x.r</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.g</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.b</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.a</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.r</span> <span class=\"bp\">+</span> <span class=\"n\">y.r</span><span class=\"o\">,</span> <span class=\"n\">x.g</span> <span class=\"bp\">+</span> <span class=\"n\">y.g</span><span class=\"o\">,</span> <span class=\"n\">x.b</span> <span class=\"bp\">+</span> <span class=\"n\">y.b</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">+</span> <span class=\"n\">y.a</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.r</span> <span class=\"bp\">-</span> <span class=\"n\">y.r</span><span class=\"o\">,</span> <span class=\"n\">x.g</span> <span class=\"bp\">-</span> <span class=\"n\">y.g</span><span class=\"o\">,</span> <span class=\"n\">x.b</span> <span class=\"bp\">-</span> <span class=\"n\">y.b</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">-</span> <span class=\"n\">y.a</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Definition lemmas (unfortunately duplication here)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_def</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_def</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x.r</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.g</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.b</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x.a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_def</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">x.r</span> <span class=\"bp\">+</span> <span class=\"n\">y.r</span><span class=\"o\">,</span> <span class=\"n\">x.g</span> <span class=\"bp\">+</span> <span class=\"n\">y.g</span><span class=\"o\">,</span> <span class=\"n\">x.b</span> <span class=\"bp\">+</span> <span class=\"n\">y.b</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">+</span> <span class=\"n\">y.a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_def</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">x.r</span> <span class=\"bp\">-</span> <span class=\"n\">y.r</span><span class=\"o\">,</span> <span class=\"n\">x.g</span> <span class=\"bp\">-</span> <span class=\"n\">y.g</span><span class=\"o\">,</span> <span class=\"n\">x.b</span> <span class=\"bp\">-</span> <span class=\"n\">y.b</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">-</span> <span class=\"n\">y.a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Colors form an additive monoid -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Color.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">add_def</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Color.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">add_def</span><span class=\"o\">,</span> <span class=\"n\">zero_def</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Color.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">add_def</span><span class=\"o\">,</span> <span class=\"n\">zero_def</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Colors form a `SubNegMonoid` -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SubNegMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SubNegMonoid</span> <span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- Produces the confusing error</span>\n  <span class=\"c1\">--   type mismatch</span>\n  <span class=\"c1\">--     HEq.rfl</span>\n  <span class=\"c1\">--   has type</span>\n  <span class=\"c1\">--     HEq ?m.7366 ?m.7366 : Prop</span>\n  <span class=\"c1\">--   but is expected to have type</span>\n  <span class=\"c1\">--     a✝ - b✝ = a✝ + -b✝ : Prop</span>\n  <span class=\"c1\">-- Adding the following line fixes it</span>\n  <span class=\"c1\">--   sub_eq_add_neg _ _ := by simp only [Color.ext_iff, add_def, neg_def, sub_def, sub_eq_add_neg]</span>\n</code></pre></div>\n<p>The problem is just that I haven't defined the <code>sub_eq_add_neg</code> part of <code>SubNegMonoid</code> (which is the whole thing, really).  But instead of saying \"you've left out <code>sub_eq_add_neg</code>\", it produces a weird <code>HEq.rfl</code> error.</p>",
        "id": 420345626,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707341238
    },
    {
        "content": "<p>Oh, I see, there's just a default value there since for non-computational things one might not define <code>Sub</code>.  I suppose this is hard to fix then.</p>",
        "id": 420346120,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707341445
    },
    {
        "content": "<p>The error could perhaps be clarified. The reason this happens is that <code>SubNegMonoid </code> has a default definition for <code>Sub</code> (defining <code>a - b := a + (-b)</code>, and a default proof for <code>sub_eq_add_neg</code> (\"it's true by definition\"). But that proof doesn't work when you manually define <code>Sub</code></p>",
        "id": 420346168,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707341465
    },
    {
        "content": "<p>Yeah, if the error could somehow mention <code>sub_eq_add_neg</code> it would be ideal, but that might not be worth the trouble.</p>",
        "id": 420346355,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707341530
    },
    {
        "content": "<p>Oh, I hadn't even noticed that it doesn't mention the field. That seems worth filing as an issue on lean, if it hasn't been filed yet</p>",
        "id": 420346506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707341591
    },
    {
        "content": "<p>Originally I hit the error trying to define <code>AddGroup</code> directly, so it was not at all obvious what was going on.</p>",
        "id": 420346700,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707341646
    },
    {
        "content": "<p>This has been discussed a lot before, but I don't know if an issue was ever filed</p>",
        "id": 420348440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707342370
    },
    {
        "content": "<p>Here is a no-import example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Yop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">yop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Nop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Yop</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">nop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Yop.yop</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Yop</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">yop</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nop</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- `nop` is not defined, but the error message does not mention `nop`:</span>\n  <span class=\"c1\">--   tactic 'rfl' failed, equality lhs</span>\n  <span class=\"c1\">--     Yop.yop x✝</span>\n  <span class=\"c1\">--   is not definitionally equal to rhs</span>\n  <span class=\"c1\">--     x✝</span>\n  <span class=\"c1\">--   α: Type</span>\n  <span class=\"c1\">--   x✝: A</span>\n  <span class=\"c1\">--   ⊢ Yop.yop x✝ = x✝</span>\n</code></pre></div>",
        "id": 420349866,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707342967
    },
    {
        "content": "<p>Is there a tactic to prepend/append to the error message on failure?</p>",
        "id": 420350033,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707343048
    },
    {
        "content": "<p>There should be a core issue asking for more informative errors for default values if there isn’t one already</p>",
        "id": 420350240,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707343135
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/2950\">https://github.com/leanprover/lean4/issues/2950</a></p>",
        "id": 420350335,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707343173
    },
    {
        "content": "<p>Great! I <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>’ed it</p>",
        "id": 420350472,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707343206
    }
]