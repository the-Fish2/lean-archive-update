[
    {
        "content": "<p>In mathlib4, there is currently no <code>ProofTheory</code>, so I am considering adding it (also I want to include the proof of the first incompleteness theorem that I have proved in <a href=\"https://github.com/iehality/lean4-logic\">lean4-logic</a>). However, I'm unsure how to formalize the concept of proof of first-order logic. There are several approaches:</p>\n<ol>\n<li>\n<p>Tait-style Sequent Calculus: This is what I adopted in lean4-logic. Due to its simplicity in rules, theorems like the cut elimination and completeness can be relatively easily proven. However, it is not compatible with the current definition of formula in mathlib.</p>\n</li>\n<li>\n<p>Hilbert-style Proof System : This approach is adopted in flypitch. I think it aligns well with the current <code>ModelTheory</code>, but it cannot formalize crucial results in proof theory, such as cut elimination.</p>\n</li>\n<li>\n<p>Gentzen-style Sequent Calculus: This is a compromise between the previous two, but I am not aware of any projects use this, this formalization would be challenging.</p>\n</li>\n</ol>\n<p>Additionally, there is room for choice in how to prove the completeness theorem. I used proof search on Tait calculus, while flypitch adopts Henkin's proof. Which method should I choose?</p>",
        "id": 424161896,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1709270107
    },
    {
        "content": "<p>In an ideal world, we'd have all of these and have proofs that they all are equivalent. And I don't see a particular reason that one formalism is the right one superseding the rest. So for the purposes of contributing to Mathlib I'm going to argue for starting with whichever makes the current contribution work best, and if it proves hard to do other work in it, prove an explicit equivalence between the forms.</p>",
        "id": 424284767,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709311234
    },
    {
        "content": "<p>Thanks. I would like to start with Tait calculation as a basis and work independently of <code>ModelTheory</code>.</p>",
        "id": 424468303,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1709436338
    },
    {
        "content": "<p>Is this work in progress <span class=\"user-mention\" data-user-id=\"414485\">@Palalansoukî</span> ? I would love to see it and understand it!</p>",
        "id": 447034593,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1719364048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> <br>\nI am not working on the porting right now as I am currently busy formalizing Godel's second incompleteness theorem, but the project itself is proceeding (<a href=\"https://github.com/iehality/lean4-logic\">https://github.com/iehality/lean4-logic</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11142\">#11142</a>), although <a href=\"https://github.com/leanprover-community/mathlib4/pull/11142\">#11142</a> will need to be rewritten as there have been major changes in the fundamentals.</p>",
        "id": 447211490,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1719406280
    },
    {
        "content": "<p>Interesting! Who is the group working on the rewrite? I'd like to understand how it is going and maybe contribute with parts I can</p>",
        "id": 447224224,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1719409976
    },
    {
        "content": "<p>I am developing the overall frameworks and classical propositional logic and first-order logic, and <span class=\"user-mention\" data-user-id=\"543250\">@SnO2WMaN</span>  is developing intuitionistic propositional logic and modal logic in lean4-logic. Also I am working with <span class=\"user-mention\" data-user-id=\"397140\">@Hunter Monroe</span>  on the porting. The rewrite of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11142\">#11142</a> to match the current version has not yet been done.</p>",
        "id": 447227871,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1719411109
    },
    {
        "content": "<p>When you say rewrite, do you mean you're integrating lean4-logic into mathlib4?</p>",
        "id": 447241283,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1719414944
    },
    {
        "content": "<p>Yes. Porting here refers to porting lean4-logic into mathlib.</p>",
        "id": 447248728,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1719416266
    },
    {
        "content": "<p>Oh I see. Is the current <code>master</code> of <a href=\"https://github.com/iehality/lean4-logic/tree/master\">lean4-logic</a> stable? I just imported the package <code>import Logic.Propositional.Classical.Basic</code> and I'm getting the error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>`/home/bernborgess/.elan/toolchains/leanprover--lean4---v4.7.0/bin/lake setup-file /mnt/DATA/ic/lean-learn/TacticExample/FirstOrderLogic/Completude.lean Init Mathlib.Init.Set Logic.Propositional.Classical.Basic` failed:\n\nstderr:\ninfo: [777/791] Building Logic.Vorspiel.Vorspiel\nerror: &gt; LEAN_PATH=./.lake/packages/std/.lake/build/lib:./.lake/packages/Qq/.lake/build/lib:./.lake/packages/aesop/.lake/build/lib:./.lake/packages/proofwidgets/.lake/build/lib:./.lake/packages/Cli/.lake/build/lib:./.lake/packages/importGraph/.lake/build/lib:./.lake/packages/mathlib/.lake/build/lib:./.lake/packages/Paperproof/lean/.lake/build/lib:./.lake/packages/logic/.lake/build/lib:./.lake/build/lib LD_LIBRARY_PATH=./.lake/packages/std/.lake/build/lib:./.lake/packages/Qq/.lake/build/lib:./.lake/packages/aesop/.lake/build/lib:./.lake/packages/proofwidgets/.lake/build/lib:./.lake/packages/Cli/.lake/build/lib:./.lake/packages/importGraph/.lake/build/lib:./.lake/packages/mathlib/.lake/build/lib:./.lake/packages/Paperproof/lean/.lake/build/lib:./.lake/packages/logic/.lake/build/lib:./.lake/build/lib:/home/bernborgess/.elan/toolchains/leanprover--lean4---v4.7.0/lib/lean:/home/bernborgess/.elan/toolchains/leanprover--lean4---v4.7.0/lib:./.lake/packages/logic/.lake/build/lib /home/bernborgess/.elan/toolchains/leanprover--lean4---v4.7.0/bin/lean ./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean -R ./.lake/packages/logic/./. -o ./.lake/packages/logic/.lake/build/lib/Logic/Vorspiel/Vorspiel.olean -i ./.lake/packages/logic/.lake/build/lib/Logic/Vorspiel/Vorspiel.ilean -c ./.lake/packages/logic/.lake/build/ir/Logic/Vorspiel/Vorspiel.c\nerror: stdout:\n![1, 2] : Fin (Nat.succ (Nat.succ 0)) → ℕ\n\"a, b, c, d\"\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:789:73: error: application type mismatch\n  Subset.trans subset_union_left\nargument\n  subset_union_left\nhas type\n  ∀ (s t : Set ?m.412647), s ⊆ s ∪ t : Prop\nbut is expected to have type\n  s₁ ⊆ ?m.412635 : Prop\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:791:73: error: application type mismatch\n  Subset.trans subset_union_right\nargument\n  subset_union_right\nhas type\n  ∀ (s t : Set ?m.413174), t ⊆ s ∪ t : Prop\nbut is expected to have type\n  s₂ ⊆ ?m.413162 : Prop\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:798:4: error: application type mismatch\n  Subset.trans subset_union_left\nargument\n  subset_union_left\nhas type\n  ∀ (s t : Set ?m.413877), s ⊆ s ∪ t : Prop\nbut is expected to have type\n  s₁ ⊆ ?m.413865 : Prop\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:799:23: error: application type mismatch\n  Subset.trans subset_union_left\nargument\n  subset_union_left\nhas type\n  ∀ (s t : Set ?m.414102), s ⊆ s ∪ t : Prop\nbut is expected to have type\n  ?m.414096 ⊆ ?m.414097 : Prop\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:804:4: error: application type mismatch\n  Subset.trans subset_union_right\nargument\n  subset_union_right\nhas type\n  ∀ (s t : Set ?m.414628), t ⊆ s ∪ t : Prop\nbut is expected to have type\n  s₂ ⊆ ?m.414616 : Prop\n./.lake/packages/logic/././Logic/Vorspiel/Vorspiel.lean:805:23: error: application type mismatch\n  Subset.trans subset_union_left\nargument\n  subset_union_left\nhas type\n  ∀ (s t : Set ?m.414853), s ⊆ s ∪ t : Prop\nbut is expected to have type\n  ?m.414847 ⊆ ?m.414848 : Prop\nerror: external command `/home/bernborgess/.elan/toolchains/leanprover--lean4---v4.7.0/bin/lean` exited with code 1\n</code></pre></div>\n<p>I'm guessing <code>Vorspiel</code> isn't stable right?</p>",
        "id": 447366515,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1719450748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60ProofTheory.60.20in.20mathlib4/near/447366515\">said</a>:</p>\n<blockquote>\n<p><code>:</code></p>\n</blockquote>\n<p>I assume that your lean version is on <code>v4.7.0</code> but lean4-logic is currently based on <code>v4.9.0-rc2</code> (<a href=\"https://github.com/iehality/lean4-logic/blob/master/lean-toolchain\">https://github.com/iehality/lean4-logic/blob/master/lean-toolchain</a>). </p>\n<p>The build is working fine is on CI, at least.<br>\n<a href=\"https://github.com/iehality/lean4-logic/actions?query=branch%3Amaster\">https://github.com/iehality/lean4-logic/actions?query=branch%3Amaster</a></p>",
        "id": 447368331,
        "sender_full_name": "SnO2WMaN",
        "timestamp": 1719452121
    }
]