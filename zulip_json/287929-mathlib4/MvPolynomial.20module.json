[
    {
        "content": "<p>There's a type <code>PolynomialModule R M</code>, defined as a type synonym for finitely supported functions instead of a newtype like <code>Polynomial M</code>. I'm not sure why we have separate versions of this but I guess it makes inference better? Anyways, is there a multivariate version of this? If there isn't I would like to add it, and I think I need a better understanding of why there's two types here in the first place</p>",
        "id": 438847443,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715792091
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think you've thought about design (issues) of this part of the library a lot...</p>",
        "id": 438852352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715793756
    },
    {
        "content": "<p>If <code>M = R[X]</code> you get two non-defeq actions of <code>R[X]</code> on <code>Polynomial M</code>.  This is briefly explained in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PolynomialModule#doc\">docs#PolynomialModule</a> .</p>",
        "id": 438854262,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1715794427
    },
    {
        "content": "<p>Ah sure this makes sense. But it still seems strange to use a type synonym for finsupp instead of the existing type of polynomials, imo</p>",
        "id": 438856132,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715795116
    },
    {
        "content": "<p>I would assume this causes some code duplication</p>",
        "id": 438856182,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715795136
    },
    {
        "content": "<p><code>Polynomial M</code> isn't legal when <code>M</code> isn't a ring</p>",
        "id": 438856808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715795386
    },
    {
        "content": "<p>I mean, that also seems a little questionable? Eg for ordinal notation you might want to talk about polynomials with ordinal coefficients, which don't form a ring</p>",
        "id": 438860300,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715796664
    },
    {
        "content": "<p>For right now I'm just going to define <code>MvPolynomialModule</code> mimicking <code>PolynomialModule</code> as closely as possible</p>",
        "id": 438860358,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715796694
    },
    {
        "content": "<p>I think the mental model is that <code>Polynomial</code> is <code>Finsupp</code> with pointwise <code>*</code> replaced by convolutional <code>*</code>, and if you don't have a ring then you don't have that <code>*</code>.</p>",
        "id": 438861053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715796962
    },
    {
        "content": "<p>No but you have a convolution from the sale Finsupp of anything that acts on M.</p>",
        "id": 438864721,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715798483
    },
    {
        "content": "<p>The problem is that <code>SMul</code> only works for <code>SMul X Y -&gt; SMul X (F Y)</code>, but what you're asking for needs <code>SMul X Y -&gt; Smul (F X) (F Y)</code>, and you can't have both without diamonds</p>",
        "id": 438867435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715799474
    },
    {
        "content": "<p>I created a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13573\">#13573</a> to add <code>MvPolynomialModule</code></p>",
        "id": 443187327,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717721729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> did you also have something like <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> , or was it <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> ?</p>",
        "id": 443218900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717740835
    },
    {
        "content": "<p>I contributed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HahnModule#doc\">docs#HahnModule</a> given as a type alias for <code>HahnSeries</code> (with a lot of help from Eric).  Instead of convolutional <code>*</code>, we have convolutional SMul.</p>",
        "id": 443226060,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1717744121
    },
    {
        "content": "<p>What <a href=\"https://github.com/leanprover-community/mathlib4/pull/13573\">#13573</a> does is not the analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HahnModule#doc\">docs#HahnModule</a>, nor the type of finsupp function from index type <code>I</code>to a given module <code>M</code> (which would be a <code>Module (MvPolynomial I A)</code> under <code>Module A M</code>, but the structure of module over a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs#MvPolynomial</a> ring that a module possesses when the variables are mapped to elements of the ring that acts on the module.</p>",
        "id": 443331051,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1717778606
    },
    {
        "content": "<p>Should it have a more descriptive name? I didn't think there would be any confusion over the module structure. To me this is what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[x_1, \\ldots, x_n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> means</p>",
        "id": 443333468,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717779458
    },
    {
        "content": "<p>I don't want to be prescriptive, but the ambiguity with the existing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HahnModule#doc\">docs#HahnModule</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PolynomialModule#doc\">docs#PolynomialModule</a> would suggest finding another name. <br>\nIn your case, I know that there is a similar definition for polynomial in one indeterminate (but I can't find it, surely <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> will tell us which one it is), and their names and API should be aligned.</p>\n<p>By the way, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs#MvPolynomial</a> is an instance of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidAlgebra#doc\">docs#MonoidAlgebra</a> and I believe that everything that is done for #MvPolynomial should be inherited from similar constructions at the level of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidAlgebra#doc\">docs#MonoidAlgebra</a>.</p>",
        "id": 443445682,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1717838639
    },
    {
        "content": "<p>The similar definition in one indeterminate is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PolynomialModule#doc\">docs#PolynomialModule</a>, no? I mean I wrote the file largely by copy and pasting from PolynomialModule and then changing as appropriate</p>",
        "id": 443498333,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717866301
    },
    {
        "content": "<p><del>As is we can't use <code>MonoidAlgebra</code> because it has a typeclass parameter <code>[Semiring k]</code>. I'm not sure how much we can inherit from this in principle (even if we change the parameter) vs inheriting from <code>Finsupp</code>, because of the instance clashing</del> nevermind, you were talking about <code>MvPolynomial</code> not <code>MvPolynomialModule</code></p>",
        "id": 443498820,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717866466
    }
]