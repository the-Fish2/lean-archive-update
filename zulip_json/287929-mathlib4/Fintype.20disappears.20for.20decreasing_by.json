[
    {
        "content": "<p>In the code below, I just need to prove termination (the sorry's in the body are for brevity). I don't really understand why I don't have <code>[Fintype α]</code> there, while I do have <code>[PartialOrder α]</code>.  Can I get that in some way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Card</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">chainInFintypeHasMax</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hnc</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hic</span> <span class=\"o\">:</span> <span class=\"n\">IsChain</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">hc</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">g</span> <span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hnc</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">hcemp</span> <span class=\"bp\">|</span> <span class=\"n\">hcnemp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">cGch</span> <span class=\"o\">:</span> <span class=\"n\">IsChain</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">haveI</span> <span class=\"n\">instNonEmp</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">Set.Nonempty.to_subtype</span> <span class=\"n\">hcnemp</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">m</span> <span class=\"o\">,</span> <span class=\"n\">hm</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">chainInFintypeHasMax</span> <span class=\"n\">cGch</span>\n      <span class=\"gr\">sorry</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">c.ncard</span>\n<span class=\"n\">decreasing_by</span>\n<span class=\"bp\">·</span> <span class=\"n\">simp_wf</span>\n  <span class=\"c1\">-- Where did Fintype α go?</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">setFintype</span> <span class=\"n\">c</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.ncard_eq_toFinset_card</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429091156,
        "sender_full_name": "Pim Otte",
        "timestamp": 1711208758
    },
    {
        "content": "<p>I ended up resolving this by defining a version with Finset and doing the recursion there, if someone knows I'm still interested in what is going on here</p>",
        "id": 429204196,
        "sender_full_name": "Pim Otte",
        "timestamp": 1711287476
    },
    {
        "content": "<p>It looks like the issue is that the <code>Fintype</code> instance is used nowhere in the definition, and it's being cleared. (<span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Do you know if the termination argument intentionally clears unused arguments?)</p>\n<p>One workaround is to add <code>have := ‹Fintype α›</code> somewhere inside, but that's not great.</p>",
        "id": 429237431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711307106
    },
    {
        "content": "<p>There is a call to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.cleanup#doc\">docs#Lean.MVarId.cleanup</a> in <code>WF.Fix.lean</code>, but I would have expected that to keep the<code>Fintype</code> assumption (if it is still around by that time)</p>",
        "id": 429241197,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711309867
    }
]