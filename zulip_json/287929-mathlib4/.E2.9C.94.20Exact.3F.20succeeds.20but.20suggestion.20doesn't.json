[
    {
        "content": "<p>i have an example where <code>exact?</code> succeeds (or at least doesn't introduce any uses of sorryAx), but the suggestion fails because of a failure to synthesise...<br>\nis this supposed to happen, or is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SemilinearAut</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">:</span><span class=\"n\">RingAut</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span>\n      <span class=\"n\">letI</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">RingHomInvPair.of_ringEquiv</span> <span class=\"n\">σ</span><span class=\"bp\">;</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">inst.symm</span><span class=\"bp\">;</span>\n      <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SemilinearAut.mk</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i1</span><span class=\"o\">:</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ</span> <span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i2</span><span class=\"o\">:</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ'</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">SemilinearAut</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">RingEquiv.ofHomInv</span>\n    <span class=\"n\">σ</span>\n    <span class=\"n\">σ'</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c\">/-</span><span class=\"cm\"> says exact RingHomInvPair.comp_eq -/</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance RingHomInvPair ↑σ ↑σ'</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c\">/-</span><span class=\"cm\"> says exact RingHomInvPair.comp_eq -/</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance RingHomInvPair ↑σ' ↑σ</span>\n  <span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">SemilinearAut.mk</span> <span class=\"c1\">-- 'SemilinearAut.mk' depends on axioms: [propext, Quot.sound]</span>\n</code></pre></div>",
        "id": 430592983,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711978185
    },
    {
        "content": "<p>I have the impression that this is \"expected\", in the sense that it is common for the output of <code>exact?</code> to not actually work \"as is\".</p>\n<p>I also do not think that this is desirable, though!</p>",
        "id": 430608357,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711983987
    },
    {
        "content": "<p>In this specific case, the code below actually works as a replacement of the two <code>by exact?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">RingHomInvPair.comp_eq₂</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">i2</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">RingHomInvPair.comp_eq₂</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">i1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 430608809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711984131
    },
    {
        "content": "<p>Here's a similar discussion, but for <code>apply?</code>: <a href=\"#narrow/stream/113489-new-members/topic/apply.3F.20suggested.20something.20that.20led.20to.20an.20error/near/430067445\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/apply.3F.20suggested.20something.20that.20led.20to.20an.20error/near/430067445</a></p>",
        "id": 430608954,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711984185
    },
    {
        "content": "<p>The short answer is that pretty printing tries to both omit information (like implicit arguments, etc., so that you can actually read it — think about the output of <code>pp.all</code>!) while including enough to be uniquely interpretable, but it does not always succeed in this goal.</p>\n<p>You could try <code>set_option pp.analyze true</code> here, which might be able to realize that it needs to pretty print some arguments using named argument notation.</p>",
        "id": 430609426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711984360
    },
    {
        "content": "<p>ah, i see... thanks!</p>",
        "id": 430635209,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711993152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 430635213,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711993155
    }
]