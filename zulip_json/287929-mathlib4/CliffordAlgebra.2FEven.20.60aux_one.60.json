[
    {
        "content": "<p>Would <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> or anyone else be able to take a look at <code>Mathlib/LinearAlgebra/CliffordAlgebra/Even.lean</code>, and the theorem <code>aux_one</code>, and help me with the following:</p>\n<p>The written proof is currently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux_one</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">Q</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and <code>#print aux_one</code> shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux_one</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even.lift.fFold</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even.lift.fFold_fFold</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>However filling in the <code>_</code>s using these results doesn't result in an accepted proof: it fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This seems to me like a bad sign. Moreover, it's currently failing on <code>nightly-testing</code>, and as such somewhat undiagnosable, since the terms found by unification aren't even accepted when written explicitly on <code>master</code>.</p>\n<p>I'm not sure how much of a redesign I'm asking for here, but hopefully you'll agree that the current state is not good. I don't object to proofs containing <code>_</code>, but it should be possible to replace them with terms (in particular the terms found by unification!).</p>",
        "id": 435746665,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714215741
    },
    {
        "content": "<p>Does it really print that without the space around the ×?</p>",
        "id": 435747557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216066
    },
    {
        "content": "<p>I would guess the 1 and 0 need explicit type annotations</p>",
        "id": 435747620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216100
    },
    {
        "content": "<p>Maybe a proof that starts by unfolding <code>aux</code> first then using <code>exact</code> with the same term would work</p>",
        "id": 435747661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216149
    },
    {
        "content": "<p>Adding <code>letI : AddCommGroup (S f) := AddSubgroupClass.toAddCommGroup _</code> <del>should</del> might also work (the <code>_</code> is <code>(S f)</code>).</p>",
        "id": 435747901,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714216399
    },
    {
        "content": "<p>As in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">nolint</span> <span class=\"n\">simpNF</span><span class=\"kd\">]</span> <span class=\"c1\">-- Added `nolint simpNF` to avoid a timeout #8386</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">aux_one</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AddSubgroupClass.toAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even.lift.fFold</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even.lift.fFold_fFold</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 435747942,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714216440
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, that's gets us unstuck.</p>",
        "id": 435748059,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216552
    },
    {
        "content": "<p>How many underscores can you restore with that <code>letI</code> in place?</p>",
        "id": 435748111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even.lift.fFold_fFold</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435748114,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216582
    },
    {
        "content": "<p>If you add <code>rw [aux]</code> beforehand can you restore all of them?</p>",
        "id": 435748131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216608
    },
    {
        "content": "<p>No.</p>",
        "id": 435748161,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216642
    },
    {
        "content": "<p>Weird</p>",
        "id": 435748169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216650
    },
    {
        "content": "<p>Actually, <code>aux_ι</code>, <code>aux_algebraMap</code>, <code>aux_mul</code> all suffer from this problem. I'm going to sorry them out in <code>nightly-testing</code> for now, and hope for now that they get repaired via lean4 fixes addressing other issues... <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, if you are inclined, I'd be happy to have your versions of these, as you did for <code>aux_one</code>!</p>",
        "id": 435748256,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216708
    },
    {
        "content": "<p>(And if anyone wants to send something the <code>master</code> that just smoothes all this out somehow, I'd love that even more. :-)</p>",
        "id": 435748282,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216744
    },
    {
        "content": "<p>Can you share the commit that has this issues so that I can investigate later?</p>",
        "id": 435748295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714216758
    },
    {
        "content": "<p>Current <code>nightly-testing</code>, 7dfbc59f645f661ea947d286693276dfa762802e.</p>",
        "id": 435748314,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714216785
    },
    {
        "content": "<p>Lots of <code>_</code>s seem to be difficult to port between Lean versions, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9111\">#9111</a> I learned/tried to use named arguments and less <code>_</code>s. Don't know if there's a style guide on this.</p>",
        "id": 435748560,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714217013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435748256\">said</a>:</p>\n<blockquote>\n<p>Actually, <code>aux_ι</code>, <code>aux_algebraMap</code>, <code>aux_mul</code> all suffer from this problem. I'm going to sorry them out in <code>nightly-testing</code> for now, and hope for now that they get repaired via lean4 fixes addressing other issues... <span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span>, if you are inclined, I'd be happy to have your versions of these, as you did for <code>aux_one</code>!</p>\n</blockquote>\n<p>Can do. I have DM'ed you with the new text, with which you're welcome to do what you will. (Or I'll commit it, but I don't know where to.)</p>",
        "id": 435749535,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714217854
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, that's very helpful. I'll use this verbatim on <code>nightly-testing</code> now. Would you mind making a PR to <code>master</code> with these changes, and if <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> agrees that they are more robust proofs we can merge it there to reduce the upcoming diff when we try to merge <code>nightly-testing</code>.</p>",
        "id": 435749741,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714218004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12463\">#12463</a>.</p>",
        "id": 435750365,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714218549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, I'm hesistant to make these changes solely because they fix <code>nightly-testing</code>, unless you think they are actually helpful / more robust / more readable. If you really prefer the \"all <code>_</code>s\" proofs, then we'll hold off on this and see if further upcoming <code>lean4</code> changes affect these proofs.</p>",
        "id": 435750483,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714218640
    },
    {
        "content": "<p>I don't care that much, but I'd like to understand why they break first</p>",
        "id": 435750641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714218761
    },
    {
        "content": "<p>Conceptually the proof is just \"aux is defined as the first part of this other thing, and here's a lemma that ought to unify with that other thing'</p>",
        "id": 435750712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714218821
    },
    {
        "content": "<p>Having to repeat everything we wrote in the definition to use the lemma feels a bit clumsy</p>",
        "id": 435750828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714218911
    },
    {
        "content": "<p>Here we're fortunate that the proof argument is already extracted into a lemma, but if the proof were inlined in the def then having to repeat it again would be pretty unacceptable</p>",
        "id": 435751004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714219015
    },
    {
        "content": "<p>Introducing unnecessary repetition would be some kind of a regression.</p>",
        "id": 435751303,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714219207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435748131\">said</a>:</p>\n<blockquote>\n<p>If you add <code>rw [aux]</code> beforehand can you restore all of them?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435748161\">said</a>:</p>\n<blockquote>\n<p>No.</p>\n</blockquote>\n<p>This is the proof I was thinking of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">nolint</span> <span class=\"n\">simpNF</span><span class=\"kd\">]</span> <span class=\"c1\">-- Added `nolint simpNF` to avoid a timeout #8386</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">aux_one</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.fst_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435780687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714242799
    },
    {
        "content": "<p>I don't claim this is necessarily any better than Richard's solution; but maybe it makes clear why I would expect the original proof to \"just work\"</p>",
        "id": 435780711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714242834
    },
    {
        "content": "<p>Weirdly filling in the first argument with <code>Q</code> makes the proof break, even though that's what is used for that argument</p>",
        "id": 435780843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714242961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435780687\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435748131\">said</a>:</p>\n<blockquote>\n<p>If you add <code>rw [aux]</code> beforehand can you restore all of them?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CliffordAlgebra.2FEven.20.60aux_one.60/near/435748161\">said</a>:</p>\n<blockquote>\n<p>No.</p>\n</blockquote>\n<p>This is the proof I was thinking of:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">nolint</span> <span class=\"n\">simpNF</span><span class=\"kd\">]</span> <span class=\"c1\">-- Added `nolint simpNF` to avoid a timeout #8386</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">aux_one</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.fst_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">foldr_one</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can we push this to master? (And similarly the following proofs.) It seems a strict improvement: we're relying on defeq less.</p>",
        "id": 435796515,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714259600
    },
    {
        "content": "<p>I feel like relying on <code>LinearMap.comp</code> being defeq to <code>Function.comp</code> or <code>LinearMap.fst</code> being defeq to <code>Prod.fst</code> shouldn't be something that we ever ought to have to worry about</p>",
        "id": 435796587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714259674
    },
    {
        "content": "<p>I wonder if we ought to have a special category of dsimp lemmas that means \"this is true by definition as part of a bundled API\"</p>",
        "id": 435796609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714259701
    },
    {
        "content": "<p><code>dsimp only [comp_apply, fst_apply, trans_apply, coe_coe]</code> etc can become very noisy and is more prone to breakage when lemmas rename, while <code>dsimp</code> by itself is often worse for performance than just relying on the defeq.</p>",
        "id": 435796732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714259857
    },
    {
        "content": "<p>Just noting that the problems discussed in this thread have now gone away due to change upstream. Thanks everyone for the help.</p>",
        "id": 435844039,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714289386
    },
    {
        "content": "<p>Out of curiosity and some concern, can you help identifying to the breakage/fix? That could be an issue/PR/topic.</p>",
        "id": 435848990,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714294183
    }
]