[
    {
        "content": "<p>docs#<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fintype.html#Equiv.Perm.viaFintypeEmbedding\">Equiv.Perm.viaFintypeEmbedding</a></p>\n<p>This refers to Equiv.Perm.viaSetRange. But I can't... find this. Did it get renamed? What is a good computational way nowadays to lift a permutation? Specifically, I would like to lift permutations from Fin n to Fin n to ones from Nat to Nat.</p>",
        "id": 446841224,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719311401
    },
    {
        "content": "<p>I can't find anything on <a href=\"https://mathlib-changelog.org\">https://mathlib-changelog.org</a> about <code>viaSetRange</code> so apparently it never existed?</p>",
        "id": 446844532,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1719312378
    },
    {
        "content": "<p>Very strange.</p>",
        "id": 446844734,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312445
    },
    {
        "content": "<p>Since I added that docstring, I need to help here!</p>",
        "id": 446845175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719312544
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.extendDomain#doc\">docs#Equiv.Perm.extendDomain</a> help you?</p>",
        "id": 446845257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719312565
    },
    {
        "content": "<p>I think so! I was just alarmed by the computational warning.</p>",
        "id": 446845465,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312624
    },
    {
        "content": "<p>I do note that the docstring of that describes f as a function</p>",
        "id": 446845628,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312680
    },
    {
        "content": "<p>But in fact it seems to be an equivalence...</p>",
        "id": 446845643,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312685
    },
    {
        "content": "<p>Indeed, because of that, \"Set.range f\" is in fact... the whole subtype. So there's also a problem with that docstring.</p>",
        "id": 446845740,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312720
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Basic.html#Equiv.Perm.extendDomain\">extendDomain</a> will have an obvious inverse (on the subtype of equivs which are fixed on the subtype)</p>",
        "id": 446845874,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312750
    },
    {
        "content": "<p>I think this is probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Basic.html#Equiv.Perm.subtypePerm\">Equiv.Perm.subtypePerm</a>, but it isn't described in the same terms.</p>",
        "id": 446845901,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312762
    },
    {
        "content": "<p>The formulation of extendDomain is most useful though - in particular it allows me to easily use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Basic.html#Fin.equivSubtype\">Fin.equivSubtype</a></p>",
        "id": 446845977,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312789
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6959#discussion_r605014486\">https://github.com/leanprover-community/mathlib/pull/6959#discussion_r605014486</a></p>",
        "id": 446845982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719312789
    },
    {
        "content": "<p>That's the origin of extendDomain, and what the docstring should refer to instead iiuc</p>",
        "id": 446846061,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719312813
    },
    {
        "content": "<p>I agree, but extendDomain's docstring also needs fixing.</p>",
        "id": 446846442,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719312928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6959/commits/3647f4f1102b1f089f98bb75a7975f3460839b71\">https://github.com/leanprover-community/mathlib/pull/6959/commits/3647f4f1102b1f089f98bb75a7975f3460839b71</a> here is where I renamed it, forgetting to change the docstring references</p>",
        "id": 446846629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719312980
    },
    {
        "content": "<p>Huh, I would expect the changelog to spot this but I can't make it do so.</p>",
        "id": 446847716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719313305
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.ofLeftInverse%27#doc\">docs#Equiv.ofLeftInverse'</a></p>",
        "id": 446848436,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719313484
    },
    {
        "content": "<p>So the extendDomain docstring needs help in changing the underscores to the right case</p>",
        "id": 446848819,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719313572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Equiv.2EPerm.2EviaSetRange/near/446845901\">said</a>:</p>\n<blockquote>\n<p>I think this is probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Basic.html#Equiv.Perm.subtypePerm\">Equiv.Perm.subtypePerm</a>, but it isn't described in the same terms.</p>\n</blockquote>\n<p>Hmm, no, maybe this doesn't quite work.</p>",
        "id": 446849971,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719313893
    },
    {
        "content": "<p>Right, I see. Here's an awfulhacky special case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">equivNatEquivs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">≃</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))}</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">extendDomain</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">equivSubtype</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Decidable</span><span class=\"bp\">.</span><span class=\"n\">em</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">not_le</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">extendDomain_apply_subtype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">equivSubtype_symm_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">equivSubtype_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">is_lt</span><span class=\"o\">])</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">extendDomain_apply_not_subtype</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">imp_self</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_self</span><span class=\"o\">])</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">equivSubtype</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">permCongr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypePerm</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">left_inv</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">equivSubtype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypePerm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">extendDomain</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypeCongr</span><span class=\"bp\">.</span><span class=\"n\">left_apply_subtype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">permCongr_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_symm_mk</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_mk</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_symm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">implies_true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">permCongr</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">equivCongr</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">right_inv</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">equivSubtype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypePerm</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">extendDomain</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">permCongr_symm_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypeCongr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">permCongr</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">equivCongr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">sumCompl</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">↓</span><span class=\"n\">reduceDite</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Sum</span><span class=\"bp\">.</span><span class=\"n\">map_inl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Sum</span><span class=\"bp\">.</span><span class=\"n\">elim_inl</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">le_of_not_lt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 446851114,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314200
    },
    {
        "content": "<p>Ah, I think I want <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Perm/Basic.html#Equiv.Perm.subtypeEquivSubtypePerm\">Equiv.Perm.subtypeEquivSubtypePerm</a></p>",
        "id": 446851511,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314323
    },
    {
        "content": "<p>It is quite odd that <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Basic.html#Equiv.Perm.extendDomain\">Equiv.Perm.extendDomain</a> works differently - in that the user provides a (f : α' <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Subtype\">Subtype</a> p) that mediates the equivalence.</p>",
        "id": 446851716,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314381
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">equivNatEquivs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">permCongr</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">equivSubtype</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"bp\">.</span><span class=\"n\">subtypeEquivSubtypePerm</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 446852581,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314636
    },
    {
        "content": "<p>Clarification, when you lift, do you want no permutation of things above n, or do you want to permute every kn+l?</p>",
        "id": 446852582,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719314637
    },
    {
        "content": "<p>In fact I don't mind, but <code>(Fin n) ≃ (Fin n)</code> can only be equivalent to one of those, no?</p>",
        "id": 446852716,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314668
    },
    {
        "content": "<p>and I think it's the former.</p>",
        "id": 446852740,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314677
    },
    {
        "content": "<p>Sure, your custom use of permCongr works to give the stronger equiv between Fin perms and perms of Nat fixing above n. extendDomain will give you the un-subtyped Nat perm, that by construction keeps things fixed</p>",
        "id": 446853429,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719314881
    },
    {
        "content": "<p>I would rather work with the modulo, I think - I am actually dealing with functions that only manipulate below a certain bit, and so essentially I will have that the upper bits are unchanged.</p>",
        "id": 446853855,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719314995
    },
    {
        "content": "<p>which feels like it ought to correspond to Fin (2^m) permutations.</p>",
        "id": 446853964,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315015
    },
    {
        "content": "<p>Is this <em>also</em> true?</p>",
        "id": 446854171,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315079
    },
    {
        "content": "<p><code>def equivNatEquivs' : ((Fin n) ≃ (Fin n)) ≃ {e : ℕ ≃ ℕ // (∀ i, e (i % n) = e i)} := sorry</code></p>",
        "id": 446854172,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315080
    },
    {
        "content": "<p>It feels like it ought to be - but I am not sure what the generalisation is, or how it can be constructed.</p>",
        "id": 446854423,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315139
    },
    {
        "content": "<p>Effectively this is constructed not from the <em>injection</em> from Fin n to N, but the <em>surjection</em> from N to Fin n.</p>",
        "id": 446854535,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315170
    },
    {
        "content": "<p>I think from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.prodShear#doc\">docs#Equiv.prodShear</a></p>",
        "id": 446855713,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719315482
    },
    {
        "content": "<p>Hmm maybe not</p>",
        "id": 446856046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719315583
    },
    {
        "content": "<p>Nat \\~- Nat x Fin, use that?</p>",
        "id": 446856185,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719315611
    },
    {
        "content": "<p>Does that have a name?</p>",
        "id": 446856378,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315660
    },
    {
        "content": "<p>I know how to construct your \"periodic\" perm explicitly, not sure how to do it by chaining existing equivs</p>",
        "id": 446856441,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719315675
    },
    {
        "content": "<p>No, I don't think so. There would be a separate one for each base, of course</p>",
        "id": 446856547,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1719315709
    },
    {
        "content": "<p>Ah, indeed.</p>",
        "id": 446856793,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719315772
    }
]