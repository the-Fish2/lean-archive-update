[
    {
        "content": "<p>The proof that root 2 is irrational is <a href=\"https://www.homeschoolmath.net/teaching/proof_square_root_2_irrational.php\">an elementary proof.</a></p>\n<p>Summarised as:<br>\nsqrt(2) = a/b ,  gcd(a,b)=1<br>\n=&gt;a^2/b^2=2<br>\n=&gt;a^2=2b^2<br>\n=&gt;a=2k<br>\n=&gt;2k^2=b^2<br>\n=&gt;b=2l<br>\ncontradicts gcd(2k,2l)=1<br>\nQED</p>\n<p>That is at most 7 lines. I think any math student would be able to follow this proof.</p>\n<p>Yet the Lean proofs I have seen for this are very long. To me this is telling us that we are lacking the syntax to express this in a simpler way even including Mathlib. (Unless I'm mistaken and there is a simpler proof). Of course one could simply add the proof to Mathlib as a single statement but that would be cheating!</p>\n<p>(1). So my questions are, what could be missing in Lean to make it be able to write a proof as short as this?<br>\n(2). Do you think an exercise like <a href=\"https://code.golf/\">Code Golf</a> in which people compete to find the shortest proofs would be a useful or fun thing?</p>",
        "id": 444315500,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718220643
    },
    {
        "content": "<blockquote>\n<p>Yet the Lean proofs I have seen for this are very long.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irrational_sqrt_two#doc\">docs#irrational_sqrt_two</a> is very short:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrational_sqrt_two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span><span class=\"bp\">.</span><span class=\"n\">irrational_sqrt</span>\n</code></pre></div>",
        "id": 444318130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718221472
    },
    {
        "content": "<p>Hmm... That's fair enough. But what about doing the same for sqrt(17) ? </p>\n<p>Also, an aside the <code>√</code> sign doesn't seem to work in the <a href=\"https://live.lean-lang.org/#code=theorem%20irrational_sqrt_two%20%3A%20Irrational%20(%E2%88%9A2)%20%3A%3D%20by%0D%0A%20%20simpa%20using%20Nat.prime_two.irrational_sqrt%0D%0A\">lean 4 web</a>.</p>",
        "id": 444319022,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718221791
    },
    {
        "content": "<p>You need to import mathlib. And doing it for sqrt(17) would be as difficult as showing that 17 is prime which I imagine is possible easily.</p>",
        "id": 444319215,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718221851
    },
    {
        "content": "<p>What about for.... sqrt(24)?</p>\n<p>But really, my point was if the proof as I outlined above could be easily written, rather than we hide the proof inside a library.</p>\n<p>But anyway I can prove sqrt(17) is irrational, the sqrt(24) would be harder:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrtSeventeen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">17</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">seventeenIsPrime</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"bp\">.</span><span class=\"n\">irrational_sqrt</span><span class=\"w\"> </span><span class=\"n\">seventeenIsPrime</span>\n</code></pre></div>\n<p>Not sure if there is away to inline the two seventeenIsPrime so it's only one line?</p>",
        "id": 444319396,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718221919
    },
    {
        "content": "<p>I think there is a missing result here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrational_sqrt_natCast_of_not_isSquare</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">IsSquare</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 444324336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718223581
    },
    {
        "content": "<p>(Oops square free doesn't mean it's a square - sorry for my silly post!)</p>",
        "id": 444324722,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718223693
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irrational_nrt_of_notint_nrt#doc\">docs#irrational_nrt_of_notint_nrt</a> and nearby statements?</p>",
        "id": 444325004,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718223783
    },
    {
        "content": "<p>Unfortunately <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sqrt#doc\">docs#Nat.sqrt</a> is irreducible, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrtSeventeen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">17</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">suffices</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"o\">(</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span>\n<span class=\"w\">  </span><span class=\"n\">decide</span>\n</code></pre></div>\n<p>no longer works</p>",
        "id": 444327035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718224407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, we can fix that by adding <code>@[semireducible]</code>, right?</p>",
        "id": 444327312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718224495
    },
    {
        "content": "<p><code>unseal Nat.sqrt.iter in</code>?</p>",
        "id": 444328329,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718224805
    },
    {
        "content": "<p>Here's my attempt at doing sqrt(6):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrt6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">irrational_nrt_of_notint_nrt</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">g</span>\n</code></pre></div>\n<p>Seems like I've got myself in a circular logic... actually I think I just need to show 2&lt;sqrt(6)&lt;3.</p>",
        "id": 444328725,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718224948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F/near/444328329\">said</a>:</p>\n<blockquote>\n<p><code>unseal Nat.sqrt.iter in</code>?</p>\n</blockquote>\n<p>Doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"n\">unseal</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span><span class=\"bp\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrtSeventeen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"mi\">17</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">suffices</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">√</span><span class=\"o\">(</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span>\n<span class=\"w\">  </span><span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 444331566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718226066
    },
    {
        "content": "<p>Ah I see I can do this which is quite short (though less readable):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrt17</span><span class=\"o\">:</span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">17</span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"bp\">.</span><span class=\"n\">irrational_sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444333086,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718226700
    },
    {
        "content": "<p>No need for <code>by apply</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrationalSqrt17</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"bp\">.</span><span class=\"n\">irrational_sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444339111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718229536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F/near/444327312\">said</a>:</p>\n<blockquote>\n<p>we can fix that by adding <code>@[semireducible]</code>, right?</p>\n</blockquote>\n<p>Wouldn't it be better to change the definition to not use well-founded recursion since it reduces unreliably? That's assuming you want <code>decide</code> to work here. Maybe a <code>simproc</code> or a <code>norm_num</code> extension is a better choice?</p>",
        "id": 444339408,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718229658
    },
    {
        "content": "<p>Yes, I was in the process of describing the norm_num extension when I spotted the <code>decidable</code> instance, and was hopeful it would still work</p>",
        "id": 444344591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718231943
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/13788\">#13788</a> with some results related to <code>IsSquare</code> that might make the API more pleasant around here</p>",
        "id": 444351904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718235936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F/near/444324336\">said</a>:</p>\n<blockquote>\n<p>I think there is a missing result here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">irrational_sqrt_natCast_of_not_isSquare</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">IsSquare</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13867\">#13867</a></p>",
        "id": 444920396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718493627
    },
    {
        "content": "<p>Should these be <code>simp</code>, or is that unhelpful?</p>",
        "id": 444920404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718493644
    },
    {
        "content": "<p>With that you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">unseal</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span><span class=\"bp\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 444920551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718493815
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F\">#lean4 &gt; Why is proof the root 2 is irrational so long?</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 444920614,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718493866
    },
    {
        "content": "<p>Heer is an alternative proof of the irrationality of <code>√6</code> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=irrational_sqrt_of_multiplicity_odd#doc\">docs#irrational_sqrt_of_multiplicity_odd</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">irrational_sqrt_of_multiplicity_odd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">natCast_multiplicity</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- convert to multiplicities over Nat</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">multiplicity</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">prime_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"bp\">.</span><span class=\"n\">multiplicity_self</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">multiplicity</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">multiplicity_eq_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">PartENat</span><span class=\"bp\">.</span><span class=\"n\">get_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mod_succ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Working with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> (which produces a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a>) feels more cumbersome than it should be, however.<br>\nIs there a simpler way of doing this?</p>",
        "id": 444958445,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718529164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F/near/444958445\">said</a>:</p>\n<blockquote>\n<p>Working with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> (which produces a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a>) feels more cumbersome than it should be</p>\n</blockquote>\n<p>I agree. I think we should make <code>multiplicity</code> be <code>Nat</code>-valued, in the spirit of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization#doc\">docs#Nat.factorization</a></p>",
        "id": 444958508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718529233
    },
    {
        "content": "<p>Why do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a> <em>and</em> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENat#doc\">docs#ENat</a> ?</p>",
        "id": 444959725,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718530345
    },
    {
        "content": "<p><code>PartENat</code> was the former <code>ENat</code> and the current <code>ENat</code> was just <code>WithTop Nat</code></p>",
        "id": 444960311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718530880
    },
    {
        "content": "<p>Is there an intrinsic reason for having both? What is the difference and where is it relevant?</p>",
        "id": 444961083,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718531609
    },
    {
        "content": "<p><code>PartENat</code> is useful for computability, but that's about it. I am pretty sure the only reason we have both is an artifact of the refactor I mentioned (changing <code>ENat</code> from <code>Part Nat</code> to <code>WithTop Nat</code>) was never completed.</p>",
        "id": 444961200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718531699
    },
    {
        "content": "<p>In other words \"historical reasons\"</p>",
        "id": 444966165,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718535563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20is.20proof.20the.20root.202.20is.20irrational.20so.20long.3F/near/444920551\">said</a>:</p>\n<blockquote>\n<p>With that you can write</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">unseal</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span><span class=\"bp\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrational</span><span class=\"w\"> </span><span class=\"bp\">√</span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The change that permits this is now on master</p>",
        "id": 445383090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718723178
    }
]