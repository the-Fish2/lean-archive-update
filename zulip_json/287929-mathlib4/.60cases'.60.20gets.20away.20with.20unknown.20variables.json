[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"c1\">-- no linter</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- both of these do have linter:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>With <code>cases'</code>, nothing happens. With <code>obtain/rcases</code>, the unused variables linter flags up. I noticed this whilst making <a href=\"https://github.com/leanprover-community/mathlib4/pull/9171\">#9171</a>; it seems to be because they generate slightly different proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- cases'</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--obtain/rcases</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"n\">Or.casesOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>I wonder if we have some false negatives elsewhere due to these issues</p>",
        "id": 409411016,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703172263
    },
    {
        "content": "<p>I've filed this as a mathlib4 issue at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9228\">#9228</a></p>",
        "id": 409658580,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703290328
    },
    {
        "content": "<p>you didn't mention the original <code>cases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- no linter</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 409658754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703290425
    },
    {
        "content": "<p>this is not a mathlib issue</p>",
        "id": 409658767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703290433
    },
    {
        "content": "<p>upstreamed as <a href=\"https://github.com/leanprover/lean4/pull/3112\">lean4#3112</a>. d'oh</p>",
        "id": 409659732,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703290897
    }
]