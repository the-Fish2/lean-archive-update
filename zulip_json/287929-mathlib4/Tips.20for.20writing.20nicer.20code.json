[
    {
        "content": "<p>I proved <a href=\"https://gist.github.com/grhkm21/affb55091590219e44ccb87757c8f69d\">this</a> thing here. It's just simplifying some asymptotic expressions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mfrac><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><mrow><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>+</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mfrac></msqrt><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msqrt><mfrac><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><mrow><mi>log</mi><mo>⁡</mo><mi>c</mi></mrow></mfrac></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{\\frac{\\log N}{\\log(c + o(1))}} = (1 + o(1)\\sqrt{\\frac{\\log N}{\\log c}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.84em;vertical-align:-0.6489em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1911em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">))</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.1511em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.88em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90\nl0 -0\nc4,-6.7,10,-10,18,-10 H400000v40\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6489em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.84em;vertical-align:-0.6294em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2106em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.1706em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.88em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90\nl0 -0\nc4,-6.7,10,-10,18,-10 H400000v40\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6294em;\"><span></span></span></span></span></span></span></span></span>. As you can see, the proof is a bit weird and quite unlike Mathlib proofs, as it is very \"linear\". It's basically a <code>calc</code> proof but with <code>have :</code> (<code>replace</code>) instead. Is that okay, or is there a better way to write this?</p>",
        "id": 426665526,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710471634
    },
    {
        "content": "<p>4 lemmas, and then a 4 lines proof!</p>",
        "id": 426666050,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710471972
    },
    {
        "content": "<p>... true. Thanks...</p>",
        "id": 426666072,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710471997
    },
    {
        "content": "<p>It's not always possible to separate a long proof into smaller pieces. But usually it is, and the effort is usually worth it. I wish Mathlib did a lot more of this!</p>",
        "id": 426666795,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710472563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span> Are you thinking of specific examples? Mathlib already encourages that style and does it quite a lot, no?</p>",
        "id": 426668459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710473819
    },
    {
        "content": "<p>Yes, sorry, my message maybe misrepresented things. It's a lot better than it used to be.</p>\n<p>One example that comes to mind is one of my own, at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=colimitLimitToLimitColimit_surjective#src\">src#colimitLimitToLimitColimit_surjective</a></p>",
        "id": 426675285,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710479063
    },
    {
        "content": "<p>Surely that could be broken into smaller lemmas.</p>",
        "id": 426675298,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710479069
    },
    {
        "content": "<p>That example is also an interesting one because the number of heartbeats used is wildly nondeterministic. :-(</p>",
        "id": 426675329,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710479092
    },
    {
        "content": "<p>Surely the solution is a linter that throws and error when a proof spans more than 8 lines.  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 426678036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710481488
    },
    {
        "content": "<p>We already have the Gouezel linter (one of my favourite linters), which ensures that proofs which are longer than about 25 lines get commented. But it usually only runs in analysis/topology/geometry.</p>",
        "id": 426701653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710494105
    },
    {
        "content": "<p>Okay but say now I want to break my proof down into lemmas, then since each lemma/step depends on the previous one, I will have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">N</span> <span class=\"bp\">/</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">N</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">N</span><span class=\"o\">)))))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">N</span> <span class=\"bp\">/</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">N</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>4 times <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 426731934,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710505150
    },
    {
        "content": "<p>Oh actually no, I'm stupid. <code>h</code> is just <code>aux0 hc f hf</code> or whatever.</p>",
        "id": 426732224,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710505252
    }
]