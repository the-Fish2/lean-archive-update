[
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_ite#doc\">docs#add_ite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_add#doc\">docs#ite_add</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_ite#doc\">docs#mul_ite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_mul#doc\">docs#ite_mul</a> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_neg#doc\">docs#ite_neg</a> is of a different flavor), but I'm missing for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ite_div</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_ite_iff.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">not_true_eq_false</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a reason why thre are no analogous lemmas for <code>div</code> etc.?</p>",
        "id": 410579859,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703978068
    },
    {
        "content": "<p>Not sure why but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ite_div</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 410581412,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703979948
    },
    {
        "content": "<p>A plain <code>ite_div</code> would be easier to use when the relevant expression involves bound variables, but combining <code>conv</code> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=apply_ite#doc\">docs#apply_ite</a> eventually worked out.</p>",
        "id": 410582111,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703980772
    },
    {
        "content": "<p>Since we have <code>ite_mul</code> and <code>mul_ite</code>, I think it's OK to add <code>ite_div</code> and <code>div_ite</code>. I would add these lemmas very early, maybe in <code>Mathlib/Algebra/Group/Basic</code>.</p>",
        "id": 410582644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703981143
    },
    {
        "content": "<p>If you're going to PR this, then please move <code>ite_mul</code> and <code>mul_ite</code> to the same file and use <code>apply_ite</code> in all proofs. Also please add <code>dite</code> versions.</p>",
        "id": 410582724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703981185
    },
    {
        "content": "<p>I feel we just need a <code>ite_apply</code> for functions with two arguments where the <code>ite</code> is in the first argument. (If it's in the last argument rewriting using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=apply_ite#doc\">docs#apply_ite</a> should work without trouble.) There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Basic.html#apply_ite%E2%82%82\">apply_ite₂</a> but there both arguments are <code>ite</code>.</p>",
        "id": 410583455,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703981697
    },
    {
        "content": "<p>Maybe not even that ... <code>by rw [apply_ite (· / c)]</code> already works in this example. What could be other reason(s) that we want <code>ite_div</code>?</p>",
        "id": 410584040,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703982058
    },
    {
        "content": "<p>Yeah, the thing is that <em>every function</em> has an <code>ite</code> lemma.</p>",
        "id": 410611735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704006899
    }
]