[
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/9256\">#9256</a> a while ago, which replaces things like <code>(s : Set ι).Pairwise fun i j =&gt; Commute (f i) (f j)</code> with <code>(s : Set ι).Pairwise (Commute on f)</code>, where <code>on </code>is preexisting notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.onFun#doc\">docs#Function.onFun</a>.</p>\n<p>Is this a good change? If so, then I'd argue we should upstream <code>onFun</code> to Std so that we can make similar changes there for consistency; if not, then perhaps we should eliminate <code>onFun</code> entirely.</p>",
        "id": 421410727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707905071
    },
    {
        "content": "<p>I'm hitting a weird corner case where <code>simp</code> can't apply <code>onFun_apply</code> if the output type is a <code>Prop</code>, but <code>rw</code> can:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.onFun_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- error: simp made no progress</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.onFun_apply</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 421736161,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708029359
    },
    {
        "content": "<p>Is this relevant to Eric's question? If not, you could post your question in the interminable <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358857932\">simp X fails, rw X works</a> thread (or even move these two messages to that thread)</p>",
        "id": 421738068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708030160
    },
    {
        "content": "<p>Well, it's a corner case that I've encountered more than once before, and it makes me want to avoid using <code>onFun</code> in my proofs; I'll send a MWE there, though</p>",
        "id": 421738609,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708030359
    }
]