[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>update\n<span class=\"go\">...</span>\n<span class=\"go\">mathlib: running post-update hooks</span>\n<span class=\"go\">error: toolchain 'leanprover/lean4:v4.5.0-rc1' is not installed</span>\n<span class=\"go\">error: mathlib: failed to fetch cache</span>\n</code></pre></div>\n<p>Running <code>lake update</code> twice in a row fixes the issue.</p>",
        "id": 409543553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234083
    },
    {
        "content": "<p>I think this is because the post update hook calls <code>elan</code> in a special way (cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ) which prevents it from attempting to download the toolchain?</p>",
        "id": 409543654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234144
    },
    {
        "content": "<p>looks like the hook calls <code>elan run leanprover/lean4:v4.5.0-rc1 lake exe cache get</code>, which I did not know was a thing</p>",
        "id": 409543906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234269
    },
    {
        "content": "<p>does this need some kind of <code>--allow-download</code> flag?</p>",
        "id": 409543982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ elan run --help\nelan-run\nRun a command with an environment configured for a given toolchain\n\nUSAGE:\n    elan run [FLAGS] &lt;toolchain&gt; &lt;command&gt;...\n\nFLAGS:\n    -h, --help       Prints help information\n        --install    Install the requested toolchain if needed\n</code></pre></div>",
        "id": 409544706,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703234676
    },
    {
        "content": "<p>how does this differ from <code>elan +toolchain command</code>?</p>",
        "id": 409544784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234716
    },
    {
        "content": "<p><code>lean +t</code> is effectively <code>elan run --install t lean</code></p>",
        "id": 409544822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703234738
    },
    {
        "content": "<p>hm, that makes me nervous then because I was thinking of just adding <code>--install</code> to the invocation</p>",
        "id": 409544933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234784
    },
    {
        "content": "<p>the comment says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c\">/-</span>\n<span class=\"cm\">    Instead of building and running cache via the Lake API,</span>\n<span class=\"cm\">    spawn a new `lake` since the toolchain may have changed.</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span> <span class=\"o\">{</span>\n      <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"elan\"</span>\n      <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"run\"</span><span class=\"o\">,</span> <span class=\"n\">mathlibToolchain.trim</span><span class=\"o\">,</span> <span class=\"s2\">\"lake\"</span><span class=\"o\">,</span> <span class=\"s2\">\"exe\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cache\"</span><span class=\"o\">,</span> <span class=\"s2\">\"get\"</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">wait</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409545013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234828
    },
    {
        "content": "<p>Oh right, now I remember, this is because using <code>elan</code> normally pins the version because of an env var</p>",
        "id": 409545062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234860
    },
    {
        "content": "<p>Yeah, things like this need to be documented as comments</p>",
        "id": 409545197,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703234907
    },
    {
        "content": "<p>does <code>elan +toolchain</code> in a nested invocation also ignore the passed toolchain and use the pin?</p>",
        "id": 409545240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703234929
    },
    {
        "content": "<p>I don't think you can use <code>elan</code> itself with <code>+</code></p>",
        "id": 409545335,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703234997
    },
    {
        "content": "<p>er, I meant <code>lake +toolchain</code></p>",
        "id": 409545419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235024
    },
    {
        "content": "<p>But otherwise I would really hope it would use <code>toolchain</code></p>",
        "id": 409545420,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235025
    },
    {
        "content": "<p>really? Using <code>+toolchain</code> seems like it should take precedence</p>",
        "id": 409545445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235045
    },
    {
        "content": "<p>but surely that was the first thing that was tried here</p>",
        "id": 409545511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235082
    },
    {
        "content": "<p>Yes, I edited my comment</p>",
        "id": 409545579,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235116
    },
    {
        "content": "<p>Running <code>elan</code> directly could create a more sensible error message in case someone uses Lean without elan</p>",
        "id": 409545756,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235188
    },
    {
        "content": "<p>not really, any error message is &gt; /dev/null <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 409546335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235446
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> then since they wrote this code</p>",
        "id": 409546360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235461
    },
    {
        "content": "<p>I don't see a stderr redirect in the above code?</p>",
        "id": 409546488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235513
    },
    {
        "content": "<p>oh wait no that's a lie, it inherits stdout and stderr</p>",
        "id": 409546516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235526
    },
    {
        "content": "<p>You started the thread with output from elan in that very call :)</p>",
        "id": 409546553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235543
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9197\">#9197</a></p>",
        "id": 409547090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703235745
    },
    {
        "content": "<p>I also fixed a related elan docbug that I think was inherited from rustup <a href=\"https://github.com/leanprover/elan/commit/640358e252e6eda100ed4a96a993b2bbb97d0574\">https://github.com/leanprover/elan/commit/640358e252e6eda100ed4a96a993b2bbb97d0574</a></p>",
        "id": 409547389,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1703235848
    },
    {
        "content": "<p>In the <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">Using mathlib as dependency wiki</a>, it still says one should run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>With the post-update hook, running <code>lake exe cache get</code> should be superfluous now, right?</p>",
        "id": 411212883,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1704382969
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 411215331,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704383752
    },
    {
        "content": "<p>Ok, I will edit the wiki accordingly.</p>",
        "id": 411221476,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1704385716
    },
    {
        "content": "<p>done</p>",
        "id": 411221974,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1704385876
    },
    {
        "content": "<p>Heh, I just updated mathlib as a dependency on a project and can confirm that the new instructions worked for me :-)</p>",
        "id": 411226085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704387392
    }
]