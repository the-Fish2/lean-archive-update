[
    {
        "content": "<p>Would it make sense to have <code>rwa [rules...] using e</code>? Though, I'm thinking that it would be as shorthand for the pattern</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rules...</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n<span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>instead of rewriting both the goal and <code>e</code> like <code>simpa</code> does. Or do we already have some shorthand for the above pattern?</p>",
        "id": 409661796,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703291825
    },
    {
        "content": "<p>(Alternatively (or in addition), a term-mode rewrite might be neat—like <code>▸</code>, but with all the convenience and power of a list of rewrite rules. <code>e ◂ [rules...]</code>?)</p>",
        "id": 409661814,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703291835
    },
    {
        "content": "<p>you can write <code>rule \\t rule \\t e</code></p>",
        "id": 409663924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703292712
    },
    {
        "content": "<p>Slightly related, another tactic that I would like to be able to pass a term instead of a hypothesis is <code>revert</code></p>",
        "id": 409664168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703292788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simpa.20using.60.20but.20for.20.60rw.60.3F/near/409663924\">said</a>:</p>\n<blockquote>\n<p>you can write <code>rule \\t rule \\t e</code></p>\n</blockquote>\n<p>Sometimes, but not always...you need to specify arguments and the like with <code>▸</code>, which can be annoying (even if they're just underscores). (Plus,  <code>▸</code> doesn't take <code>occs</code>, right?) (I'm mainly suggesting a syntax of convenience in the parenthetical.)</p>",
        "id": 409664378,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703292870
    },
    {
        "content": "<p>you can use <code>..</code></p>",
        "id": 409664488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703292911
    },
    {
        "content": "<p>I'm considering <code>..</code> to be underscores. (Eventually.) :P</p>",
        "id": 409664721,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703292999
    },
    {
        "content": "<p>Also, is <code>▸</code> exactly as powerful as <code>rw</code>? Mine is struggling in a case I'm looking at, but maybe the example is weird...</p>",
        "id": 409665589,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703293338
    },
    {
        "content": "<p>I think at least one difference is that <code>▸</code> only handles Eqs and not Iffs.</p>\n<p>It's definitely not exactly as powerful -- it seems to have more tricks up its sleeve than <code>rw</code>. But, it's also its own implementation, so it can have differences.</p>\n<p>Here's its elaborator: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/BuiltinNotation.lean#L324\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/BuiltinNotation.lean#L324</a></p>",
        "id": 409667239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703294167
    },
    {
        "content": "<p>A bit of a tangent to this thread, but it got me thinking about \"term mode tactics\": wouldn't it be neat if we could run <em>every</em> tactic which could transform a hypothesis on a term instead? I.e., if we had some shorthand for <code>by have := e; tac at this; exact this</code>.</p>\n<p>This is <em>roughly</em> similar to having a \"term mode <code>conv</code>\", which is a lot easier to implement and could also be neat, e.g. (forgive the simplicity of the example and the missing <code>conv</code> features):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"conv \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">conv</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.add_left_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409685767,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703308769
    },
    {
        "content": "<p>I've always wanted <code>rwa ... using ...</code> to exist!</p>",
        "id": 409690727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703313866
    },
    {
        "content": "<p>We could maybe keep things simple and just use a macro <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"rwa\"</span> <span class=\"n\">c</span><span class=\"o\">:(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"s2\">\"using\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rewrite</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 409691375,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703314577
    },
    {
        "content": "<p>Does this work if <code>r</code> contains <code>this</code>?</p>",
        "id": 409807990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703417286
    },
    {
        "content": "<p>Yep, thanks to hygienic macros! :)</p>",
        "id": 409834699,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703443979
    },
    {
        "content": "<p>(But I did realize while testing that it should be <code>rewrite</code> instead of <code>rw</code> so that we never get a “no goals to be solved” error; edited)</p>",
        "id": 409834733,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703444041
    },
    {
        "content": "<p>Though, we may as well use something more descriptive like <code>rwa.this</code> or something for type mismatch error messages.</p>",
        "id": 409835216,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703444517
    }
]