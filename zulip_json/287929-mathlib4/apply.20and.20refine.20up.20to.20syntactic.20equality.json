[
    {
        "content": "<p>Is there a way to limit <code>apply</code> and/or <code>refine</code> to only work up to syntactic equality? This would improve the speed of a parser combinator I'm writing, since it would fail faster.</p>",
        "id": 425296341,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1709815931
    },
    {
        "content": "<p>Use a <code>with_something</code> combinator</p>",
        "id": 425300205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709817277
    },
    {
        "content": "<p>Something like <code>with_reducible_and_instances apply your_lemma</code></p>",
        "id": 425300295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709817312
    },
    {
        "content": "<p>I can't find any references online for these sorts of things - can you point me to an example?</p>",
        "id": 425328402,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1709824175
    },
    {
        "content": "<p>I have never used it myself but there are examples on Zulip</p>",
        "id": 425345261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709828516
    },
    {
        "content": "<p>There's no option for just syntactic equality, but the most restrictive one is <code>with_reducible apply foo</code>, which does unification unfolding only reducible definitions (so those with the <code>@[reducible]</code> attribute, which includes <code>abbrev</code>s)</p>",
        "id": 425352892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709830798
    },
    {
        "content": "<p><code>with_reducible_and_instances</code> will additionally unfold instances</p>",
        "id": 425353171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709830867
    },
    {
        "content": "<p>Then, to unfold more than what is normally unfolded, there's <code>with_unfolding_all</code></p>",
        "id": 425353455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709830943
    }
]