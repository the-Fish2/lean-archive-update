[
    {
        "content": "<p><strong>Context:</strong> I've been working on a proof of <a href=\"https://arxiv.org/pdf/2203.05930.pdf\">Rubin's theorem</a>, and have now managed to formalize it in Lean (<a href=\"https://github.com/adri326/rubin-lean4/\">https://github.com/adri326/rubin-lean4/</a> - the code is extremely messy as of now). In the last steps of the proof, I first tried using ultrafilters (which from what I could find are the only constructions in mathlib that guarantee that <code>ClusterPt p F &lt;-&gt; F ≤ nhds p</code>), which worked well for as long as I was working within the topology, but those broke as soon as I tried to use them outside of the topology, as I only had a map from the topological basis of the topology to a purely group-theoretic construction, made up of subgroups.<br>\nIn the end, I constructed an ad-hoc version of ultrafilters designed around my usecase, which requires that every set in the filter implies it is a superset of an element of the topological basis also contained in the filter (<a href=\"https://github.com/adri326/rubin-lean4/blob/main/Rubin/Filter.lean#L277-L278\"><code>∀ (S : Set α), S ∈ F → ∃ T ∈ F, T ∈ B ∧ T ⊆ S</code></a>), and managed to implement my own version of <code>Ultrafilter.of</code>, which was enough for what I needed.</p>\n<p>I now would like to work towards getting this proof of Rubin's theorem into Mathlib, and this means taking all of what I've written, and seeing if there isn't a close enough construct in mathlib already that I could use instead, so as to not introduce duplications in my pull requests.<br>\nI'm now realizing that my own version of \"ultrafilters in a basis\" is really just an <code>Order.PFilter</code> that is ultra. However, I'm not seeing any formalization of <code>PFilter.IsUltra</code> (as opposed to <code>Ideal.IsMaximal</code>), and there isn't a way to construct an <code>Ideal.IsMaximal</code> that is greater than a given Ideal.</p>\n<p>So I would like to know if there is interest in me contributing to implement things like <code>Idea.IsMaximal.of (I : Ideal α)</code>, <code>PFilter.IsUltra</code>, <code>PFilter.IsUltra.of (F : PFilter α)</code>.<br>\nAdditionally, I would like to know if this is something that is something that is reachable for someone like me who only has the equivalent of a bachelor's level of mathematics (given that my studies have been more around computer science).</p>\n<p>On top of that, I would also like to map between <code>PFilter</code>s and regular <code>Filter</code>s, and have the theorem that if the lattice maps to a topological basis, where the infimum maps to set intersection, the order is preserved and the map is surjective, then if the resulting filter has a cluster point, it will also be smaller than the neighborhood filter of that point.<br>\nThis is something I proved for my \"ultrafilters in a basis\", but I don't know how general this statement can be made outside of my narrow use-case, and I fear that I might either prove a weaker statement than what is possible, or struggle for a while in trying to prove a statement that is too strong.</p>\n<p>Lastly, I worry that my proof style might be too tactic-y, as I see that a lot of proofs in mathlib have been heavily golfed.</p>\n<p>I think I will make my first contribution on proving a few simple group-theoretic things, like <code>g • x = x → g^z • x = x</code>(a corollary of <code>MulAction.zpow_smul_eq_iff_minimalPeriod_dvd</code>), and regular open sets (sets <code>S</code> such that <code>interior (closure S) = S</code>).</p>\n<p>I'm open to hearing your opinion on what I'm suggesting, and whether I might have missed an already-existing proof of some of the things that I'm planning to contribute to mathlib.</p>",
        "id": 410992448,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1704278786
    },
    {
        "content": "<p>I see now that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> mentionned wanting to re-implement <code>PFilter</code> and <code>Ideal</code> from scratch a few weeks ago; I wouldn't mind helping with that, as long as I'm not doing this alone :)</p>",
        "id": 410993516,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1704279280
    },
    {
        "content": "<p>Congratulations on completing this project. It's great that you now wish to PR this material to Mathlib.</p>\n<p>I didn't quite follow your explanation of why you need to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.PFilter#doc\">docs#Order.PFilter</a> but I expect this will become clearer in due course, e.g., during PR review. The only advice I'd offer for now is that it's a good idea to keep PRs short and that new definitions are harder to get right than new lemmas.</p>\n<p>Good luck!</p>",
        "id": 410993991,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1704279498
    },
    {
        "content": "<p>PFilters would allow me to carry the ultra-ness of filters in the topological space <code>α</code> to filters made up of subgroups in <code>G</code>, allowing me to map to/from filters that are finer than the neighborhood filter of a point <code>p</code>. Right now I'm using regular filters, and it has its downsides, since the bottom element of subgroups isn't empty, and this translated to me needing to rely on properties of the topological basis in <code>α</code> to prove that my basis that is purely constructed from <code>G</code> is a topological basis.</p>",
        "id": 410996709,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1704280588
    },
    {
        "content": "<p>Yes, I do want to redo everything from scratch (and I doubt it would be a good learning experience to try helping here, since I have very clear views on how to do it), but sadly I severely ran out of Lean time for those holidays <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 410997129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704280773
    }
]