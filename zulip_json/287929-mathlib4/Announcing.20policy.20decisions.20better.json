[
    {
        "content": "<p>(Case in point: at some point, it was decided (apparently, somewhere in <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility\">this thread</a>) that PRs renaming lemmas should also add deprecation aliases. TTBOMK, this was never announced; I'm not sure if it's documented anywhere. I agree with that policy; in any case, it's just an example.)</p>\n<p>Right now,</p>\n<ul>\n<li>policy changes in mathlib often pass me by, until I read all of zulip (which feels pretty impossible until that's my full-time job) or randomly notice it during review or my PR</li>\n<li>\n<p>reasons for a change are hard to find, often buried in long zulip discussions<br>\n(These threads are good, they have additional context. But often, a short summary <em>in addition</em> would help a great deal.)</p>\n</li>\n<li>\n<p>these are (often) documented little: it's all on zulip, and finding a topic in such long threads can be hard.</p>\n</li>\n</ul>\n<p>I guess my primary audience (whom I'm doing this for) are contributors with not <em>lots</em> of time (i.e., who don't follow all details but the big picture), who want to stay somewhat up to date. This is hard right now, you learn about new policies during review (if at all). Sometimes, this makes your life harder than necessary. (For example, creating deprecation aliases after renaming lemmas is quite more tedious than doing it at the same time as the renames.)</p>\n<p><strong>Idea/proposed solution</strong>. Can/should there be a \"public service announcements\" thread for policy mathlib decisions made --- containing the decision and perhaps short summary of the reasons (but not meant for discussion)? As an extension, these decisions could then be reflected elsewhere as appropriate (to e.g., the style or reviewing guide on github).</p>",
        "id": 427435288,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710759770
    },
    {
        "content": "<p>I know, this is project management work; such work often seems unsexy and needs a volunteer. (It's also really useful for open source projects: <a href=\"https://piped.kavin.rocks/watch?v=xM7bI2OPPLQ\">this talk</a> by Alice Cecile articulates this very well.)<br>\nPerhaps, let's first talk about would people think this is useful?</p>",
        "id": 427435309,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710759774
    },
    {
        "content": "<p>The relevant thread for your case is <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Backward.20compatibility</a></p>",
        "id": 427443242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710761278
    },
    {
        "content": "<p>Thanks for linking to that talk by Alice Cecile. It contained some interesting ideas!</p>",
        "id": 427619839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710823711
    },
    {
        "content": "<p>I would be very much in favor of having a design guide. I feel like best practices change quite often and it would be great if these get documented so that feature PRs could be requested to check whether they touch something that is in the design guide and for refactor PRs to say that they update some part of the mathlib to adhere to the current design, which should make reviewing refactor PRs way easier.</p>",
        "id": 427621139,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710824818
    },
    {
        "content": "<p>There is clearly a big need here, but it’s a lot of work, although it would  be beneficial in the long run.</p>",
        "id": 427740081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710859827
    }
]