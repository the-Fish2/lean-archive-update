[
    {
        "content": "<p>What's the easiest way to show that two <code>Ring</code>s whose underlying <code>Semiring</code>s are <code>Eq</code> are themselves <code>Eq</code>?</p>\n<p>I eventually got fed up of wrestling with all the typeclass instances flying around, and brute-forced everything, but I really hope there's a better way than this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ring.semiring_ext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">inst₁</span> <span class=\"n\">inst₂</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">inst₁.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">inst₂.toSemiring</span> <span class=\"bp\">→</span> <span class=\"n\">inst₁</span> <span class=\"bp\">=</span> <span class=\"n\">inst₂</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Anything less than this makes it difficult to access</span>\n<span class=\"cm\">instance-implicit fields of the constructor. -/</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Ring.mk</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">sr</span> <span class=\"o\">⟨</span><span class=\"n\">neg₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">sub₁</span><span class=\"o\">⟩</span> <span class=\"n\">sub_eq_neg₁</span> <span class=\"n\">zsmul₁</span> <span class=\"n\">zsmul₁_zero</span> <span class=\"n\">zsmul₁_succ</span> <span class=\"n\">zsmul₁_negSucc</span> <span class=\"n\">neg_add_left₁</span> <span class=\"o\">⟨</span><span class=\"n\">intCast₁</span><span class=\"o\">⟩</span> <span class=\"n\">intCast₁_ofNat</span> <span class=\"n\">intCast₁_negSucc</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">Ring.mk</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">sr</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">neg₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">sub₂</span><span class=\"o\">⟩</span> <span class=\"n\">sub_eq_neg₂</span> <span class=\"n\">zsmul₂</span> <span class=\"n\">zsmul₂_zero</span> <span class=\"n\">zsmul₂_succ</span> <span class=\"n\">zsmul₂_negSucc</span> <span class=\"n\">neg_add_left₂</span> <span class=\"o\">⟨</span><span class=\"n\">intCast₂</span><span class=\"o\">⟩</span> <span class=\"n\">intCast₂_ofNat</span> <span class=\"n\">intCast₂_negSucc</span><span class=\"o\">,</span>\n  <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> Eliminate all accursed typeclass (neg, sub, most coe) wrappers,</span>\n<span class=\"cm\">  so that e.g. `rw [neg_eq_nat]` actually works. -/</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sub₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">neg₁</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">sub_eq_neg₁</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sub₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">neg₂</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">sub_eq_neg₂</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zsmul₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">zsmul₁_zero</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zsmul₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">zsmul₂_zero</span>\n  <span class=\"c1\">-- change ∀ (n : ℕ) a, zsmul₁ (.ofNat n.succ) a = a + zsmul₁ (.ofNat n) a at zsmul₁_succ</span>\n  <span class=\"c1\">-- change ∀ (n : ℕ) a, zsmul₂ (.ofNat n.succ) a = a + zsmul₂ (.ofNat n) a at zsmul₂_succ</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zsmul₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">neg₁</span> <span class=\"o\">(</span><span class=\"n\">zsmul₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">zsmul₁_negSucc</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zsmul₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">neg₂</span> <span class=\"o\">(</span><span class=\"n\">zsmul₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">zsmul₂_negSucc</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intCast₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">intCast₁_ofNat</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intCast₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">intCast₂_ofNat</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intCast₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg₁</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">intCast₁_negSucc</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intCast₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg₂</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">intCast₂_negSucc</span>\n\n  <span class=\"c1\">-- Lemma used in every case</span>\n  <span class=\"k\">have</span> <span class=\"n\">neg_eq</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">neg₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">neg₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">neg_unique</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">neg_add_left₁</span> <span class=\"n\">x</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">neg_add_left₂</span> <span class=\"n\">x</span>\n\n  <span class=\"c1\">-- Prove equality for each field of `Ring` separately.</span>\n  <span class=\"n\">congr</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">funext</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">neg_eq</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_neg₁</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_neg₂</span><span class=\"o\">,</span> <span class=\"n\">neg_eq</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">zsmul_eq_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zsmul₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zsmul₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"n\">n</span>\n      <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zsmul₁_zero</span><span class=\"o\">,</span> <span class=\"n\">zsmul₂_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zsmul₁_succ</span><span class=\"o\">,</span> <span class=\"n\">zsmul₂_succ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"n\">case</span> <span class=\"n\">ofNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">zsmul_eq_nat</span>\n    <span class=\"n\">case</span> <span class=\"n\">negSucc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zsmul₁_negSucc</span><span class=\"o\">,</span> <span class=\"n\">zsmul₂_negSucc</span><span class=\"o\">,</span>\n                        <span class=\"n\">zsmul_eq_nat</span><span class=\"o\">,</span> <span class=\"n\">neg_eq</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"n\">case</span> <span class=\"n\">ofNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">intCast₁_ofNat</span><span class=\"o\">,</span> <span class=\"n\">intCast₂_ofNat</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">negSucc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">intCast₁_negSucc</span><span class=\"o\">,</span> <span class=\"n\">intCast₂_negSucc</span><span class=\"o\">,</span> <span class=\"n\">neg_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411388407,
        "sender_full_name": "Raghuram",
        "timestamp": 1704468871
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.ext#doc\">docs#Monoid.ext</a>, so we should have <code>Ring.ext</code>, then it should be obvious</p>",
        "id": 411389969,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704469488
    },
    {
        "content": "<p>Probably you should prove <code>Semiring.ext</code> first</p>",
        "id": 411392838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704470625
    },
    {
        "content": "<p>Yeah, we should just start a new file with all of these.</p>",
        "id": 411394646,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704471340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20is.20determined.20by.20Semiring/near/411389969\">said</a>:</p>\n<blockquote>\n<p>We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.ext#doc\">docs#Monoid.ext</a>, so we should have <code>Ring.ext</code>, then it should be obvious</p>\n</blockquote>\n<p>Ah, now I'm realising that I couldn't find any lemma like <code>Monoid.ext</code> because I had used very minimal imports. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 411396084,
        "sender_full_name": "Raghuram",
        "timestamp": 1704471866
    },
    {
        "content": "<p>But indeed, I think <code>Ring.ext</code> and friends are missing.</p>",
        "id": 411396344,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704471970
    },
    {
        "content": "<p>True. It doesn't sound too difficult to implement either.</p>",
        "id": 411398448,
        "sender_full_name": "Raghuram",
        "timestamp": 1704472866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"501683\">@Raghuram</span>  if you implement this, (a) please PR it and (b) use the file containing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.ext#doc\">docs#Monoid.ext</a> as a guide and/or use those results.</p>",
        "id": 411399519,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704473357
    },
    {
        "content": "<p>Would a file proving the \"obvious\" ext lemma (instances are equal if a minimal set of operations are equal on all arguments) for all the typeclasses in <code>Mathlib.Algebra.Ring.Defs</code>one by one (as done in <code>Mathlib.Algebra.Group.Ext</code> be appropriate?</p>",
        "id": 411399534,
        "sender_full_name": "Raghuram",
        "timestamp": 1704473365
    },
    {
        "content": "<p>Yes, definitely.</p>",
        "id": 411399565,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704473381
    },
    {
        "content": "<p>Yeah, I mean, we want all the various results. Proving them in order should be relatively easy.</p>",
        "id": 411399936,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704473532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20is.20determined.20by.20Semiring/near/411399519\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"501683\">Raghuram</span>  if you implement this, (a) please PR it and (b) use the file containing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.ext#doc\">docs#Monoid.ext</a> as a guide and/or use those results.</p>\n</blockquote>\n<p>I'm interested; that being said, this will be my first time contributing to Mathlib.<br>\nThe procedure is to 1) ask for write access 2) clone and start writing 3) make a PR, right?</p>",
        "id": 411400922,
        "sender_full_name": "Raghuram",
        "timestamp": 1704473907
    },
    {
        "content": "<p>Yes, what is your github username?</p>",
        "id": 411401319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704474038
    },
    {
        "content": "<p>Sorry, you shouldn't clone</p>",
        "id": 411401362,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704474052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20is.20determined.20by.20Semiring/near/411401362\">said</a>:</p>\n<blockquote>\n<p>Sorry, you shouldn't clone</p>\n</blockquote>\n<p>Clone locally, I meant.</p>",
        "id": 411401431,
        "sender_full_name": "Raghuram",
        "timestamp": 1704474072
    },
    {
        "content": "<p>You can have a look <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a></p>",
        "id": 411401461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704474082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20is.20determined.20by.20Semiring/near/411401319\">said</a>:</p>\n<blockquote>\n<p>Yes, what is your github username?</p>\n</blockquote>\n<p><code>raghuram-13</code>.</p>",
        "id": 411401467,
        "sender_full_name": "Raghuram",
        "timestamp": 1704474084
    },
    {
        "content": "<p>You should have an invitation</p>",
        "id": 411401679,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704474146
    },
    {
        "content": "<p>Created and pushed new branch <a href=\"https://github.com/leanprover-community/mathlib4/tree/raghuram-13/ext-for-rings\">raghuram-13/ext-for-rings</a> (no commits yet).</p>",
        "id": 411404723,
        "sender_full_name": "Raghuram",
        "timestamp": 1704475439
    },
    {
        "content": "<p>I find myself needing (or at least, it would be convenient to have) ext lemmas for <code>Add</code> and <code>Mul</code>.<br>\nIs there an appropriate file to put such lemmas?</p>",
        "id": 411420359,
        "sender_full_name": "Raghuram",
        "timestamp": 1704482565
    },
    {
        "content": "<p>You mean because of <code>HMul</code>? or why exactly?</p>",
        "id": 411433565,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704489135
    },
    {
        "content": "<p>I guess I'm not sure why you can't just use <code>congr</code>.</p>",
        "id": 411433621,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704489177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20is.20determined.20by.20Semiring/near/411433621\">said</a>:</p>\n<blockquote>\n<p>I guess I'm not sure why you can't just use <code>congr</code>.</p>\n</blockquote>\n<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">NonUnitalNonAssocSemiring.ext</span> <span class=\"o\">⦃</span><span class=\"n\">inst₁</span> <span class=\"n\">inst₂</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">⦄</span>\n    <span class=\"o\">(</span><span class=\"n\">h_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">inst₁</span><span class=\"o\">]</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">inst₂</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">inst₁</span><span class=\"o\">]</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">inst₂</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">inst₁</span> <span class=\"bp\">=</span> <span class=\"n\">inst₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Extract `AddMonoid` instance and `mul` function</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">inst₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">inst₂</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">congr</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply_assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>congr</code> generates two cases, to show that the underlying <code>AddMonoid</code>s are equal and that the underlying <code>Mul</code>s are equal.<br>\nThe former already has <code>ext</code> lemmas so it's easy to deal with.<br>\nThe same will work for the latter after applying <code>congr</code>, except that for <code>congr</code> to have an effect I have to destructure the <code>Mul</code>s, and to do that I have to <code>rename_i</code> them.</p>\n<p>That can be done, but it seemed like it would be cleaner to have an ext for <code>Mul</code>, which seems like the same kind of lemma as these - if the operations are the same, the typeclass instances are the same.</p>",
        "id": 411442871,
        "sender_full_name": "Raghuram",
        "timestamp": 1704494074
    },
    {
        "content": "<p>Actually, I just realised that I can use the <code>rcases</code> to do the destructuring by changing <code>⟨⟩</code> to <code>@⟨_, ⟨⟩⟩</code>. So IG it's not needed yet.</p>",
        "id": 411443050,
        "sender_full_name": "Raghuram",
        "timestamp": 1704494172
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9511\">PR</a>'d.</p>",
        "id": 411597213,
        "sender_full_name": "Raghuram",
        "timestamp": 1704630601
    }
]