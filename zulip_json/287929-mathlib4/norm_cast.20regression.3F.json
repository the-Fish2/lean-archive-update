[
    {
        "content": "<p>I don't remember this happening before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">norm_cast</span>\n<span class=\"w\">  </span><span class=\"c1\">-- ⊢ x = Int.negSucc 0</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't like seeing my least favourite constructor in the game, it's a mathematical abomination. More to the point, I don't know any lemmas about it :-)</p>",
        "id": 444845611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718443289
    },
    {
        "content": "<p><code>show_term</code> casts suspicion on <code>Mathlib.Data.Int.Cast.Basic._auxLemma.3</code>, but I've yet again forgotten how to inspect declarations with numbers in their names.</p>",
        "id": 444845819,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443444
    },
    {
        "content": "<p>Ah, <a href=\"#narrow/stream/287929-mathlib4/topic/norm_cast.20leaks.20Int.2EsubSubNat/near/375827016\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/norm_cast.20leaks.20Int.2EsubSubNat/near/375827016</a></p>",
        "id": 444845894,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#printNum \"</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">getNat</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"no such declaration {name}\"</span>\n<span class=\"w\">  </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{name} : {decl.type} :=</span><span class=\"se\">\\n</span><span class=\"s2\">{decl.value?.getD (.bvar 0)}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">printNum</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">Cast</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">Cast</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"w\">  </span><span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">negSucc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">cast_negSucc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444845962,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443583
    },
    {
        "content": "<p>It seems simply that <code>norm_cast</code> is (unwisely) willing to apply <code>Int.cast_negSucc</code> backwards.</p>",
        "id": 444846022,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443629
    },
    {
        "content": "<p>I had noticed this some time ago, and it was fixed, but apparently later reverted. I think there is an issue about this. I'll try to dig it up, but right now I'm on a train with slow internet...</p>",
        "id": 444847200,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718444583
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20fails.20in.20a.20simple.20example/near/433068944\">Here</a> on Zulip.</p>",
        "id": 444847452,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718444837
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib4/issues/11573\">issue</a>.</p>",
        "id": 444847568,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718444940
    },
    {
        "content": "<p>I was gonna say - didn't I file an issue about this?</p>",
        "id": 444847684,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718445064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11573\">#11573</a> ?</p>",
        "id": 444847967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718445313
    },
    {
        "content": "<p>Yeah, Michael linked it as well</p>",
        "id": 444848057,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718445380
    },
    {
        "content": "<p>Sorry, I am shortsighted, colorblind and asleep!</p>",
        "id": 444848349,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718445647
    }
]