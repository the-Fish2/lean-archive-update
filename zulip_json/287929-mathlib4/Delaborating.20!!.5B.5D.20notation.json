[
    {
        "content": "<p>I am trying to write a delaborator for <code>!![]</code> notation, but I fairly immediately run into trouble when trying to generate syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter.Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"n\">Qq</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.DFunLike.coe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabMatrixOf</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span>\n  <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPNotation</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Matrix.of</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m.natLit</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n.natLit</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">semicolons</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Syntax.atom</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">MonadRef.mkInfoFromRefPos</span><span class=\"o\">)</span>  <span class=\"s2\">\";\"</span><span class=\"o\">⟩</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">semicolons</span><span class=\"o\">]))</span>\n    <span class=\"n\">failure</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;;</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there any way to use syntax quotations to build the repeated <code>;</code>s?</p>",
        "id": 424400113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709375527
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 424409051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709383960
    },
    {
        "content": "<p>Edited above, sorry</p>",
        "id": 424409172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709384051
    },
    {
        "content": "<p>for the case other than 0xN or Nx0 I would bet you can do it, but sequences of atoms don't really work well with syntax quotations</p>",
        "id": 424409292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384114
    },
    {
        "content": "<p>I guess that's the case you are having issues with</p>",
        "id": 424409302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384139
    },
    {
        "content": "<p>I didn't even try the nondegenerate cases, but I agree that they sound a little easier</p>",
        "id": 424409393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709384220
    },
    {
        "content": "<p>actually, the same syntax used to parse them seems to work to generate them too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">semicolons</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">;%$</span><span class=\"n\">semicolons</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n    <span class=\"n\">failure</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;;</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 424409522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384379
    },
    {
        "content": "<p>Wow, I would not have expected <code>%</code>  to accept an array</p>",
        "id": 424409587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709384415
    },
    {
        "content": "<p>well, it's the <code>$[...]*</code> that generates an array</p>",
        "id": 424409607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384437
    },
    {
        "content": "<p>all of the bindings inside that are array-ified</p>",
        "id": 424409613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Delaborating.20!!.5B.5D.20notation/near/424409607\">said</a>:</p>\n<blockquote>\n<p>well, it's the <code>$[...]*</code> that generates an array</p>\n</blockquote>\n<p>What documentation could I read to learn this?</p>",
        "id": 424409853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709384700
    },
    {
        "content": "<p>good question</p>",
        "id": 424409965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384766
    },
    {
        "content": "<p>I'm not aware of any documentation that covers quotation syntax, which is bad since it's so arcane</p>",
        "id": 424409982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384791
    },
    {
        "content": "<p>well it's always bad not to have docs but it's especially bad when it's rarely used and sigil heavy</p>",
        "id": 424410023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709384878
    }
]