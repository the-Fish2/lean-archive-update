[
    {
        "content": "<p>I just tried an experiment of a very simple syntax translation to convert \"<code>degree</code> theorems\" to \"<code>natDegree</code> theorems\": <a href=\"https://github.com/leanprover-community/mathlib4/pull/12429\">#12429</a>.</p>\n<p>Even in this very primitive form, it found some inconsistencies and golfed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coeff_eq_zero_of_natDegree_lt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">coeff_eq_zero_of_degree_lt</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">hp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">WithBot.bot_lt_coe</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_lt</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coeff_eq_zero_of_natDegree_lt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.not_not.1</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">le_natDegree_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_gt</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>If this seems like a good step in the direction of reducing lines of code and keeping in synch the API for <code>degree</code> and <code>natDegree</code>, I can look into make the translation more robust and more aware of further intricacies.</p>",
        "id": 435398734,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714054113
    },
    {
        "content": "<p>I would use <code>contrapose!</code> in tactic mode to hide all these trivial lemmas</p>",
        "id": 435906651,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714336014
    }
]