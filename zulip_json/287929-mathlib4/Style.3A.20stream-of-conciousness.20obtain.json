[
    {
        "content": "<p>As a follow-up in spirit in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>: there still are a few uses of \"stream of conciousness\" obtain. Considering that similar syntax for have/suffices/replace was removed, shall we do the same with obtain?</p>",
        "id": 422293738,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708370397
    },
    {
        "content": "<p>How would one find all such places? Go to definition on such an obtain points to <code>Std.Tactic.RCases</code>. Editing the meta code is above my current lean level.</p>",
        "id": 422294049,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708370534
    },
    {
        "content": "<p>(I fixed ~50 such uses locally; I can imagine around 100 uses all of mathlib, eventually. Basic grepping has 250-300 hits, but most of them are fine, just across multiple lines.)</p>",
        "id": 422294403,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708370751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Style.3A.20stream-of-conciousness.20obtain/near/422294049\">said</a>:</p>\n<blockquote>\n<p>How would one find all such places? Go to definition on such an obtain points to <code>Std.Tactic.RCases</code>. Editing the meta code is above my current lean level.</p>\n</blockquote>\n<p>Clever grep searches? :)<br>\nI get 299 results, although it contains some false positives: <a href=\"https://gist.github.com/adri326/fed4ee870da7efe3a9df6e3a9db851d4\">https://gist.github.com/adri326/fed4ee870da7efe3a9df6e3a9db851d4</a></p>",
        "id": 422302439,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708374396
    },
    {
        "content": "<p>I used <code>rg --pre just-the-code --pcre2 '^\\s*(obtain)(?:(?!:=|by|from).)*$' -A 3</code> (where <code>just-the-code</code> is <a href=\"https://github.com/adri326/just-the-code\">a little tool</a> I wrote yesterday evening, that strips out comments and strings)</p>",
        "id": 422302658,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708374467
    },
    {
        "content": "<p>What is wrong with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">statement</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">·</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>?</p>",
        "id": 422303262,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708374661
    },
    {
        "content": "<p>I think it's just a style decision: we already have <code>have h : &lt;statement&gt; := by &lt;proof&gt;</code>, which has a few more capabilities (the <code>by</code> can be dropped, which then usually hints that the proof can be further optimized), so there's no need to have multiple ways of writing the same thing</p>",
        "id": 422303701,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708374902
    },
    {
        "content": "<p>Is this (i.e., the style decision) documented somewhere?</p>",
        "id": 422303824,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708374969
    },
    {
        "content": "<p>It does not look to be mentionned in the style guidelines yet, though it will be enforced through <a href=\"https://github.com/leanprover-community/mathlib4/pull/10534\">#10534</a> by forbidding the import of the corresponding tactic file</p>",
        "id": 422304109,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708375147
    },
    {
        "content": "<p>Hm, <code>sufffices : &lt;statement&gt; by &lt;proof&gt;</code> or <code>... from &lt;term&gt;</code> (as is used in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>) gives me an error.</p>",
        "id": 422307031,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708376786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Style.3A.20stream-of-conciousness.20obtain/near/422302658\">said</a>:</p>\n<blockquote>\n<p>I used <code>rg --pre just-the-code --pcre2 '^\\s*(obtain)(?:(?!:=|by|from).)*$' -A 3</code> (where <code>just-the-code</code> is <a href=\"https://github.com/adri326/just-the-code\">a little tool</a> I wrote yesterday evening, that strips out comments and strings)</p>\n</blockquote>\n<p>My incantation was <code>rg \"obtain ⟨\" | rg -v \":=\"</code>, yielding 272 hits (on top of my fixes). <code>rg</code> is <a href=\"https://crates.io/crates/ripgrep\">ripgrep</a>, a Rust clone of <code>grep</code>. This count doesn't capture multi-line obtain's ending in <code>:=</code>.</p>\n<p>Anyway: I was rather looking for an equivalent of \"remove <code>Mathlib.Tactic.Have</code>\", that would catch <em>all</em> occurrences :-)</p>",
        "id": 422307515,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708377101
    },
    {
        "content": "<p>We should have a linter for that, really, since we can't disable the obtains tactic from std4</p>",
        "id": 422308484,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708377784
    },
    {
        "content": "<p>In any case: I pushed what I have to <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-obtain\">branch#MR-obtain</a>. I won't have time this week to pursue that further. Feel free to adopt if you like. (Perhaps after getting sufficient maintainer buy-in.)</p>",
        "id": 422308805,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708377973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Style.3A.20stream-of-conciousness.20obtain/near/422307031\">said</a>:</p>\n<blockquote>\n<p>Hm, <code>sufffices : &lt;statement&gt; by &lt;proof&gt;</code> or <code>... from &lt;term&gt;</code> (as is used in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>) gives me an error.</p>\n</blockquote>\n<p>Turns out that <code>suffices &lt;name&gt; : &lt;statement&gt; from/by ...</code> is OK. Why does the syntax not work without providing a name?</p>",
        "id": 422309954,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708378684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Style.3A.20stream-of-conciousness.20obtain/near/422309954\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Style.3A.20stream-of-conciousness.20obtain/near/422307031\">said</a>:</p>\n<blockquote>\n<p>Hm, <code>sufffices : &lt;statement&gt; by &lt;proof&gt;</code> or <code>... from &lt;term&gt;</code> (as is used in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>) gives me an error.</p>\n</blockquote>\n<p>Turns out that <code>suffices &lt;name&gt; : &lt;statement&gt; from/by ...</code> is OK. Why does the syntax not work without providing a name?</p>\n</blockquote>\n<p>It works if you drop the <code>:</code> entirely</p>",
        "id": 422310983,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708379313
    },
    {
        "content": "<p>As to why - accident of parsing</p>",
        "id": 422311016,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708379341
    },
    {
        "content": "<p>The error message could be more helpful...</p>",
        "id": 422311233,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708379497
    },
    {
        "content": "<p>Yeah, accidents of parsing don't tend to get great error messages :)</p>",
        "id": 422311428,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708379615
    },
    {
        "content": "<p>But I have to admit that the docstring of <code>suffices</code> gives this information. (It just didn't occur to me to look at it.)</p>",
        "id": 422311503,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708379652
    },
    {
        "content": "<p>There's no need to try to match this with regexes, we can make the syntax itself throw a warning</p>",
        "id": 422313383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708380822
    },
    {
        "content": "<p>But I like my regexes :(</p>",
        "id": 422321822,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708386286
    },
    {
        "content": "<p>They make for nice custom, local linters if you run them on your <code>git diff</code></p>",
        "id": 422321852,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708386322
    },
    {
        "content": "<p>I just filed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11045\">#11045</a> with what I have (plus a few more fixes).<br>\nI have a list of 90 remaining hits to be investigated. <span class=\"user-mention\" data-user-id=\"380890\">@Emilie (Shad Amethyst)</span> If you like, I can share.</p>",
        "id": 423792661,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709117495
    },
    {
        "content": "<p>I wrote a syntax linter against this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13220\">#13220</a> - the remaining syntax replacements (about 30) are in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13219\">#13219</a>. The description for <a href=\"https://github.com/leanprover-community/mathlib4/pull/13220\">#13220</a> also contains my best effort at summarising <em>why</em> this removal is discussed.</p>",
        "id": 440661436,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716668293
    },
    {
        "content": "<p>In the same vein: I realised mathlib has about 40 uses of stream-of-conciousness <code>rsuffices</code> (which is a wrapper around obtain). Are these undesirable also? If so, I could use help removing them.<br>\nI've also made the linter flag them, so looking at the warnings in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13220\">#13220</a> will tell you where to go.</p>",
        "id": 440696652,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716711770
    },
    {
        "content": "<p>I think the rsuffices syntax only works that way</p>",
        "id": 440702951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716718885
    },
    {
        "content": "<p>Ah, so linting it makes no sense... I see, I'll take it out again.</p>",
        "id": 440711107,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716727557
    },
    {
        "content": "<p>It makes sense if you fix <code>rsuffices</code> syntax.</p>",
        "id": 440751265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716767388
    },
    {
        "content": "<p>Sure: I'll put this on my eternal list - but let's rather land an obtain linter first.</p>",
        "id": 440805823,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716799597
    }
]