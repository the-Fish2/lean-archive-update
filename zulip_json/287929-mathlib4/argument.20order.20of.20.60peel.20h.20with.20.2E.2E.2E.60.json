[
    {
        "content": "<p>About the main proof above: <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I am always confused by the ordering in the <code>with</code> clause of <code>peel</code>. Is there a rational explanation or is the implementation making it random?</p>",
        "id": 411063566,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308006
    },
    {
        "content": "<p>I don't think I understand the question. Can you provide a mwe with the goal state before and after and what you find \"random\" about it?</p>",
        "id": 411064656,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704308472
    },
    {
        "content": "<p>The above example is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, although it could be minimized more.</p>",
        "id": 411064779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308515
    },
    {
        "content": "<p>It has <code>this: ∃ i, 0 &lt; i ∧ ∀ ⦃x : ℂ⦄, x ∈ Metric.closedBall 0 i → ‖f x‖ ≤ c</code> and the goal is <code>∃ i, 0 &lt; i ∧ ∀ ⦃x : ℂ⦄, x ∈ Metric.closedBall 0 i → ∀ y ∈ Ι 0 x.im, ‖f (↑x.re + ↑y * I)‖ ≤ c</code>.</p>",
        "id": 411064912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308549
    },
    {
        "content": "<p>The correct argument order in <code>peel</code> is <code>hi i i_pos</code> which feels completely random.</p>",
        "id": 411065065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308600
    },
    {
        "content": "<p>where <code>i</code> is <code>i</code>, <code>i_pos : 0 &lt; i</code> and <code>hi : ∀ ⦃x : ℂ⦄, x ∈ Metric.closedBall 0 i → ‖f x‖ ≤ c</code>.</p>",
        "id": 411065290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308662
    },
    {
        "content": "<p>The order I would expect is <code>i i_pos hi</code>.</p>",
        "id": 411065361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308685
    },
    {
        "content": "<p>How can <code>i</code> come after <code>hi</code> if <code>hi</code> depends on <code>i</code>?</p>",
        "id": 411065430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704308713
    },
    {
        "content": "<p>Thanks, I see what you mean now.</p>",
        "id": 411065448,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704308722
    },
    {
        "content": "<p>Johan, this is only a sequence of names at the time you call the tactic.</p>",
        "id": 411065547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704308760
    },
    {
        "content": "<p>Ooh, right, I see it now</p>",
        "id": 411065629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704308775
    },
    {
        "content": "<p>So, the rule is that the hypothesis comes first and all the variables introduced come after. I think it might be easily switched, but I'd need to review the implementation. I think I originally wrote it this way for simplicity of the recursion when applying <code>peel</code> a number of times equal to the number of variables introduced.</p>",
        "id": 411066177,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704309000
    },
    {
        "content": "<p>It's easy, I'll PR shortly.</p>",
        "id": 411069124,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704310328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/9413\">#9413</a></p>",
        "id": 411070957,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704311189
    },
    {
        "content": "<p>Thanks. I don't really know how to make sure other users agree with me.</p>",
        "id": 411072458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704311934
    },
    {
        "content": "<p>How many uses of <code>peel</code> did you find in Mathlib?</p>",
        "id": 411072474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704311944
    },
    {
        "content": "<p>only one, and I think it was mine!</p>",
        "id": 411072499,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704311959
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/pulling.20continuity.20past.20integrals\">#Is there code for X? &gt; pulling continuity past integrals</a> by <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>.</p>",
        "id": 411072955,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704312134
    },
    {
        "content": "<p>I use it in my undergraduate course to prove things like if a(n) tends to L then -a(n) tends to -L.</p>",
        "id": 411076104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704313468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> how do you feel about this swap in the argument order for the <code>with</code> clause?</p>",
        "id": 411084488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704317165
    },
    {
        "content": "<p>I had to read up on the tactic definition because I missed when this tactic was introduced, but after having done so I agree with Patrick, the <code>h</code> should come last</p>",
        "id": 411087010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704318446
    },
    {
        "content": "<p>Feel free to fiddle with it</p>",
        "id": 411091298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704320538
    },
    {
        "content": "<p>This is good enough for me but Kyle left a request on GitHub.</p>",
        "id": 411091391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704320613
    }
]