[
    {
        "content": "<p>I have a sequence <code>u : ℕ → ENNReal</code> with the hypothesis <code>hu : Filter.Tendsto u Filter.atTop (nhds 0)</code>.<br>\nI also have, for a constant <code>a : ENNReal</code>, the hypothesis <code>a : ∀ (n : ℕ), a ≤ u (Nat.succ n)</code> (the <code>n.succ</code> is important for precisely how <code>a</code> is defined). I would like to conclude that <code>a=0</code>, but I'm not sure how. The closest thing I found was <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Order/Basic.html#le_of_tendsto_of_tendsto'\">docs#le_of_tendsto_of_tendsto'</a>, but my attempts at getting it to work were unsuccessful (in particular, I failed to get the LHS to be recognized as the limit of a filter). Any ideas how I could do this?</p>",
        "id": 424068566,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709226980
    },
    {
        "content": "<p>You can tremendously increase the probability to get a helpful answer by providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 424068827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709227065
    },
    {
        "content": "<p>(Also, if your original message was right, you’re recycling ‘a’ as a name)</p>",
        "id": 424073607,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709228469
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ge_of_tendsto#doc\">docs#ge_of_tendsto</a> is more likely to help? But indeeed it would be easier to help with a MWE.</p>",
        "id": 424075422,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709229013
    },
    {
        "content": "<p>Apologies, here's a <a href=\"/user_uploads/3121/g_FW6jQ8JA-E-VxvoFDGay-D/MWE.lean\">MWE.lean</a></p>",
        "id": 424084426,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709232078
    },
    {
        "content": "<p>Or rather, here's a better one that actually highlights my current confusion (I don't know much about how to prove Filter.eventually). <a href=\"/user_uploads/3121/G9s9SMDIQL-V22B3bJCj4hTz/MWE.lean\">MWE.lean</a></p>",
        "id": 424084721,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709232191
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for how to put code directly in Zulip (this way it can be opened on the web editor with  a click too!). It's more practical than sending files (TLDR is \"put the code between backticks\")</p>",
        "id": 424085243,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709232378
    },
    {
        "content": "<p>Ah, thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> These are not minimal imports, but they work. -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"n\">u</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ge_of_tendsto</span> <span class=\"n\">hu</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424085895,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709232566
    },
    {
        "content": "<p>Here's one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"n\">u</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ge_of_tendsto</span> <span class=\"n\">hu</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eventually_atTop.mpr</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_pred_eq_of_pos</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 424090053,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709233925
    },
    {
        "content": "<p>That works, thanks!</p>",
        "id": 424135646,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709253223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"530359\">Connor Gordon</span> has marked this topic as resolved.</p>",
        "id": 424135648,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709253225
    }
]