[
    {
        "content": "<p>I'd like to rewrite the style linter for \"import Mathlib.Tactic\" (currently in Python) in Lean. I would appreciate opinions on a design decision I have. I could</p>\n<ul>\n<li>(A) write this as a text-based linter (basically, just translating the Python to Lean): this is fast and probably accurate enough</li>\n<li>(B) write a syntax linter, acting on <code>import</code> statements.</li>\n</ul>\n<p>(B) might be slower, as it presumably needs to do more work - I haven't benchmarked to know if this is relevant at all. On the upside, this would yield precise error messages, directly on the import. Any opinions?</p>",
        "id": 444695167,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718369925
    },
    {
        "content": "<p>B. should be pretty easy since <code>lake exe mk_all</code> is now a thing</p>",
        "id": 444696809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718370416
    },
    {
        "content": "<p>I know about <code>mk_all</code>... I don't see how this is relevant to my actual question, though. Perhaps, let me rephrase my question: as a user/as a maintainer, which type of linter would you prefer? I'm reasonably sure I can make both of them work.</p>",
        "id": 444704657,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718372911
    },
    {
        "content": "<p>This desire isn’t limited to mathlib — see also <a href=\"https://github.com/leanprover/lean4/pull/3374#issuecomment-1952796088\">https://github.com/leanprover/lean4/pull/3374#issuecomment-1952796088</a></p>",
        "id": 444706434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718373434
    }
]