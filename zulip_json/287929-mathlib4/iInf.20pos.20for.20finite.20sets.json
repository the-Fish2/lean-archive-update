[
    {
        "content": "<p>I cannot seem to find a way to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">forall_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This should intuitively be true, and I'm confused as to why I struggle to prove it too, since it should just be a matter of proving it by induction on <code>ι</code></p>",
        "id": 422030378,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708191994
    },
    {
        "content": "<p>What if <code>ι</code> is empty?</p>",
        "id": 422030433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708192046
    },
    {
        "content": "<p>Right, I forgot this assumption; in my case <code>ι</code> is Nonempty</p>",
        "id": 422030571,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708192175
    },
    {
        "content": "<p>Does it work to contrapose and apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iInf_le#doc\">docs#iInf_le</a> with your arbitrary element from iota?</p>",
        "id": 422032084,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708193531
    },
    {
        "content": "<p>No, because that wouldn't use finiteness</p>",
        "id": 422032139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708193608
    },
    {
        "content": "<p><code>1, 1/2, 1/3, ...</code> is a sequence of strictly positive reals whose infimum is zero</p>",
        "id": 422032151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708193637
    },
    {
        "content": "<p>After taking a small break, I have the following proof for this fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_csInf_finset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s_ne</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sInf</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s_ne</span> <span class=\"n\">using</span> <span class=\"n\">Finset.Nonempty.cons_induction</span>\n  <span class=\"n\">case</span> <span class=\"n\">h₀</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs</span>\n  <span class=\"n\">case</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">x_notin_s</span> <span class=\"n\">s_ne</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.cons_eq_insert</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">forall_eq_or_imp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.cons_eq_insert</span><span class=\"o\">,</span> <span class=\"n\">Finset.coe_insert</span><span class=\"o\">,</span> <span class=\"n\">csInf_insert</span> <span class=\"o\">(</span><span class=\"n\">Finset.bddBelow</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s_ne</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_inf_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hs.left</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"n\">hs.right</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_csInf_of_finite</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s_fin</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_ne</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">finset</span><span class=\"o\">,</span> <span class=\"n\">s_eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s_fin.exists_finset_coe</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">s_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_csInf_finset</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">s_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">s_ne</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">s_eq</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_ciInf_of_finite</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sInf_range</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_csInf_of_finite</span> <span class=\"o\">(</span><span class=\"n\">finite_range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range_nonempty</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">simpa</span>\n</code></pre></div>",
        "id": 422034656,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708196011
    },
    {
        "content": "<p>(I was having fun looking at this and didn't notice your message.) A useful lemma already in Mathlib is <code>Finset.Nonempty.cInf_eq_min'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.ConditionallyCompleteLattice.Finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Archimedean</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">forall_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">Finset.Nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sInf</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Finset.Nonempty.cInf_eq_min'</span> <span class=\"n\">he</span><span class=\"o\">]</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Finset.lt_min'_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.Finite.exists_finset_coe</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.finite_range</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">Finset.Nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.coe_nonempty</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Set.range_nonempty</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">forall_pos</span> <span class=\"n\">i</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">iInf</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hs</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">hne</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 422035246,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708196556
    },
    {
        "content": "<p>Ah, well there's <code>lt_cInf_iff</code></p>",
        "id": 422035408,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708196722
    },
    {
        "content": "<p>Darn, I was only searching for <code>csInf</code> and <code>ciInf</code>, so at no point it yielded results about <code>cInf</code></p>",
        "id": 422035493,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708196782
    },
    {
        "content": "<p>Gotta fix those names</p>",
        "id": 422035536,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708196839
    },
    {
        "content": "<p>cInf is a porting error</p>",
        "id": 422052131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708214686
    }
]