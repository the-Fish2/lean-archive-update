[
    {
        "content": "<p>I spend most of my day struggling with various versions of this MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.fst.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">S.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>More abstract version (again, counting the same thing in two ways):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">t</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">t</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If you help me with any of the two examples (I am posting both because I don't know which of them is simpler), I will hugely appreciate it!</p>",
        "id": 422454421,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708446318
    },
    {
        "content": "<p>My impression is that <code>Finset.sum_sigma</code> should be applicable to my situation, but I don't know how.</p>",
        "id": 422482208,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708455565
    },
    {
        "content": "<p>This kind of sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, but I managed to get this so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">s.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">s.snd</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.val.fst.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">S.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">s.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">s.snd</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">show</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">val.fst</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">val</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prop</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">s.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">s.snd</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.val.fst.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.sum</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.val</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Finset.univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_attach</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_equiv</span> <span class=\"n\">e.symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pn</span><span class=\"o\">⟩,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 422496464,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708461184
    },
    {
        "content": "<p>Thanks a lot!!!</p>\n<p>I'll try to unXY and see whether this approach is applicable to my original problem.</p>",
        "id": 422498380,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708462078
    },
    {
        "content": "<p>With a small lemma you can get a cleanish solution to your original equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.filter_univ_eq_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]:</span>\n    <span class=\"n\">Finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">funny_sum</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.fst.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">S.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">s.fst.val</span> <span class=\"bp\">=</span> <span class=\"n\">s.snd</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">show</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">val.fst</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">val</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prop</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.filter_univ_eq_image</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_image</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.coe_injective</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Finset.sum_attach</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.univ_eq_attach</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_equiv</span> <span class=\"n\">eqv.symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pn</span><span class=\"o\">⟩,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>(I can't seem to find a <code>Subtype.valEmbedding</code> for use in <code>Finset.map</code>)</p>",
        "id": 422507799,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708466110
    },
    {
        "content": "<p>But yeah, being able to construct an equivalence relationship between two types in a sum like this is very powerful</p>",
        "id": 422508101,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708466227
    },
    {
        "content": "<p>The nonMWE nonXY place where I needed it:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/4209830a88cce2c0518b942380c43e8057783de5/VCSP/LinearRelaxation.lean#L99\">https://github.com/madvorak/vcsp/blob/4209830a88cce2c0518b942380c43e8057783de5/VCSP/LinearRelaxation.lean#L99</a><br>\nThanks <span class=\"user-mention\" data-user-id=\"380890\">@Emilie (Shad Amethyst)</span> once again!</p>",
        "id": 422615446,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708521498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 422617864,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708522231
    }
]