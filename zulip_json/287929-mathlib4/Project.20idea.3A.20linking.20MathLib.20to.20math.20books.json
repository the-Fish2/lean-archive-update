[
    {
        "content": "<p>I find that tools like Loogle and Moogle are very useful to find results when you somewhat know what to look for. However, sometimes it is hard (for me) to find common results, e.g. because the Mathlib name describes the content of a result rather than the common name of the result, which leaves me guessing for the correct spelling, which then may depend on the level of generality in which the result is added. I was wondering if it would be beneficial to kind of link Mathlib to some math books. What I mean by this is the following:</p>\n<p>For each (major) area of mathematics, identify a good source, which ideally is freely accessible. For this source, create one file per chapter, which lists all definitions and results. Definitions are linked to Mathlib definitions directly, and results are, as much as possible, one-line proofs based on Mathlib results, or at least short proofs. It would be fine if these results are proven from a much more general result (e.g. FTC from Stokes' theorem). So, I'm not advocating to reprove everything in terms of these books, but to show a possible road that one could take for these results, using results from Mathlib. </p>\n<p>The benefits of this are three-fold:</p>\n<ul>\n<li>While formalising a proof, some of the cognitive load is shifted from guessing the Mathlib phrasing to finding the necessary result in the math books. </li>\n<li>Missing results/proofs that are very long provide for a good indication that there might be some result that we are missing in Mathlib</li>\n<li>It potentially provides for some nice, beginner-friendly, projects. </li>\n</ul>\n<p>The books/sources that I have in mind would be e.g. <br>\nBourbaki (topology, analysis etc.)<br>\n(parts of the) Stacks project</p>\n<p>I'm curious what your thoughts are on this, and if there is interest in starting such a thing! I'm happy to play a part in this!</p>\n<p>For pi-base (a topology database), I am trying to do a similar thing, but I'm trying to do that in an automated way, so I'm learning more Lean to get as much as possible done automatically there. As such, that is still very much WIP, as I'm working through FPIL (which is going a bit slowly)</p>",
        "id": 423339314,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708933947
    },
    {
        "content": "<p>This is something I've wanted to see, with just about the same vision. <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20linear.20algebra.20done.20right/near/284077500\">I've thought</a> this could be a good use of the Archive folder, depending on the textbook, and <a href=\"#narrow/stream/113488-general/topic/Linear.20Algebra.20Done.20Right.2C.20Complex.20mul_comm/near/343808820\">I agree</a> with trying to make all the proofs one-liners.</p>",
        "id": 423344252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708935999
    },
    {
        "content": "<p>I’d love this! I’ve had a related desire, which is simply to create a systematic way to formalize books and papers (i.e. without the motivation to use them as ways to find Mathlib results, though keeping things in terms of mathlib as much as possible would be good practice, I’d think).</p>\n<p>In my thoughts on this, I’ve figured it would be nice to be able to</p>\n<ol>\n<li>have <code>page &lt;n&gt;</code> commands to specify page breaks (and which could be used for navigation)</li>\n<li>have <code>proposition</code>, <code>eq</code>(uation) and <code>corollary</code> (etc.) commands in addition to <code>theorem</code> and <code>lemma</code> to aid search and organization (<code>corollary</code> would store the theorem it was a corollary of somehow)</li>\n<li>be able to name things by numbers as well, in a way that provides structured access (e.g. so that later you could draw up all the <code>1.3.*</code> items)</li>\n</ol>\n<p>Down the road, for some books and papers, it would even be nice to have a way to produce literate lean versions of the book with the author’s cooperation, so that you could read it in lean (with hovers, etc.). (Lean blueprints sound relevant, esp. for the reading part?)</p>\n<p>(People may already be working on this or have something like it, I’m not sure—I’d certainly be interested!)</p>",
        "id": 423344264,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708936004
    },
    {
        "content": "<p>Good to hear, let’s see if there’s more support for this line of thought so we can see if/how something like this could be shaped! Or if there is another such project already, which tries to systematically do this!</p>",
        "id": 423345162,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708936364
    },
    {
        "content": "<p><a href=\"https://github.com/YaelDillies/LeanCamCombi/\">My entire LeanCamCombi project</a> is an extensive exercise in doing just this, except that it's comprising material not yet formalised.</p>",
        "id": 423349602,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708937920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423349602\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/YaelDillies/LeanCamCombi/\">My entire LeanCamCombi project</a> is an extensive exercise in doing just this, except that it's comprising material not yet formalised.</p>\n</blockquote>\n<p>Very nice! So do you think that something like the approach that I described for some other areas of math would be nice to have?</p>",
        "id": 423350641,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708938200
    },
    {
        "content": "<p>Yes, absolutely. This is far from the first thread about it</p>",
        "id": 423351530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708938404
    },
    {
        "content": "<p>Great, so suppose we want to do this in an organised way, would the best approach be to </p>\n<ul>\n<li>Find some collaborators interested in this</li>\n<li>Draft a project proposal</li>\n<li>Propose a first book as proof-of-concept</li>\n<li>Get community feedback</li>\n<li>Start<br>\nOr would you propose a different methodology?</li>\n</ul>",
        "id": 423351991,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708938561
    },
    {
        "content": "<p>I would go straight to \"Start\". It's much easier to get collaborators and feedback once you have a clear proof-of-concept</p>",
        "id": 423353601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708938933
    },
    {
        "content": "<p>I have been meaning to do it myself but I don't really know what specific book to follow. I've specialised in formalising things for which there's no textbook <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 423353840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708939021
    },
    {
        "content": "<p>I agree: don't get lost in proposals and proofs of concept. Pick a book, start and see what the actual design questions for such a lean-book pairing are.<br>\nIf you want a probability book, I suggest Kallenberg's Foundations of modern probability (3rd ed.).</p>",
        "id": 423353974,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708939072
    },
    {
        "content": "<p>Although the proofs might be short at times, and sometimes what takes a page in that book requires thousands of lines of code, at least all the important arguments are there and are presented in a quite formal way.</p>",
        "id": 423354290,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708939187
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 423354510,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708939255
    },
    {
        "content": "<p>Or, look for a book that has already inspired various mathlib proofs.  Some of the bourbaki texts would probably do.</p>",
        "id": 423355632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708939687
    },
    {
        "content": "<p>This way, you can get to the \"linking\" phase directly and partially delay the formalising stuff.</p>",
        "id": 423355770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708939747
    },
    {
        "content": "<p>Yes, I was thinking of Bourbaki as well, but the English versions seem to not be open access on Springer. I've been meaning to refresh my French so I'm happy to use the French version, but that might not be as accessible for everyone.</p>",
        "id": 423355816,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708939764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423355770\">said</a>:</p>\n<blockquote>\n<p>This way, you can get to the \"linking\" phase directly and partially delay the formalising stuff.</p>\n</blockquote>\n<p>Ideally, I don't formalise anything. In the end, the idea of linking a book would be that it gives quick pointers to results in Mathlib, so I'd want as much as possible to be obtained just by linking.</p>",
        "id": 423356207,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708939864
    },
    {
        "content": "<p>For a mathematician with no formalisation training, reading a french maths texts is probably easier than reading lean code.  I would ignore the issue at first.</p>",
        "id": 423356299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708939899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423356207\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423355770\">said</a>:</p>\n<blockquote>\n<p>This way, you can get to the \"linking\" phase directly and partially delay the formalising stuff.</p>\n</blockquote>\n<p>Ideally, I don't formalise anything. In the end, the idea of linking a book would be that it gives quick pointers to results in Mathlib, so I'd want as much as possible to be obtained just by linking.</p>\n</blockquote>\n<p>I suspect that there will be some formalisation link to be provided, no matter what.</p>",
        "id": 423356413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708939930
    },
    {
        "content": "<p>If this is a shared sentiment, I'll work on Bourbaki, General Topology chapters 1-4.</p>",
        "id": 423356450,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708939945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423353840\">said</a>:</p>\n<blockquote>\n<p>I have been meaning to do it myself but I don't really know what specific book to follow. I've specialised in formalising things for which there's no textbook <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>LeanCamCombi is actually far enough along that I could start writing some maths items and link them.</p>",
        "id": 423356801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708940050
    },
    {
        "content": "<p>Of course there are still English versions of the Bourbaki ones, just not directly accessible through SpringerLink (for me at least). </p>\n<p>I'll make a new project this afternoon and use Mathlib as a dependency. I'll need to polish my French a bit and mainly work on this during my daily commutes, so I'm not sure how quickly everything will go! Once I get the first two/three paragraphs in, I'll post a link here so that anyone can get some feedback.</p>",
        "id": 423356911,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708940095
    },
    {
        "content": "<p>Having no experience with Bourbaki myself - are the theorem numbers consistent between the translations?</p>",
        "id": 423357240,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708940222
    },
    {
        "content": "<p>Instead of having a separate project and listing results there, could you simply add the reference to the mathlib docstring? If a result from Bourbaki is missing, chances are high it should be added to mathlib anyway.<br>\nAt some point we could add reference support in the docs to autogenerate linking maps from the docstrings.</p>",
        "id": 423357762,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708940412
    },
    {
        "content": "<p>The entire point of this project is to generate that reference support</p>",
        "id": 423357913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708940465
    },
    {
        "content": "<p>Once we have those textbooks translations mostly sorted, we will be able to add them to mathlib and get doc-gen to automatically add the references to the docstring</p>",
        "id": 423358105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708940537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423357913\">said</a>:</p>\n<blockquote>\n<p>The entire point of this project is to generate that reference support</p>\n</blockquote>\n<p>Then you read Joshas description differently than me.</p>",
        "id": 423358383,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708940643
    },
    {
        "content": "<p>If they differ, I'm talking about my idea, not Joshua's</p>",
        "id": 423358892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708940794
    },
    {
        "content": "<p>I'm guessing the average textbook (Bourbaki perhaps less so) will state most of its results in less generality than mathlib, so building a map purely by tagging existing mathlib theorems would not necessarily be the most readable</p>",
        "id": 423359080,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708940846
    },
    {
        "content": "<p>But the most useful, I only care about mathlib theorems when I am searching for a result I would like to use downstream.</p>",
        "id": 423359440,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708940949
    },
    {
        "content": "<p>I see Christian's point here. I think multiple lines of thought are possible:</p>\n<ol>\n<li>We make a file for a given book, in which we list every definition and result from that book chronologically. Each proof will ideally be a one-line Mathlib proof, and each definition should just be a reference to the Mathlib reference. This way, the file can be searched to link results from the book to Mathlib results easily. The advantage here is that we don't need to add new results to Mathlib that are mentioned in the book but are present in Mathlib in a more general way: they provide the reader with an example of how the result can be obtained from Mathlib.</li>\n<li>For a given book, we create tags, e.g. [@ Bourbaki ref_no], which we put with the relevant results in Mathlib. We then write some code that automatically reads in all the results tagged and aggregates them in a file. What I fear might be disadvantages here may be that books typically have less general results, and that multiple books that we may want (e.g. general topology, functional analysis) may have a few overlapping definitions, which would lead to a cluttering of tags. </li>\n</ol>\n<p>I was proposing the former, which I think is Yaël's interpretation. Christian's interpretation is the second.</p>",
        "id": 423359493,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708940969
    },
    {
        "content": "<p>Actually, neither of these is exactly what I meant</p>",
        "id": 423359688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708941022
    },
    {
        "content": "<p>What did you mean?</p>",
        "id": 423359809,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708941059
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 423360314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708941234
    },
    {
        "content": "<p>Another potential disadvantage of option one is maintainability, at least as long as you don't plan this to be included in the mathlib repo itself.</p>",
        "id": 423360403,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708941252
    },
    {
        "content": "<p>For the cluttering of tags issue: Ideally all the reference tags can be hidden in the mathlib docs page (similar to the \"Show equations\" dropdown).</p>",
        "id": 423360834,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708941376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423360403\">said</a>:</p>\n<blockquote>\n<p>Another potential disadvantage of option one is maintainability, at least as long as you don't plan this to be included in the mathlib repo itself.</p>\n</blockquote>\n<p>I think that having a solid set of textbooks easily linked to Mathlib would really help with the adoption of Mathlib for new formalisation projects, so I hope that we can find some way of including this in the Mathlib repo (not necessarily while WIP, but certainly when finished). Of course this should not be a <code>catch them all</code> effort in which people start formalising every book and adding it to the Mathlib repo: we should have a curated set of books, like 1 advanced book per topic.</p>",
        "id": 423360941,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708941417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423360834\">said</a>:</p>\n<blockquote>\n<p>For the cluttering of tags issue: Ideally all the reference tags can be hidden in the mathlib docs page (similar to the \"Show equations\" dropdown).</p>\n</blockquote>\n<p>That would certainly help, yes!</p>",
        "id": 423361079,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708941463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423360941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423360403\">said</a>:</p>\n<blockquote>\n<p>Another potential disadvantage of option one is maintainability, at least as long as you don't plan this to be included in the mathlib repo itself.</p>\n</blockquote>\n<p>I think that having a solid set of textbooks easily linked to Mathlib would really help with the adoption of Mathlib for new formalisation projects, so I hope that we can find some way of including this in the Mathlib repo (not necessarily while WIP, but certainly when finished). Of course this should not be a <code>catch them all</code> effort in which people start formalising every book and adding it to the Mathlib repo: we should have a curated set of books, like 1 advanced book per topic.</p>\n</blockquote>\n<p>Maybe a maintainer can give their opinion on this, if this is included in the mathlib repo it still means additional maintenance work (e.g. when renaming theorems) while a rename does not require the reference tag in the doc string to be changed.</p>",
        "id": 423362029,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708941783
    },
    {
        "content": "<p>I have specific ideas about how this should be set up:</p>\n<ul>\n<li>Every textbook/chapter of a textbook gets a JSON file. Inside that JSON file, every maths result/definition gets an entry with<ul>\n<li>its number inside the book (not all results/definitions will have that, eg because it's an intermediate result that's worth mentioning separately)</li>\n<li>its informal name (again, not all results/definitions will have that)</li>\n<li>the name of the corresponding Lean declaration</li>\n</ul>\n</li>\n<li>Most Lean declarations will hopefully be in mathlib. However some results are not worth being spelled out in mathlib proper (because they are easy chainings of mathlib lemmas or because they are examples with no practical use), so there has to be a supplementary source of the Lean declarations. I see two non-mutually exclusive solutions:<ul>\n<li>Host the extra declarations in a separate project. This will be the solution at the start, while we still figure out how to organise the whole thing.</li>\n<li>Host the extra declarations in the mathlib repo, either in <code>Archive</code> (which I think is good enough) or in a separate <code>Textbooks</code> folder. This is the solution I want there to be for mature textbook translations because it further allows...</li>\n</ul>\n</li>\n<li>... each JSON file of textbook translation gets a page in the docs with links to the in the style of the <a href=\"https://leanprover-community.github.io/undergrad_todo\">undergraduate TODO list</a>. Further, each mathlib declaration linked in a textbook translation automatically gets a little tag in the docs sending back to the corresponding textbook translation's page.</li>\n</ul>",
        "id": 423362041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708941786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423362029\">said</a>:</p>\n<blockquote>\n<p>if this is included in the mathlib repo it still means additional maintenance work (e.g. when renaming theorems) while a rename does not require the reference tag in the doc string to be changed.</p>\n</blockquote>\n<p>This will become a non-problem once we have implemented <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>'s ideas on automatic migration. If it's included in the mathlib repo, it also means that CI will run on it, so it's no more work than to change any other occurrence of a theorem.</p>",
        "id": 423362319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708941897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423362041\">said</a>:</p>\n<blockquote>\n<p>I have specific ideas about how this should be set up:</p>\n<ul>\n<li>Every textbook/chapter of a textbook gets a JSON file. Inside that JSON file, every maths result/definition gets an entry with<ul>\n<li>its number inside the book (not all results/definitions will have that, eg because it's an intermediate result that's worth mentioning separately)</li>\n<li>its informal name (again, not all results/definitions will have that)</li>\n<li>the name of the corresponding Lean declaration</li>\n</ul>\n</li>\n<li>Most Lean declarations will hopefully be in mathlib. However some results are not worth being spelled out in mathlib proper (because they are easy chainings of mathlib lemmas or because they are examples with no practical use), so there has to be a supplementary source of the Lean declarations. I see two non-mutually exclusive solutions:<ul>\n<li>Host the extra declarations in a separate project. This will be the solution at the start, while we still figure out how to organise the whole thing.</li>\n<li>Host the extra declarations in the mathlib repo, either in <code>Archive</code> (which I think is good enough) or in a separate <code>Textbooks</code> folder. This is the solution I want there to be for mature textbook translations because it further allows...</li>\n</ul>\n</li>\n<li>... each JSON file of textbook translation gets a page in the docs with links to the in the style of the <a href=\"https://leanprover-community.github.io/undergrad_todo\">undergraduate TODO list</a>. Further, each mathlib declaration linked in a textbook translation automatically gets a little tag in the docs sending back to the corresponding textbook translation's page.</li>\n</ul>\n</blockquote>\n<p>I think this sounds very good. I have two small questions:</p>\n<ol>\n<li>Do you have a sketch for how you would like the JSON file to look?</li>\n<li>If you are using JSON rather than .lean files, how can we automatically pick up when the corresponding Lean declaration is updated?</li>\n</ol>",
        "id": 423362738,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708942047
    },
    {
        "content": "<p>And I guess you want additional CI support to check that that the linked mathlib declarations in the JSON actually exist?</p>",
        "id": 423362743,
        "sender_full_name": "Christian Merten",
        "timestamp": 1708942048
    },
    {
        "content": "<ol>\n<li>Yes</li>\n<li>Yes</li>\n<li>Yes</li>\n</ol>",
        "id": 423362791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708942071
    },
    {
        "content": "<p>A good example to follow is the <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/docs/undergrad.yaml\">undergraduate TODO list</a>. It uses YAML instead of JSON. I'm not sure how much that matters. And here's <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/.github/workflows/build.yml#L266-L269\">the CI step that checks the YAML contains existing Lean declarations</a>.</p>",
        "id": 423363155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708942199
    },
    {
        "content": "<p>Thank you! Shall I make a new project and write up something for the first section or two of Bourbaki's Topology book? I guess it might be useful to use YAML then, as that allows us to recycle the same CI step? I have no experience with setting up CI, so I won't do that yet. If anything is missing, I'll add that to a separate file and reference that as well.</p>",
        "id": 423363782,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708942419
    },
    {
        "content": "<p>That sounds like the best path forward! Feel free to add me to the repo. Then I can set up CI.</p>",
        "id": 423364053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708942520
    },
    {
        "content": "<p>I guess it is probably better to make a new project with Mathlib as dependency at this point, rather than branching Mathlib and working directly in <code>docs</code>?</p>",
        "id": 423364080,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708942530
    },
    {
        "content": "<p>Yes, definitely</p>",
        "id": 423364100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708942541
    },
    {
        "content": "<p>I'll do that this afternoon! Thanks!</p>",
        "id": 423364104,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708942542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423364053\">said</a>:</p>\n<blockquote>\n<p>That sounds like the best path forward! Feel free to add me to the repo. Then I can set up CI.</p>\n</blockquote>\n<p>I've sent you an invite, feel free to change what you want of course!</p>",
        "id": 423419562,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708961039
    },
    {
        "content": "<p>If I want this to be related to Mathlib at some point, I need to get it formatted in a workable way anyway!</p>",
        "id": 423420902,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708961337
    },
    {
        "content": "<p>I've also set up a minimal example in <br>\n<code>LeanBourbaki/Chapter1/Chapter1Lean.yaml</code> please feel free to change the structure to a format you like better/works with CI,  then I'll start adding things!</p>",
        "id": 423446045,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708967802
    },
    {
        "content": "<p>Do you have a link to it?</p>",
        "id": 423452868,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708969975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423452868\">said</a>:</p>\n<blockquote>\n<p>Do you have a link to it?</p>\n</blockquote>\n<p>It is still very much WIP, but I can send a link in a bit if you like!</p>",
        "id": 423457020,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708971422
    },
    {
        "content": "<p>The project is in here, but it is still very much WIP (read: no actual content so far...)<br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> will at some point add CI, and I'm not sure what format for the YAML files would be optimal, which will probably depend on the way the CI plays out.<br>\n<a href=\"https://github.com/JADekker/LeanBourbaki\">https://github.com/JADekker/LeanBourbaki</a></p>",
        "id": 423459888,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708972445
    },
    {
        "content": "<p>I think it would be good to have at least some formalized textbooks in the Archive folder. For example, Topologie générale, ones that make sure that everything that's supposed to be in mathlib is actually there.</p>\n<p>Yes, it increases the mathlib maintenance burden, but I see the Archive as being one of mathlib's test suites.</p>\n<p>Plus, this serves as documentation for mathlib. If you are familiar with the textbook, you can find the result you want, locate that result in the Archive, and then see its (hopefully one-liner) proof. Sure, mathlib is at a different level of generality than most textbooks, but that doesn't affect whether mathlib can prove the textbook results.</p>",
        "id": 423460368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708972628
    },
    {
        "content": "<p>I'm less certain about linking <em>from</em> mathlib to particular textbook. Things can look fairly different when formalized, and it can be hard to say which theorem is <em>the</em> textbook theorem.</p>\n<p>I think I'd prefer if the formalized textbook mark out what's the main mathlib theorem that proves it. From that, we can generate the reverse mapping.</p>",
        "id": 423460637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708972729
    },
    {
        "content": "<p>A random idea for how to implement it: we can create syntax to tag a theorem <em>inside</em> the proof with metadata saying \"this is what proves the current theorem\" and then have some metaprogramming read this off. That way you don't have to keep anything synchronized as the Archive is maintained (i.e., when someone makes a mathlib change and hurriedly goes through and fixes the Archive)</p>",
        "id": 423460911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708972828
    },
    {
        "content": "<p>I just pushed some very basic CI bodging things together from mathlib, PFR and LeanAPAP. Unsurprisingly, it doesn't work (yet), but at least I can explain that the idea is currently to follow the layout from <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/docs/100.yaml\">https://github.com/leanprover-community/mathlib4/blob/master/docs/100.yaml</a></p>",
        "id": 423637631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709048760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, do you know why we are using YAML if the first YAML processing step is turning the files into JSON?</p>",
        "id": 423637872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709048797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Project.20idea.3A.20linking.20MathLib.20to.20math.20books/near/423637631\">said</a>:</p>\n<blockquote>\n<p>I just pushed some very basic CI bodging things together from mathlib, PFR and LeanAPAP. Unsurprisingly, it doesn't work (yet), but at least I can explain that the idea is currently to follow the layout from <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/docs/100.yaml\">https://github.com/leanprover-community/mathlib4/blob/master/docs/100.yaml</a></p>\n</blockquote>\n<p>Thank you! I tried to follow that, although I’m not entirely sure what the optimal formatting would be here…</p>",
        "id": 423646393,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709050492
    },
    {
        "content": "<p>The convert-to-json step was added as part of the change from our scripts being converted from python to Lean</p>",
        "id": 423647389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709050759
    },
    {
        "content": "<p>Yaml is nicer to read and edit for humans, json is a bit nicer for computers. And this translation step is purely because Lean 4 has a json lib but no yaml lib.</p>",
        "id": 423670665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709058201
    },
    {
        "content": "<p>How hard is it to write a yaml lib? Maybe I should just do that. Probably good training on Lean as a general purpose programming language.</p>",
        "id": 423700909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709069768
    },
    {
        "content": "<p>As I understand it, yaml is a cursed format that is incredibly hard to parse correctly... Let me see if I can find the blog post I'm thinking of</p>",
        "id": 423701138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709069882
    },
    {
        "content": "<p><code>toml</code>?</p>",
        "id": 423701219,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709069907
    },
    {
        "content": "<p>I'm happy with any format so long as I can write a Lean library for it</p>",
        "id": 423701946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709070217
    },
    {
        "content": "<p>I think XML is coming back into style :)</p>",
        "id": 423702358,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709070410
    },
    {
        "content": "<p>Turns out XML is also a cursed format, though maybe not as cursed as yaml</p>",
        "id": 423703647,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709070936
    },
    {
        "content": "<p>Here's one post about why yaml is so hard to parse and author: <a href=\"https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell\">https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell</a></p>",
        "id": 423706040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709071467
    },
    {
        "content": "<p>There's also Apple's recent open-source <a href=\"https://pkl-lang.org/index.html\">Pkl</a> config language which is meant to be able to convert to json/yaml/etc. while behaving like a statically-typed language (plus, it can check constraints)—but I imagine it hasn't been fully battle-tested yet.</p>",
        "id": 423710648,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709073129
    },
    {
        "content": "<p>yaml is cursed. i tried writing a library to parse it when we were doing porting because we had yamls describing PRs. it's an indentation sensitive language that supports gotos, basically. so you can have self-reference. i thought about using direct lean Syntax categories to define the language, but it got too crazy for me.</p>",
        "id": 423712599,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1709074115
    },
    {
        "content": "<p><a href=\"https://yaml.org/spec/1.2.2/\">https://yaml.org/spec/1.2.2/</a> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 423712698,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1709074183
    },
    {
        "content": "<p>I think the only reasonable Lean yaml parser project would be one that wraps libyaml</p>",
        "id": 423714384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709074992
    },
    {
        "content": "<p>Ok, I now update my “json is a bit nicer for computers” to “json is much nicer for computers”. And then I guess a corollary is that yaml only pretends to be nicer to read and write for humans since any interpretation difference between humans and computers is a trap for humans.</p>",
        "id": 423715908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709075855
    },
    {
        "content": "<p>Correct yaml is nice to read for humans, but it is very hard for humans to tell if yaml is correct when writing it in general.</p>",
        "id": 423716066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709075928
    },
    {
        "content": "<p>(Its problem is that it vibes very well no matter how correct it is - much the same as the problem with current LLMs)</p>",
        "id": 423717674,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1709076786
    },
    {
        "content": "<p>Spoiler alert, there is a <a href=\"https://github.com/leanprover/lean4/pull/3298\">TOML parser</a> coming to lean in the near future. So that might impact your choice of human-oriented configuration language for lean tools...</p>",
        "id": 424358918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709349523
    },
    {
        "content": "<p>For yet another reason why YAML is so scary: <a href=\"https://thenewstack.io/with-yamlscript-yaml-becomes-a-proper-programming-language/\">https://thenewstack.io/with-yamlscript-yaml-becomes-a-proper-programming-language/</a></p>",
        "id": 426110083,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710245106
    },
    {
        "content": "<p>I've used TOML in Rust tooling and it's been great so far. I think the main disadvantage is that it doesn't handle deep nesting (≥ 3 layers) very well. Though, if your config is that complex, it might be better to use a Lean DSL anyway.</p>",
        "id": 426259989,
        "sender_full_name": "Chris Wong",
        "timestamp": 1710305847
    }
]