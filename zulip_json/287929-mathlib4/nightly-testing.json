[
    {
        "content": "<p>CI has been failing for a while on <code>nightly-testing</code> (since Dec 20). What are the processes around that?<br>\nDo people just push fixes there when they are sufficiently annoyed?<br>\nWho can do that, and who usually does?<br>\nCan you push directly, or use normal PRs with <code>nightly-testing</code> as the base?<br>\nDo they have to be the fix that will eventually be suitable for <code>master</code>, or is it common to take shortcuts to get CI going again?<br>\n(Is there a FTFM answering these that I missed?)</p>",
        "id": 411192544,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704376414
    },
    {
        "content": "<p>Is this not mostly Scott's doing? and the continuous failing related to Scott's holidays?</p>",
        "id": 411193048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704376640
    },
    {
        "content": "<p>That’s what I feared, and I’d like to know how and if (and how) I can help :-)</p>\n<p>I’ll just start to try to fix issues, and see how that goes. </p>\n<p>Let’s see what CI thinks of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9438\">#9438</a></p>",
        "id": 411193098,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704376663
    },
    {
        "content": "<p>Could someone with permissions to push to <code>ProofWidgets</code> label latest <code>main</code> (i.e. <code>8dd18350791c85c0fc9adbd6254c94a81d260d35</code>) as <code>v0.0.25-pre1</code>? That would help me with getting the mathlib CI running again. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> probably; who else might have access?</p>",
        "id": 411198368,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704378538
    },
    {
        "content": "<p>Done, except that I named it <code>v0.0.25</code> since the release is ready. You will have to wait a bit for the artifacts to be built. <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 411202440,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704380004
    },
    {
        "content": "<p>Much appreciated!</p>",
        "id": 411202591,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704380044
    },
    {
        "content": "<p>Now failing at <code>Mathlib/RingTheory/Polynomial/Hermite/Basic.lean</code></p>",
        "id": 411221115,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1704385584
    },
    {
        "content": "<p>Now failing in the check environments step:<br>\n<code>lean4checker found a problem in ProofWidgets.Demos.Macro</code></p>",
        "id": 411224017,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1704386588
    },
    {
        "content": "<p>It seems that the proofwidgets oleans that <code>cache get</code> gets are built with a different version of lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2024</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">504</span><span class=\"n\">b6dc93f46</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"n\">xxd</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2024-01-03/lib/lean/Init/Prelude.olean|head -n 2</span>\n<span class=\"mi\">00000000</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"n\">f6c</span> <span class=\"mi\">6561</span> <span class=\"mi\">6</span><span class=\"n\">e01</span> <span class=\"mi\">3530</span> <span class=\"mi\">3462</span> <span class=\"mi\">3664</span> <span class=\"mi\">6339</span> <span class=\"mi\">3366</span>  <span class=\"n\">olean.504b6dc93f</span>\n<span class=\"mi\">00000010</span><span class=\"o\">:</span> <span class=\"mi\">3436</span> <span class=\"mi\">3738</span> <span class=\"mi\">3563</span> <span class=\"mi\">6364</span> <span class=\"mi\">6462</span> <span class=\"mi\">3863</span> <span class=\"mi\">3566</span> <span class=\"mi\">6634</span>  <span class=\"mi\">46785</span><span class=\"n\">ccddb8c5ff4</span>\n<span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"n\">xxd</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Demos</span><span class=\"bp\">/</span><span class=\"n\">Macro.olean</span><span class=\"bp\">|</span><span class=\"n\">head</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"mi\">2</span>\n<span class=\"mi\">00000000</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"n\">f6c</span> <span class=\"mi\">6561</span> <span class=\"mi\">6</span><span class=\"n\">e01</span> <span class=\"mi\">6236</span> <span class=\"mi\">3134</span> <span class=\"mi\">6666</span> <span class=\"mi\">3164</span> <span class=\"mi\">3132</span>  <span class=\"n\">olean.b614ff1d12</span>\n<span class=\"mi\">00000010</span><span class=\"o\">:</span> <span class=\"mi\">6263</span> <span class=\"mi\">3338</span> <span class=\"mi\">6633</span> <span class=\"mi\">3930</span> <span class=\"mi\">3737</span> <span class=\"mi\">6639</span> <span class=\"mi\">6365</span> <span class=\"mi\">3966</span>  <span class=\"n\">bc38f39077f9ce9f</span>\n</code></pre></div>\n<p>But why does <code>cache get</code> download them then?<br>\n(This is after <code>rm -rf .lake/ &amp;&amp; lake exec cache get</code>)</p>\n<p>I have seen discussions scroll by about bad proofwidget oleans in the cache, is that a known issue?</p>",
        "id": 411225235,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704387064
    },
    {
        "content": "<p>It's strange that lean4checker is even looking at that file. It is not imported from <code>ProofWidgets.lean</code>, and is part of a <a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/8dd18350791c85c0fc9adbd6254c94a81d260d35/lakefile.lean#L9\">separate</a> <code>lean_lib</code>.</p>",
        "id": 411225844,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704387306
    },
    {
        "content": "<p>It’s not imported _anywhere_ it seems. Why does cache even try to download it? And who pushed it? Very mysterious.</p>",
        "id": 411226421,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704387550
    },
    {
        "content": "<p>It is not unpacked when I run <code>lake exec cache unpack</code> again</p>",
        "id": 411226672,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704387647
    },
    {
        "content": "<p>It is unpacked by the proofwidgets release</p>",
        "id": 411227047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704387763
    },
    {
        "content": "<p>because lake just zips the whole <code>.lake</code> folder to produce the release</p>",
        "id": 411227134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704387793
    },
    {
        "content": "<p>These files have been causing problems for cache for a while</p>",
        "id": 411227223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704387822
    },
    {
        "content": "<p>lake unpacks it whenever it gets the proofwidgets library for the first time</p>",
        "id": 411227562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704387934
    },
    {
        "content": "<p>Ouch. Is that just a missing file filter in the call to zip, or is there a good reason to include them in the release?</p>",
        "id": 411227606,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704387947
    },
    {
        "content": "<p>I don't think lake even knows how to filter it</p>",
        "id": 411227694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704387966
    },
    {
        "content": "<p>Ah, it’s also lake that makes the “release”.</p>",
        "id": 411227796,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388005
    },
    {
        "content": "<p>this is <code>lake upload</code></p>",
        "id": 411227811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388011
    },
    {
        "content": "<p>cache could almost completely do without the proofwidgets release, except it needs the js files</p>",
        "id": 411227982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388063
    },
    {
        "content": "<p>Indeed. I was expecting the release to only contain the <code>.js</code> files.</p>",
        "id": 411228189,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388131
    },
    {
        "content": "<p>in particular all of the olean files are counterproductive because (1) cache already caches them, (2) they are frequently out of date and have to be recompiled anyway, and (3) if any are left over they can end up in the next <code>cache put</code> call (because <code>cache put</code> also can't tell the difference between untouched bad files and freshly built good files and assumes everything in the <code>.lake</code> folder is good) and get redistributed which causes crashes downstream</p>",
        "id": 411228345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388196
    },
    {
        "content": "<p>And this is run as a pre-build step of <code>lake exe cache get</code> (the part where it compiles <code>Cache.Main</code> and first has to download all the dependencies) so by the time cache is running the damage is already done</p>",
        "id": 411228576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388287
    },
    {
        "content": "<p>Yeah, this is all kinda weird. Is there an issue already? Should Proofwidgets start to simply use <code>tar</code> to make the releases, and include only the <code>.js</code> files?</p>",
        "id": 411228586,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388292
    },
    {
        "content": "<p>For pure lake usage of <code>ProofWidgets</code>, the release is moderately sensible: it caches the build artifacts for the stated version of lean, and lake will invalidate it if you use another version</p>",
        "id": 411228811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388373
    },
    {
        "content": "<p>So the issue is more that lake4checker runs blindly on all <code>.oleans</code>, even those that we never created or touched?</p>",
        "id": 411229032,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388451
    },
    {
        "content": "<p>but I think it needs to be more careful about ensuring random olean files are not left around in the build directory, because at least lean4checker assumes that doesn't happen</p>",
        "id": 411229039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388456
    },
    {
        "content": "<p>For the purposes of unblocking <code>nightly-testing</code> in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/9438\">#9438</a> I added a workaround to the workflow there, deleting the unwanted contents of the proofwidget release.</p>",
        "id": 411229293,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388571
    },
    {
        "content": "<p>I think lean4checker's behavior is somewhat defensible, it is trying to also check orphan files or multiple projects in the same repo</p>",
        "id": 411229307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388578
    },
    {
        "content": "<p>Somewhat defensible, but I’d consider it a violation of the principle of least surprise; it shouldn’t and usually doesn’t affect tools what cruft I have laying around in random places. I’d intuitively expect it to use the default lake target, unless I pass it one. Also, isn’t <code>.lake</code> content supposed to be an implementation detail of <code>lake</code>, I thought.</p>\n<p>(I guess it is consistent with lake’s behavior of uploading everything from <code>.lake/build</code> as a release ;-))</p>",
        "id": 411229610,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704388709
    },
    {
        "content": "<p>The problem is that people might be using lean4checker without knowing what the root is and just wanting to check \"everything\"</p>",
        "id": 411230024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388868
    },
    {
        "content": "<p>and/or some files are hidden because they are not transitively imported by some package or other and hiding badness</p>",
        "id": 411230087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388897
    },
    {
        "content": "<p>I think that's pretty surprising</p>",
        "id": 411230115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388909
    },
    {
        "content": "<p>I don't think people generally want to regard the build job that adds everything to <code>Mathlib.lean</code> as soundness critical</p>",
        "id": 411230229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704388948
    },
    {
        "content": "<p>But then it suddenly depends upon what they <code>lake build</code> before, with which targets, and when, so also strangely stateful. Users who reliably navigate that complexity can probably deal with having to be explicit what they want to have checked.</p>\n<p>Maybe <code>lean4checker</code> should always expect <code>.olean</code> paths or module names, then <code>lake check</code> should exist as an analogue to <code>build</code> that also makes sure the files are up-to-date (to reduce the risk of checking an old <code>.olean</code>), and likewise a VSCode action “check this file” for those not interacting with the CLI.</p>",
        "id": 411230601,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704389093
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/lean4checker.20CI.20job\">#mathlib4 &gt; lean4checker CI job</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 411231509,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704389465
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9438\">https://github.com/leanprover-community/mathlib4/pull/9438</a> is green, and can be merged if deemed useful.</p>",
        "id": 411232024,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704389696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/nightly-testing/near/411230087\">said</a>:</p>\n<blockquote>\n<p>and/or some files are hidden because they are not transitively imported by some package or other and hiding badness</p>\n</blockquote>\n<p>Any such badness could not take effect as part of <code>import Mathlib</code> until the files are imported from <code>Mathlib.lean</code>, at which point they would be checked by a lean4checker-directed that only goes through imported files, right? Or is the worry that someone puts an incorrect proof into some <code>archive/</code> folder that isn't imported?</p>",
        "id": 411232597,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704389928
    },
    {
        "content": "<p>I'm happy to change the release-packaging job for PW4 to include nothing but <code>*.js</code>, I'm just somewhat inclined to agree with Joachim here that random leftover <code>.olean</code>s (which I think should be a sort of output-only cache) shouldn't break things like this.</p>",
        "id": 411232712,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704389987
    },
    {
        "content": "<p>I blame lake for this, not proofwidgets</p>",
        "id": 411232992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390084
    },
    {
        "content": "<p>mathlib should be able to tell lake that it doesn't want the proofwidgets release, and will fetch it itself</p>",
        "id": 411233126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390128
    },
    {
        "content": "<p>It's not even a dependency of <code>Cache</code>, so getting it is premature</p>",
        "id": 411233212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390171
    },
    {
        "content": "<p>How would that help? It'd still contain the wrong oleans?</p>",
        "id": 411233243,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704390178
    },
    {
        "content": "<p>In my PR I use <code>lake build cache</code> to get and clean the release before <code>lake exec cache get</code></p>",
        "id": 411233341,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704390215
    },
    {
        "content": "<p>It can unpack it selectively as you did in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9438\">#9438</a>, because mathlib knows the context in which it wants this file</p>",
        "id": 411233346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390218
    },
    {
        "content": "<p>IMO the design where libraries specify <code>preferRelease := true</code> and downstream deps have no opt-out is bad</p>",
        "id": 411233527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390283
    },
    {
        "content": "<p>The main thing that proofwidgets can do to avoid this (possibly in conjunction with mathlib maintainers) is to stay on the same version as mathlib and be released together</p>",
        "id": 411233765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390369
    },
    {
        "content": "<p>these issues recur every time mathlib gets ahead of proofwidgets because that's when mathlib has to rebuild proofwidgets (which mostly works but has various sporadic issues), when proofwidgets is up to date none of this is an issue</p>",
        "id": 411233901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390432
    },
    {
        "content": "<p>That doesn't help when you want to test lean PR releases, does it? The ability to swap the toolchain without changing all dependencies (if they happen to still build) seems quite important</p>",
        "id": 411234074,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704390504
    },
    {
        "content": "<p>but it's a bit of a weird situation because we can only work on fixing the sporadic issues when proofwidgets is not up to date so that they actually manifest</p>",
        "id": 411234107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390523
    },
    {
        "content": "<p>We want it to work either way</p>",
        "id": 411234182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390556
    },
    {
        "content": "<p>Why should it have to be different than any other library - except for fetching the js files - in the first place?</p>",
        "id": 411234231,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704390586
    },
    {
        "content": "<p>It's the only mathlib dependency that uses <code>lake upload</code>, which is a separate caching mechanism which does not play well with <code>lake exe cache</code> and is much less sophisticated</p>",
        "id": 411234364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390635
    },
    {
        "content": "<p>I think a MVP feature to solve most of the issues would be a way for lake to allow downstream projects like mathlib to override <code>preferRelease</code> in dependencies</p>",
        "id": 411234479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390707
    },
    {
        "content": "<p>otherwise it's not really a preference</p>",
        "id": 411234493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390714
    },
    {
        "content": "<p>Alternatively, proofwidgets could stop using the lake upload feature altogether (it is already partly hacking around it by uploading the same tarball as all 3 supported OSs even though they were not built the same)</p>",
        "id": 411234647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390787
    },
    {
        "content": "<p>and instead just have a custom job which downloads a tarball of js files</p>",
        "id": 411234723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390822
    },
    {
        "content": "<p>Job as in <code>lake update</code> hook?</p>",
        "id": 411234843,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704390862
    },
    {
        "content": "<p>I think it would be a pre-build dep</p>",
        "id": 411234892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704390891
    },
    {
        "content": "<p>I mean there is a way to express it in the language of lake build dependencies: elaboration of certain lean files requires certain js files, getting js files requires unpacking them from a certain zip file, getting the zip file requires downloading it from a specified source</p>",
        "id": 411235332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704391072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/nightly-testing/near/411234647\">said</a>:</p>\n<blockquote>\n<p>Alternatively, proofwidgets could stop using the lake upload feature altogether (it is already partly hacking around it by uploading the same tarball as all 3 supported OSs even though they were not built the same)</p>\n</blockquote>\n<p>This is no longer true btw, we build all platforms in CI now</p>",
        "id": 411235546,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704391151
    },
    {
        "content": "<p>Oh, that makes me even more worried</p>",
        "id": 411235596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704391180
    },
    {
        "content": "<p>because <code>cache</code> needs them to have the same hash</p>",
        "id": 411235628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704391196
    },
    {
        "content": "<p>otherwise they will not be used by lake when unpacked</p>",
        "id": 411235712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704391213
    },
    {
        "content": "<p>What do you mean by 'them' and 'they'?</p>",
        "id": 411268610,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704405875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/nightly-testing/near/411232024\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9438\">https://github.com/leanprover-community/mathlib4/pull/9438</a> is green, and can be merged if deemed useful.</p>\n</blockquote>\n<p>Oh, I just noticed that <code>nightly-testing</code> is not a protected branch and I could just merge myself… but I guess it’s prudent to wait for a <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  from a maintainer first. Scott should also be around soon.</p>",
        "id": 411269553,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704406248
    },
    {
        "content": "<p>Amazing work, <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>. I've just merged your PR to nightly testing. I was actually back yesterday, but didn't get to nightly-testing quite yet. :-)</p>",
        "id": 411285919,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704414948
    },
    {
        "content": "<p>Reviving this thread, I can adjust the PW4 build but need some consensus on what it should do!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/nightly-testing/near/411235332\">said</a>:</p>\n<blockquote>\n<p>I mean there is a way to express it in the language of lake build dependencies: elaboration of certain lean files requires certain js files, getting js files requires unpacking them from a certain zip file, getting the zip file requires downloading it from a specified source</p>\n</blockquote>\n<p>Unfortunately there is no way to register with Lake that a given Lean module depends on a custom target at the moment. This has been a bit of a pain point that requires manual <code>lake clean</code> when the <code>.js</code> changes.</p>",
        "id": 411636213,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704665539
    },
    {
        "content": "<p>Is there a lake issue for this?</p>",
        "id": 411876090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704783537
    },
    {
        "content": "<p>It appears there is not! Just made <a href=\"https://github.com/leanprover/lean4/pull/3153\">lean4#3153</a>.</p>",
        "id": 412001700,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704829704
    }
]