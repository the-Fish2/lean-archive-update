[
    {
        "content": "<p>I was under the impression when choosing between <code>term</code> and <code>by exact term</code>, the only real difference was a change in elaboration order of the surrounding code; but in this model, <code>by exact term</code> at the top level is the same as <code>term</code>.</p>\n<p>Cleary, this model is incorrect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Antichain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_relIso</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hs.image_relEmbedding</span> <span class=\"n\">φ</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_relIso_by_refine'</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">refine'</span> <span class=\"n\">hs.image_relEmbedding</span> <span class=\"n\">φ</span>\n\n<span class=\"c1\">-- fails on the `φ`. Using `refine` instead is the same.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_relIso_by_exact</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hs.image_relEmbedding</span> <span class=\"n\">φ</span>\n</code></pre></div>\n<p>which gives the message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">IsAntichain.image_relEmbedding</span> <span class=\"n\">hs</span> <span class=\"n\">φ</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">φ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">r</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">m.779</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">u.762</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432229950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712666485
    },
    {
        "content": "<p>In the term-mode proof, the <code>?m.779</code> metavariable has already been assigned to <code>r'</code>; but for some reason, in the tactic proof it has not</p>",
        "id": 432230427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712666590
    },
    {
        "content": "<p>(this also relates to the <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/refine.20vs.20refine.27\">#mathlib4 &gt; refine vs refine'</a> discussion)</p>",
        "id": 432231445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712666875
    },
    {
        "content": "<p>This is something subtle I've seen before about how seriously the expected type is propagated in <code>exact</code>/<code>refine</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ok</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_relIso_by_exact_ascript</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hs.image_relEmbedding</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 432363250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712707879
    },
    {
        "content": "<p>I was sure I tried that and it failed, but am relieved to see it works after all. Do you think exact should be more serious here?</p>",
        "id": 432363547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712708093
    },
    {
        "content": "<p>This fails by the way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsAntichain</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hs.image_relEmbedding</span> <span class=\"n\">φ</span>\n  <span class=\"c1\">--                            ^</span>\n  <span class=\"c1\">-- fails: argument φ has type r ≃r r' but is expected to have type r ↪r ?m.1748</span>\n</code></pre></div>",
        "id": 432363588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712708119
    },
    {
        "content": "<p>I don't get why there's a difference in behavior when you use a type ascription, to be perfectly honest. It seems to me that <code>((by exact x) : ty)</code> and <code>by exact (x : ty)</code> should be the same, but they aren't here.</p>",
        "id": 432364064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712708452
    }
]