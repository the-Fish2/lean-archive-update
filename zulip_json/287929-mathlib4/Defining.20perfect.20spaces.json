[
    {
        "content": "<p>In my formalization of Rubin's theorem (<a href=\"https://github.com/leanprover-community/mathlib4/pulls/adri326\">of which a few PRs are waiting to get reviewed/approved</a> as of writing this), one of the conditions is that the topological space must not have any isolated points. This is equivalent to say that the universe must be a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Perfect#doc\">docs#Perfect</a> space.</p>\n<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Perfect.html\">the module for Perfect</a>, I see that it contains both elementary properties of perfect sets, and 4 theorems that only apply to metric spaces. So I would like to ask if I could contribute the following changes:</p>\n<ul>\n<li>move the last 4 theorems to a different module, for instance <code>Mathlib.Topology.MetricSpace.Perfect</code></li>\n<li>move <code>Mathlib.Topology.Perfect</code> up the import chain, so that it only imports <code>Mathlib.Topology.Basic</code>, <code>Mathlib.Topology.Constructions</code> (for the <code>nhdsWithin</code> filter) and <code>Mathlib.Topology.ContinuousOn</code> (which includes <code>nhdsWithin_union</code>, despite it having no reason to be in this file)</li>\n<li>define the <code>PerfectSpace</code> class, which simply states that <code>Perfect Set.univ</code></li>\n<li>create an instance for <code>[PerfectSpace X] ‚Üí (x : X) ‚Üí Filter.NeBot (ùìù[‚â†] x)</code></li>\n<li>refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConnectedSpace.neBot_nhdsWithin_compl_of_nontrivial_of_t1space#doc\">docs#ConnectedSpace.neBot_nhdsWithin_compl_of_nontrivial_of_t1space</a> to instead be an instance of <code>PerfectSpace</code> (the instance will then be provided by the previous bullet, and <code>Mathlib.Topology.Perfect</code> will be high enough in the import chain that it can be imported in <code>Mathlib.Topology.Separation</code>)</li>\n<li>possibly provide an instance for <code>[PerfectSpace X] ‚Üí [PerfectSpace (X √ó Y)]</code></li>\n<li>in another PR, possibly move <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhdsWithin_union#doc\">docs#nhdsWithin_union</a> &amp; co. to <code>Mathlib.Topology.Constructions</code>, since they have no reason to be in <code>ContinuousOn</code></li>\n</ul>",
        "id": 419691964,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707046802
    },
    {
        "content": "<p>Hmm, actually a few of the theorems require things from <code>Mathlib.Topology.Separation</code>, so the refactor of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConnectedSpace.neBot_nhdsWithin_compl_of_nontrivial_of_t1space#doc\">docs#ConnectedSpace.neBot_nhdsWithin_compl_of_nontrivial_of_t1space</a> could possibly be moved to <code>Mathlib.Topology.Perfect</code> instead</p>",
        "id": 419692123,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707046962
    },
    {
        "content": "<p>One small question that I have is that the condition for <code>PerfectSpace (X √ó Y)</code> only requires <code>X</code> <em>or</em> <code>Y</code> to also be a <code>PerfectSpace</code>, but I'm worried that adding both instances will lead to worse performance in the instance synthetizer</p>",
        "id": 419696423,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707051079
    },
    {
        "content": "<p>I think you can safely add both instances: this should not be on an instance-critical path anyway.</p>",
        "id": 419696543,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1707051172
    },
    {
        "content": "<p>Would it be possible that for the same spaces, the two instances are chosen.  If <code>PerfectSpace</code> is a <code>Prop</code>, they would be equal, but are there cases where Lean would be confused anyway?</p>",
        "id": 419710310,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707063721
    },
    {
        "content": "<p>Good call. <code>PerfectSpace</code> is a <code>Prop</code>, but I don't know if this can cause confusion</p>",
        "id": 419712134,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707065423
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/10246\">#10246</a>; there seems to be a few places (especially in normed fields and modules) where an ad-hoc <code>‚àÄ x, Filter.NeBot (ùìù[‚â†] x)</code> could be replaced with a <code>PerfectSpace</code> instance, but I fear that doing so might slow down the review process even more, and I am running out of PRs that I can concurrently open without making them dependent on one another</p>",
        "id": 419715843,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707068115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Defining.20perfect.20spaces/near/419710310\">said</a>:</p>\n<blockquote>\n<p>Would it be possible that for the same spaces, the two instances are chosen.  If <code>PerfectSpace</code> is a <code>Prop</code>, they would be equal, but are there cases where Lean would be confused anyway?</p>\n</blockquote>\n<p>Thinking about this, we have a bunch of instances of <code>Nontrivial</code> floating around, and those don't seem to be causing an issue</p>",
        "id": 419718037,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707069664
    },
    {
        "content": "<p>Yay, the split into <code>Mathlib.Topology.MetricSpace.Perfect</code> just got merged!<br>\nRight now <a href=\"https://github.com/leanprover-community/mathlib4/pull/10246\">#10246</a> is only for defining <code>PerfectSpace</code>; there are quite a few places where it can be used (in <code>PreconnectedSpace</code>s, for proving that spaces or open sets are infinite, and different constructions for <code>PerfectSpace</code>), but I'm keeping these changes for a future PR, since they're kind of expensive to maintain in a dependent PR (with merge conflicts happening now and then, and I need to cherry-pick fixes I make to the dependency PR), and they wouldn't really belong to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10246\">#10246</a>.</p>\n<p>I have a bit of breathing room for the remainder of this week, so I'll also look into moving theorems in <code>ContinuousOn</code> up to <code>Constructions</code></p>",
        "id": 421354709,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707874388
    }
]