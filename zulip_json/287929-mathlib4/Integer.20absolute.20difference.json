[
    {
        "content": "<p>I'm writing some code that involves SI units and does some conversion, an example is converting some quantity <code>base</code> which is in a more coarse unit to a more fine unit, where the base quantity is always an integer: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- quantity coarse fine : Int</span>\n    <span class=\"n\">quantity</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">coarse</span> <span class=\"bp\">-</span> <span class=\"n\">fine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natAbs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When I have to reason about this later, I encounter enough resistance that I feel like I'm not using Mathlib effectively. The issues arise from goals like <code>R (.. * 10 ^ x) (.. * 10 ^ y)</code> where <code>x</code> and <code>y</code> have some relationship that can eventually be shown with enough work. Is there a more idiomatic way to work with the absolute difference of two integers when it needs to be used as an exponent?</p>",
        "id": 427526717,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1710779442
    },
    {
        "content": "<p>Why not work in a field where you don't need <code>Nat</code> in the exponent?</p>",
        "id": 427590871,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710803019
    },
    {
        "content": "<p>I think because the return type needs to be an Int. This is in a larger CS context that uses Int for everything else.</p>",
        "id": 427596691,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1710806516
    },
    {
        "content": "<p>Do you really want the absolute value there? If <code>fine</code> is greater than <code>coarse</code>, then the result is nonsense, right?</p>",
        "id": 427596838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710806604
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.toNat#doc\">docs#Int.toNat</a> <em>might</em> be easier to work with if you don't care about the junk value anyway</p>",
        "id": 427596902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710806639
    },
    {
        "content": "<p>The actual function requires a hypothesis <code>fine &lt;= coarse</code>.</p>",
        "id": 427596956,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1710806651
    },
    {
        "content": "<p>It's sort of nonsense in that it's known to be non-negative; I previously had a match on the result of the subtraction that was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But that wasn't much easier to use.</p>",
        "id": 427597070,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1710806736
    },
    {
        "content": "<p>I guess mathlib has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.dist#doc\">docs#Nat.dist</a> (nevermind, I didn't see that <code>course fine : Int</code>)</p>",
        "id": 427600431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710809143
    },
    {
        "content": "<p>You have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.natAbs#doc\">docs#Int.natAbs</a>, if you didn't know about it</p>",
        "id": 427633312,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1710833202
    }
]