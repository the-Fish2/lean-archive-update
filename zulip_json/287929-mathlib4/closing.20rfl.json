[
    {
        "content": "<p>I see some PRs replacing <code>rfl</code>s with extra <code>rw</code>s/<code>simp_rw</code>s. Do we have a style guide about this?</p>",
        "id": 423762069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709106126
    },
    {
        "content": "<p>Sometimes, I finish by <code>simp</code> because I guess that will work, without noticing <code>rfl</code> would.</p>",
        "id": 423765370,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709107725
    },
    {
        "content": "<p>I was talking about intentional replacement of <code>; rfl</code> with extra <code>rw</code>s.</p>",
        "id": 423765464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709107756
    },
    {
        "content": "<p>Is it possible to compare the compilation time: could one imagine that <code>simp</code> would conclude faster than the mere <code>rfl</code>.</p>",
        "id": 423765506,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709107775
    },
    {
        "content": "<p>If we want to do this, then we should add it to the style guide.</p>",
        "id": 423765542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709107793
    },
    {
        "content": "<p>Can you point out examples of what you're talking about?</p>",
        "id": 423766019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709107987
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10007\">#10007</a></p>",
        "id": 423766197,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709108066
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10007/files#diff-1e9794c797a2e3fc46aa3c494bc7eb59061c316445f214b757820b3bc34e3b84\">https://github.com/leanprover-community/mathlib4/pull/10007/files#diff-1e9794c797a2e3fc46aa3c494bc7eb59061c316445f214b757820b3bc34e3b84</a></p>",
        "id": 423766287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709108107
    },
    {
        "content": "<p>I'd guess that these are avoiding some defeq abuses, but it'd be good to ask <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> what's being tidied.</p>",
        "id": 423767624,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709108666
    },
    {
        "content": "<p>Yeah, these all count as defeq abuse in my opinion</p>",
        "id": 423770798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709109964
    },
    {
        "content": "<p>Removing trailing <code>rfl</code>s is a nice way of confirming that we're not missing API lemmas</p>",
        "id": 423781656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709113891
    },
    {
        "content": "<p>Oh! Do you believe that <code>rfl</code>-lemmas should exist to do the rewriting we need to?</p>",
        "id": 423782477,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709114163
    },
    {
        "content": "<p>Yeah (and they generally do)</p>",
        "id": 423786717,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709115504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/closing.20rfl/near/423770798\">said</a>:</p>\n<blockquote>\n<p>Yeah, these all count as defeq abuse in my opinion</p>\n</blockquote>\n<p>Can you elaborate? Does any non-reducible <code>rfl</code> count as defeq abuse or not?</p>",
        "id": 423877036,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709144635
    },
    {
        "content": "<p>We don't have any codified rules for this, but this is roughly how I've thought about it:</p>\n<ol>\n<li>If defeq needs to unfold a non-reducible definition, and this happens inside the API boundary for the mathematical theory, then it is OK. This usually necessary to set up the API.</li>\n<li>If defeq needs to unfold a non-reducible definition, and the documentation clearly says that what this definition unfolds to is part of the API for the mathematical theory, then it is OK. This happens sometimes, for example with <code>Function.Injective</code> and many other predicates, or <code>Nat.succ n =?= n + 1</code>, though these aren't necessarily documented yet. <a href=\"http://SimpleGraph.edgeSetEmbedding\">Here</a> is an example of an API defeq in a docstring.</li>\n</ol>\n<p>A problem though is that there's often not a really a clear API boundary for theories.</p>",
        "id": 423882541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709146452
    },
    {
        "content": "<p>I think some clear guidelines would be helpful and Kyleâ€™s suggestions are a good start.</p>",
        "id": 423882735,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709146526
    }
]