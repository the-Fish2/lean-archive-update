[
    {
        "content": "<p>Is there any hope of something like this working?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"n\">unif_hint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≟</span> <span class=\"mi\">0</span>\n  <span class=\"n\">y</span> <span class=\"bp\">≟</span> <span class=\"n\">x</span>\n  <span class=\"bp\">⊢</span>\n  <span class=\"n\">y</span> <span class=\"bp\">≟</span> <span class=\"bp\">@</span><span class=\"n\">Matrix.vecCons</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">Injective</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hf.ne</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hf.ne</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><a href=\"https://lean-lang.org/lean4/doc/unifhint.html\">https://lean-lang.org/lean4/doc/unifhint.html</a> is still blank, so I don't have much to go by</p>",
        "id": 413139674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705406587
    }
]