[
    {
        "content": "<p>I was curious about the following: currently Lean can pick up if an assumption is not used in a result (we get a nice squiggly line in VS-code for example). Do we have something that tries to see if an assumption is overkill (for the given proof)? </p>\n<p>E.g. suppose I wrote down as an assumption [Group G], but in fact I only need [Mul G]. <br>\nDo we have something/would it be programmatically straightforward to iteratively try and replace every assumption by (one of) its direct parents and check if the proof still works? Possibly it might also want to try <code>aesop</code> or <code>exact?</code> to see if it can still close the goal if the modified assumption gives an error.</p>\n<p>In my example, it would thus do:</p>\n<ol>\n<li>Check that the proof works for [Group G]</li>\n<li>Check that the proof works for [SemiGroup G], replace the assumption</li>\n<li>Check that the proof works for [Mul G], replace the assumption</li>\n</ol>",
        "id": 421612509,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707989072
    },
    {
        "content": "<p>This existed in lean 3, you can probably find references if you search zulip. We're hoping someone(TM) will port it</p>",
        "id": 421613097,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707989252
    },
    {
        "content": "<p>learning Lean for programming is on my (very) long to-do list, I'm afraid I certainly won't be able to be that someone(TM) for a few months.</p>",
        "id": 421617337,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707990646
    },
    {
        "content": "<p>How was the experience with this, did it often manage to generalise results nicely?</p>",
        "id": 421617440,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707990681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> wrote that tool. It would be awesome if it can be ported to Lean 4 at some point.</p>",
        "id": 421617686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707990753
    },
    {
        "content": "<p>Yeah I agree it would be awesome, and it seems like there is certainly demand for it again! It may well be a bit easier to implement now that we have a lot more computational code written in lean itself.<br>\nI think it was fairly successful though sometimes had some annoying false positives due to the fact it was trying to be perhaps too general, which meant that it never made it to mathlib</p>",
        "id": 421618297,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707990963
    }
]