[
    {
        "content": "<p>I was trying to understand why some of the mathlib code for Fourier transforms takes so long to compile, and I stumbled across the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">e</span> <span class=\"n\">π</span> <span class=\"c1\">-- takes 0.25 seconds</span>\n</code></pre></div>\n<p>It seems that Lean takes 0.25 seconds to realise that <code>ℝ →+ ℝ</code> (bundled additive-group homomorphisms) can be coerced to functions. This seems like an eternity for such a simple term. Is there anything that I can do in my code to make this quicker, other than using \"bare\" functions and explicitly supplying the compatibility with addition as an explicit hypothesis when I need it (which I'd rather not do, since it's ugly)?</p>",
        "id": 413145092,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705408702
    },
    {
        "content": "<p>With what imports?</p>",
        "id": 413145735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705408960
    },
    {
        "content": "<p>Try it on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a></p>",
        "id": 413145866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705409011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slow.20coercion.20from.20homomorphisms.20to.20functions/near/413145735\">said</a>:</p>\n<blockquote>\n<p>With what imports?</p>\n</blockquote>\n<p>Fourier transforms need a lot of prerequisites, the imports were</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ParametricIntegral</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Fourier.AddCircle</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Fourier.FourierTransform</span>\n</code></pre></div>\n<p>(and the imports inherited from these amount to pretty much all of the algebra, topology and analysis hierarchies).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slow.20coercion.20from.20homomorphisms.20to.20functions/near/413145866\">said</a>:</p>\n<blockquote>\n<p>Try it on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a></p>\n</blockquote>\n<p>That certainly looks relevant, but the PR doesn't merge cleanly at the moment so it's not easy to try anything on it.</p>",
        "id": 413146694,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705409301
    },
    {
        "content": "<p>This speeds it up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span>\n</code></pre></div>",
        "id": 413147918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705409754
    },
    {
        "content": "<p>We removed these instances in the port before we understood coercions; we used to have them in Lean 3</p>",
        "id": 413147986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705409770
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">30</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">e</span> <span class=\"n\">π</span>\n</code></pre></div>\n<p>works on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a></p>",
        "id": 413156896,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705412717
    },
    {
        "content": "<p>I got <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> working and it indeed drastically reduces the time to elaborate this term down to something like 0.002 sec, which seems much far reasonable. Many thanks to <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> for <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> – let's hope it can be merged soon!</p>",
        "id": 413174291,
        "sender_full_name": "David Loeffler",
        "timestamp": 1705417598
    }
]