[
    {
        "content": "<p>Do you want these lemmas about <code>Finset.univ.prod</code> with single exception?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ.prod_single_hit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">prod_ite_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ.prod_mul_single_hit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">Finset.univ.prod_single_hit</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ.prod_with_one_exception</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">convert</span> <span class=\"n\">Finset.univ.prod_mul_single_hit</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span>\n      <span class=\"n\">ext1</span> <span class=\"n\">i</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">mul_div_assoc</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span>\n    <span class=\"n\">convert_to</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_eq_zero_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">mem_univ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">convert</span> <span class=\"n\">zero_mul</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_eq_zero_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"n\">z</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">mem_univ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.univ.prod_with_one_exception_nested</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">apart_if</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n      <span class=\"k\">then</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"bp\">·</span> <span class=\"n\">congr</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfpa</span> <span class=\"o\">:</span> <span class=\"n\">Finset.univ.prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">impos</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">impos</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">impos</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hfa</span> <span class=\"n\">k</span> <span class=\"n\">hk.right</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">apart_if</span><span class=\"o\">,</span> <span class=\"n\">Finset.univ.prod_with_one_exception</span><span class=\"o\">,</span> <span class=\"n\">Finset.univ.prod_with_one_exception</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">hfpa</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>They are not Mathlib-ready, but I can polish them if there is interest.</p>",
        "id": 424701970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709571303
    },
    {
        "content": "<p>It looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_eq_single#doc\">docs#Finset.prod_eq_single</a></p>",
        "id": 424702427,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709571445
    },
    {
        "content": "<p>I can also make them stronger, but first of all, is there any interest apart from them being useful for my project?</p>",
        "id": 424702431,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709571446
    },
    {
        "content": "<p>The first two lemmas are trivial applications of existing Mathlib lemmas (and there is more than one way to prove them, as <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> pointed out). Maybe the latter two can be interesting if you, like me, do various harakiris with indicator variables.</p>",
        "id": 424703927,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709571874
    },
    {
        "content": "<p>If you want to search for the library for this, search using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.update#doc\">docs#Function.update</a>, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_update_of_mem#doc\">docs#Finset.prod_update_of_mem</a>.<br>\nThe third lemma could be useful (it should be proven using a <code>CommGroupWithZero</code>-version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_erase_eq_div#doc\">docs#Finset.prod_erase_eq_div</a>).</p>",
        "id": 424713090,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709574768
    }
]