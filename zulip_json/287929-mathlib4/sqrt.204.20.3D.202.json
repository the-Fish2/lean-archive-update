[
    {
        "content": "<p>I was trying to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>4</mn></msqrt><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\sqrt 4 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\">4</span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>18</mn></msqrt><mo>=</mo><mn>3</mn><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{18} = 3 \\sqrt 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">18</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord\">3</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\">2</span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span>. Are these the shortest proofs? I feel like they should both be one-liners</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_iff_sq_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">18</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_iff_sq_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Real.sqrt_nonneg</span> <span class=\"mi\">2</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 420903212,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1707669209
    },
    {
        "content": "<p>This turns out to be a little simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_cases</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">18</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_cases</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 420905797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707671118
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is normalizing square roots of rationals in the purview of <code>norm_num</code>? I think I remember you mentioning it at some point as a future feature, or future non-feature, I can't remember which.)</p>",
        "id": 420905858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707671163
    },
    {
        "content": "<p>I tried making an argument where it suffices to square both sides, but then that pushes some difficulty to needing to say that square roots are non-negative.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Real.eq_of_sq_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sqrt_sq</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sqrt_sq</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.eq_of_sq_eq</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.sqrt_nonneg</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">18</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.eq_of_sq_eq</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">ring_nf</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.sqrt_nonneg</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 420906531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707671762
    },
    {
        "content": "<p>Those can be compressed to the one-liner general proof <code>apply Real.eq_of_sq_eq &lt;;&gt; ring_nf &lt;;&gt; norm_num [Real.sqrt_nonneg]</code> (you can pass <code>Real.sqrt_nonneg</code> to <code>norm_num</code> since it is a fine simp lemma)</p>",
        "id": 420906603,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707671806
    },
    {
        "content": "<p>The first equality can also be proved by splitting the equality in two steps, before seeking help from automation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt_sq</span> <span class=\"n\">zero_le_two</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420909240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707674212
    },
    {
        "content": "<p>Thanks! With Kyle's proof being more uniform I wrote a small tactic to dispatch these</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- sqrt_eq_cases for y = √ x</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_sqrt_cases</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq_comm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Real.sqrt_eq_cases</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"norm_sqrt_eq\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_cases</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">ring_nf</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span> <span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"norm_eq_sqrt\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sqrt_cases</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">ring_nf</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">-- Normalize square roots of rational literals</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"norm_sqrt\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">norm_sqrt_eq</span> <span class=\"bp\">|</span> <span class=\"n\">norm_eq_sqrt</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">25</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">18</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">4</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_sqrt</span>\n</code></pre></div>",
        "id": 420918088,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1707682013
    },
    {
        "content": "<p>Isn't <code>norm_eq_sqrt</code> just <code>rw [eq_comm]; norm_sqrt_eq</code>?</p>",
        "id": 420918174,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707682092
    },
    {
        "content": "<p>Also, if you use <code>macro_rules</code> and finishing with <code>done</code> you can probably get away with a single tactic that tries either approach and only uses the first that works.  (Untested, as I'm on mobile)</p>",
        "id": 420918390,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707682322
    },
    {
        "content": "<p>I feel like ideally such a macro would replace <code>Real.sqrt x</code> in the current proof with <code>y</code>, and in the examples the proofs could then be closed with <code>rfl</code></p>",
        "id": 420918495,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707682407
    },
    {
        "content": "<p>But this is kind of what <code>norm_num</code> should be for to begin with...<br>\nI really need to learn how to write more advanced tactics</p>",
        "id": 420919176,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707683131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/sqrt.204.20.3D.202/near/420905858\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Is normalizing square roots of rationals in the purview of <code>norm_num</code>? I think I remember you mentioning it at some point as a future feature, or future non-feature, I can't remember which.)</p>\n</blockquote>\n<p>I think this should be a separate tactic, it has much more in common with <code>ring</code> than <code>norm_num</code> because I don't think there are canonical forms in full generality (it will start to look like the algebraic numbers stuff from the CAD discussion)</p>",
        "id": 420919387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707683340
    },
    {
        "content": "<blockquote>\n<p>I feel like ideally such a macro would replace Real.sqrt x in the current proof with y, and in the examples the proofs could then be closed with rfl</p>\n</blockquote>\n<p>Yes, but idk how to write a tactic which will do that computation. (Happy to learn if someone wants to give it a try though)</p>",
        "id": 420942940,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1707704921
    },
    {
        "content": "<p>Unfortunately this is something that I only know how to do in Coq, not in Lean. I really would like to learn how to do that, though</p>",
        "id": 421002103,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707735111
    },
    {
        "content": "<p>Mario, would you be opposed to norm_num being taught how to find the square root of squares?</p>",
        "id": 421002692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707735282
    },
    {
        "content": "<p>no, that would be fine</p>",
        "id": 421010029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707737637
    },
    {
        "content": "<p>the trouble is only when you have to expand the set of normal forms</p>",
        "id": 421010129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707737659
    },
    {
        "content": "<p>since then every other norm_num extension has to interact with it</p>",
        "id": 421010163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707737676
    },
    {
        "content": "<p>You mean like I tried to do in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9915\">#9915</a>?</p>",
        "id": 421018697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707740728
    },
    {
        "content": "<p>yes</p>",
        "id": 421018846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707740768
    },
    {
        "content": "<p>Could this be a globally enabled <code>simproc</code>?</p>",
        "id": 421077715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707755825
    },
    {
        "content": "<p>I didn't know about <code>simproc</code>! Gonna play with it. The <code>reduceFoo</code> example looks useful to learn from too.</p>",
        "id": 421078965,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1707756175
    }
]