[
    {
        "content": "<p>I am getting the following error in a branch of mathlib (linter complains that simp lemma can already be shown by simp)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Bicategory</span><span class=\"bp\">/</span><span class=\"n\">LocallyDiscrete.lean</span><span class=\"o\">:</span><span class=\"mi\">113</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">CategoryTheory.LocallyDiscrete.id_comp.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">simp</span> <span class=\"n\">can</span> <span class=\"n\">prove</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.sum_comp_inl</span><span class=\"o\">,</span> <span class=\"n\">CategoryTheory.sum_comp_inr</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Category.id_comp</span><span class=\"o\">]</span>\n<span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">lemmas</span> <span class=\"n\">above</span> <span class=\"n\">could</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">duplicate.</span>\n<span class=\"n\">If</span> <span class=\"n\">that's</span> <span class=\"n\">not</span> <span class=\"n\">the</span> <span class=\"n\">case</span> <span class=\"n\">try</span> <span class=\"n\">reordering</span> <span class=\"n\">lemmas</span> <span class=\"n\">or</span> <span class=\"n\">adding</span> <span class=\"kd\">@[</span><span class=\"n\">priority</span><span class=\"kd\">]</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Here is the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">LocallyDiscrete.id_comp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">LocallyDiscrete</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">ùüô</span> <span class=\"n\">a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Discrete.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Category.id_comp</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried using the suggested <code>by simp only [...]</code> as in the error, but it doesnt seem to prove this lemma, and neither does <code>simp</code>. How do I avoid this error? It suggests I move the lemmas around in the file and/or add <code>@[priority]</code>, but I don't see how that helps since <code>simp</code> doesn't prove the lemma anyways.</p>",
        "id": 434961437,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1713871180
    },
    {
        "content": "<p>For context this is on the branch <code>callesonne_locallydiscrete</code></p>",
        "id": 434961996,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1713871381
    },
    {
        "content": "<p>It is provable by simp once you have obtained the instance <code>Strict (LocallyDiscrete C)</code>.<br>\nA priori, I would suggest moving the proof of these three lemmas <code>id_comp</code>, <code>comp_id</code>, <code>assoc</code> to the definition of this instance, but you may remove them completely, and remove also the definition of the three fields of the instance declaration because automation is able to obtain them all.</p>",
        "id": 434996892,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1713882228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Jo√´l Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form.20linter.20error/near/434996892\">said</a>:</p>\n<blockquote>\n<p>It is provable by simp once you have obtained the instance <code>Strict (LocallyDiscrete C)</code>.<br>\nA priori, I would suggest moving the proof of these three lemmas <code>id_comp</code>, <code>comp_id</code>, <code>assoc</code> to the definition of this instance, but you may remove them completely, and remove also the definition of the three fields of the instance declaration because automation is able to obtain them all.</p>\n</blockquote>\n<p>I see, thanks a lot! Is it preferred to rely on automation for <code>Strict (LocallyDiscrete C)</code>, or should I copy these proofs to the corresponding fields when defining the instance (since I have the proofs without automation anyways)?</p>",
        "id": 434999792,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1713883032
    },
    {
        "content": "<p>In other words, should I use the automation because that gives me fewer lines, or should I copy the proofs over, which might be faster compile-wise.</p>",
        "id": 435000244,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1713883155
    },
    {
        "content": "<p>Here, I would rely on automation. In category theory, many proofs are automated <code>by aesop_cat</code>. In many cases, it is just <code>ext; simp</code>.</p>",
        "id": 435014626,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1713887259
    }
]