[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.univ.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">Tactic.card_univ_pos</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.univ.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Tactic.card_univ_pos</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Tactic.card_univ_pos'</span>\n</code></pre></div>",
        "id": 433570149,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713287254
    },
    {
        "content": "<p>It seems that <code>exact?</code> find <code>private</code> theorems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fintype</span><span class=\"bp\">/</span><span class=\"n\">Card.lean</span><span class=\"o\">:</span><span class=\"mi\">1302</span><span class=\"o\">:</span><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">card_univ_pos</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n</code></pre></div>",
        "id": 433574076,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713288800
    },
    {
        "content": "<p>(Perfect time for a chrome incognito emoji)</p>",
        "id": 433574265,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713288877
    },
    {
        "content": "<p>Raises question of why that theorem is private <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 433574702,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713289070
    },
    {
        "content": "<p>I think that you \"should\" be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite.card_pos#doc\">docs#Finite.card_pos</a>, that uses <code>Prop</code>-valued assumptions, rather than <code>Type</code>-valued ones.</p>",
        "id": 433575300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713289312
    },
    {
        "content": "<p>Nevertheless, this <code>exact?</code> behaviour seems suboptimal...</p>",
        "id": 433575413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713289348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20suggests.20.22Tactic.2E.22/near/433574702\">said</a>:</p>\n<blockquote>\n<p>Raises question of why that theorem is private <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Easy answer: it used to be for a <code>positivity</code> extension, but that extension is currently commented out since it was never ported. It's good practice for tactics to restate all theorems that they use, rather than referring to global theorems, since that reduces the risk of refactors breaking the assumptions in the metaprograms. The Qq library does help a bit with reducing this risk.</p>",
        "id": 433577202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713290129
    },
    {
        "content": "<p>It's wrapping up <code>Finset.univ_nonempty.card_pos</code>, which is already in the library, and which is what <code>exact?</code> ought to give you.</p>",
        "id": 433577302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713290165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20suggests.20.22Tactic.2E.22/near/433570149\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.univ.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">Tactic.card_univ_pos</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.univ.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Tactic.card_univ_pos</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>gives</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Tactic.card_univ_pos'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is already fixed on nightly-testing, so should come good when we release v4.8.0-rc1.</p>",
        "id": 433640613,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713323588
    },
    {
        "content": "<p>(Also, just noting how <code>autoImplicit</code> fragmentation causes a problem: this is a fine MWE in a downstream project that doesn't turn off autoImplicits, but can't be copied and pasted as is into Mathlib...)</p>",
        "id": 433640727,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713323677
    },
    {
        "content": "<p>to be fair it also can't be copied and pasted as is into mathlib because it uses <code>import Mathlib</code></p>",
        "id": 433664891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713332639
    },
    {
        "content": "<p>It can be copied and pasted into <code>Mathlib/scratch.lean</code></p>",
        "id": 433665143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713332818
    }
]