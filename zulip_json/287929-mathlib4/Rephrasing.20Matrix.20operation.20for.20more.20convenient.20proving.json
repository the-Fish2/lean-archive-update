[
    {
        "content": "<p>Hello everyone, I am starting to prove my Addition rule for Matrices that represent PseudoBoolean restrictions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBSum</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">cs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBIneq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"c1\">-- Addition</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- ∑i (b i * l i) ≥ B</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i ((a i + b i) * l i) ≥ A + B</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">tighten</span> <span class=\"bp\">$</span> <span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span><span class=\"n\">PBSum</span><span class=\"o\">,</span><span class=\"n\">tighten</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Now, this <code>tighten</code> function below is meant to cancel out terms, since each row of the matrix represents the coefficient of variables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6306em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6306em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.5506em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>, with the relationship <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover><mo>=</mo><mn>1</mn><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\overline x = 1 - x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6306em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6306em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.5506em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x \\in \\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>. This is what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">FinVec</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\"> For each row, I want to have the elements cancel out, so one of them will always be zero</span>\n<span class=\"sd\"> Ex: row [1,0] -&gt; [1,0]</span>\n<span class=\"sd\">     row [2,1] -&gt; [1,0]</span>\n<span class=\"sd\">     row [1,5] -&gt; [0,4]</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tighten</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">as.map</span> <span class=\"n\">Int.ofNat</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">;-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">Int.toNat</span>\n<span class=\"c1\">-- Proving with this matrix multiplication may get challenging</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tighten</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tighten</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tighten</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">;</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Where this matrix just want to subtract one column from another and leave 0 if it should be negative. Firstly I ask, will this complicate my <code>Addition</code> proof? I have a guess that it will be harder to unwrap and verify, that's why I'm asking if there is a more convenient way to write this, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tighten'</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- as.rows ![a,b] -&gt; ![a-b,b-a]</span>\n  <span class=\"c1\">-- as.rows ![a,b] -&gt; if a &gt; b then ![a-b,0] else ![0,b-a]</span>\n</code></pre></div>\n<p>Any suggestions are welcome!</p>",
        "id": 438583681,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715695362
    },
    {
        "content": "<p>It got some more complicated, since I also need the number of positions that were tightened, with the matrix I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tighten</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">;-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">as.map</span> <span class=\"n\">Int.ofNat</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">Int.toNat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">tighten</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">tighten</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"bp\">+</span><span class=\"n\">bs</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438625826,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715709242
    },
    {
        "content": "<p>Then the description of the <code>tighten</code> function should be:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Given a N by 2 Matrix as, return a tuple, where\n1. Is another matrix, where each row follows\ndef eq : ℕ × ℕ → ℕ × ℕ\n| (a,b) =&gt; if a &gt; b then (a-b,0) else (0,b-a)\nAgains each row of as.\n\n2. A natural number, the sum of all removed lines, where for a single row it is\ndef rem : ℕ × ℕ → ℕ\n| (a,b) =&gt; min a b\n</code></pre></div>",
        "id": 438627738,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715709975
    },
    {
        "content": "<p>To be yet more specific, I would like to use a notation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tighten'</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- : Matrix (Fin n) (Fin 2) ℕ × ℕ :=</span>\n  <span class=\"bp\">∑</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"k\">if</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>But I don't want the \\sum operator, because I need the matrix back, I just need to access the rows and transform them somehow.</p>",
        "id": 438629841,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715710876
    },
    {
        "content": "<p>And also an alias to <code>as i 0</code> and <code>as i 1</code> would make it more readable.</p>",
        "id": 438629892,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715710908
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/Basic.html#Matrix.map\">Matrix.map</a> will apply to each element, which is not what I need.</p>",
        "id": 438630063,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715710974
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Matrix/RowCol.html#Matrix.updateRow\">Matrix.updateRow</a> Looks promissing but i need to gather the rows of <code>A</code> first</p>",
        "id": 438632549,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715712000
    },
    {
        "content": "<p>Apparently we can just use a function as a matrix definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tighten''</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 438801571,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715779598
    },
    {
        "content": "<p><em>Everything</em> in Lean is a function.</p>",
        "id": 438805156,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715780580
    },
    {
        "content": "<p>You shouldn't do that without prepending <code>Matrix.of</code></p>",
        "id": 438807192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715781134
    },
    {
        "content": "<p>Care to explain why, please?</p>",
        "id": 438807298,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715781165
    },
    {
        "content": "<p>For all I know the type assertion of the <code>def</code> will take care of instances, won't it?</p>",
        "id": 438807782,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715781289
    },
    {
        "content": "<p><code>simp</code> will thank you <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 438807873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715781310
    },
    {
        "content": "<p>Ok! It's looking more promising. Last thing, is there such a thing as a pattern match for finvec, like a list does? It'd be interesting to get elements like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tighten</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">as</span> <span class=\"n\">i</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 438811673,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715782188
    },
    {
        "content": "<p>Sort of. You can use <code>Fin.consInduction</code> and <code>Fin.consCases</code> to mimick this, but it won't look like pattern matching unless you do <code>induction as i using Fin.consInduction with</code> or <code>cases as i using Fin.consInduction with</code> inside tactic mode</p>",
        "id": 438848040,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715792305
    },
    {
        "content": "<p>Short answer no</p>",
        "id": 438848049,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715792310
    },
    {
        "content": "<p>What you have looks optimal</p>",
        "id": 438862232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715797434
    },
    {
        "content": "<p>Are you later doing multiplication with these matrices?</p>",
        "id": 438862293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715797450
    },
    {
        "content": "<p>If not, then maybe you should be working with <code>Fin n -&gt; ℕ \\times ℕ</code>instead</p>",
        "id": 438862330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715797471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rephrasing.20Matrix.20operation.20for.20more.20convenient.20proving/near/438862330\">said</a>:</p>\n<blockquote>\n<p>If not, then maybe you should be working with <code>Fin n -&gt; ℕ \\times ℕ</code>instead</p>\n</blockquote>\n<p>I will multiply with a scalar among other operations. Why is it better to use a tuple?</p>",
        "id": 438869154,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715800145
    },
    {
        "content": "<p>If you never do matrix multiplication, then <code>Matrix</code> is probably getting in your way. Scalar multiplication works fine on tuples.</p>",
        "id": 438869793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715800422
    },
    {
        "content": "<blockquote>\n<p>Why is it better to use a tuple?</p>\n</blockquote>\n<p>For one, the <code>(x, y)</code> pattern-matching syntax will work</p>",
        "id": 438869825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715800440
    },
    {
        "content": "<p>So, if I use a tuple how can this operation be done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ceildiv</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ApplyCeildiv</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">M.map</span> <span class=\"o\">(</span><span class=\"n\">ceildiv</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439213455,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715949415
    },
    {
        "content": "<p>I'll need to map over matrix and tuple, right?</p>",
        "id": 439213520,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1715949434
    }
]