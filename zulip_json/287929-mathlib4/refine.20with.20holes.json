[
    {
        "content": "<p>I think <code>refine</code> in lean3 used to have some sort of wildcard pattern. Is there something similar in Lean/mathlib nowadays?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"n\">Submodule</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">?..</span> <span class=\"o\">}</span>  <span class=\"c1\">-- `?..` means that it's up to Lean to figure out which goals remain</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- all remaining goals appear here</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>This example is based on <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...thorimur/refine_struct-via-StructInst\">some work</a> by <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, but I'm not aware of this ever making it into mathlib.</p>\n<p>Concretely, if the goal is a structure, I am looking for a good way to get one goal per field with the following restrictions:</p>\n<ul>\n<li>Must be a single-line syntax, in \"tactic mode\".</li>\n<li>Should need to specify the number of fields (because something like <code>refine ⟨⟨⟨M, ?_⟩, ?_⟩, ?_⟩</code> is too hard to guess)</li>\n<li>Option to directly provide some (non-prop) fields.</li>\n<li>Remaining fields appear in the right order (e.g. <code>constructor</code> puts non-prop fields at the back. I get why, but it can also be really confusing to solve something about a thing <code>?f</code> you haven't defined yet)</li>\n</ul>\n<p>Or what is the recommended way to play around with a structure in tactic mode?</p>",
        "id": 437596779,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715154514
    },
    {
        "content": "<p>you can use <code>refine'</code> with <code>..</code></p>",
        "id": 437597208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715154712
    },
    {
        "content": "<p>Oh that's a good shout, I forgot that existed!</p>",
        "id": 437597394,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715154782
    }
]