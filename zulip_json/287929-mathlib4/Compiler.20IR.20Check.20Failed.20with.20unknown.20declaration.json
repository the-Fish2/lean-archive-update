[
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: I get an error message that tells me \"unknown declaration <code>PMF.pure</code>. But this is strange because that def is imported. Why is this the case? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Lagrange</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Monad</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PolyCommitIOPMonad</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">open_at_point</span> <span class=\"o\">:</span> <span class=\"n\">CoinHandle</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">OpeningHandle</span>\n    <span class=\"n\">randomness</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PMF</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">CoinHandle</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">PMF.pure</span> <span class=\"c1\">-- PMF.pure.{u_1} {α : Type u_1} (a : α) : PMF α</span>\n\n<span class=\"c1\">-- compiler IR check failed at 'SendFieldElement._rarg', error: unknown declaration 'PMF.pure'</span>\n<span class=\"kd\">def</span> <span class=\"n\">SendFieldElement</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">CoinHandle</span> <span class=\"n\">OpeningHandle</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PolyCommitIOPMonad</span> <span class=\"n\">F</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">OpeningHandle</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">PolyCommitIOPMonad.randomness</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CoinHandle</span> <span class=\"o\">:=</span> <span class=\"n\">CoinHandle</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PMF.pure</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f_0</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">PolyCommitIOPMonad.open_at_point</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n  <span class=\"n\">return</span> <span class=\"n\">f_0</span>\n</code></pre></div>",
        "id": 432592016,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712785635
    },
    {
        "content": "<p>Note also: If I mark the definition as noncomputable then the error goes away. But I don't want the definition to be noncomputable, and the error message doesn't tell me to do this anyway.</p>",
        "id": 432592246,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712785745
    },
    {
        "content": "<p>The definition of <code>PMF.pure</code>  is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">NNReal</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PMF</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Pure</span>\n\n<span class=\"sd\">/-- The pure `PMF` is the `PMF` where all the mass lies in one point.</span>\n<span class=\"sd\">  The value of `pure a` is `1` at `a` and `0` elsewhere. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hasSum_ite_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>so this is using classical to provide a proof that equality is decidable, this should be converted to and explicit <code>[DecidableEq alpha]</code>  to fix the problem, but I have no idea if this is just a band-aid, perhaps the rest of the theory will break down the line without a big redesign at this point</p>",
        "id": 432711997,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712843867
    },
    {
        "content": "<p>I thought of this and I did a bit of tinkering with the definition. If I remove the <code>noncomputable section</code> and add the <code>DecidableEq</code> it still complains of noncomputability due to some typeclass of Ennreal. I am not sure why it does this.</p>",
        "id": 432715492,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712844849
    },
    {
        "content": "<p>Right that does make sense then that any definition involving <code>PMF</code> would have a lot of difficulty being computable, and even if it was would likely not be practically executable. Probably you'll get more mileage out of defining your own PMF's landing in something like Ennrat</p>",
        "id": 432721447,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712846409
    },
    {
        "content": "<p>I still don't understand. If I have <code>DecidableEq  α</code>, then shouldn't I be able to compute <code>if a' = a then 1 else 0</code>?</p>",
        "id": 432724733,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712847207
    },
    {
        "content": "<p>only if <code>1</code> and <code>0</code> are computable (!)</p>",
        "id": 432726967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712847796
    },
    {
        "content": "<p>Why shouldn't they be? The real numbers 0 and 1 are</p>",
        "id": 432727311,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712847885
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- Real.ofCauchy (sorry /- 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... -/)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to compile</span>\n</code></pre></div>",
        "id": 432727489,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712847940
    },
    {
        "content": "<p>I suppose you're going to tell me it's because we can't determine if these numbers are greater than or equal to zero.</p>",
        "id": 432727956,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712848069
    },
    {
        "content": "<p>If that's the answer, I don't see why that's important. The very fact that these terms typecheck means that they are greater than 0, so that should just be proof, not data, and shouldn't affect computability.</p>",
        "id": 432728710,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712848280
    },
    {
        "content": "<p>no, they are noncomputable because of a silly reason most likely</p>",
        "id": 432729432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712848500
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">ENNReal.instCanonicallyOrderedCommSemiringENNReal'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>is the full error message here</p>",
        "id": 432730983,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712848907
    },
    {
        "content": "<p>And if I put the <code>#eval</code> before that instance, it works</p>",
        "id": 432731181,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712848960
    },
    {
        "content": "<p>Easiest solution:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- Mathlib/Data/ENNReal/Basic.lean</span>\n<span class=\"gi\">+++ Mathlib/Data/ENNReal/Basic.lean</span>\n<span class=\"gu\">@@ -97,7 +97,7 @@ variable {α : Type*}</span>\n<span class=\"w\"> </span>/-- The extended nonnegative real numbers. This is usually denoted [0, ∞],\n<span class=\"w\"> </span>  and is relevant as the codomain of a measure. -/\n<span class=\"w\"> </span>def ENNReal := WithTop ℝ≥0\n<span class=\"gd\">-  deriving Zero, AddCommMonoidWithOne, SemilatticeSup, DistribLattice, Nontrivial</span>\n<span class=\"gi\">+  deriving Zero, One, AddCommMonoidWithOne, SemilatticeSup, DistribLattice, Nontrivial</span>\n<span class=\"w\"> </span>#align ennreal ENNReal\n\n<span class=\"w\"> </span>@[inherit_doc]\n</code></pre></div>\n<p>(I'm not going to PR)</p>",
        "id": 432731486,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712849049
    }
]