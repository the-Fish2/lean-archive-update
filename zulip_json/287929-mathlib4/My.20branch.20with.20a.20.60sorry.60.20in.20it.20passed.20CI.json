[
    {
        "content": "<p>Hello, my branch <a href=\"https://github.com/leanprover-community/mathlib4/tree/trivial1711-nonarchimedean-sums-mul\">https://github.com/leanprover-community/mathlib4/tree/trivial1711-nonarchimedean-sums-mul</a> managed to pass CI even though there is a <code>sorry</code> in it. (The <code>sorry</code> is in <a href=\"https://github.com/leanprover-community/mathlib4/blob/trivial1711-nonarchimedean-sums-mul/Mathlib/Topology/Algebra/InfiniteSum/Nonarchimedean.lean\">https://github.com/leanprover-community/mathlib4/blob/trivial1711-nonarchimedean-sums-mul/Mathlib/Topology/Algebra/InfiniteSum/Nonarchimedean.lean</a>. Note that the commit that introduced the <code>sorry</code> failed CI.) Is this a mistake?</p>",
        "id": 436837966,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714724119
    },
    {
        "content": "<p>I am not sure, but a bunch of tests have been skipped, maybe that's the reason.</p>",
        "id": 436838569,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714724413
    },
    {
        "content": "<p>Can you open a PR and see what happens?</p>",
        "id": 436838591,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714724432
    },
    {
        "content": "<p>I think what's happening here is that:</p>\n<ul>\n<li>You submit the commit with a sorry. Mathlib builds, emits a warning, and we catch it in stdout.</li>\n<li>You change something downstream. Mathlib doesn't rebuild the file containing a sorry, and so we don't see it in the stdout any more.</li>\n</ul>",
        "id": 436839249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714724755
    },
    {
        "content": "<p>A sorry logs a warning that is caught at the time of the build.  If the file had a sorry, produced <code>olean</code>s in a previous run and does not need to be rebuilt on a later run, then it will not produce a warning and will not cause CI to fail.</p>",
        "id": 436839302,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714724765
    },
    {
        "content": "<p>Note however that at \"merge-with-master\" time, it would be caught, since <em>that</em> build would re-run all the files that were modified with respect to master.</p>",
        "id": 436839405,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714724833
    },
    {
        "content": "<p>There was a proposal to cache warnings, but I do not think that anyone has given much thought to implementing that.</p>",
        "id": 436839484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714724883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/My.20branch.20with.20a.20.60sorry.60.20in.20it.20passed.20CI/near/436839249\">said</a>:</p>\n<blockquote>\n<p>I think what's happening here is that:</p>\n<ul>\n<li>You submit the commit with a sorry. Mathlib builds, emits a warning, and we catch it in stdout.</li>\n<li>You change something downstream. Mathlib doesn't rebuild the file containing a sorry, and so we don't see it in the stdout any more.</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> do the Lake output changes fix this issue?</p>",
        "id": 436840030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714725115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/My.20branch.20with.20a.20.60sorry.60.20in.20it.20passed.20CI/near/436839405\">said</a>:</p>\n<blockquote>\n<p>Note however that at \"merge-with-master\" time, it would be caught, since <em>that</em> build would re-run all the files that were modified with respect to master.</p>\n</blockquote>\n<p>This isn't true  I don't think</p>",
        "id": 436840102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714725134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Lake now caches logs and replays them. So, yes, it should.</p>",
        "id": 436840183,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714725179
    },
    {
        "content": "<p>If you:</p>\n<ul>\n<li>Get your PR approved</li>\n<li>Merge master right into the PR (which will likely trigger a sorry-based build failure)</li>\n<li>Commit some meaningless change to a leaf file</li>\n<li>Merge</li>\n</ul>\n<p>then the build on master will use the cache from the penultimate step, and the <code>sorry</code> will be someone else's problem next time they have to rebuild your file (most likely Scott's with nightly-testing)</p>",
        "id": 436840262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714725212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/My.20branch.20with.20a.20.60sorry.60.20in.20it.20passed.20CI/near/436840102\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/My.20branch.20with.20a.20.60sorry.60.20in.20it.20passed.20CI/near/436839405\">said</a>:</p>\n<blockquote>\n<p>Note however that at \"merge-with-master\" time, it would be caught, since <em>that</em> build would re-run all the files that were modified with respect to master.</p>\n</blockquote>\n<p>This isn't true  I don't think</p>\n</blockquote>\n<p>Ah, for some reason I thought that the bors build would start from the diff with master, not from the \"diff-with-master-for-which-there-is-no-cache-yet\"... </p>\n<p>I agree with you -- and this is Kim's problem, sadly and most likely!</p>",
        "id": 436840503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714725338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> The original run in question was on 4.8.0-rc1, so I guess actually the lake changes didn't help</p>",
        "id": 436840763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714725473
    },
    {
        "content": "<p>I think maybe we just need to be using the new <code>--werror</code> in CI, there is a <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8932831297/job/24537267120#step:12:4373\">sorry warning</a> in the succeeding run</p>",
        "id": 436841003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714725598
    },
    {
        "content": "<p><code>--wfail</code> ;)</p>",
        "id": 436841128,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714725643
    },
    {
        "content": "<p>Ah, and the reason that is needed is because the second run does not run Lean. Thus, it does not error out due to the Lean <code>warningAsError</code> option. Instead, it replays the cached log, and since Lake itself has not been told to be mad at warnings, it happily completes.</p>",
        "id": 436841444,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714725801
    },
    {
        "content": "<p>Why doesn't the first run fail?</p>",
        "id": 436843788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714726825
    },
    {
        "content": "<p>with <code>warningAsError</code> shouldn't it appear as an error just like before?</p>",
        "id": 436843846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714726849
    },
    {
        "content": "<p>Presumably we need <code>warningAsError</code> to influence the hash of the files compiled with it?</p>",
        "id": 436844349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714727055
    },
    {
        "content": "<p>It should not, and I think it already does not</p>",
        "id": 436844414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727089
    },
    {
        "content": "<p>it's a <code>weakLeanArgs</code> so it does not change the hash</p>",
        "id": 436844461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727111
    },
    {
        "content": "<p>Otherwise I can inject an olean with a sorry into the cache by temporarily turning off the flag, and then when I turn it back on then the next cache download will let me get away with the sorry</p>",
        "id": 436844620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714727176
    },
    {
        "content": "<p>This is all fixed by the new lake setup</p>",
        "id": 436844646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727206
    },
    {
        "content": "<p>although we need to also put the new log cache file in the cache</p>",
        "id": 436844765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727263
    },
    {
        "content": "<p>(ideally we would have done all this before deploying it in production)</p>",
        "id": 436844809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/My.20branch.20with.20a.20.60sorry.60.20in.20it.20passed.20CI/near/436844809\">said</a>:</p>\n<blockquote>\n<p>(ideally we would have done all this before deploying it in production)</p>\n</blockquote>\n<p>Is there an argument that we should do this before rc2?</p>",
        "id": 436844949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714727341
    },
    {
        "content": "<p>it's not dependent on the rc2 bump</p>",
        "id": 436845002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727372
    },
    {
        "content": "<p>it can be done at any point after rc1</p>",
        "id": 436845029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727386
    },
    {
        "content": "<p>or on the nightlies leading up to it</p>",
        "id": 436845063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714727402
    },
    {
        "content": "<p>fix is up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12620\">#12620</a>, but I will leave it to others to test it</p>",
        "id": 436846688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714728073
    }
]