[
    {
        "content": "<p>Why does Finset.sort not work in the same way as List.mergesort? For the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">List.mergeSort</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.mergeSort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">List.mergeSort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.mergeSort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.mergeSort</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>everything works as expected, but the analogous code for Finset.sort produces error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Finset.sort</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Works as expected -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  IsTotal ?m.10107 fun x x-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_finset</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">test_finset</span>\n<span class=\"c\">/-</span><span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  IsTotal ℕ fun x x_1 =&gt; x &lt; x_1</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">test_finset</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ⊢ sorryAx (List ℕ) true = [2, 3, 7] -/</span>\n</code></pre></div>",
        "id": 433132560,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713099440
    },
    {
        "content": "<p>Both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs#Finset.sort</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mergeSort#doc\">docs#List.mergeSort</a> expect <code>≤</code>, not <code>&lt;</code>. You can tell because of the <code>IsTotal</code> assumption in the definition of <code>Finset.sort</code> and the theorems about <code>mergeSort</code> (should this be documented in the docstring?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_finset</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[2, 3, 7]</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">test_finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">test_finset</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I suspect that the reason that <code>Finset.sort</code> requires <code>IsTotal</code> to write down is that otherwise the result is ill-defined.</p>",
        "id": 433133414,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1713100267
    },
    {
        "content": "<p>Okay thank you <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> ! To a mathematician <code>(. &lt; .)</code> is a total order, hence the source of my confusion. Lesson learned is to drill down and look up things like IsTotal.</p>",
        "id": 433134619,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713101207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> has marked this topic as resolved.</p>",
        "id": 433134652,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713101234
    }
]