[
    {
        "content": "<p>I'm kind of curious about the level of effort required to prove that the theory of algebraically closed fields of fixed characteristic is categorical at a given cardinal.</p>\n<p>It looks like a couple of lemmas needed are:</p>\n<ul>\n<li>An algebraically closed field of cardinality k has a transcendence base of size k</li>\n<li>Two fields of the same char with the same cardinality transcendence base are isomorphic</li>\n</ul>\n<p>I hope I got those right.</p>\n<p>How close are we to proving those theorems in the current ecosystem?</p>",
        "id": 432970253,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712950633
    },
    {
        "content": "<p>Are the things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IsAlgClosed/Classification.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IsAlgClosed/Classification.html</a> relevant?</p>",
        "id": 432972243,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712951573
    },
    {
        "content": "<p>Oh yeah! What do you know. Wow it feels very accessible to prove completeness of closed fields!</p>",
        "id": 432974615,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712952583
    },
    {
        "content": "<p>I would generally suggest clicking on \"Imported by\" on the right hand side of that page to see if anything within Mathlib builds on top of these results, but in this case there's nothing</p>",
        "id": 432975128,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712952778
    },
    {
        "content": "<p>For note: These theorems, combined with Łoś–Vaught <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/ModelTheory/Satisfiability.html#Cardinal.Categorical.isComplete\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/ModelTheory/Satisfiability.html#Cardinal.Categorical.isComplete</a> brings completeness of complete fields within striking distance</p>",
        "id": 432975201,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712952815
    },
    {
        "content": "<p>Sadly completeness only implies decidability on paper; the algorithm is completely impractical</p>",
        "id": 432975297,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712952855
    },
    {
        "content": "<p>But it has cool applications! E.g. a proof of Ax-Grothendieck uses this.</p>",
        "id": 432975359,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712952895
    },
    {
        "content": "<p>You might be interested in <a href=\"https://github.com/Jlh18/ModelTheory8Report/blob/main/report/m4r.pdf\">https://github.com/Jlh18/ModelTheory8Report/blob/main/report/m4r.pdf</a> (its in lean 3 but still cool!)</p>",
        "id": 432979820,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712955058
    },
    {
        "content": "<p>Wow the whole thing is already done! I'm constantly amazed at the maturity of the lib. A tiny bit sad this hasn't been ported yet.</p>\n<p>I guess the very last step would be trying to make this a \"tactic\" that reduces a proposition over </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span></span></p>\n<p>to </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>n</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∀</mi><mi>p</mi><mo>&gt;</mo><mi>n</mi><mo separator=\"true\">,</mo><msub><mover accent=\"true\"><mi mathvariant=\"double-struck\">F</mi><mo stretchy=\"true\">‾</mo></mover><mi>p</mi></msub><mtext> </mtext><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\exists n, \\forall p &gt; n, \\overline{\\mathbb{F}}_p\n\\ \\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.175em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span></span></span></span></span></p>\n<p>has anyone done <em>that</em>?</p>",
        "id": 432992730,
        "sender_full_name": "Cody Roux",
        "timestamp": 1712961934
    },
    {
        "content": "<p>I'm not aware of that.</p>",
        "id": 433012477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712980292
    },
    {
        "content": "<p>Cody the Ax-Grothendieck thing above was just a masters project I supervised. I don't think anyone is trying to port it right now and I can't claim that it was done in the best way because the supervisor knew very little about what was going on in that project.</p>",
        "id": 433033705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713001405
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6468\">#6468</a> a port to Lean 4? (Many pieces of it were merged, but as far as I can see, the remainders are available for somebody to pick up and finish.)</p>",
        "id": 433034030,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1713001765
    },
    {
        "content": "<p>Looks like it! Certainly Chris (the author of the PR) helped a lot with the project</p>",
        "id": 433034122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713001840
    }
]