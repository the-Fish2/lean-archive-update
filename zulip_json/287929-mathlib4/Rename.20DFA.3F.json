[
    {
        "content": "<p>I think that the name <code>DFA</code> is dangerous, as it stands for Deterministic Finite Automaton, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFA#doc\">docs#DFA</a> needn't be finite. I suggest <code>StateMachine</code> might be a better name. The downside is that we would have to rename <code>NFA</code> and <code>εNFA</code> as well. I think that <code>NondetStateMachine</code> and <code>εNondetStateMachine</code> might be acceptable names. Determinism is default (unless you use the initialism).</p>",
        "id": 416636865,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705606565
    },
    {
        "content": "<p>Also, I think acronyms should be used sparingly in a project as big as mathlib.</p>",
        "id": 416641394,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1705608443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F/near/416636865\">said</a>:</p>\n<blockquote>\n<p>I think that the name <code>DFA</code> is dangerous, as it stands for Deterministic Finite Automaton, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFA#doc\">docs#DFA</a> needn't be finite. I suggest <code>StateMachine</code> might be a better name. The downside is that we would have to rename <code>NFA</code> and <code>εNFA</code> as well. I think that <code>NondetStateMachine</code> and <code>εNondetStateMachine</code> might be acceptable names. Determinism is default (unless you use the initialism).</p>\n</blockquote>\n<p>Good one. Just a small quibble. You want the names of the non-deterministic versions to have capitalised <code>d</code>s</p>",
        "id": 416662059,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1705617891
    },
    {
        "content": "<p>I find lowercase <code>d</code> slightly better.</p>",
        "id": 416739829,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705656902
    },
    {
        "content": "<p>I'd argue \"DFA needn\"t be finite\" is not that different from \"<code>MonoidHom</code> isn't actually between monoids\", \"<code>Module</code> doesn't actually imply a vector negation\", and \"<code>RingEquiv</code> isn't actually between rings\"</p>",
        "id": 417012386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705774880
    },
    {
        "content": "<p>We quite often name things based on the generality people are likely to look for rather than the actual generality we wrote them in</p>",
        "id": 417012502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705774944
    },
    {
        "content": "<p>/poll What do you prefer?<br>\nKeep <code>DFA</code><br>\nChange it to <code>StateMachine</code></p>",
        "id": 417174462,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705910186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F/near/417012386\">said</a>:</p>\n<blockquote>\n<p>I'd argue \"DFA needn\"t be finite\" is not that different from \"<code>MonoidHom</code> isn't actually between monoids\", \"<code>Module</code> doesn't actually imply a vector negation\", and \"<code>RingEquiv</code> isn't actually between rings\"</p>\n</blockquote>\n<p>Except that would be misleading to an outsider peeking in. It would be reasonable for someone looking for DFAs to expect the finiteness assumption for the state set baked in somewhere. It would then be confusing to such a user as to why their textbook pumping lemma statement proof doesn't work (it uses pigeonhole principle).</p>",
        "id": 417444125,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1706016065
    },
    {
        "content": "<p>but the solution is just to put <code>Finite \\sigma</code></p>",
        "id": 417444764,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706016271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F/near/417012386\">said</a>:</p>\n<blockquote>\n<p>I'd argue \"DFA needn\"t be finite\" is not that different from \"<code>MonoidHom</code> isn't actually between monoids\", \"<code>Module</code> doesn't actually imply a vector negation\", and \"<code>RingEquiv</code> isn't actually between rings\"</p>\n</blockquote>\n<p>I don't think it is a fair comparison. Defining <code>RingEquiv</code> for  (non-unital non-associative semi)rings is harmless — if you give me two rings and I give you a <code>RingEquiv</code> between them, it will indeed be a ring equivalence. In contrast, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFA#doc\">docs#DFA</a> is a Trojan horse — if you give me a <code>Language</code> and I give you a <code>DFA</code> that accepts the language, it might mislead you into believing you have a regular language (if you don't read the full docs).</p>\n<p>One possible improvement is to define <code>Language.IsRegular</code> in the style of <code>Language.IsContextFree</code> here<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/ffdb6fa3c42fc3f7bdaab2f3a071efcc34366b14/Mathlib/Computability/ContextFreeGrammar.lean#L195\">https://github.com/leanprover-community/mathlib4/blob/ffdb6fa3c42fc3f7bdaab2f3a071efcc34366b14/Mathlib/Computability/ContextFreeGrammar.lean#L195</a><br>\nwhere <code>Language.IsRegular</code> will restrict <code>σ</code> to be finite. Avoiding the use of the definition should raise a red flag \"wait, why didn't the adversary prove regularity as the property defined on languages\".</p>",
        "id": 417447876,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706017366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F/near/417444125\">said</a>:</p>\n<blockquote>\n<p>It would then be confusing to such a user as to why their textbook pumping lemma statement proof doesn't work (it uses pigeonhole principle).</p>\n</blockquote>\n<p>You are definitely right, but please note that this isn't my main concern. I am not arguing on the basis \"this definition is hard to work with because it is nonstandard\". I am arguing on the basis \"this definition is dangerous because it can facilitate academic misconduct\"-</p>",
        "id": 417450106,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706018027
    },
    {
        "content": "<p>I think the resolution here is to document in the second line of the docstring that to actually enforce this is finite, you need <code>Finite σ</code></p>",
        "id": 417456062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706019745
    },
    {
        "content": "<p>If it is written both in the module docstring (where it currently is) and in the structure docstring (where is currently isn't), it won't hurt, I guess.</p>",
        "id": 417456980,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706020025
    },
    {
        "content": "<p>I don't see why names like SM and FSM cannot be used. These are common in the field. Then the acceptance conditions can be separated away and more types of automata can be included.</p>",
        "id": 417461078,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1706021155
    },
    {
        "content": "<p>Because we would not have <code>FSM</code> at all, in the same way that we do not have <code>GroupHom</code> or <code>MulOneHom</code> at all</p>",
        "id": 417536093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706047070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F/near/417456980\">said</a>:</p>\n<blockquote>\n<p>If it is written both in the module docstring (where it currently is) and in the structure docstring (where is currently isn't), it won't hurt, I guess.</p>\n</blockquote>\n<p>The duplication is unfortunate, but the structure docstring is the one that appears in vscode hovers</p>",
        "id": 417536305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706047160
    },
    {
        "content": "<p>and <code>SM</code> is even worse than <code>DFA</code> as far as acronym-naming is concerned</p>",
        "id": 417536307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706047161
    },
    {
        "content": "<p>Is this in a namespace?</p>",
        "id": 417536332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706047174
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFA#doc\">docs#DFA</a>: no, it is not</p>",
        "id": 417536379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706047192
    },
    {
        "content": "<p>Why not use <code>StateMachine</code>?</p>",
        "id": 417540894,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706049174
    },
    {
        "content": "<p>Do we really try to save keystrokes over readability here?</p>",
        "id": 417540937,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706049197
    },
    {
        "content": "<p>Personally I think <code>StateMachine</code> is a less good name than <code>Deterministic(Finite)Automaton</code> because the former is a blanket term used to refer to a variety of things that have state and the latter is a more specific implementation of the technique which has a common layout in the literature</p>",
        "id": 417542031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706049765
    },
    {
        "content": "<p>DFA is also much more commonly used as an acronym than FSM (I don't think I have ever seen SM used, nor DA)</p>",
        "id": 417542204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706049853
    },
    {
        "content": "<p>Deterministic Pre-finite Automaton, the same way we have pre-connected and pre-prime.</p>",
        "id": 417571510,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1706068704
    },
    {
        "content": "<p>Predeterministic Finite Automaton</p>\n<p>JOKE</p>",
        "id": 418163672,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706216361
    }
]