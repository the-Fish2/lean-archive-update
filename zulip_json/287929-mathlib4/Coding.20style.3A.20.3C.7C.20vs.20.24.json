[
    {
        "content": "<p>Hi, do we officially prefer one of <code>&lt;|</code> or <code>$</code> to another?</p>",
        "id": 410324848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703786041
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> says <code>&lt;|</code>:</p>\n<blockquote>\n<p>Note: while <code>$</code> is a synonym for <code>&lt;|</code>, its use in mathlib is disallowed in favor of <code>&lt;|</code> for consistency as well as because of the symmetry with <code>|&gt;</code>.</p>\n</blockquote>",
        "id": 410324906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703786058
    },
    {
        "content": "<p>I'm going to search for <code>$</code>s and change them to <code>&lt;|</code>s then.</p>",
        "id": 410324979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703786130
    },
    {
        "content": "<p>Out of all style decisions, this is the one I just can't stand with. <code>&lt;|</code> don't stick out visually for me, so readability is very poor, and the symmetry argument with<code>|&gt;</code> doesn't make sense to me since I never use it (certainly, if you're doing dot notation on a lemma with underscores, that usually means you've messed up implicitness of the arguments).  How come we like ASCII art now? <span aria-label=\"frowning\" class=\"emoji emoji-1f626\" role=\"img\" title=\"frowning\">:frowning:</span></p>",
        "id": 410327321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703787549
    },
    {
        "content": "<p>Anyway, I see no reason to not let everyone do their own thing.</p>",
        "id": 410327343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703787567
    },
    {
        "content": "<p>FWIW I use a programmer font with nice ligatures so it actually does look like a big triangle to me. You should consider using one to improve the look of the other ascii art aspects of lean code like <code>:=</code> and <code>=&gt;</code></p>",
        "id": 410328063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788076
    },
    {
        "content": "<p>We could use a unicode triangle, but I think it is better to leave that as an available operator for mathsy stuff</p>",
        "id": 410328165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788133
    },
    {
        "content": "<p><code>▸</code> is famously already used</p>",
        "id": 410328201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788151
    },
    {
        "content": "<p>Also using a programmer font will probably conflict with the fact that we want a lot of unicode available</p>",
        "id": 410328248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788187
    },
    {
        "content": "<p>believe it or not the <code>▸</code> operator actually did come from the math (well, type theory) literature</p>",
        "id": 410328321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788208
    },
    {
        "content": "<p>I should also mention that typing <code>&lt;|</code> is 1 + 2 keystrokes while <code>$</code> is a single one. I'm a big (ab)user of <code>$</code> so that matters.</p>",
        "id": 410328380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788248
    },
    {
        "content": "<blockquote>\n<p>the symmetry argument with|&gt; doesn't make sense to me since I never use it (certainly, if you're doing dot notation on a lemma with underscores, that usually means you've messed up implicitness of the arguments</p>\n</blockquote>\n<p>It doesn't seem any implicit argument should be made explicit in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finRange_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finRange</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finRange</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">Fin.castSucc</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(and certainly nested <code>(</code> are avoided using <code>|&gt;</code> here.) You can see more examples how <code>|&gt;</code> is used in mathlib <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+%7C%3E&amp;type=code&amp;p=2\">here</a>.</p>",
        "id": 410328401,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703788263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.3C.7C.20vs.20.24/near/410328380\">said</a>:</p>\n<blockquote>\n<p>I should also mention that typing <code>&lt;|</code> is 1 + 2 keystrokes while <code>$</code> is a single one. I'm a big (ab)user of <code>$</code> so that matters.</p>\n</blockquote>\n<p>This depends a lot on your keyboard layout. What if your keyboard has a <code>€</code> key instead?</p>",
        "id": 410328507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788332
    },
    {
        "content": "<p>In fact, mine does!</p>",
        "id": 410328525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788353
    },
    {
        "content": "<p>in any case, if number of keystrokes was our top optimization criterion we would be an ascii shop</p>",
        "id": 410328597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.3C.7C.20vs.20.24/near/410328401\">said</a>:</p>\n<blockquote>\n<p>It doesn't seem any implicit argument should be made explicit in</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finRange_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finRange</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finRange</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">Fin.castSucc</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Maybe I'm the minority, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finRange_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finRange</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">finRange</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Fin.castSucc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>actually looks better to me? No outside bracket needed, and you clearly see what happens first and what happens last.</p>",
        "id": 410328715,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788493
    },
    {
        "content": "<p>... not to mention it's shorter</p>",
        "id": 410328782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703788542
    },
    {
        "content": "<p>and <code>$</code> meaning application doesn't really make any sense at all - the only thing it has going for it is that it's one of the ascii punctuation characters (which is a powerful force in programming language design)</p>",
        "id": 410328899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788603
    },
    {
        "content": "<p><code>@</code> would make more sense as an application operator</p>",
        "id": 410329122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703788758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.3C.7C.20vs.20.24/near/410328715\">said</a>:</p>\n<blockquote>\n<p>Maybe I'm the minority, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finRange_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finRange</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">finRange</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Fin.castSucc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>actually looks better to me? No outside bracket needed, and you clearly see what happens first and what happens last.</p>\n</blockquote>\n<p>Yes in this case, but I would prefer <code>|&gt;</code> when there are three or more nested <code>(</code>. Also you usually don't need to go back to add parentheses if you use <code>|&gt;</code> (except maybe the outermost one for precedence reasons).</p>",
        "id": 410329126,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703788765
    },
    {
        "content": "<p>It’s not just about looking nice or being shorter… I think readability is much more important and personally I think the version with <code>|&gt;</code> makes it much easier to immediately see what’s going on with the code.</p>",
        "id": 410330212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703789529
    },
    {
        "content": "<p>I too am fighting for readability, and I think <code>&lt;|</code>/<code>|&gt;</code> are terrible for that! Sure I can use a programming font in my VScode, but that still doesn't stop the code <del>looking terrible</del> being unreadable on Github, Zulip, Discord...</p>",
        "id": 410330409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703789676
    },
    {
        "content": "<p>reminder, \"looking good/terrible\" is not synonymous with \"readability\"</p>",
        "id": 410330727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703789929
    },
    {
        "content": "<p>Sure, let me edit my message.</p>",
        "id": 410330852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703790009
    },
    {
        "content": "<p>what is the argument that <code>$</code> is more readable than <code>&lt;|</code>?</p>",
        "id": 410330901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790039
    },
    {
        "content": "<p>I'm sorry but I can't see this as anything other than \"I'm used to <code>$</code> from lean 3 code\"</p>",
        "id": 410330998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790079
    },
    {
        "content": "<p>Less ASCII art, no kerning issue, no height issue.</p>",
        "id": 410331052,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703790104
    },
    {
        "content": "<p>they are both ascii art</p>",
        "id": 410331065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790111
    },
    {
        "content": "<p>and the other two are aesthetic concerns not readability concerns</p>",
        "id": 410331137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790131
    },
    {
        "content": "<p>again, see my previous message</p>",
        "id": 410331162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790142
    },
    {
        "content": "<p>readability is about being able to look at the text and understand what it says</p>",
        "id": 410331210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790167
    },
    {
        "content": "<p>For me specifically, I think the matter is that <code>$</code> is more visually \"one thing\" than <code>&lt;|</code>.</p>",
        "id": 410331215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703790170
    },
    {
        "content": "<p>I'm not arguing for using it, but my mnemonic was that <code>$</code> is a <code>(</code> and a <code>)</code> pinned together</p>",
        "id": 410331405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703790258
    },
    {
        "content": "<p>I see <code>&lt;|</code> as a little cliff that raises the height of nesting. I think it's supposed to be arrow-like, pointing toward the function it's feeding</p>",
        "id": 410331593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703790379
    },
    {
        "content": "<p>I think part of the motivation for the directionality is the idea of a \"pipeline\", <code>x |&gt; f |&gt; g |&gt; h</code> takes <code>x</code>, applies <code>f</code> then <code>g</code> then <code>h</code> in that order</p>",
        "id": 410331772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790487
    },
    {
        "content": "<p>it's trying to fight against the traditional function application order <code>h (g (f x))</code> which puts the functions in the wrong order compared to the order of operations</p>",
        "id": 410331837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790544
    },
    {
        "content": "<p>but it also so happens that when writing proofs because things are goal directed you often want to work backward from the end, hence the reverse pipeline <code>h &lt;| g &lt;| f &lt;| x</code> turns out to be even more useful</p>",
        "id": 410331959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790640
    },
    {
        "content": "<p>the use of pipe symbols derive from the <code>|</code> symbol in unix pipes, which again pull from the idea of a pipeline</p>",
        "id": 410332026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.3C.7C.20vs.20.24/near/410331593\">said</a>:</p>\n<blockquote>\n<p>I see <code>&lt;|</code> as a little cliff that raises the height of nesting. I think it's supposed to be arrow-like, pointing toward the function it's feeding</p>\n</blockquote>\n<p>This is how I view it, pointing toward the function it's feeding, which makes more sense than <code>$</code>.  <code>&lt;|</code> is harder to type for sure so I understand that.  Is there a way in VSCode to set notation so that you don't have to use <code>local notation</code> for each lean file and VSCode would treat the ascii of <code>$</code> as <code>&lt;|</code>?  No idea if this is possible or not but if so you could have a <code>sed</code> script that then was used before pushing PRs to replace all the <code>$</code> by <code>&lt;|</code>.  I personally wouldn't use this but might be a workaround for those that love the <code>$</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 410332088,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703790747
    },
    {
        "content": "<p>you can just use <code>$</code> in vscode, it's already legal notation</p>",
        "id": 410332122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790789
    },
    {
        "content": "<p>As for autofix, I would love that but it seems like something to bundle together with other formatting tooling</p>",
        "id": 410332156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703790826
    },
    {
        "content": "<p>Yes, agreed.  Do we do any auto-formatting now?  Something like <code>python-black</code> for mathlib to handle the autofixing and code conventions would be nice so you didn't have to run the linters locally and it was just part of the design cycle.</p>",
        "id": 410333191,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703791547
    },
    {
        "content": "<p>But there are probably \"larger fish to fry\"....</p>",
        "id": 410333336,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703791628
    },
    {
        "content": "<p>I will agree with Yael that sometimes the backwards pipeline sometimes looks weird when applying dot notation, although it's very context dependent.</p>",
        "id": 410337263,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703794283
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a> but I won't insist on merging it.</p>",
        "id": 410337563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703794502
    },
    {
        "content": "<p>like lack of spaces before <code>\\l</code>, I think regardless of opinions it's best to merge this ASAP to stop rotting and bikeshed later, fixing this with tools when we have that possibility</p>",
        "id": 410338778,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703795253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.3C.7C.20vs.20.24/near/410328248\">said</a>:</p>\n<blockquote>\n<p>Also using a programmer font will probably conflict with the fact that we want a lot of unicode available</p>\n</blockquote>\n<p>I'm not sure this is true, someone here did a very nice comparison of the many fonts available (personally I'm very happy with julia mono for ligatures and unicode support)</p>",
        "id": 410364557,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703810171
    },
    {
        "content": "<p>Though it's slightly confusing having the <code>&lt;|</code> ligature when working with code that also does whiskering with <code>◁</code>. Julia Mono can be used with them disabled, thankfully.</p>",
        "id": 410450705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703867955
    },
    {
        "content": "<p>I've never really confused the two, and I've been using the julia mono ever since Alex told me about it last summer.</p>",
        "id": 410455059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703870297
    },
    {
        "content": "<p>So, what's the plan about <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a>?</p>",
        "id": 410569995,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703967165
    },
    {
        "content": "<p>I merged <code>master</code>. IMHO, we should either merge it soon or reject it soon.</p>",
        "id": 410570018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703967207
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9361\">#9361</a> should be the non-controversal part of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a></p>",
        "id": 410570729,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703967865
    },
    {
        "content": "<p>If you want to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a> and have <code>&lt;|</code> everywhere, then vote with <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nIf you want to keep <code>$</code> around, vote with <span aria-label=\"thumbs down\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"thumbs down\">:thumbs_down:</span></p>",
        "id": 410570799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703967953
    },
    {
        "content": "<p>do we have any means to prevent backsliding or is this just something we are going to do periodically?</p>",
        "id": 410570894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968036
    },
    {
        "content": "<p>Disable the <code>$</code> notation?</p>",
        "id": 410570911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703968059
    },
    {
        "content": "<p>I suppose we could... we add a <code>macro_rules</code> for the <code>f $ x</code> notation which prints a warning</p>",
        "id": 410570970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968092
    },
    {
        "content": "<p>Cant this be part of a linter?</p>",
        "id": 410570991,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703968125
    },
    {
        "content": "<p>(with a linter option to disable it for downstream users that disagree with the policy)</p>",
        "id": 410570995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968128
    },
    {
        "content": "<p>oh, you mean just a post hoc linter that looks at the syntax ... sure</p>",
        "id": 410571014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968158
    },
    {
        "content": "<p>Note: I have no opinion about <code>$</code> vs <code>&lt;|</code> but I (a) don't want to merge <code>master</code> in this PR again; (b) prefer to have consistent style in the library.</p>",
        "id": 410571016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703968162
    },
    {
        "content": "<p>I really want a way to ship linters that are not part of the mathlib distribution and are only used when working on mathlib or in CI</p>",
        "id": 410571104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968223
    },
    {
        "content": "<p>Can we use a builtin linter here?</p>",
        "id": 410571136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703968274
    },
    {
        "content": "<p>that is what I mean</p>",
        "id": 410571147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968284
    },
    {
        "content": "<p>this linter should use the lean linter framework</p>",
        "id": 410571209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968324
    },
    {
        "content": "<p>we really need a better name for the two kinds of linter</p>",
        "id": 410571218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968335
    },
    {
        "content": "<p>this is a syntax linter not an expr linter</p>",
        "id": 410571227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968355
    },
    {
        "content": "<p>We have expr linters?</p>",
        "id": 410571255,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703968394
    },
    {
        "content": "<p><code>#lint</code></p>",
        "id": 410571261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968399
    },
    {
        "content": "<p>there are two linter frameworks in lean 4, one in core and one from mathlib and now in std</p>",
        "id": 410571286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968442
    },
    {
        "content": "<p>and neither one really subsumes the other</p>",
        "id": 410571332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703968454
    },
    {
        "content": "<p>Both <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/9361\">#9361</a> pass CI now. If we're still thinking about <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a>, can we merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/9361\">#9361</a>, please, to reduce the number of lines that can rot?</p>",
        "id": 410574844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703972372
    },
    {
        "content": "<p>I merged <code>master</code> again. Once <a href=\"https://github.com/leanprover-community/mathlib4/pull/9319\">#9319</a> rots again, I'll mark it as <code>please-adopt</code>.</p>",
        "id": 411615526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704647329
    },
    {
        "content": "<p>Even though we have no way yet (i.e. a linter) to prevent backsliding, this at least puts Mathlib in line with the style guide.</p>",
        "id": 411626766,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704656107
    }
]