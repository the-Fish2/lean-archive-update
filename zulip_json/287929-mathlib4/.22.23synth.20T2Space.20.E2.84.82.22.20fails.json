[
    {
        "content": "<p>I just bumped Mathlib in a project, and see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n<span class=\"c1\">-- failed to synthesize</span>\n<span class=\"c1\">--   T2Space ℂ</span>\n<span class=\"c1\">-- (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached</span>\n<span class=\"c1\">-- (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>It does work on the Lean webserver, though.</p>\n<p>(My Mathlib is at <a href=\"https://github.com/leanprover-community/mathlib4/commit/2111d69aa1b05303c5c73b53d210061c7774f77a\">2111d69aa1b05303c5c73b53d210061c7774f77a</a> according to the lake manifest.)</p>",
        "id": 425076696,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709728898
    },
    {
        "content": "<p>Try to trace the instance synthesis and unification. Work up the projections until you get to a succeeding <code>#synth</code>. If this is still an issue in a couple days, I’ll have a look</p>",
        "id": 425079591,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709729790
    },
    {
        "content": "<p>Can you remind me of the necessary <code>set_option</code> commands?</p>",
        "id": 425079702,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709729826
    },
    {
        "content": "<p>Oh and turn on the <code>profiler</code> for your traces</p>",
        "id": 425079715,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709729831
    },
    {
        "content": "<p>On mobile, auto complete helps a good deal here. Start with <code>trace.Meta…</code></p>",
        "id": 425079895,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709729893
    },
    {
        "content": "<p>Except for <code>profiler</code></p>",
        "id": 425079940,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709729913
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>just gave me <code>Lean server printed an error: 3 53 103 153 203 253 303 353 403 453 503 553 603 653 703 753</code>.</p>",
        "id": 425080496,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730082
    },
    {
        "content": "<p>Restarting the server and clicking on the first triangle had a similar effect, but the Infoview seems to work...</p>",
        "id": 425080742,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730150
    },
    {
        "content": "<p>That’s one I haven’t seen. Nice arithmetic progression though.</p>",
        "id": 425080761,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709730157
    },
    {
        "content": "<p>It goes on to 2053, then switches to <code>48 98 148 ...</code> and some other progessions (when looking at the full output).</p>",
        "id": 425080901,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730201
    },
    {
        "content": "<p>The trace starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">500580</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">058411</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">438345</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">PriestleySpace.toT2Space</span> <span class=\"n\">to</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">CompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toCoframe</span> <span class=\"n\">to</span> <span class=\"n\">Order.Coframe</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteBooleanAlgebra.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra</span> <span class=\"n\">to</span> <span class=\"n\">CompleteBooleanAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toFrame</span> <span class=\"n\">to</span> <span class=\"n\">Order.Frame</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OmegaCompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CompleteLattice.instOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeInf.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeInf</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeSup.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeSup</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ConditionallyCompleteLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NormedLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toStrictOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemifield.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toStrictOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedCommRing.toOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedSemiring.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedCommSemiring.toOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">OrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">OrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield.toCanonicallyOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"mi\">1932</span> <span class=\"n\">more</span> <span class=\"n\">entries...</span> <span class=\"bp\">▼</span>\n</code></pre></div>",
        "id": 425081115,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730258
    },
    {
        "content": "<p>I think the numbers printed by the server are not because of an error; they seem to be the numbers showing up in th <code>xxx more entries...</code>lines.</p>",
        "id": 425081693,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730433
    },
    {
        "content": "<p>Adding <code>attribute [-instance] PriestleySpace.toT2Space</code> does not seem to change much.</p>",
        "id": 425082502,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730662
    },
    {
        "content": "<p>This is a bit weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">293844</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">067093</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">220478</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">254914</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">047988</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">203229</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">407838</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n      <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">042339</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">293394</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">015198</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">typechecking</span> <span class=\"n\">declaration</span>\n</code></pre></div>",
        "id": 425082941,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730813
    },
    {
        "content": "<p>Expanding the trace of the successful <code>instance</code> declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">407838</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n      <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">042339</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">042025</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">293394</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">222882</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">UpgradedStandardBorel.toPolishSpace</span> <span class=\"n\">to</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">polishSpace_of_complete_second_countable</span> <span class=\"n\">to</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.ofPseudoMetrizableSpaceLindelofSpace</span> <span class=\"n\">to</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">040538</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">UniformSpace.pseudoMetrizableSpace</span> <span class=\"n\">to</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">EMetric.instIsCountablyGeneratedUniformity</span> <span class=\"n\">to</span> <span class=\"n\">Filter.IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"n\">uniformity</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Filter.IsCountablyGenerated</span>\n            <span class=\"o\">(</span><span class=\"n\">uniformity</span>\n              <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Filter.IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"n\">uniformity</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span>\n            <span class=\"n\">ℂ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">of</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">HereditarilyLindelof.to_Lindelof</span> <span class=\"n\">to</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.toHereditarilyLindelof</span> <span class=\"n\">to</span> <span class=\"n\">HereditarilyLindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Countable.LindelofSpace</span> <span class=\"n\">to</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.CountableCategory.countableObj</span> <span class=\"n\">to</span> <span class=\"n\">Countable</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Groupoid.toCategory</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.35424</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CategoryTheory.StrictBicategory.category</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.35422</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Preorder.smallCategory</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">to</span> <span class=\"n\">Preorder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">CompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toCoframe</span> <span class=\"n\">to</span> <span class=\"n\">Order.Coframe</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteBooleanAlgebra.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra</span> <span class=\"n\">to</span> <span class=\"n\">CompleteBooleanAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toFrame</span> <span class=\"n\">to</span> <span class=\"n\">Order.Frame</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OmegaCompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CompleteLattice.instOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeInf.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeInf</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeSup.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeSup</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ConditionallyCompleteLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NormedLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toStrictOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemifield.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"mi\">1931</span> <span class=\"n\">more</span> <span class=\"n\">entries...</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">069578</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">UpgradedStandardBorel.toPolishSpace</span> <span class=\"n\">to</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">polishSpace_of_complete_second_countable</span> <span class=\"n\">to</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.ofPseudoMetrizableSpaceLindelofSpace</span> <span class=\"n\">to</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">UniformSpace.pseudoMetrizableSpace</span> <span class=\"n\">to</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">EMetric.instIsCountablyGeneratedUniformity</span> <span class=\"n\">to</span> <span class=\"n\">Filter.IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"n\">uniformity</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Filter.IsCountablyGenerated</span>\n            <span class=\"o\">(</span><span class=\"n\">uniformity</span>\n              <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Filter.IsCountablyGenerated</span> <span class=\"o\">(</span><span class=\"n\">uniformity</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span>\n            <span class=\"n\">ℂ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">TopologicalSpace.PseudoMetrizableSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">of</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">HereditarilyLindelof.to_Lindelof</span> <span class=\"n\">to</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.toHereditarilyLindelof</span> <span class=\"n\">to</span> <span class=\"n\">HereditarilyLindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Countable.LindelofSpace</span> <span class=\"n\">to</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.CountableCategory.countableObj</span> <span class=\"n\">to</span> <span class=\"n\">Countable</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Groupoid.toCategory</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.49495</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CategoryTheory.StrictBicategory.category</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.49493</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Preorder.smallCategory</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">to</span> <span class=\"n\">Preorder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">CompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toCoframe</span> <span class=\"n\">to</span> <span class=\"n\">Order.Coframe</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteBooleanAlgebra.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra</span> <span class=\"n\">to</span> <span class=\"n\">CompleteBooleanAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toFrame</span> <span class=\"n\">to</span> <span class=\"n\">Order.Frame</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OmegaCompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CompleteLattice.instOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeInf.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeInf</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeSup.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeSup</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ConditionallyCompleteLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NormedLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toStrictOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemifield.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"mi\">2392</span> <span class=\"n\">more</span> <span class=\"n\">entries...</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">015198</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">typechecking</span> <span class=\"n\">declaration</span>\n</code></pre></div>\n<p>it does not look much different...</p>",
        "id": 425083262,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709730917
    },
    {
        "content": "<p>In the web editor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">--set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">--set_option trace.profiler true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"c1\">-- works (and gives `PolishSpace.t2Space ℂ`),</span>\n<span class=\"c1\">-- but fails when one of the lines above is uncommented</span>\n</code></pre></div>",
        "id": 425084102,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709731131
    },
    {
        "content": "<p>With <code>set_option maxHeartbeats 0</code>, it seems to run forever...</p>",
        "id": 425084235,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709731171
    },
    {
        "content": "<p>In a somewhat older Mathlib version (85db972fe9297fa38018f008c527e6d9a5db7643), the trace looks quite similar</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">623299</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">072693</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">545616</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">PriestleySpace.toT2Space</span> <span class=\"n\">to</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">CompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompletelyDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompletelyDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toCoframe</span> <span class=\"n\">to</span> <span class=\"n\">Order.Coframe</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteBooleanAlgebra.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra</span> <span class=\"n\">to</span> <span class=\"n\">CompleteBooleanAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletelyDistribLattice.toCompleteDistribLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.toFrame</span> <span class=\"n\">to</span> <span class=\"n\">Order.Frame</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLinearOrder.toCompleteLattice</span> <span class=\"n\">to</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OmegaCompletePartialOrder.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompletePartialOrder.toOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CompleteLattice.instOmegaCompletePartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">OmegaCompletePartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeInf.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeInf</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteSemilatticeSup.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toCompleteSemilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">CompleteSemilatticeSup</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ConditionallyCompleteLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NormedLinearOrderedField.toLinearOrderedField</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toStrictOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemifield.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedField.toLinearOrderedSemifield</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemifield</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing.toLinearOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommSemiring.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring.toStrictOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toStrictOrderedCommSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toStrictOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedRing.toPartialOrder</span> <span class=\"n\">to</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">OrderedCommRing.toOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing.toOrderedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedCommRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing.toOrderedRing</span> <span class=\"n\">to</span> <span class=\"n\">OrderedRing</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n<span class=\"n\">etc.</span>\n</code></pre></div>\n<p>but it does finish.</p>\n<p>In any case, whatever it is doing, it looks like horrible detours.</p>",
        "id": 425085179,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709731446
    },
    {
        "content": "<p>Try <code>trace.Meta.isDefEq</code> in addition and <code>profiler</code> (no <code>trace</code>) instead</p>",
        "id": 425098093,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709734916
    },
    {
        "content": "<p>There might be one or two bad unification checks or it might just be there are too many instances available</p>",
        "id": 425098278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709734967
    },
    {
        "content": "<p>Which part of the trace should I look at specifically? It is rather long...</p>",
        "id": 425098380,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709734993
    },
    {
        "content": "<p>Expand the ones that take the most time</p>",
        "id": 425098603,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709735056
    },
    {
        "content": "<p>It looks like there are thousands of steps each taking a couple milliseconds, which adds up to about 2 seconds in the end... The <code>IsDefEq</code>steps are actually fractions of miiliseconds, as far as I can see.</p>",
        "id": 425099057,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709735195
    },
    {
        "content": "<p>Ok. Then the instance graph is probably too big. If you minimize imports does it get better?</p>",
        "id": 425099886,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709735429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">30000</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>does work. So I guess it was close to the limit before a recent change, which somehow added a bit of complexity in TC search and pushed it over the edge.</p>\n<p>But I'm still quite horrified seeing how difficult it seems to be to deduce a simple fact like that the complex numbers are a T2 space...</p>",
        "id": 425099958,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709735453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425099886\">said</a>:</p>\n<blockquote>\n<p>Ok. Then the instance graph is probably too big. If you minimize imports does it get better?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.FiniteDimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 315 heartbeats (!); before it was ~27000</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>",
        "id": 425100314,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709735555
    },
    {
        "content": "<p>It works if you add a few shortcuts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.FiniteDimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">secondCountable_of_proper</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">polishSpace_of_complete_second_countable</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">PolishSpace.t2Space</span> <span class=\"n\">_</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>",
        "id": 425103399,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709736333
    },
    {
        "content": "<p><code>import Mathlib.Analysis.Complex.Basic</code> is actually enough (208 heartbeats without trace/profile).</p>",
        "id": 425103661,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709736392
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=polishSpace_of_complete_second_countable#doc\">docs#polishSpace_of_complete_second_countable</a> causes trouble, because PolishSpace inherits from SecondCountableTopology</p>",
        "id": 425103910,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709736438
    },
    {
        "content": "<p>But even so it is taking detours.</p>",
        "id": 425103953,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709736451
    },
    {
        "content": "<p>And the instance it synthesizes is called <code>instT2SpaceComplexToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingInstNormedFieldComplex</code>.</p>",
        "id": 425104258,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709736532
    },
    {
        "content": "<p>Yeah, well, you can name it :)</p>",
        "id": 425104369,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709736565
    },
    {
        "content": "<p>Please name it.</p>",
        "id": 425105088,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709736762
    },
    {
        "content": "<p>Ah, I realize, I had <code>instance : T2Space ℂ := inferInstance</code>before the <code>#synth</code> call...<br>\nThe one it synthesizes from scratch is <code>TopologicalSpace.t2Space_of_metrizableSpace</code>; no need to go via polish spaces, it seems.</p>",
        "id": 425105121,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709736772
    },
    {
        "content": "<p>Is this wild goose chase occurring because of the lean 4 decision to try instances which were defined later, first?</p>",
        "id": 425241072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709795979
    },
    {
        "content": "<p>We have \"the sensible instances\" and then \"the leaf file instances which are only there because you imported a ton of mathlib and which obviously aren't relevant\" but nowadays the leaf file stuff gets tried first.</p>",
        "id": 425241217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709796053
    },
    {
        "content": "<p>Yeah, I was wondering whether there might be a way of guiding TC synthesis in a more sensible way.<br>\nWould breadth-first search be an option? (But I have to admit that I am basically totally ignorant of how it currently works.)</p>",
        "id": 425273355,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709807650
    },
    {
        "content": "<p>My impression of typeclass inference (as I've said in another thread) is that it's (a) very fast and (b) very stupid, but the fastness beat the stupidness until recently; now mathlib is getting really big the stupidness sometimes wins. The problem is that it's such a fundamental part of Lean that I suspect you'll get absolutely nowhere suggesting changes to the algorithm. I only vaguely  know what a prolog-like search is (which is what it's apparently doing) but I've looked at enough traces to know that sometimes it tries to solve a problem in algebra by saying \"I know -- let's look for an instance of <code>TopologicalRing X</code> despite the fact that no topology is mentioned anywhere in the local context\" and this can be really costly in the worst possible way of doing 200 things each of which fail really quickly but add up to 2 seconds anyway.</p>",
        "id": 425274869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709808136
    },
    {
        "content": "<p>In my example, it's more like 2000 things taking a millisecond each, adding up to 2 seconds...</p>",
        "id": 425275418,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808302
    },
    {
        "content": "<p>I wonder if it is possible to register some \"non-instance\" and make TC aware of them.</p>",
        "id": 425275427,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808305
    },
    {
        "content": "<p>What would a \"non-instance\" be?</p>",
        "id": 425275490,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425275490\">said</a>:</p>\n<blockquote>\n<p>What would a \"non-instance\" be?</p>\n</blockquote>\n<p>Something like a cache of paths that the TC cannot look into.  E.g., if it is trying to synthesize <code>Add</code>, then it won't find it by going through <code>Mul</code>.</p>",
        "id": 425275690,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808383
    },
    {
        "content": "<p>Would it be possible to do statistics on all TC synthesis runs in Mathlib and use that to extract a (close-to) optimal choice of priorities for the various instances?</p>",
        "id": 425275835,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808446
    },
    {
        "content": "<p>My (very vague) understanding of TC is that instances provide edges in a directed graph.  I was wondering if it was also possible to add \"non-edges\".</p>",
        "id": 425275851,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808450
    },
    {
        "content": "<p>You can <em>remove</em> edges via <code>attribute [-instance]</code>. But this is cumbersome.</p>",
        "id": 425275987,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808486
    },
    {
        "content": "<p>Yes, but removing an edge is different than saying \"do not try to even look for this\".</p>",
        "id": 425276038,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808507
    },
    {
        "content": "<p>How can TC synthesis \"try to look for this\" when there is no edge?</p>",
        "id": 425276079,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808530
    },
    {
        "content": "<p>This is where it gets hazy for me: it has some mechanism to look for intermediate steps.  Probably some form of looking at all the instances that the source has and trying them as intermediate steps, recursively.</p>",
        "id": 425276207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808576
    },
    {
        "content": "<p>From the traces it looks to me like it tries all registered instances that can lead to the current goal, in some order, and then recurses depth-first fashion. So it may have to exhaust very large parts of the graph that lead nowhere before hitting on something that is eventually successful. But I may be wrong.</p>",
        "id": 425276575,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808687
    },
    {
        "content": "<p>My vague model is that you are specifying a directed graph by telling TC what some edges are and assuming that you care about the transitive closure.  My question was whether it was possible to by-pass some of the computations of the transitive closure by carefully selecting some pairs of <del>edges</del>vertices and informing TC that there is no directed path between them</p>",
        "id": 425276644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808709
    },
    {
        "content": "<p>Do you mean \"pairs of vertices\"?</p>",
        "id": 425276801,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808747
    },
    {
        "content": "<p>This would be similar to adding an edge that already exist in the form of <code>instance : ... := inferInstance</code>, which is usually an indicator of some speed gain obtained from the instance.</p>",
        "id": 425277011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808818
    },
    {
        "content": "<p>I was wondering of a short-circuit the other way: the human guarantees that there is no path and TC simply believes them.</p>",
        "id": 425277155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425275835\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to do statistics on all TC synthesis runs in Mathlib and use that to extract a (close-to) optimal choice of priorities for the various instances?</p>\n</blockquote>\n<p>Or maybe even: in each TC synthesis problem in Mathlib, find the shortest solution, and use that information to extract optimal priorities.</p>\n<p>I imagine that this is perhaps a huge computation, but it needs to be run only once in a while, and may result in a considerable speed-up.</p>",
        "id": 425277221,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808893
    },
    {
        "content": "<p>I think that it should in theory run always, since you may not know if the path still exists after you have edited some code...</p>",
        "id": 425277324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709808930
    },
    {
        "content": "<p>I'm not suggesting to hard-code the paths, only to tweak the priorities so that the successful path(s) is tried earlier.</p>",
        "id": 425277473,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709808977
    },
    {
        "content": "<p>After seeing others try to tweak priorities, I got the impression that messing with them is very hard to control.</p>",
        "id": 425277576,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709809025
    },
    {
        "content": "<p>Anyway, I do not know if my suggestion has even in theory a chance of working.  I was simply wondering if adding the information of some forbidden edges might be helpful.</p>\n<p>Also, as Kevin said, TC works remarkably well, and these issues have been the very rare exception, until recently.  And I also suspect that the issues that are surfacing now have more to do that mathlib did not grow with lean 4, but was shoved into it from lean 3.</p>",
        "id": 425278290,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709809246
    },
    {
        "content": "<p>The problem with tweaking priorities to solve this sort of problem was explained to me by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> recently (well, he was explaining something more general but I <em>think</em> it applies here, I'm sure Oliver will correct me if I'm wrong, when he gets back from vacation anyway). If there's a problem, then there are lots of ways of solving it. Some ways are robust -- they really make the problem go away. Other ways are not actually good solutions, they perhaps solve the problem at hand but do not deal with the underlying issue, and may even make things worse in the medium term in some sense. Fiddling around with priorities  or adding carefully chosen instance shortcuts so that typeclass inference runs 20% faster on today's mathlib might look very exciting today, but what it actually means is that we're allowing the problem to continue to exist and people who come along in future will just run into the same problems and won't have a clue how to fix them, and then maybe they'll change some other priority which solves their problem and then all of a sudden all topology files will be 10% slower and people will complain.</p>\n<p>The real fix is to make typeclass inference less stupid, but the devs are not going to be changing typeclass inference unless there's a <em>really</em> good reason, and \"our 1.5 million line long codebase is creaking\" might not be a good enough reason.</p>",
        "id": 425279038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709809488
    },
    {
        "content": "<p>But then trying local improvements may have an edge, if there is no hope for a real solution...</p>",
        "id": 425279449,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709809622
    },
    {
        "content": "<p>Yes. You can fix your <code>T2Space \\C</code> problem by finding a file where the instance works, adding it as a shortcut instance, PRing, pointing to this thread, and then seeing how the reviewers react.</p>",
        "id": 425279680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709809705
    },
    {
        "content": "<p>I guess one could at least in principle (knowing enough about the guts of Lean) implement an alternative TC synthesis algorithm (say, using breadth-first search) and make it available via some <code>set_option</code> flag. That way, one could at least try to see if it gives an overall improvement.</p>",
        "id": 425279772,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709809744
    },
    {
        "content": "<p>Or maybe one could try to adjust the priorities dynamically, increasing them on edges that led to a successful path and decreasing them on edges that led to a long unsuccessful detour. (Like synapses in the brain <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )<br>\nThe disadvantage of that would be that it is no longer deterministic. (But in a way, this is already the case, since it can change when some intermediate files are edited.)</p>",
        "id": 425280256,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709809929
    },
    {
        "content": "<p>I am not really clear about the number of people in the world who would be capable of writing that code, and my worry is that you can count them on the fingers of both hands and most of them are employed by the FRO and are working on other things which are regarded (very probably correctly!) as more important by the FRO. I am also very unclear about the magnitude of the task you suggest. In a fantasy world there's just one line of code in core Lean which says \"now go run a prolog-like search using this function\" and all you have to do is to change it to \"now go run something else\". But I bet the real world is a bit different.</p>",
        "id": 425280651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709810094
    },
    {
        "content": "<p>It would be nice to get some comments on what the people at the FRO think.</p>",
        "id": 425280962,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709810208
    },
    {
        "content": "<p>Note that shorcut instances <em>should</em> always exist</p>",
        "id": 425299843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709817147
    },
    {
        "content": "<p>We only want to take the always-applicable paths when dealing with a non-concrete structure</p>",
        "id": 425299952,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709817187
    },
    {
        "content": "<p>So what would this mean in this concrete case? That a shortcut instance <code>T2Space ℂ</code> should be added in <code>Mathlib.Analysis.Complex.Basic</code>? Would this be considered <em>before</em> looking at more general instances introduced later?</p>",
        "id": 425340536,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709827287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425299843\">said</a>:</p>\n<blockquote>\n<p>Note that shorcut instances <em>should</em> always exist</p>\n</blockquote>\n<p>Only shortcut nodes, not shortcut edges</p>",
        "id": 425351110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709830257
    },
    {
        "content": "<p>Yes, sorry if that was unclear</p>",
        "id": 425351566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709830383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425340536\">said</a>:</p>\n<blockquote>\n<p>That a shortcut instance <code>T2Space ℂ</code> should be added in <code>Mathlib.Analysis.Complex.Basic</code>? Would this be considered <em>before</em> looking at more general instances introduced later?</p>\n</blockquote>\n<p>Yes. Yes.</p>",
        "id": 425351881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709830484
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11222\">#11222</a></p>",
        "id": 425353294,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709830902
    },
    {
        "content": "<p>Maybe <code>LE</code> and <code>LT</code> should be unbundled</p>",
        "id": 425360856,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709833308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> wrong thread?</p>",
        "id": 425363412,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709834198
    },
    {
        "content": "<p>Sorry if that was opaque. Rummaging through the <code>Order</code> instance graph should be an opt in experience.</p>",
        "id": 425364495,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709834518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425351881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425340536\">said</a>:</p>\n<blockquote>\n<p>That a shortcut instance <code>T2Space ℂ</code> should be added in <code>Mathlib.Analysis.Complex.Basic</code>? Would this be considered <em>before</em> looking at more general instances introduced later?</p>\n</blockquote>\n<p>Yes. Yes.</p>\n</blockquote>\n<p>Shouldn't one put a higher priority than the default one to make sure that it is tried before other instances introduced later?</p>",
        "id": 425382430,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1709840819
    },
    {
        "content": "<p>No need. Instances that always apply are already declared with lower priority</p>",
        "id": 425386241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709842173
    },
    {
        "content": "<p>Indeed: with current Mathlib,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">instT2Space</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">OrderClosedTopology.to_t2Space</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">T25Space.t2Space</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DiscreteTopology.toT2Space</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">TopologicalSpace.t2Space_of_metrizableSpace</span><span class=\"o\">,</span> <span class=\"n\">PolishSpace.t2Space</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">PriestleySpace.toT2Space</span><span class=\"o\">,</span> <span class=\"n\">Complex.instT2Space</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Complex.instT2Space</span> <span class=\"n\">to</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span> <span class=\"bp\">≟</span> <span class=\"n\">T2Space</span> <span class=\"n\">ℂ</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">Complex.instT2Space</span>\n</code></pre></div>\n<p>(and then it goes on a longer excursion for <code>TopologicalSpace ℂ</code>, which is a prerequisite of <code>T2Space</code>)<br>\nusing 508 heartbeats without the trace.</p>",
        "id": 425390447,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709843811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425364495\">said</a>:</p>\n<blockquote>\n<p>Sorry if that was opaque. Rummaging through the <code>Order</code> instance graph should be an opt in experience.</p>\n</blockquote>\n<p>I mean maybe we can try making the always applicable instances that jump from one hierarchy to another be priority 99 (rather than 100)?</p>",
        "id": 425394231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709845218
    },
    {
        "content": "<p>That seems like a reasonable thing</p>",
        "id": 425395078,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709845554
    },
    {
        "content": "<p>A prerequisite would be to agree on what hierarchies we even have in mathlib</p>",
        "id": 425395670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709845855
    },
    {
        "content": "<p>If Matthew make-it-fast Ballard agrees with my optimisation idea, I am excited!</p>",
        "id": 425395796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709845900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.23synth.20T2Space.20.E2.84.82.22.20fails/near/425386241\">said</a>:</p>\n<blockquote>\n<p>No need. Instances that always apply are already declared with lower priority</p>\n</blockquote>\n<p>This is much less true than it used to be; parent instances still have the default 1000 priority, not the 100 they had in Lean 3</p>",
        "id": 425411483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709852565
    },
    {
        "content": "<p>Good point... Where is that <code>extends</code> instance priority issue at?</p>",
        "id": 425411573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709852611
    },
    {
        "content": "<p>How do people feel about the following pattern ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">OrderedAddCommMonoid.toAddCommMonoid</span>\n<span class=\"n\">scoped</span> <span class=\"o\">[</span><span class=\"n\">Ordered</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">OrderedAddCommMonoid.toAddCommMonoid</span>\n</code></pre></div>",
        "id": 425607995,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709932284
    },
    {
        "content": "<p>are scoped instances really a good idea?</p>",
        "id": 425608116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1709932325
    },
    {
        "content": "<p>I don’t know. Are there known issues? It would effectively give you an toggle to exposing a set of parent projection instances to type class synthesis</p>",
        "id": 425608242,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709932415
    },
    {
        "content": "<p>We have 104 invocations of <code>scoped[Foo] attribute [instance] bar</code> already</p>",
        "id": 425610179,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709933351
    },
    {
        "content": "<p>I guess this means we have to make shortcut instances for all explicit types now</p>",
        "id": 425611755,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709934105
    },
    {
        "content": "<p>Never mind, this seems far too leaky</p>",
        "id": 425690932,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709994323
    },
    {
        "content": "<p>Isn't <code>[-instance]</code> local to a single file anyway?</p>",
        "id": 425813233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710111753
    },
    {
        "content": "<p>Is it? I don’t know and haven’t tested</p>",
        "id": 425813381,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710111891
    },
    {
        "content": "<p>Surely! Otherwise you'll have undefined behaviour</p>",
        "id": 425814403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710112951
    },
    {
        "content": "<p>Yes, it's local only.</p>",
        "id": 425816778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710115309
    }
]