[
    {
        "content": "<p>I wrote a simple linter for warning when a proof \"should\" be structured using <code>·</code>.  You can see some of the effects of the linter in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a>.</p>\n<p>The actual linter PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12339\">#12339</a>.</p>",
        "id": 434773926,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713798179
    },
    {
        "content": "<p>The main question is: do you find that these changes are an improvement?</p>",
        "id": 434773999,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713798197
    },
    {
        "content": "<p>As a disclaimer, there was no explicit bias regarding which proofs to modify: I more of less went from the latest lint warnings and climbed my way up for a while.</p>",
        "id": 434774274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713798256
    },
    {
        "content": "<p>To me, these changes seem a huge net improvement (even if there might be some edge cases).</p>\n<p>I also think that new users will be happy to receive some guidance with structuring their goals, as we've seen that it may lead to confusing situations otherwise.</p>",
        "id": 434775371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713798484
    },
    {
        "content": "<p>I concur. Rocq also has an option that forces strict subgoal handling.</p>\n<p>I think I wish that we had syntax that  clearly distinguishes the side conditions created by <code>rw</code> from the continuation of the proof (if any), asserts the number of side conditions created, allows me to discharge them first, and continue with the main goal afterwards. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lem1</span><span class=\"o\">,</span> <span class=\"n\">lem2</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n    <span class=\"bp\">.</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">side</span> <span class=\"n\">condition</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">.</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">side</span> <span class=\"n\">condition</span> <span class=\"mi\">2</span>\n  <span class=\"n\">next</span> <span class=\"n\">step</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"n\">proofs</span>\n</code></pre></div>\n<p>where after <code>using</code> I see <em>only</em> side condition (great for <code>all_goals</code>).</p>",
        "id": 434777231,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713798910
    },
    {
        "content": "<p>Joachim, it might be easy to implement a tactic like <code>after tac using ...</code> which delays the \"main\" goal on which <code>tac</code> is acting until all \"side-goals\" are solved after <code>using</code>.  Note that <code>tac</code> could be a tactic sequence, not just <code>rw</code>.</p>",
        "id": 434780290,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713799641
    },
    {
        "content": "<p>Which might allow for things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lem1</span><span class=\"o\">,</span> <span class=\"n\">lem2</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">all_goals</span> <span class=\"n\">positivity</span>\n<span class=\"n\">next</span> <span class=\"n\">step</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"n\">proofs</span>\n</code></pre></div>",
        "id": 434786471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713801212
    },
    {
        "content": "<p><code>· apply lt_of_lt_of_le _ h.b_add_w_le_one; (· exact i); (· exact 0)</code> looks ugly to me. This is probably an edge case that can be fixed?</p>",
        "id": 434795281,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713803544
    },
    {
        "content": "<p>I agree with Joachim. In the meantime, can you avoid linting against <code>·</code> focusing on the last goal?</p>",
        "id": 434800898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713805231
    },
    {
        "content": "<p>Those changes look like noise to me. The other ones look good.</p>",
        "id": 434801749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713805453
    },
    {
        "content": "<p>The linter actually does not complain on the last goal: I added those changes, since I felt that the proof was more \"structured\".</p>",
        "id": 434802163,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713805586
    },
    {
        "content": "<p>Technically, the linter complains when the tactic produces a goal that did not exist before, for some notion of \"existed before\".  When there is a single goal, the linter (usually) says nothing.</p>",
        "id": 434802409,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713805654
    },
    {
        "content": "<p>For the side-conversation sparked by Joachim, you can find a quick implementation <a href=\"#narrow/stream/287929-mathlib4/topic/.60on_sides.60.20tactic\">here</a>.</p>",
        "id": 434803642,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713806005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434795281\">said</a>:</p>\n<blockquote>\n<p><code>· apply lt_of_lt_of_le _ h.b_add_w_le_one; (· exact i); (· exact 0)</code> looks ugly to me. This is probably an edge case that can be fixed?</p>\n</blockquote>\n<p>Honestly, I find that the culprit of the ugliness is trying to fit multiple tactics in a single line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">h.b_add_w_le_one</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>looks perfectly good to me!</p>",
        "id": 434803892,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713806075
    },
    {
        "content": "<p>I simply tried to limit the changes to maintain, as much as possible, the original syntax/structure.</p>",
        "id": 434804029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713806121
    },
    {
        "content": "<p>Yaël, I will revert the formatting of the last goal, since those changes are, in fact, not enforced by the linter.  A discussion on whether they should or should not be enforced can happen later.</p>",
        "id": 434804699,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713806308
    },
    {
        "content": "<p>Yaël, are you against <em>all</em> focusing of the last goal, or something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">xx</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n<span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>would be acceptable?</p>",
        "id": 434807577,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713807209
    },
    {
        "content": "<p>Love the structuring! :D I agree that using <code>…; (. tac); …</code> looks worse, though. (I’d actually even go so far as to say we could lint against <code>.</code> in that situation! Not as part of this linter, but just in general. I.e. <code>.</code> should preferably always be line-initial, imo.)</p>",
        "id": 434808016,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713807353
    },
    {
        "content": "<p>No, I think that's an acceptable focusing of the last goal</p>",
        "id": 434808656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713807561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434803892\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434795281\">said</a>:</p>\n<blockquote>\n<p><code>· apply lt_of_lt_of_le _ h.b_add_w_le_one; (· exact i); (· exact 0)</code> looks ugly to me. This is probably an edge case that can be fixed?</p>\n</blockquote>\n<p>Honestly, I find that the culprit of the ugliness is trying to fit multiple tactics in a single line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">h.b_add_w_le_one</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>looks perfectly good to me!</p>\n</blockquote>\n<p>Or even better: <code>apply lt_of_lt_of_le _ &lt;| h.b_add_w_le_one (i := i) (j := 0)</code>. (Maybe this could be linted for?)<br>\nBut I don't disagree that using multiple lines is often the better choice.</p>",
        "id": 434808716,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713807580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linting.20against.20.22multi-goal.20proofs.22/near/434808016\">said</a>:</p>\n<blockquote>\n<p>Love the structuring! :D I agree that using <code>…; (. tac); …</code> looks worse, though. (I’d actually even go so far as to say we could lint against <code>.</code> in that situation! Not as part of this linter, but just in general. I.e. <code>.</code> should preferably always be line-initial, imo.)</p>\n</blockquote>\n<p>You can also use <code>{ tac }</code> for this. But the style I've been using for these trailing side goals lately is <code>main &lt;;&gt; [rfl; skip]</code>, which works well with the multi-goal linter since even though this doesn't necessarily enforce that the side goal is closed, the multi-goal linter will as long as the next line is not a focus dot</p>",
        "id": 434853798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713822744
    },
    {
        "content": "<p>But in general I think that in this case there are enough bad options that it is a reason for someone to want to override the linter and write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>anyway, and I'm inclined to make the linter allow this specific pattern (where the offending call <code>rfl</code> is not line-initial)</p>",
        "id": 434854363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713822974
    },
    {
        "content": "<p>I guess that I could make the linter only flag whatever if flags, if it happens as the first tactic on a line.</p>",
        "id": 434855174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713823311
    },
    {
        "content": "<p>Still, I am usually more in favour of adding lines, than compacting proofs.</p>",
        "id": 434855237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713823325
    },
    {
        "content": "<p>I reverted/modified the more controversial changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a> and added a few more files.</p>",
        "id": 434882569,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713836752
    },
    {
        "content": "<p>The PR contains a little more than what would be needed to please the linter: there should be about 130 files on which the linter would fail and the PR touches just under 200.</p>",
        "id": 434882689,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713836816
    },
    {
        "content": "<p>Is the general consensus that this is going to be merged?  Should I finish the adjustments?  Would it be better to do them in separate PRs?</p>",
        "id": 434882839,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713836890
    },
    {
        "content": "<p>I like this!</p>",
        "id": 434883049,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713837023
    },
    {
        "content": "<p>If I may say so myself, I am also very happy about the suggestions from the linter!</p>",
        "id": 434883333,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713837205
    },
    {
        "content": "<p>Tomorrow I'll continue with the changes then!</p>",
        "id": 434883460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713837269
    },
    {
        "content": "<p>What are peoples thoughts on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.two_mul</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">n</span>\n<span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.two_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm generally against golfing, but I don't mind the former.</p>",
        "id": 434883639,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713837379
    },
    {
        "content": "<p>it isn't against the linter at least</p>",
        "id": 434883725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713837442
    },
    {
        "content": "<p>I think either of these are acceptable. I would write always the later, mostly out of desire to prefer using the \"basic\" way to say something, when there are multiple syntaxes for the same thing. (And to demonstrate my faith that the enter key is durable. :-)</p>",
        "id": 434885057,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713838159
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a> is quite big as a PR and has already received some attention, so I think that it is best to leave it as is and put the new changes in a separate PR (that might eventually be merged into <a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a>).</p>",
        "id": 434929486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713860314
    },
    {
        "content": "<p>The separate PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12361\">#12361</a>: it is entirely analogous to <a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a>, it simply touches different files.</p>",
        "id": 434929593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713860357
    },
    {
        "content": "<p>Here is a summary:</p>\n<ul>\n<li>the \"multiple goals linter\" <a href=\"https://github.com/leanprover-community/mathlib4/pull/12339\">#12339</a>;</li>\n<li>the first batch of adaptations <a href=\"https://github.com/leanprover-community/mathlib4/pull/12338\">#12338</a>;</li>\n<li>the second batch of adaptations <a href=\"https://github.com/leanprover-community/mathlib4/pull/12361\">#12361</a>;</li>\n<li>a draft PR combining the three above, just to keep track of the progress of the linter <a href=\"https://github.com/leanprover-community/mathlib4/pull/12352\">#12352</a>.</li>\n</ul>",
        "id": 434929918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713860457
    },
    {
        "content": "<p>Thanks for the community reviews on the 1st and 2nd batch! I have <code>bors d+</code>d them, so hopefully they will land in master somewhere today.</p>\n<p>There are two more batches that <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> prepared:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12372\">#12372</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12381\">#12381</a></li>\n</ul>\n<p>Reviews very welcome and appreciated!</p>",
        "id": 436190743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714451631
    },
    {
        "content": "<p>Those PRs have been merged: thank you all very much for your reviews!</p>\n<p>I split off the final remaining PR into two:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12381\">#12381</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12560\">#12560</a></li>\n</ul>\n<p>These are the last remaining adaptations adding <code>cdot</code>s.  I imagine that once they are all in, running the linter once more will highlight a few more instances, but there should few of those final touches.</p>",
        "id": 436343510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714506761
    },
    {
        "content": "<p>A further update: the adaptations that were opened at the time of the PR have made it into mathlib: thank you for the reviews!</p>\n<p>I expect that there might be some extra stray focusing missing, even though I have tried to keep up with mathlib.</p>\n<p>In the meantime, I place the linter close to the bottom of the import hierarchy and am building mathlib against it, to see what more it catches.</p>",
        "id": 438544376,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715681848
    },
    {
        "content": "<p>If anyone feels like reviewing the linter, the PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12339\">#12339</a>.</p>",
        "id": 438544414,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715681864
    },
    {
        "content": "<p>As far as I can tell, all the suggestions of the linter were either \"just correct\" (most of the times), or flagged some slight weirdness with a proof (most of the rest of the times).  I think that I was never unhappy with its suggestions.</p>",
        "id": 438544808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715682014
    },
    {
        "content": "<p>There may be some extra discussion about how to deal with a workflow like \"deal with the main goal now, leave all side-goals for later\".  However, this would probably also require some further tactic support and seems out of scope for the linter right now.</p>",
        "id": 438544813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715682015
    }
]