[
    {
        "content": "<p>In my own recent PRs and also when reviewing, I started looking at how fast the code builds. I noticed a few potential bottlenecks like</p>\n<ul>\n<li>slow typeclass inference</li>\n<li>slow invocations of <code>convert</code>(see <a href=\"#narrow/stream/287929-mathlib4/topic/convert.20is.20often.20slow/near/433830798\">here</a>)</li>\n</ul>\n<p>To get a clearer picture and to see what can be done to speed things up, I ran the following experiments.</p>\n<ol>\n<li>I added <code>(`profiler, true)</code> to the <code>leanOptions</code> in Mathlib's <code>lakefile.lean</code>, did <code>lake exe cache clean</code> and then <code>lake build Mathlib</code>, saving the output to a file. This produces a long list of timings (summary timings for various components per file and individual timings for, e.g., typeclass inference if it took at least 100ms on my machine), which I then looked at to extract some information where potential gains could be had.</li>\n<li>I picked one of the top ten slow Mathlib files (<code>NumberTheory.RamificationInertia</code>; chosen because it is in <code>NumberTheory</code>, so I figured I could more easily fix stuff if necessary) and tried to speed it up.</li>\n</ol>\n<p>The result of 2. can be seen at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12412\">#12412</a>: by a combination of</p>\n<ul>\n<li>adding local instances</li>\n<li>squeezing simps</li>\n<li>filling in <code>_</code>s</li>\n<li>replacing slow tactics by faster ones</li>\n</ul>\n<p>I was able to get a speed-up by a factor of 3.</p>\n<p>What I did was to add <code>set_option profiler true</code> at the beginning of the file; then I tried to edit things to make most lines in its output saying that something took 100ms or more disappear. If it was a slow typeclass search, I added <code>set_option trace.Meta.synthInstance true in</code> before the relevant declaration to find out which exact instance it was looking for, then added a shortcut instance for that (with the term that <code>#synth</code> found for me).</p>\n<p>The take-away is that by investing some work, slow files can be made quite a bit faster, but this is not an efficient process that can be used on a larger scale (say, to speed up the slowest 200 files by 50% or so).</p>",
        "id": 435440278,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714067778
    },
    {
        "content": "<p>When I looked at the output of 1., I noticed lots of lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.247._lambda_3</span> <span class=\"n\">took</span> <span class=\"mi\">670</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>(with varying timings that had an increasing trend while the build was going on). I figured that this likely comes from the <code>#align_import</code> lines at the beginning of most files. So I wanted to find out what the performance cost of all the <code>#align</code>s, <code>#noalign</code>s and <code>#align_import</code>s actually is. So I made a branch where I replaced the elaborators (if that's the right term) for these commands by no-ops and benchmarked the result. This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12410\">#12410</a>. The result is that we get an overall speed-up of about 3.7%.</p>",
        "id": 435440907,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714068021
    },
    {
        "content": "<p>Great! I really appreciate the effort and time do this. </p>\n<p>I do think a world where we have to restate the instances in each file is one where the typeclass system is fundamentally broken.</p>",
        "id": 435441519,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714068196
    },
    {
        "content": "<p>Today, I did some first data mining on the output of 1. I will give some of the results in the following posts.<br>\nThe absolute times are (I think) by a factor of maybe 4 or so slower than on the fast machines CI runs on.</p>\n<p>I'm first looking at the distribution of build times per file and of the proportions of total time for the various separate tasks the profiler reports.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>number of files taking between 1/2 and 1 seconds: 23\nnumber of files taking between 1 and 2 seconds: 237\nnumber of files taking between 2 and 4 seconds: 649\nnumber of files taking between 4 and 8 seconds: 888\nnumber of files taking between 8 and 16 seconds: 838\nnumber of files taking between 16 and 32 seconds: 601\nnumber of files taking between 32 and 64 seconds: 388\nnumber of files taking between 64 and 128 seconds: 144\nnumber of files taking between 128 and 256 seconds: 33\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>total time for typeclass inference: 24348.2 seconds  (36.55%)\ntotal time for simp: 10286.9 seconds  (15.44%)\ntotal time for interpretation: 7201.30 seconds  (10.81%)\ntotal time for elaboration: 5818.16 seconds  (8.734%)\ntotal time for tactic execution: 5509.02 seconds  (8.271%)\ntotal time for import: 4732.64 seconds  (7.105%)\ntotal time for type checking: 3119.07 seconds  (4.683%)\ntotal time for compilation: 2721.79 seconds  (4.086%)\ntotal time for aesop: 682.934 seconds  (1.025%)\ntotal time for linting: 624.481 seconds  (0.9375%)\ntotal time for dsimp: 468.961 seconds  (0.7040%)\ntotal time for .olean serialization: 385.102 seconds  (0.5781%)\ntotal time for initialization: 321.888 seconds  (0.4832%)\ntotal time for parsing: 181.773 seconds  (0.2729%)\ntotal time for attribute application: 83.3917 seconds  (0.1252%)\ntotal time for ring: 62.1803 seconds  (0.09335%)\ntotal time for norm_num: 42.9837 seconds  (0.06453%)\ntotal time for C code generation: 18.5345 seconds  (0.02783%)\n</code></pre></div>",
        "id": 435441796,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714068315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435440907\">said</a>:</p>\n<blockquote>\n<p>When I looked at the output of 1., I noticed lots of lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.247._lambda_3</span> <span class=\"n\">took</span> <span class=\"mi\">670</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>(with varying timings that had an increasing trend while the build was going on). I figured that this likely comes from the <code>#align_import</code> lines at the beginning of most files. So I wanted to find out what the performance cost of all the <code>#align</code>s, <code>#noalign</code>s and <code>#align_import</code>s actually is. So I made a branch where I replaced the elaborators (if that's the right term) for these commands by no-ops and benchmarked the result. This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/12410\">#12410</a>. The result is that we get an overall speed-up of about 3.7%.</p>\n</blockquote>\n<p>This is most likely the cost of initializing the <code>#align</code> mapping, used to report duplicate alignment errors</p>",
        "id": 435441894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714068361
    },
    {
        "content": "<p>it's lazily initialized so it gets triggered the first time you use one of the <code>#align</code> commands</p>",
        "id": 435442025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714068403
    },
    {
        "content": "<p>So typeclass inference takes more than a third of the total time (and <code>simp</code> is next with between 1/7 and 1/6).</p>\n<p>Therefore I was looking next at slow typeclass searches. I list the top twenty or so instance types, first according to the total time recorded for all searches that took at least 100ms.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>total time for typeclass inference of Subsingleton (&gt; 0.1s): 813.943s\ntotal time for typeclass inference of Nonempty (&gt; 0.1s): 329.758s\ntotal time for typeclass inference of Module (&gt; 0.1s): 291.393s\ntotal time for typeclass inference of SMul (&gt; 0.1s): 234.497s\ntotal time for typeclass inference of ContinuousConstSMul (&gt; 0.1s): 232.057s\ntotal time for typeclass inference of HSMul (&gt; 0.1s): 196.080s\ntotal time for typeclass inference of ZeroHomClass (&gt; 0.1s): 175.237s\ntotal time for typeclass inference of CoeT (&gt; 0.1s): 169.718s\ntotal time for typeclass inference of OneHomClass (&gt; 0.1s): 150.614s\ntotal time for typeclass inference of Algebra (&gt; 0.1s): 149.607s\ntotal time for typeclass inference of CoeFun (&gt; 0.1s): 132.219s\ntotal time for typeclass inference of MulHomClass (&gt; 0.1s): 131.083s\ntotal time for typeclass inference of AddHomClass (&gt; 0.1s): 125.526s\ntotal time for typeclass inference of MulAction (&gt; 0.1s): 123.861s\ntotal time for typeclass inference of AddMonoidHomClass (&gt; 0.1s): 112.021s\ntotal time for typeclass inference of AddCommMonoid (&gt; 0.1s): 84.6660s\ntotal time for typeclass inference of Fintype (&gt; 0.1s): 70.7670s\ntotal time for typeclass inference of CategoryTheory.Limits.HasColimit (&gt; 0.1s): 68.7030s\ntotal time for typeclass inference of CovariantClass (&gt; 0.1s): 53.6410s\ntotal time for typeclass inference of IsScalarTower (&gt; 0.1s): 48.9460s\n</code></pre></div>\n<p>As a percentage of the total time for all <em>slow</em>  instance searches:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>proportion for typeclass inference of Subsingleton (&gt; 0.1s): 15.6282%\nproportion for typeclass inference of Nonempty (&gt; 0.1s): 6.33154%\nproportion for typeclass inference of Module (&gt; 0.1s): 5.59491%\nproportion for typeclass inference of SMul (&gt; 0.1s): 4.50247%\nproportion for typeclass inference of ContinuousConstSMul (&gt; 0.1s): 4.45563%\nproportion for typeclass inference of HSMul (&gt; 0.1s): 3.76485%\nproportion for typeclass inference of ZeroHomClass (&gt; 0.1s): 3.36465%\nproportion for typeclass inference of CoeT (&gt; 0.1s): 3.25868%\nproportion for typeclass inference of OneHomClass (&gt; 0.1s): 2.89187%\nproportion for typeclass inference of Algebra (&gt; 0.1s): 2.87254%\nproportion for typeclass inference of CoeFun (&gt; 0.1s): 2.53868%\nproportion for typeclass inference of MulHomClass (&gt; 0.1s): 2.51687%\nproportion for typeclass inference of AddHomClass (&gt; 0.1s): 2.41017%\nproportion for typeclass inference of MulAction (&gt; 0.1s): 2.37820%\nproportion for typeclass inference of AddMonoidHomClass (&gt; 0.1s): 2.15087%\nproportion for typeclass inference of AddCommMonoid (&gt; 0.1s): 1.62564%\nproportion for typeclass inference of Fintype (&gt; 0.1s): 1.35877%\nproportion for typeclass inference of CategoryTheory.Limits.HasColimit (&gt; 0.1s): 1.31914%\nproportion for typeclass inference of CovariantClass (&gt; 0.1s): 1.02994%\nproportion for typeclass inference of IsScalarTower (&gt; 0.1s): 0.939791%\n</code></pre></div>",
        "id": 435442407,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714068568
    },
    {
        "content": "<p>And here sorted according to the <em>number</em> of slow instance searches:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>total number of typeclass inferences of Subsingleton (&gt; 0.1s): 3487\ntotal number of typeclass inferences of ContinuousConstSMul (&gt; 0.1s): 1919\ntotal number of typeclass inferences of Nonempty (&gt; 0.1s): 1807\ntotal number of typeclass inferences of Module (&gt; 0.1s): 1416\ntotal number of typeclass inferences of SMul (&gt; 0.1s): 1397\ntotal number of typeclass inferences of HSMul (&gt; 0.1s): 1113\ntotal number of typeclass inferences of Algebra (&gt; 0.1s): 875\ntotal number of typeclass inferences of CoeT (&gt; 0.1s): 702\ntotal number of typeclass inferences of ZeroHomClass (&gt; 0.1s): 574\ntotal number of typeclass inferences of CoeFun (&gt; 0.1s): 570\ntotal number of typeclass inferences of MulHomClass (&gt; 0.1s): 527\ntotal number of typeclass inferences of OneHomClass (&gt; 0.1s): 471\ntotal number of typeclass inferences of MulAction (&gt; 0.1s): 464\ntotal number of typeclass inferences of AddMonoidHomClass (&gt; 0.1s): 452\ntotal number of typeclass inferences of AddHomClass (&gt; 0.1s): 440\ntotal number of typeclass inferences of Fintype (&gt; 0.1s): 315\ntotal number of typeclass inferences of AddCommMonoid (&gt; 0.1s): 313\ntotal number of typeclass inferences of CovariantClass (&gt; 0.1s): 237\ntotal number of typeclass inferences of TopologicalSpace (&gt; 0.1s): 223\ntotal number of typeclass inferences of IsScalarTower (&gt; 0.1s): 203\n</code></pre></div>",
        "id": 435442584,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714068631
    },
    {
        "content": "<p>... and by the time for the slowest search:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>max time for typeclass inferences of DivisionRing: 6.78s\nmax time for typeclass inferences of Decidable: 4.74s\nmax time for typeclass inferences of Module: 4.10s\nmax time for typeclass inferences of NormedAddCommGroup: 4.07s\nmax time for typeclass inferences of TopologicalSpace: 3.93s\nmax time for typeclass inferences of CommSemiring: 3.93s\nmax time for typeclass inferences of QuasiSober: 3.92s\nmax time for typeclass inferences of Algebra: 3.87s\nmax time for typeclass inferences of DecidablePred: 3.87s\nmax time for typeclass inferences of SeminormedAddGroup: 3.84s\nmax time for typeclass inferences of AddCommMonoid: 3.79s\nmax time for typeclass inferences of Inner: 3.78s\nmax time for typeclass inferences of Norm: 3.76s\nmax time for typeclass inferences of Sup: 3.73s\nmax time for typeclass inferences of Semiring: 3.66s\nmax time for typeclass inferences of CommRing: 3.62s\nmax time for typeclass inferences of Subsingleton: 3.61s\nmax time for typeclass inferences of Star: 3.45s\nmax time for typeclass inferences of AddMonoid: 3.41s\nmax time for typeclass inferences of AddHomClass: 2.99s\n</code></pre></div>",
        "id": 435442669,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714068677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> has done some work that will hopefully generate a lot more performance insights in a much more visually rich way on the nightly branch if you are interested.</p>",
        "id": 435442756,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714068719
    },
    {
        "content": "<p>Clearly, <code>Subsingleton</code> dominates the two most relevant measures here. So I looked at this case in more detail:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Typeclass inference of Subsingleton:\nnumber of instances taking between 0.1000 and 0.2000 seconds: 2275\n     total time: 342.89s\nnumber of instances taking between 0.2000 and 0.4000 seconds: 885\n     total time: 230.85s\nnumber of instances taking between 0.4000 and 0.8000 seconds: 255\n     total time: 133.44s\nnumber of instances taking between 0.8000 and 1.600 seconds: 47\n     total time: 53.822s\nnumber of instances taking between 1.600 and 3.200 seconds: 23\n     total time: 46.040s\nnumber of instances taking between 3.200 and 6.400 seconds: 2\n     total time: 6.9000s\n</code></pre></div>\n<p>I am pretty sure that 99% of all <code>Subsingleton</code> instance sarches are triggered by <code>convert</code> (or perhaps <code>congr!</code>); see <a href=\"#narrow/stream/287929-mathlib4/topic/convert.20is.20often.20slow/near/433830798\">the thread</a> mentioned already at the beginning. (This is corroborated by the fact that immediately after a bunch of <code>typeclass inference of Subsingleton took ...</code> lines, there is often a line reporting that <code>convert</code> took more than 100ms.) <em>If</em> we assume that <code>Subsingleton</code> instance searches take also about 15% of the total instance search time (the slow ones on which I have data make up a bit more than 1/5 of the total instance search time), then we end up at an estimate of <strong>5-6%</strong> of the build time of Mathlib that is taken by (unsuccessfully) looking for instances of <code>Subsingleton</code>.</p>\n<p>I think this is very strong motivation for changing <code>congr!</code>/<code>convert</code> so that these searches are avoided.</p>",
        "id": 435443585,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714069075
    },
    {
        "content": "<p>From the list of top slow instances, it appears that algebra is responsible for a large  part:</p>\n<ul>\n<li><code>SMul</code>, <code>ContinuousConstSMul</code> and <code>HSMul</code> together: 12.7%</li>\n<li><code>ZeroHomClass</code>. <code>OneHomClass</code>. <code>MulHomClass</code>, <code>AddHomClass</code>, <code>AddMonoidHomClass</code>together: 13.3%</li>\n<li><code>Module</code>, <code>Algebra</code>, <code>AddCommMonoid</code> and <code>IsScalarTower</code> together: 11.0%</li>\n</ul>\n<p>Then there is</p>\n<ul>\n<li><code>Nonempty</code>(6.3%), where it might be that also some tactics are responsible</li>\n<li><code>CoeT</code> and <code>CoeFun</code>with 5.8%</li>\n</ul>",
        "id": 435444726,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714069562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435441519\">said</a>:</p>\n<blockquote>\n<p>I do think a world where we have to restate the instances in each file is one where the typeclass system is fundamentally broken.</p>\n</blockquote>\n<p>Clearly, Mathlib relies heavily on type classes, so provides a stress-test for the system, which I think it does not really pass. I think (short of curating instances manually for each file separately) something can be gained by</p>\n<ul>\n<li>tweaking priorities (this needs a clear picture of which instances are likely to be useful more often than which others),</li>\n<li>scoping some instances (as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12080\">#12080</a>), so that they can be made available if needed, but don't mess up the search by default (this could be an option for instances that are tailored to fairly specific situations or maybe also for instances that relate, say, the algebraic and order hierarchies).</li>\n</ul>\n<p>But I don't think there is a solution that makes instance search uniformly fast without some targeted tinkering in a fairly large number of files. IIRC, there is even a <a href=\"https://arxiv.org/abs/2306.00617\">paper</a> about this.</p>",
        "id": 435446505,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714070228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435442756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> has done some work that will hopefully generate a lot more performance insights in a much more visually rich way on the nightly branch if you are interested.</p>\n</blockquote>\n<p>Indeed; according to <a href=\"https://profiler.firefox.com/public/d8vedqevhsp763pgpd66afqrz8fabd3zxwp60dr/calltree/?globalTrackOrder=0&amp;invertCallstack&amp;thread=0&amp;timelineType=category&amp;transforms=fg-1&amp;v=10\">https://profiler.firefox.com/public/d8vedqevhsp763pgpd66afqrz8fabd3zxwp60dr/calltree/?globalTrackOrder=0&amp;invertCallstack&amp;thread=0&amp;timelineType=category&amp;transforms=fg-1&amp;v=10</a>, <code>convert</code> is the 8th most expensive elaborator in Mathlib with 3% of the total time. <br>\n<a href=\"/user_uploads/3121/SAAXKQJrKUTdzUcAwJ6YPLm9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SAAXKQJrKUTdzUcAwJ6YPLm9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SAAXKQJrKUTdzUcAwJ6YPLm9/image.png\"></a></div><p>And according to <a href=\"https://profiler.firefox.com/public/d8vedqevhsp763pgpd66afqrz8fabd3zxwp60dr/calltree/?globalTrackOrder=0&amp;thread=0&amp;timelineType=category&amp;transforms=ff-26&amp;v=10\">https://profiler.firefox.com/public/d8vedqevhsp763pgpd66afqrz8fabd3zxwp60dr/calltree/?globalTrackOrder=0&amp;thread=0&amp;timelineType=category&amp;transforms=ff-26&amp;v=10</a>, indeed 49% of that time is spent in an app builder's instance synth, though this does not currently print the specific involved instances. <br>\n<a href=\"/user_uploads/3121/RkVKKx1QgpJQHSsy448tyPPz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RkVKKx1QgpJQHSsy448tyPPz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RkVKKx1QgpJQHSsy448tyPPz/image.png\"></a></div><p>This is from <a href=\"https://github.com/leanprover/lean4/pull/3801#issuecomment-2034662660\">https://github.com/leanprover/lean4/pull/3801#issuecomment-2034662660</a></p>",
        "id": 435454331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714073562
    },
    {
        "content": "<p>Nice! Is there documentation somewhere on how to extract specific information from it?</p>",
        "id": 435456169,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714074360
    },
    {
        "content": "<p>The underlying data is simply the cumulative tree of trace nodes over 10ms, the challenge is how to make sense of that data using the generic transformations Firefox Profiler supports. I'm still learning about that part myself, the above is the first time I realized I could use \"Focus category\" and inverting the stack to find the most expensive elaborators</p>",
        "id": 435458159,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714075096
    },
    {
        "content": "<p>aesop is # 4</p>",
        "id": 435470388,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714080353
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435446505\">said</a>:</p>\n<ul>\n<li>scoping some instances (as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12080\">#12080</a>), so that they can be made available if needed, but don't mess up the search by default (this could be an option for instances that are tailored to fairly specific situations or maybe also for instances that relate, say, the algebraic and order hierarchies).</li>\n</ul>\n</blockquote>\n<p>I think that scoping instances should be triggered by mathematical rather than performances reasons. Otherwise we end up mixing design choices that are somewhat inconsistent and I find that a gaining a factor of 2 or 3 in speed is not worth the loss of design coherence.</p>",
        "id": 435492767,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1714095260
    },
    {
        "content": "<p>Yes, while recognising that this is difficult, it's always better if we can speed these things up in tactic implementations or language implementations rather than filling files with workarounds.</p>",
        "id": 435528119,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714115662
    },
    {
        "content": "<p>Working out how to make the subsingleton search cheaper would be great. If there were some way to prune branches of the type class search...</p>",
        "id": 435528241,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714115724
    },
    {
        "content": "<p>Is a discrimination tree used in typeclass search? I mean, if you're looking for an instance of the form <code>[Subsingleton α]</code> where <code>α</code> is just a generic type then there is nothing to discriminate against, so all instances that always apply have to be searched, but you could eliminate right away all the instances of the form <code>Subsingleton (Foo m n)</code>. And conversely if you're looking for an instance of the form <code>Subsingleton (Bar a b)</code>, then you could also eliminate right away all instances like <code>Subsingleton (Foo m n)</code> if <code>Bar</code> is not <code>Foo</code>, i.e., you could use a discrimination tree one step further. </p>\n<p>(I'm aware that this if very naive, because you would maybe need to reduce <code>Foo</code> or <code>Bar</code> before making this kind of search, and this can be expensive, but I would argue that in this kind of context one shouldn't reduce at all, everything should be purely syntactic).</p>",
        "id": 435545355,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714122166
    },
    {
        "content": "<p>Is the issue here perhaps that TC search in <code>convert</code> ends up looking for <code>Subsingleton ?m</code> where <code>?m</code> is an unresolved metavariable? That would then be forced to do the slow wildcard match rather than the fast special case one.</p>",
        "id": 435545617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714122279
    },
    {
        "content": "<p>Yes, of course a discrimination tree is used. That's why instances rarely need to use <code>no_index</code></p>",
        "id": 435545708,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714122317
    },
    {
        "content": "<p>If your search is <code>Subsingleton ?m</code> then you can stop right away, right?</p>",
        "id": 435545814,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714122361
    },
    {
        "content": "<p>If someone could locate a file that has slow <code>convert</code>s, I can upload a more detailed profile that shows the specific TC queries</p>",
        "id": 435546199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714122509
    },
    {
        "content": "<p><code>Mathlib.NumberTheory.ZetaValues</code> has loads of slow <code>converts</code></p>",
        "id": 435547020,
        "sender_full_name": "David Loeffler",
        "timestamp": 1714122833
    },
    {
        "content": "<p>When trying to find a subsingleton instance on a generic type in a new file importing Mathlib, Lean tries to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP.CharOne.subsingleton#doc\">docs#CharP.CharOne.subsingleton</a> and then goes on a wild goose chase trying to find a ring structure on <code>α</code>. Locally desactivating this instance gives me a x10 speedup on this (failing) instance search.</p>",
        "id": 435547725,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714123083
    },
    {
        "content": "<p>Let me try to desactivate the instance in mathlib to see if anything breaks.</p>",
        "id": 435547839,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714123112
    },
    {
        "content": "<p>The first slow convert in <code>ZetaValues</code> is at line 69, where it spends 400ms trying to prove <code>Subsingleton (ℝ → ℝ)</code>. Switching off Sebastien's <code>CharOne</code> instance speeds this up to about 250ms but that's still slower than one would like.</p>",
        "id": 435548567,
        "sender_full_name": "David Loeffler",
        "timestamp": 1714123355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435470388\">said</a>:</p>\n<blockquote>\n<p>aesop is # 4</p>\n</blockquote>\n<p>Just FYI, Aesop performance is dominated by <code>simp</code>, so this is sort of another 8 percentage points for <code>simp</code>. But I'm looking into how to reduce the amount of work <code>simp</code> has to do in Aesop.</p>",
        "id": 435550211,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714123939
    },
    {
        "content": "<p>Let me mention again the <a href=\"#narrow/stream/287929-mathlib4/topic/convert.20is.20often.20slow/near/433830798\">thread on slowness of <code>convert</code></a> in case someone missed it.</p>\n<p>I think the better solution would be for <code>convert</code> to only look for <code>Subsingleton</code> instances when there is a reasonable chance it will find one (or make this configurable).</p>",
        "id": 435551563,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714124451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435548567\">said</a>:</p>\n<blockquote>\n<p>The first slow convert in <code>ZetaValues</code> is at line 69, where it spends 400ms trying to prove <code>Subsingleton (ℝ → ℝ)</code>. Switching off Sebastien's <code>CharOne</code> instance speeds this up to about 250ms but that's still slower than one would like.</p>\n</blockquote>\n<p>Indeed, here it is in the detailed profile: <a href=\"https://profiler.firefox.com/public/dr7kkc48x0x4ntt2npx1me6hn0hyjggf3hadpmg/calltree/?globalTrackOrder=0&amp;search=convert&amp;thread=0&amp;timelineType=category&amp;v=10\">https://profiler.firefox.com/public/dr7kkc48x0x4ntt2npx1me6hn0hyjggf3hadpmg/calltree/?globalTrackOrder=0&amp;search=convert&amp;thread=0&amp;timelineType=category&amp;v=10</a><br>\n<a href=\"/user_uploads/3121/seIfSlBNqbg7JNqmK3r9vy0l/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/seIfSlBNqbg7JNqmK3r9vy0l/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/seIfSlBNqbg7JNqmK3r9vy0l/image.png\"></a></div><p>Interestingly most of the time is not spent on trying to apply some specific instance so that would require further profiling. That's as far as I'll indulge for now.</p>",
        "id": 435551905,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714124586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435492767\">said</a>:</p>\n<blockquote>\n<p>I think that scoping instances should be triggered by mathematical rather than performances reasons. Otherwise we end up mixing design choices that are somewhat inconsistent and I find that a gaining a factor of 2 or 3 in speed is not worth the loss of design coherence.</p>\n</blockquote>\n<p>I would expect that there is not that much difference between the two. In my understanding, slow typeclass searches are caused by failing to find instances that the system tries to find because there are some \"relative\" instances (i.e., of the kind \"if X is an instance of Y, then it is also an instance of Z\") it follows that a mathematician would immediately see cannot lead to anything.</p>\n<p>Independently, I'm not sure I agree with the last statement: an overall factor of 2 or 3 does make a significant difference that might be worth conisdering as part of a trade-off, for CI runs as well as when editing Lean files.</p>",
        "id": 435552760,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714124901
    },
    {
        "content": "<p>WIth</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>before <code>hasDerivAt_bernoulliFun</code>, I get the output</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>typeclass inference of NontriviallyNormedField took 1.38ms\ntypeclass inference of NormedSpace took 1.54ms\ntypeclass inference of HSub took 1.89ms\ntypeclass inference of HSub took 1.91ms\ntypeclass inference of CoeT took 4.11ms\ntypeclass inference of HMul took 1.36ms\ntypeclass inference of CoeT took 1.93ms\ntypeclass inference of HMul took 1.47ms\ntypeclass inference of NormedSpace took 8.7ms\ntypeclass inference of Algebra took 6.5ms\ntypeclass inference of Subsingleton took 10.4ms\ntypeclass inference of Subsingleton took 7.3ms\ntypeclass inference of Subsingleton took 7.62ms\ntypeclass inference of Subsingleton took 60.8ms\ntypeclass inference of Subsingleton took 5.84ms\ntypeclass inference of Subsingleton took 7.03ms\ntypeclass inference of Subsingleton took 7.14ms\ntypeclass inference of Algebra took 4.96ms\ntypeclass inference of Algebra took 2.79ms\ntypeclass inference of Subsingleton took 166ms\ntypeclass inference of Subsingleton took 9.67ms\ntactic execution of Mathlib.Tactic.convert took 29.7ms\n</code></pre></div>\n<p>(and without setting the threshold to 1 and building from the command line</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>typeclass inference of Subsingleton took 136ms\ncumulative profiling times:\n        attribute application 0.000951ms\n        elaboration 4.64ms\n        linting 3.35ms\n        parsing 0.334ms\n        simp 12.6ms\n        tactic execution 23ms\n        type checking 8.28ms\n        typeclass inference 255ms\n</code></pre></div>\n<p>With <code>set_option trace.Meta.synthInstance true</code> in addition, the <code>convert</code> line produces (expanding the slowest one by one level)</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] [0.012711s] ❌ Subsingleton Prop ▶\n[Meta.synthInstance] [0.007315s] ❌ Subsingleton (NormedAddCommGroup F) ▶\n[Meta.synthInstance] [0.008023s] ❌ Subsingleton (NormedSpace 𝕜 F) ▶\n[Meta.synthInstance] [0.063941s] ❌ Subsingleton (𝕜 → F) ▶\n[Meta.synthInstance] [0.006815s] ❌ Subsingleton F ▶\n[Meta.synthInstance] [0.008203s] ❌ Subsingleton (NormedAddCommGroup ℝ) ▶\n[Meta.synthInstance] [0.007834s] ❌ Subsingleton (NormedSpace ℝ ℝ) ▶\n[Meta.synthInstance] [0.204544s] ❌ Subsingleton (ℝ → ℝ) ▼\n  [] [0.000017s] new goal Subsingleton (ℝ → ℝ) ▶\n  [] [0.000147s] ✅ apply @instSubsingletonForAll to Subsingleton (ℝ → ℝ) ▶\n  [] [0.000058s] ❌ apply instSubsingleton to Subsingleton ℝ ▶\n  [] [0.000101s] ✅ apply @CharP.CharOne.subsingleton to Subsingleton ℝ ▶\n  [] [0.000113s] ✅ apply @Semiring.toNonAssocSemiring to NonAssocSemiring ℝ ▶\n  [] [0.000062s] ✅ apply Real.semiring to Semiring ℝ ▶\n  [resume] [0.000011s] propagating Semiring ℝ to subgoal Semiring ℝ of NonAssocSemiring ℝ ▶\n  [resume] [0.000038s] propagating NonAssocSemiring ℝ to subgoal NonAssocSemiring ℝ of Subsingleton ℝ ▶\n  [] [0.000101s] ✅ apply @IdemSemiring.toSemiring to Semiring ℝ ▶\n  [] [0.000094s] ✅ apply @KleeneAlgebra.toIdemSemiring to IdemSemiring ℝ ▶\n  [] [0.000100s] ✅ apply @IdemCommSemiring.toIdemSemiring to IdemSemiring ℝ ▶\n  [] [0.000091s] ✅ apply @StrictOrderedSemiring.toSemiring to Semiring ℝ ▶\n  [] [0.000062s] ✅ apply Real.strictOrderedSemiring to StrictOrderedSemiring ℝ ▶\n  [resume] [0.000011s] propagating StrictOrderedSemiring ℝ to subgoal StrictOrderedSemiring ℝ of Semiring ℝ ▶\n  [] [0.000093s] ✅ apply @LinearOrderedSemiring.toStrictOrderedSemiring to StrictOrderedSemiring ℝ ▶\n  [] [0.000066s] ✅ apply Real.instLinearOrderedSemiringReal to LinearOrderedSemiring ℝ ▶\n  [resume] [0.000010s] propagating LinearOrderedSemiring ℝ to subgoal LinearOrderedSemiring ℝ of StrictOrderedSemiring ℝ ▶\n  [] [0.000093s] ✅ apply @LinearOrderedCommSemiring.toLinearOrderedSemiring to LinearOrderedSemiring ℝ ▶\n  [] [0.000131s] ✅ apply @LinearOrderedSemifield.toLinearOrderedCommSemiring to LinearOrderedCommSemiring ℝ ▶\n  [] [0.000100s] ✅ apply @CanonicallyLinearOrderedSemifield.toLinearOrderedSemifield to LinearOrderedSemifield ℝ ▶\n  [] [0.000101s] ✅ apply @LinearOrderedField.toLinearOrderedSemifield to LinearOrderedSemifield ℝ ▶\n  [] [0.000056s] ✅ apply Real.instLinearOrderedField to LinearOrderedField ℝ ▶\n  [resume] [0.000010s] propagating LinearOrderedField ℝ to subgoal LinearOrderedField ℝ of LinearOrderedSemifield ℝ ▶\n  [resume] [0.000013s] propagating LinearOrderedSemifield ℝ to subgoal LinearOrderedSemifield ℝ of LinearOrderedCommSemiring ℝ ▶\n  [resume] [0.000009s] propagating LinearOrderedCommSemiring ℝ to subgoal LinearOrderedCommSemiring ℝ of LinearOrderedSemiring ℝ ▶\n  [] [0.000088s] ✅ apply @NormedLinearOrderedField.toLinearOrderedField to LinearOrderedField ℝ ▶\n  [] [0.000075s] ✅ apply Real.normedLinearOrderedField to NormedLinearOrderedField ℝ ▶\n  [resume] [0.000019s] propagating NormedLinearOrderedField ℝ to subgoal NormedLinearOrderedField ℝ of LinearOrderedField ℝ ▶\n  [] [0.000100s] ✅ apply @LinearOrderedCommRing.toLinearOrderedCommSemiring to LinearOrderedCommSemiring ℝ ▶\n  [] [0.000056s] ✅ apply Real.linearOrderedCommRing to LinearOrderedCommRing ℝ ▶\n  [resume] [0.000010s] propagating LinearOrderedCommRing ℝ to subgoal LinearOrderedCommRing ℝ of LinearOrderedCommSemiring ℝ ▶\n  [] [0.000072s] ✅ apply @LinearOrderedField.toLinearOrderedCommRing to LinearOrderedCommRing ℝ ▶\n  [resume] [0.000014s] propagating LinearOrderedField ℝ to subgoal LinearOrderedField ℝ of LinearOrderedCommRing ℝ ▶\n  [] [0.000091s] ✅ apply @LinearOrderedRing.toLinearOrderedSemiring to LinearOrderedSemiring ℝ ▶\n  [] [0.000056s] ✅ apply Real.instLinearOrderedRingReal to LinearOrderedRing ℝ ▶\n  [resume] [0.000019s] propagating LinearOrderedRing ℝ to subgoal LinearOrderedRing ℝ of LinearOrderedSemiring ℝ ▶\n  [] [0.000104s] ✅ apply @LinearOrderedCommRing.toLinearOrderedRing to LinearOrderedRing ℝ ▶\n  [resume] [0.000010s] propagating LinearOrderedCommRing ℝ to subgoal LinearOrderedCommRing ℝ of LinearOrderedRing ℝ ▶\n  [] [0.000109s] ✅ apply @StrictOrderedCommSemiring.toStrictOrderedSemiring to StrictOrderedSemiring ℝ ▶\n  [] [0.000056s] ✅ apply Real.strictOrderedCommSemiring to StrictOrderedCommSemiring ℝ ▶\n  [resume] [0.000010s] propagating StrictOrderedCommSemiring ℝ to subgoal StrictOrderedCommSemiring ℝ of StrictOrderedSemiring ℝ ▶\n  [] [0.000073s] ✅ apply @LinearOrderedCommSemiring.toStrictOrderedCommSemiring to StrictOrderedCommSemiring ℝ ▶\n  [resume] [0.000010s] propagating LinearOrderedCommSemiring\n        ℝ to subgoal LinearOrderedCommSemiring ℝ of StrictOrderedCommSemiring ℝ ▶\n  [] [0.000098s] ✅ apply @StrictOrderedCommRing.toStrictOrderedCommSemiring to StrictOrderedCommSemiring ℝ ▶\n  [] [0.000055s] ✅ apply Real.instStrictOrderedCommRingReal to StrictOrderedCommRing ℝ ▶\n  [resume] [0.000014s] propagating StrictOrderedCommRing ℝ to subgoal StrictOrderedCommRing ℝ of StrictOrderedCommSemiring ℝ ▶\n  [] [0.000071s] ✅ apply @LinearOrderedCommRing.toStrictOrderedCommRing to StrictOrderedCommRing ℝ ▶\n  [resume] [0.000009s] propagating LinearOrderedCommRing ℝ to subgoal LinearOrderedCommRing ℝ of StrictOrderedCommRing ℝ ▶\n  [] [0.000093s] ✅ apply @StrictOrderedRing.toStrictOrderedSemiring to StrictOrderedSemiring ℝ ▶\n  [] [0.000056s] ✅ apply Real.strictOrderedRing to StrictOrderedRing ℝ ▶\n  [] 1229 more entries... ▶\n[Meta.synthInstance] [0.011365s] ❌ Subsingleton ℝ ▶\n[Meta.synthInstance] [0.000009s] ❌ Subsingleton ℝ ▶\n</code></pre></div>",
        "id": 435554053,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714125383
    },
    {
        "content": "<p>Oh, then the &gt;10ms filter in my profile was misleading. \"1229 more entries\" is, of course, not great.</p>",
        "id": 435555049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714125756
    },
    {
        "content": "<p>(BTW, when enabling the instance traces, I still get pop-ups saying \"Lean server printed an error: 3 53\" or similar.)</p>",
        "id": 435555247,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714125829
    },
    {
        "content": "<p>The arithmetic progression error? Yes I still get those too when debugging instance traces. I was just assuming someone would fix it at some point, I thought it was well-known.</p>",
        "id": 435555483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714125918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435552760\">said</a>:</p>\n<blockquote>\n<p>I would expect that there is not that much difference between the two. In my understanding, slow typeclass searches are caused by failing to find instances that the system tries to find because there are some \"relative\" instances (i.e., of the kind \"if X is an instance of Y, then it is also an instance of Z\") it follows that a mathematician would immediately see cannot lead to anything.</p>\n</blockquote>\n<p>In the particular case of <code>Subsingleton α</code>, one could argue that what humans do to see that the search can't succeed is to search for <code>Nontrivial α</code> and we succeed very quickly. I wonder if we could somehow include something like this in typeclass search, i.e. under appropriate conditions (not sure what that would be), try to refute the hypothesis by searching for the \"opposite\" typeclass.</p>",
        "id": 435555509,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1714125928
    },
    {
        "content": "<p>Is there a way to expand one full level of the trace search without cut-off at 50 entries?</p>",
        "id": 435555529,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714125935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435555509\">said</a>:</p>\n<blockquote>\n<p>I wonder if we could somehow include something like this in typeclass search, i.e. under appropriate conditions (not sure what that would be), try to refute the hypothesis by searching for the \"opposite\" typeclass.</p>\n</blockquote>\n<p>There were some discussions on \"non-instances\": <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20prefers.20CharP.2Ecast_eq_zero.20over.20Nat.2Ecast_zero/near/431804254\">here</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/delaborators.20for.20non-instances/near/429713080\">here</a>.</p>",
        "id": 435555837,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714126055
    },
    {
        "content": "<p>I was looking through about half the 1279 or so top-level entries in the trace for <code>❌ Subsingleton (ℝ → ℝ)</code> and my impression is that each of them is quite fast (on the order of tenths of ms), but 1000 fast things are slow when taken together.</p>",
        "id": 435556317,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714126252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435545355\">said</a>:</p>\n<blockquote>\n<p>Is a discrimination tree used in typeclass search? I mean, if you're looking for an instance of the form <code>[Subsingleton α]</code> where <code>α</code> is just a generic type then there is nothing to discriminate against, so all instances that always apply have to be searched, but you could eliminate right away all the instances of the form <code>Subsingleton (Foo m n)</code>. And conversely if you're looking for an instance of the form <code>Subsingleton (Bar a b)</code>, then you could also eliminate right away all instances like <code>Subsingleton (Foo m n)</code> if <code>Bar</code> is not <code>Foo</code>, i.e., you could use a discrimination tree one step further. </p>\n<p>(I'm aware that this if very naive, because you would maybe need to reduce <code>Foo</code> or <code>Bar</code> before making this kind of search, and this can be expensive, but I would argue that in this kind of context one shouldn't reduce at all, everything should be purely syntactic).</p>\n</blockquote>\n<p>I'm guessing that most of the time is spent on <em>failing</em> type-class searches, to see if certain goals don't have to be generated. For a failing type-class search, you unfortunately have to search the whole tree of instances.</p>",
        "id": 435557888,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714126879
    },
    {
        "content": "<p>This sounds like the slow failing <code>SMul \\C \\R</code> and <code>SMul K (\\MCO K)</code> issues -- the latter has a trace with 3500 omitted lines and there was nothing you could point your finger at, it was just a silly question which no mathematician would ever ask but which took a long time to fall. Setting <code>trace.profiler true</code> just gave a bunch of numbers which didn't add up, so I concluded that the issue just must be typeclass inference asking a huge amount of silly questions. It would be amazing to be able to add failing typeclass searches to the instance cache somehow.</p>",
        "id": 435558362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714127048
    },
    {
        "content": "<p>I'm looking at this right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>In the trace I see</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] [0.078250s] ❌ Subsingleton ℝ ▼\n  [] [0.000041s] new goal Subsingleton ℝ ▼\n    [instances] #[@IsEmpty.instSubsingleton, @Unique.instSubsingleton, @CharP.CharOne.subsingleton, instSubsingleton]\n  [] [0.000155s] ❌ apply instSubsingleton to Subsingleton ℝ ▶\n  [] [0.000262s] ✅ apply @CharP.CharOne.subsingleton to Subsingleton ℝ ▶\n  [] [0.000299s] ✅ apply @Semiring.toNonAssocSemiring to NonAssocSemiring ℝ ▶\n  [] [0.000202s] ✅ apply Real.semiring to Semiring ℝ ▶\n  [resume] [0.000023s] propagating Semiring ℝ to subgoal Semiring ℝ of NonAssocSemiring ℝ ▶\n  [resume] [0.000078s] propagating NonAssocSemiring ℝ to subgoal NonAssocSemiring ℝ of Subsingleton ℝ ▼\n    [] size: 2\n    [] [0.000048s] no instances for CharP ℝ 1 ▶\n  [] [0.000246s] ❌ apply @DirectSum.GradeZero.semiring to Semiring ℝ ▶\n  [] [0.000244s] ✅ apply @IdemSemiring.toSemiring to Semiring ℝ ▶\n  [] [0.000269s] ✅ apply @KleeneAlgebra.toIdemSemiring to IdemSemiring ℝ ▶\n  [] [0.000245s] ✅ apply @IdemCommSemiring.toIdemSemiring to IdemSemiring ℝ ▶\n  [] [0.000265s] ✅ apply @DivisionSemiring.toSemiring to Semiring ℝ ▶\n  [] [0.000290s] ✅ apply @Semifield.toDivisionSemiring to DivisionSemiring ℝ ▶\n  [] [0.000302s] ✅ apply @LinearOrderedSemifield.toSemifield to Semifield ℝ ▶\n...\n</code></pre></div>\n<p>Note that <code>✅ apply Real.semiring to Semiring ℝ</code> establishes <code>Semiring ℝ</code> and therefore also <code>NonAssocSemiring ℝ</code>. Also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CharP.CharOne.subsingleton</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>so it now tries to look for an instance for <code>CharP ℝ 1</code> and fails. But then it seems to continue with <code>Semiring</code> related stuff. Why is that? I.e., why does this not cause the consideration of <code>CharP.CharOne.subsingleton</code> to end and proceeding to see if it can apply <code>Unique.instSubsingleton</code> instead?</p>\n<p>Note that the trace continues for a good 400 further entries that appear to visit lagre parts of the algebraic and order hierarchies before ending with the two lines</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  [] [0.000089s] ✅ apply @Unique.instSubsingleton to Subsingleton ℝ ▶\n  [] [0.000082s] ✅ apply @IsEmpty.instSubsingleton to Subsingleton ℝ ▶\n</code></pre></div>\n<p>that I would have expected to immediately follow</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    [] [0.000048s] no instances for CharP ℝ 1 ▶\n</code></pre></div>",
        "id": 435558930,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714127259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435558362\">said</a>:</p>\n<blockquote>\n<p>This sounds like the slow failing <code>SMul \\C \\R</code> and <code>SMul K (\\MCO K)</code> issues</p>\n</blockquote>\n<p><code>SMul</code> and friends seem to cause slow typeclass searches in many places (see the data I posted earlier). </p>\n<p>Maybe this could be a kind of testing ground for seeing what can be gained by changing priorities and/or scoping?</p>",
        "id": 435559387,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714127412
    },
    {
        "content": "<p>I also noticed <code>CharP.CharOne.subsingleton</code>, and I think it looks suspicious as a global instance: it means that we have to navigate a large part of the algebraic hierarchy to check that something is not a subsingleton.</p>\n<p>The statement of this lemma is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CharP.CharOne.subsingleton</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Also, in the Lean 3 community version, I believe we changed the order of search for such instances, from left-to-right to right-to-left, i.e. searching first for <code>CharP R 1</code> and only then for <code>NonAssocSemiring R</code> (and check that it's compatible with the implicit class on <code>R</code> in <code>CharP</code>. The reason is that more constraining type-classes are generally the right-most typeclasses, so it will fail more quickly.</p>\n<p>Was it a conscious decision in Lean 4 to do instance search from left-to-right?</p>",
        "id": 435559848,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714127631
    },
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the phenomenon I observed above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">B_nat</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">DtoB</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">D</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">A</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Tis gives the fully expanded trace</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ❌ A Nat ▼\n  [] new goal A Nat ▼\n    [instances] #[test]\n  [] ✅ apply test to A Nat ▼\n    [tryResolve] ✅ A Nat ≟ A Nat\n    [] new goal B Nat ▼\n      [instances] #[DtoB, B_nat]\n  [] ✅ apply B_nat to B Nat ▼\n    [tryResolve] ✅ B Nat ≟ B Nat\n  [resume] propagating B Nat to subgoal B Nat of A Nat ▼\n    [] size: 1\n    [] no instances for C Nat ▼\n      [instances] #[]\n  [] ✅ apply DtoB to B Nat ▼\n    [tryResolve] ✅ B Nat ≟ B Nat\n    [] no instances for D Nat ▼\n      [instances] #[]\n</code></pre></div>\n<p>To find an instance for <code>A Nat</code>, it looks at <code>test</code> and so tries to find instances for <code>B Nat</code> and <code>C Nat</code>. It finds the instance <code>B_nat</code> for the former and then fails to find an instance for the latter. So far, so good.</p>\n<p><em>But why is it then trying <strong>again</strong> to find an instance for <code>B Nat</code>?</em></p>",
        "id": 435561780,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714128418
    },
    {
        "content": "<p>It looks like failing to find a later required instance needed to apply something like <code>test</code> above (think <code>CharP.CharOne.subsingleton</code>) causes a continuation of the (previously already successful!) search for earlier instances.</p>",
        "id": 435562206,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714128608
    },
    {
        "content": "<p>My understanding of the \"philosophy\" of the typeclass system is that in any given case, either there is an instance, or else there is none. Which implies that when an instance has been found, there is no need whatsoever to look for another one, and in the example above, the search should stop as soon as no instance for <code>C Nat</code> is found (rather than trying to find another instance for <code>B Nat</code>).</p>",
        "id": 435562570,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714128764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435552760\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435492767\">said</a>:</p>\n<blockquote>\n<p>I think that scoping instances should be triggered by mathematical rather than performances reasons. Otherwise we end up mixing design choices that are somewhat inconsistent and I find that a gaining a factor of 2 or 3 in speed is not worth the loss of design coherence.</p>\n</blockquote>\n<p>I would expect that there is not that much difference between the two. In my understanding, slow typeclass searches are caused by failing to find instances that the system tries to find because there are some \"relative\" instances (i.e., of the kind \"if X is an instance of Y, then it is also an instance of Z\") it follows that a mathematician would immediately see cannot lead to anything.</p>\n<p>Independently, I'm not sure I agree with the last statement: an overall factor of 2 or 3 does make a significant difference that might be worth conisdering as part of a trade-off, for CI runs as well as when editing Lean files.</p>\n</blockquote>\n<p>What I mean by \"mathematical reasons\" is for instance the following. We do not want a global instance of metric space on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> because there are several possible metrics but in a certain file we might want to trigger a scoped instance to access all results needing a <code>[MetricSpace X]</code>. An analogous argument for <em>not</em> having a <code>Valued</code> instance on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> but a <code>scoped instance [Valued $\\mathbb{Q}$]</code> when working with a fixed prime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> if we need so.</p>",
        "id": 435562880,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1714128891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435547839\">said</a>:</p>\n<blockquote>\n<p>Let me try to desactivate the instance in mathlib to see if anything breaks.</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12445\">#12445</a>. green overall, -1.4% wall clock, -0.94% instructions.</p>",
        "id": 435563662,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714129215
    },
    {
        "content": "<p>I'm opening a new thread in the lean4 stream on the (what I consider a) bug demonstrated above.</p>",
        "id": 435563799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714129280
    },
    {
        "content": "<blockquote>\n<p>We do not want a global instance of metric space on R^n</p>\n</blockquote>\n<p>@FilippoAENuccio I think we do actually have one, and it’s the L1 norm, which is a frequent cause of confusion for users expecting to get the Euclidean distance. But that’s orthogonal (pun not intended!) to the present discussion.</p>",
        "id": 435563817,
        "sender_full_name": "David Loeffler",
        "timestamp": 1714129286
    },
    {
        "content": "<p>The new thread is <a href=\"#narrow/stream/270676-lean4/topic/Possible.20bug.20in.20typeclass.20search/near/435564475\">here</a>.</p>",
        "id": 435564528,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714129598
    },
    {
        "content": "<p>My hunch is that fixing this bug will go a loooooong way towards speeding up typeclass search in Mathlib.</p>",
        "id": 435564663,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714129656
    },
    {
        "content": "<p>I profiled the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>This takes ~0.6 on my laptop. The type-class trace can be found <a href=\"https://gist.github.com/fpvandoorn/b255ae141a45151a767594773dc54aa4\">here</a>.</p>",
        "id": 435581626,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714136447
    },
    {
        "content": "<p>Some observations:</p>\n<ul>\n<li>The longest individual steps are 10-30ms, for instances like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field.isDomain#doc\">docs#Field.isDomain</a>, where Lean has to unify whether the implicit argument if <code>IsDomain _</code>.</li>\n<li>I think the type-class inference algorithm is holding up very well despite Mathlib's large type-class hierarchy (even though Michael and I have pointed out some potential improvements). I think it's just unreasonable when you are asking Lean whether <code>Fin 2 → ℝ</code> has at most one element, Lean has to enumerate all algebraic, order-theoretic and categorical information it has about <code>Fin 2</code>, <code>ℝ</code> and even <code>ℕ</code>, just to answer this question. So I think for a large part we need to be more hygienic with instances.</li>\n</ul>",
        "id": 435581641,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714136453
    },
    {
        "content": "<p>I think the instances that conclude a non-algebraic result (Finite, Subsingleton, Nontrivial) from an algebraic (or order-theoretic or category-theoretic) one are a bit suspicious, and the reverse is sometimes also suspicious. I would be in favor of scoping many of these instances.<br>\nExamples:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=littleWedderburn#doc\">docs#littleWedderburn</a> (conclude Field from Finite)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP.CharOne.subsingleton#doc\">docs#CharP.CharOne.subsingleton</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsConnected.is_nonempty#doc\">docs#CategoryTheory.IsConnected.is_nonempty</a></li>\n<li>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.FinCategory.fintypeObj#doc\">docs#CategoryTheory.FinCategory.fintypeObj</a><br>\nnote: these last two might be fine on a right-to-left search.<br>\nmaybe:</p>\n</li>\n<li>\n<p>Quite some structures extend <code>Nontrivial</code>, e.g. <code>StrictOrderedRing</code>, <code>IsSimpleGroup</code></p>\n</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonemptyFiniteLinearOrder.toFintype#doc\">docs#NonemptyFiniteLinearOrder.toFintype</a></li>\n</ul>",
        "id": 435581657,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714136458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435581641\">said</a>:</p>\n<blockquote>\n<p>I think it's just unreasonable when you are asking Lean whether <code>Fin 2 → ℝ</code> has at most one element, Lean has to enumerate all algebraic, order-theoretic and categorical information it has about <code>Fin 2</code>, <code>ℝ</code> and even <code>ℕ</code>, just to answer this question.</p>\n</blockquote>\n<p>This unreasonable behavior is caused by continuing the search for instances after later instances have not been found. I.e., in a situation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>when looking for an instance <code>C</code> and no instance <code>B</code> is available, it traverses the complete search tree for instances <code>A</code> (say it finds one quickly initially, then does not find <code>B</code>, then it backtracks to find another instance of <code>A</code> etc.).</p>",
        "id": 435582448,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714136727
    },
    {
        "content": "<p>Just disabling <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP.CharOne.subsingleton#doc\">docs#CharP.CharOne.subsingleton</a> gives an overall 1% improvement on mathlib build time (which is a lot!), see <a href=\"https://github.com/leanprover-community/mathlib4/pull/12445\">#12445</a>. It would probably be way less if the search were more reasonable as advocated rightly by <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> , but still I find that completely crazy.</p>",
        "id": 435584177,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714137311
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Bsucc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB10000</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">10000</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>and by increasing <code>10000</code> you can make it arbitrarily slow...</p>",
        "id": 435585032,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714137585
    },
    {
        "content": "<p>I tried to modify the example to remove all instances that conclude nontrivial (or similar classes) from algebraic, order-theoretic or categorical information. This speeds up the instance search from ~500ms  to ~20ms and it goes from ~2500 steps to 40 steps. However, the full list of these instances is very long (partially due to <a href=\"https://github.com/leanprover/lean4/pull/2905\">lean4#2905</a>).</p>",
        "id": 435588008,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138554
    },
    {
        "content": "<p>Here is the full list</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- miscellaneous suspicious instances</span>\n  <span class=\"n\">CharP.CharOne.subsingleton</span>\n  <span class=\"n\">littleWedderburn</span>\n  <span class=\"n\">CategoryTheory.FinCategory.fintypeObj</span>\n  <span class=\"n\">NonemptyFiniteLinearOrder.toFintype</span>\n  <span class=\"n\">IsDomain.toCancelCommMonoidWithZero</span>\n  <span class=\"n\">ZeroLEOneClass.neZero.two</span>\n  <span class=\"n\">NeZero.of_gt'</span>\n  <span class=\"n\">Invertible.ne_zero</span>\n  <span class=\"c1\">-- nontrivial instances</span>\n  <span class=\"n\">StrictOrderedRing.toNontrivial</span>\n  <span class=\"n\">IsSimpleGroup.toNontrivial</span>\n  <span class=\"n\">LocalRing.toNontrivial</span>\n  <span class=\"n\">IsSimpleAddGroup.toNontrivial</span>\n  <span class=\"n\">IsSimpleOrder.toNontrivial</span>\n  <span class=\"n\">EuclideanDomain.toNontrivial</span>\n  <span class=\"n\">Field.toNontrivial</span>\n  <span class=\"n\">StrictOrderedSemiring.toNontrivial</span>\n  <span class=\"n\">instNontrivial</span>\n  <span class=\"n\">CanonicallyLinearOrderedSemifield.toNontrivial</span>\n  <span class=\"n\">Semifield.toNontrivial</span>\n  <span class=\"n\">DivisionRing.toNontrivial</span>\n  <span class=\"n\">DivisionSemiring.toNontrivial</span>\n  <span class=\"n\">LinearOrderedCommGroupWithZero.toNontrivial</span>\n  <span class=\"n\">LinearOrderedAddCommGroupWithTop.toNontrivial</span>\n  <span class=\"n\">IsDomain.toNontrivial</span>\n  <span class=\"n\">CommGroupWithZero.toNontrivial</span>\n  <span class=\"n\">GroupWithZero.toNontrivial</span>\n  <span class=\"n\">instNontrivial_1</span>\n  <span class=\"c1\">-- nonempty instances</span>\n  <span class=\"n\">CategoryTheory.IsConnected.is_nonempty</span>\n  <span class=\"n\">AddTorsor.nonempty</span>\n  <span class=\"n\">bot_nonempty</span>\n  <span class=\"n\">top_nonempty</span>\n  <span class=\"n\">NonemptyFiniteLinearOrder.Nonempty</span>\n  <span class=\"n\">ConnectedSpace.toNonempty</span>\n  <span class=\"n\">IrreducibleSpace.toNonempty</span>\n  <span class=\"n\">supSet_to_nonempty</span>\n  <span class=\"n\">infSet_to_nonempty</span>\n  <span class=\"n\">One.instNonempty</span>\n  <span class=\"n\">Zero.instNonempty</span>\n  <span class=\"c1\">-- infinite instances</span>\n  <span class=\"n\">IsAlgClosed.instInfinite</span>\n  <span class=\"n\">CharZero.infinite</span>\n  <span class=\"n\">NontriviallyNormedField.infinite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 435588041,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138563
    },
    {
        "content": "<p>I have made an issue: <a href=\"https://github.com/leanprover/lean4/pull/3996\">lean4#3996</a></p>",
        "id": 435588289,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714138648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435582448\">said</a>:</p>\n<blockquote>\n<p>This unreasonable behavior is caused by continuing the search for instances after later instances have not been found. I.e., in a situation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>when looking for an instance <code>C</code> and no instance <code>B</code> is available, it traverses the complete search tree for instances <code>A</code> (say it finds one quickly initially, then does not find <code>B</code>, then it backtracks to find another instance of <code>A</code> etc.).</p>\n</blockquote>\n<p>I think this is only a very small part. Instances like <code>GroupWithZero.toNontrivial</code> or <code>One.instNonempty</code> will require you to navigate the whole algebraic type class hierarchy to know that something is not nontrivial/nonempty.</p>",
        "id": 435588441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138693
    },
    {
        "content": "<p>Possibly. It would be interesting to see how much a modification of the typeclass search algorithm would improve things on its own.</p>",
        "id": 435588688,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714138787
    },
    {
        "content": "<p>I'm not sure what to do with my giant list of instances. Is it possible to scope them all? (in namespaces like <code>Algebra</code>/<code>Order</code>/<code>CategoryTheory</code>?) Or is that too unintuitive?</p>",
        "id": 435588835,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138828
    },
    {
        "content": "<p>Did you have to add them back in in many places?</p>",
        "id": 435588936,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714138874
    },
    {
        "content": "<p>I didn't try anything outside my test file.</p>",
        "id": 435588972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138887
    },
    {
        "content": "<p>I suspect so.</p>",
        "id": 435588987,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435588688\">said</a>:</p>\n<blockquote>\n<p>Possibly. It would be interesting to see how much a modification of the typeclass search algorithm would improve things on its own.</p>\n</blockquote>\n<p>I think it will be a nice improvement, but not huge. Note that many type-class searches are supposed to fail, and those have to navigate the whole type-class hierarchy anyway. This issue causes some succeeding searches to also navigate the whole type-class hierarchy.<br>\nBut maybe I'm wrong.</p>",
        "id": 435589252,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714138979
    },
    {
        "content": "<p>I think with this appoach, one has to see which of these potentially problematic instances are needed where, so that one can decide whether it is a good idea to remove them from the list that is available by default.<br>\nI.e., if a specific instance is only needed very few times, then this would be a good candidate to get scoped.</p>",
        "id": 435589297,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714138998
    },
    {
        "content": "<p>My hunch is that without the \"bad\" backtracking, most of these failing searches would fail much more quickly. But we'll have to see.</p>",
        "id": 435589529,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714139068
    },
    {
        "content": "<p>In the <code>Subsingleton (ℝ → ℝ)</code> example, I have seen a lot of backtracking trying all the ways to synthesize again and again the same instances on the real line. Like <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, I expect that removing the bad backtracking would make things faster by one or two order of magnitude, because you would need to navigate the whole algebraic hierarchy just once instead of 100 times.</p>",
        "id": 435590075,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714139258
    },
    {
        "content": "<p>TLDR: please upvote <a href=\"https://github.com/leanprover/lean4/pull/3996\">lean4#3996</a> :-)</p>",
        "id": 435590229,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714139297
    },
    {
        "content": "<p>And in parallel I agree with <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> that all the instances he is flagging are bad -- but it's not clear to me if they are used a lot or not. (Although I guess that the <code>toNontrivial</code> parent instances can not be disabled currently if we keep the <code>extends Nontrivial</code> idiom)</p>",
        "id": 435591607,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714139751
    },
    {
        "content": "<p>I've found many similar examples (like <a href=\"#narrow/stream/287929-mathlib4/topic/TC.20slowness\">this</a>) before. They definitely shouldn't be this slow (I think they should be several times faster).</p>",
        "id": 435599264,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1714142185
    },
    {
        "content": "<p>You could upvote <a href=\"https://github.com/leanprover/lean4/pull/3996\">lean4#3996</a> if you think this is important <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 435600220,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714142517
    },
    {
        "content": "<p>Sure, I have upvoted. <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 435601236,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1714142855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435559848\">said</a>:</p>\n<blockquote>\n<p>Also, in the Lean 3 community version, I believe we changed the order of search for such instances, from left-to-right to right-to-left</p>\n</blockquote>\n<p>Indeed, Lean 3 works right-to-left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Bsucc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB10000</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[class_instances]  class-instance resolution trace</span>\n<span class=\"cm\">[class_instances] (0) ?x_0 : A := @test ?x_1 ?x_2</span>\n<span class=\"cm\">[class_instances] caching failure for A</span>\n<span class=\"cm\">[class_instances] caching failure for A</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[class_instances]  class-instance resolution trace</span>\n<span class=\"cm\">[class_instances] (0) ?x_0 : A := @test ?x_1 ?x_2</span>\n<span class=\"cm\">[class_instances] (1) ?x_2 : C := foo</span>\n<span class=\"cm\">[class_instances] caching instance for C</span>\n<span class=\"cm\">foo</span>\n<span class=\"cm\">[class_instances] (1) ?x_1 : B 10000 := instB10000</span>\n<span class=\"cm\">[class_instances] caching instance for B 10000</span>\n<span class=\"cm\">instB10000</span>\n<span class=\"cm\">[class_instances] caching instance for A</span>\n<span class=\"cm\">@test instB10000 foo</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 435607641,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714144945
    },
    {
        "content": "<p>I would be very happy if we could tell Lean if searching for a parameter should be delayed after the others have been found. So for example we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">delay</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"mi\">10000</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">where</span> <span class=\"c1\">-- ← Delay the `B` parameter until a `C` instance is found.</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Bsucc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB10000</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"mi\">10000</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>In an even more beautiful solution, we'd might even write <code>delay (n := 2)</code> <code>delay (n := 3)</code> etc if we want very precise control over the amount of delaying.</p>",
        "id": 435608095,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714145095
    },
    {
        "content": "<p>Controlling argument synthesis order would have been very helpful for the <code>FunLike</code> unbundling refactor: <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825</a></p>",
        "id": 435609075,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714145408
    },
    {
        "content": "<p>The typeclass search order is not just left-to-right, it is customized per class and determined based on the usage of <code>outParam</code> and <code>semiOutParam</code>. You may have seen the error \"cannot find synthesization order for instance\" before which is the error message when this mechanism fails</p>",
        "id": 435609585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714145573
    },
    {
        "content": "<p>So it may be that we just need additional hints to tweak this mechanism</p>",
        "id": 435609661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714145603
    },
    {
        "content": "<p>The most important difference is that I would like to place hints on the instances, while <code>(semi)OutParam</code> operates on classes.</p>",
        "id": 435609880,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714145656
    },
    {
        "content": "<p>the <code>synthOrder</code> is per-instance, not per-class</p>",
        "id": 435610322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714145800
    },
    {
        "content": "<p>which is to say, it's possible to implement this hint without changing the main algorithm</p>",
        "id": 435610509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714145867
    },
    {
        "content": "<p>As is curating the state before calling the algorithm, I assume</p>",
        "id": 435610655,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714145914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435610509\">said</a>:</p>\n<blockquote>\n<p>which is to say, it's possible to implement this hint without changing the main algorithm</p>\n</blockquote>\n<p>Oh right, this is done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.computeSynthOrder#doc\">docs#Lean.Meta.computeSynthOrder</a>. From a quick inspection, it looks like we can sort <a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Meta/Instances.lean#L159C1-L159C97\">the array <code>toSynth</code> differently</a> to tweak the order. Thanks!</p>",
        "id": 435612195,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714146451
    },
    {
        "content": "<p>Okay, doesn't look like I can implement this change and also compile Lean in time to catch my train. Maybe if I get bored the next days I'll come back to this, otherwise please feel free to take up the synth order.</p>",
        "id": 435617296,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714148058
    },
    {
        "content": "<p>I have tried to summarize my experience with trying to speed up a Mathlib file in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12412\">#12412</a> <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/HOWTO_speedup.md\">here</a>.</p>\n<p>Should (something like) this go somewhere on the community website?</p>",
        "id": 435991508,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714381539
    },
    {
        "content": "<p>I would love to have such a resource somewhere - I don't know where to place it, though.</p>",
        "id": 435992412,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714381812
    },
    {
        "content": "<p>Community website would be good. Or the github wiki of the mathlib repo</p>",
        "id": 435993398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714382157
    },
    {
        "content": "<p>As a blog post?</p>",
        "id": 435993517,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714382186
    },
    {
        "content": "<p>Yep, another option</p>",
        "id": 435993717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714382263
    },
    {
        "content": "<p>Community website is most durable. We should get in the habit of putting more stuff there (and updating more of the out-of-date stuff there!)</p>",
        "id": 435996859,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714383156
    },
    {
        "content": "<p>I would also think of this as something that should be around (and easy to find) permanently.<br>\nWhat should I do to add it to the website?</p>",
        "id": 436025989,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714392246
    },
    {
        "content": "<p>Send a PR to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io\">https://github.com/leanprover-community/leanprover-community.github.io</a>, I think.</p>",
        "id": 436108445,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714413918
    },
    {
        "content": "<p>Made <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/472\">PR 472</a>, which adds a file <code>speedup.md</code> under <code>templates/contribute</code>.</p>",
        "id": 436546498,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714586205
    },
    {
        "content": "<p>I have repeated the data-gathering experiment I described near the beginning of this thread with Mathlib on 3.8.0-rc1. For whatever reason, it took about three times as long than when I did it the first time. (The two runs are not entirely comparable: the first one missed about 370 Mathlib files, whereas the second one also built (at least part of) the dependencies.) I'm going to post the results here and add some comments.</p>",
        "id": 436842269,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714726132
    },
    {
        "content": "<p>Here is the data corresponding to what I posted <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435441796\">here</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>number of files taking between 1/8 and 1/4 seconds: 4\nnumber of files taking between 1/4 and 1/2 seconds: 5\nnumber of files taking between 1/2 and 1 seconds: 9\nnumber of files taking between 1 and 2 seconds: 73\nnumber of files taking between 2 and 4 seconds: 159\nnumber of files taking between 4 and 8 seconds: 581\nnumber of files taking between 8 and 16 seconds: 892\nnumber of files taking between 16 and 32 seconds: 914\nnumber of files taking between 32 and 64 seconds: 712\nnumber of files taking between 64 and 128 seconds: 502\nnumber of files taking between 128 and 256 seconds: 254\nnumber of files taking between 256 and 512 seconds: 62\nnumber of files taking between 512 and 1024 seconds: 8\n</code></pre></div>\n<p><strong>Comment:</strong> The spread got quite a bit larger, but I assume this comes from a bunch of fast files from <code>Std</code>  etc. being now included.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>total time for typeclass inference: 68071.8 seconds  (36.94%)\ntotal time for simp: 28814.2 seconds  (15.63%)\ntotal time for interpretation: 19346.4 seconds  (10.50%)\ntotal time for elaboration: 16364.4 seconds  (8.879%)\ntotal time for tactic execution: 14899.6 seconds  (8.085%)\ntotal time for import: 12648.0 seconds  (6.863%)\ntotal time for type checking: 8193.12 seconds  (4.446%)\ntotal time for compilation: 7957.97 seconds  (4.318%)\ntotal time for aesop: 1862.84 seconds  (1.011%)\ntotal time for linting: 1685.03 seconds  (0.9143%)\ntotal time for dsimp: 1302.39 seconds  (0.7067%)\ntotal time for .olean serialization: 1051.08 seconds  (0.5703%)\ntotal time for initialization: 997.431 seconds  (0.5412%)\ntotal time for parsing: 510.201 seconds  (0.2768%)\ntotal time for attribute application: 238.467 seconds  (0.1294%)\ntotal time for ring: 176.933 seconds  (0.09600%)\ntotal time for norm_num: 114.681 seconds  (0.06223%)\ntotal time for C code generation: 62.4177 seconds  (0.03387%)\n</code></pre></div>\n<p><strong>Comment:</strong> These proportions have been remarkably stable (differences in the percentatges are less than a half percentage point, and the order is the same as before). This is somewhat disappointing, as I expected to see a drop in the fraction of time taken by typeclass inference.</p>",
        "id": 436842977,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714726455
    },
    {
        "content": "<p>Now the top 20 typeclass searches (in terms of precentages of the total time spent in typeclass searches taking at least 100ms. Note that because the overall build was slower, this threshold is relatively lower than before: the fraction of searches above the threshold accounts for 44.32% of the total typeclass search time now, as compared to 21.39% earlier), compare the <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/435442407\">previous list</a></p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>proportion for typeclass inference of SMul (&gt; 0.1s): 12.6338%\nproportion for typeclass inference of AddCommMonoid (&gt; 0.1s): 9.28545%\nproportion for typeclass inference of Subsingleton (&gt; 0.1s): 8.41692%\nproportion for typeclass inference of HSMul (&gt; 0.1s): 5.92720%\nproportion for typeclass inference of Nonempty (&gt; 0.1s): 5.00168%\nproportion for typeclass inference of MulAction (&gt; 0.1s): 4.33766%\nproportion for typeclass inference of CoeT (&gt; 0.1s): 3.83403%\nproportion for typeclass inference of Module (&gt; 0.1s): 3.71696%\nproportion for typeclass inference of ContinuousConstSMul (&gt; 0.1s): 2.28490%\nproportion for typeclass inference of ZeroHomClass (&gt; 0.1s): 1.93563%\nproportion for typeclass inference of CoeFun (&gt; 0.1s): 1.88482%\nproportion for typeclass inference of Algebra (&gt; 0.1s): 1.63880%\nproportion for typeclass inference of OneHomClass (&gt; 0.1s): 1.62345%\nproportion for typeclass inference of OfNat (&gt; 0.1s): 1.53243%\nproportion for typeclass inference of MulHomClass (&gt; 0.1s): 1.48795%\nproportion for typeclass inference of Zero (&gt; 0.1s): 1.44422%\nproportion for typeclass inference of HAdd (&gt; 0.1s): 1.39063%\nproportion for typeclass inference of AddHomClass (&gt; 0.1s): 1.33502%\nproportion for typeclass inference of AddMonoidHomClass (&gt; 0.1s): 1.17227%\nproportion for typeclass inference of Fintype (&gt; 0.1s): 1.04527%\n</code></pre></div>\n<p><strong>Comment:</strong> <code>Subsingleton</code> has lost pole position and is now no. 3 with a bit more than half the previous percentage. I would have expected it to drop more. <code>SMul</code>, <code>AddCommMonoid</code>, <code>HSMul</code>, <code>MulAction</code> are taking more now, <code>Module</code>, <code>ContinuousConstSMul</code> and <code>ZeroHomClass</code> less than before. Recall that the overall relative time for typeclass search has stayed essentially the same, so this indicates that certain typeclass searches are now significantly <em>slower</em>.</p>",
        "id": 436844161,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714726970
    },
    {
        "content": "<p>How long is our favourite example <code>SMul \\C \\R</code> taking to fail nowadays? If this has gone up then it wouldn't surprise me at all if mathlib4 is slower.</p>",
        "id": 436855868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714731809
    },
    {
        "content": "<p>This is reasonably fast now (639 heartbeats), but still takes a few detours.<br>\n(There should be shortcut instances for things like <code>Zero ℝ</code> ...)</p>",
        "id": 436865228,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714735820
    },
    {
        "content": "<p>Prompted by the observation that instance synthesis for algebraic classes like <code>Semiring</code> frequently goes down a rabbit hole chasing order structures, I tried to find out what causes this. My conclusion was that this comes from class definitions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">α</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedSemiring#doc\">docs#OrderedSemiring</a>) where an algebraic structure with order is defined extending an algebraic structure. Among many other things, this has the effect of generating an instance <code>OrderedSemiring.toSemiring</code> with default priority 1000. So all these instances tend to be early in the list of instances that are tried when looking for a <code>Semiring</code> structure (say) (note that the files under <code>Mathlib.Algebra.Order</code>, where these classes are defined, seem to be imported by a very large part of Mathlib), leading to the algorithm going on a hunt for order structures.</p>\n<p>The idea now is to try to decouple the algebra+order hierarchy and the pure algebra hieraarchy by (preferably) making these instances scoped, so that they do not cause problems in the cases where they slow down instance synthesis, but can be made available when needed. However, this does not seem to work: while the instance attribute can be removed in the file defining the instance, this has no effect on downstream modules. So the next best solution is to reduce the priority to something small (like 50) instead; this persists in downstream modules. In addition, we add the high priority versions, scoped to <code>AlgebraOrderInstances</code>.</p>\n<p>I have done this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a> to quite good effect: many files build siginifcantly faster; the overall build instructions count goes down by more than 2.5% (still less than what we could save by making <code>#align...</code> a no-op...), and time for typeclass inference goes down by 6.6%. This PR is now <code>awaiting-review</code>; comments are very much appreciated!</p>",
        "id": 437946009,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715330258
    },
    {
        "content": "<p>Oh, cool, 2.5% instructions reduction is a big deal!</p>",
        "id": 437947396,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715330874
    },
    {
        "content": "<p>This seems like a really bad way to fix the issue, I must say</p>",
        "id": 437951929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715332970
    },
    {
        "content": "<p>Why?</p>",
        "id": 437951962,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715332988
    },
    {
        "content": "<p>Reading the start of your message, I thought you were going to say that you've turned the algebraic order typeclasses into mixins, as this too would stop wild typeclass goose chases down the algebraic order hierarchy when looking at purely algebraic goals. This is the solution I've come up with but I haven't said anything about it here on Zulip because I first want to try it out myself once my exams are over.</p>",
        "id": 437952258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333123
    },
    {
        "content": "<p>But instead you're scoping the paths from the algebraic order hierarchy to the algebraic hierarchy, meaning that users would now need to know the magic <code>open scoped AlgebraOrderInstances</code> invocation in order to use the algebraic order hierarchy at all.</p>",
        "id": 437952445,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333201
    },
    {
        "content": "<p>There's no harm in lowering the priority of these ordered -&gt; algebraic instances in the meantime, is there? When/if someone gets around to trying mixins, the custom priorities will disappera.</p>",
        "id": 437952489,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715333223
    },
    {
        "content": "<p>Do we need the scoped instances at all? I'm hoping just lowering priorities suffices.</p>",
        "id": 437952539,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715333244
    },
    {
        "content": "<p>(In my reading of Michael's message he didn't actually turn off any instances.)</p>",
        "id": 437952577,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715333262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952445\">said</a>:</p>\n<blockquote>\n<p>users would now need to know the magic <code>open scoped AlgebraOrderInstances</code> invocation in order to use the algebraic order hierarchy at all.</p>\n</blockquote>\n<p>As it is, the instances are still available, but with low priority.</p>",
        "id": 437952613,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333278
    },
    {
        "content": "<p>Wait, I thought we couldn't lower priorities after the fact? Has that changed?</p>",
        "id": 437952631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952539\">said</a>:</p>\n<blockquote>\n<p>Do we need the scoped instances at all? I'm hoping just lowering priorities suffices.</p>\n</blockquote>\n<p>Yes, at least to not make a bunch of files noticeably slower.</p>",
        "id": 437952744,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333311
    },
    {
        "content": "<p>Then why do we even need the higher priority instances scoped? We should just go back to the way Lean 3 worked by making all always-applicable instances have low priority</p>",
        "id": 437952783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952631\">said</a>:</p>\n<blockquote>\n<p>Wait, I thought we couldn't lower priorities after the fact? Has that changed?</p>\n</blockquote>\n<p>I don't know if something has changed, but I found out by experiment that you can lower the priority in the file that defines the instance, with lasting effect.</p>",
        "id": 437952842,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333348
    },
    {
        "content": "<p>Hmm, that's annoying</p>",
        "id": 437952845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333349
    },
    {
        "content": "<p>What's annoying about that?</p>",
        "id": 437952963,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715333391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952845\">said</a>:</p>\n<blockquote>\n<p>Hmm, that's annoying</p>\n</blockquote>\n<p>Not really, because otherwise there would be no way of changing the priority of the automatically generated instances.</p>",
        "id": 437952968,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952445\">said</a>:</p>\n<blockquote>\n<p>users would now need to know the magic <code>open scoped AlgebraOrderInstances</code> invocation in order to use the algebraic order hierarchy at all.</p>\n</blockquote>\n<p>So it seems <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span> still holds, not because the global instances don't exist but because they have poor performance</p>",
        "id": 437953088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952963\">said</a>:</p>\n<blockquote>\n<p>What's annoying about that?</p>\n</blockquote>\n<p>This was a reply to<br>\n<span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952744\">said</a>:</p>\n<blockquote>\n<p>Yes, at least to not make a bunch of files noticeably slower.</p>\n</blockquote>",
        "id": 437953142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333470
    },
    {
        "content": "<p>Hence I am strongly against merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a> before we have done the experiment of turning algebraic order typeclasses into mixins</p>",
        "id": 437953268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437953088\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437952445\">said</a>:</p>\n<blockquote>\n<p>users would now need to know the magic <code>open scoped AlgebraOrderInstances</code> invocation in order to use the algebraic order hierarchy at all.</p>\n</blockquote>\n<p>So it seems <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span> still holds, not because the global instances don't exist but because they have poor performance</p>\n</blockquote>\n<p>I think the problem is that in some cases, you don't want to have the instances (but still need to import the files defining them) and in other cases you do want them. The question is how one can get the algorithm to make the correct selection automatically in all (or most) cases.</p>",
        "id": 437953329,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333557
    },
    {
        "content": "<p>Yes so mixins do exactly that</p>",
        "id": 437953384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437953268\">said</a>:</p>\n<blockquote>\n<p>Hence I am strongly against merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a> before we have done the experiment of turning algebraic order typeclasses into mixins</p>\n</blockquote>\n<p>I'm fine with trying to first find out what works better.</p>",
        "id": 437953411,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333601
    },
    {
        "content": "<p>You have an algebraic layer, an order layer and an algebraic order layer. Typeclass synthesis will only search through one layer and never try moving to the next layer</p>",
        "id": 437953588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333685
    },
    {
        "content": "<p>The cost is that the user needs to declare one instance per layer</p>",
        "id": 437953630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333707
    },
    {
        "content": "<p>I.e., an algebraic structure, an order structure, and some compatibility statements?</p>",
        "id": 437953779,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333766
    },
    {
        "content": "<p>Can we have notation that would expand <code>[LinearOrderedField F]</code> to <code>[Field F] [LinearOrder F] [??? F]</code>, where <code>[??? F]</code> denotes the compatibility class?</p>",
        "id": 437954047,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715333918
    },
    {
        "content": "<p>Yes, this was discussed plenty already. Look for <code>[[ ]]</code> notation</p>",
        "id": 437954098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715333953
    },
    {
        "content": "<p>Is there a link? I can’t figure out how to search for special symbols in Zulip.</p>",
        "id": 437955292,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1715334537
    },
    {
        "content": "<p>In any case, my experiment gives an indication of what can be gained by decoupling the hierarchies, so I hope it provides additional motivation for looking into the mix-in refactor <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 437957575,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715335586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/437955292\">said</a>:</p>\n<blockquote>\n<p>Is there a link? I can’t figure out how to search for special symbols in Zulip.</p>\n</blockquote>\n<p>It started <a href=\"#narrow/stream/113488-general/topic/Commands.20for.20canonical.20variables.20declarations.20.28was.3A.20Under.2E.2E.2E\">here</a>, but there is no link to the actual PR.</p>",
        "id": 437960851,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715337279
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3162\">#3162</a></p>",
        "id": 437961090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715337404
    },
    {
        "content": "<p>Note that there is also a parallel and related proposal of splitting typeclasses that carry data from typeclasses that express properties of the data.</p>\n<p>The latest time that this came up, was at some monthly meeting, I think.</p>\n<p>Edit: <a href=\"#narrow/stream/113488-general/topic/Monthly.20Community.20Meeting/near/435622764\">this is the summary</a>.</p>",
        "id": 437970197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715342237
    },
    {
        "content": "<p>I tried turning them into mixins, but failed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6326\">#6326</a>. I've recently been looking into the reason why mixins become slower.</p>",
        "id": 437977000,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715345463
    },
    {
        "content": "<p>It is pretty simple for me re-run the downgrade to parents priority, either or both preferred and non. </p>\n<p>Should I with the changes since the last attempt? If so, what do people want to see for priorities?</p>",
        "id": 437979871,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715346706
    },
    {
        "content": "<p>Here is my summary on what I have learned from <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a>.</p>\n<ul>\n<li>Decoupling the algebra and order hierarchies has <strong>significant potential for speeding up Mathlib</strong>. Even the somewhat ham-handed approach used in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a> leads to a larger than 2.5% reduction of the instruction count for building Mathlib and a gain of about 8% in typeclass search.</li>\n<li>As Yaël has said earlier, the approach taken with scoping high-priority versions of the instances relating the hierarchies is a bit annoying to use: I added the line <code>open scoped AlgebraOrderInstances</code> to about 100 files (judging by the speed center output where it may be helpful).</li>\n<li>Having a more targeted solution that always (or almost always) does the right thing should give even more of a speed-up. The version in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12778\">#12778</a> decides on a per-file basis whether the connecting instances should have high or low priority, but it is well possible that the best choice varies within a file. (One could, of course, apply the <code>open scoped</code> in a more local way, but to find out where precisely this should be done is more work than I would be willing  to do.)</li>\n</ul>\n<p>The upshot is, I am very much looking forward to the refactor Yaël proposes! <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> How would it differ from the attempt in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6326\">#6326</a> mentioned by <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> above?</p>",
        "id": 438031169,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715366960
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6326\">#6326</a> only applies the change to one typeclass. It's not clear to me that you can rip out the benefits of the approach without swapping over all the classes at once</p>",
        "id": 438045779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715374979
    },
    {
        "content": "<p>I wonder if it would help to cache all intermediate type-class search results? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"n\">run_meta</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">AddGroup</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>After the first type class search that took 5ms, we store in the cache that <code>AddGroup Nat</code> has no instances. Along the way we figure out that there is also no instance for <code>AddCommGroup Nat</code> (and 100 other non-instances), but this is not cached. So when checking any of these instances, the goose chase needs to be played from the start, in this case taking another 4ms.</p>",
        "id": 438126466,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715452476
    },
    {
        "content": "<p>I had asked a similar question in a previous discussion (I think, but I can't find it easily). I think it would be interesting to try this. I imagine that it may be not so easy to implement, as instances may need the local context to make sense.</p>",
        "id": 438126799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715452906
    },
    {
        "content": "<p>This is already dealt with in the current caching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">SynthInstanceCache</span> <span class=\"o\">:=</span> <span class=\"n\">PersistentHashMap</span> <span class=\"o\">(</span><span class=\"n\">LocalInstances</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 438126949,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715453050
    },
    {
        "content": "<p>I think it should be quite straight forward to implement. The set of local instances is fixed at the start and doesn't change during type class resolution.</p>\n<p>For each generator node in the tabled type class resolution, if the goal does not contain any assignable metavariables (as of two weeks ago this is tracked in the field <code>typeHasMVars</code>), then we can look it up in the cache. Along the way we keep an array of these nodes with their results and what their outcome is. At the end we simply add them all to the global cache.</p>",
        "id": 438127654,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715453998
    },
    {
        "content": "<p>Ah, OK; my question was asking a bit more: save the cached results for later typeclass searches even outside the current declaration, within a file (\"module\"). This may be more involved, perhaps...</p>",
        "id": 438127747,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715454066
    },
    {
        "content": "<p>Ah right, you weren't talking about local instances in the sense of instance arguments, but in the sense of instances defined in the current file</p>",
        "id": 438127840,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715454193
    },
    {
        "content": "<p>Not necessarily defined in the current file. Say, wie have <code>variable {F} [Field F]</code>; then we will likely often need something like <code>Semiring F</code> or <code>Zero F</code>, and it would be nice if the search needed to be done only once.</p>\n<p>But I guess that this wouldn't work, since <code>variable</code>s are looked at afresh each time they are used...</p>",
        "id": 438127943,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715454345
    },
    {
        "content": "<p>An obvious way to extend the cache would be to keep the cache between declarations IF no instances have been added in the meantime, which is orthogonal to whether we cache intermediate results</p>",
        "id": 438128141,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715454593
    },
    {
        "content": "<p>And if <code>variable</code> statements would yield the same free variables each time, then this would work even better, but apparently that is not the case.</p>",
        "id": 438128295,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715454766
    },
    {
        "content": "<p>I think the aggressive caching that I'm suggesting will be particularly useful for my library rewrite tactic <code>rw??</code>, because it has to try a large amount of type class problems with different type classes, but the same types. For example when running it on <code>a + b + c</code> for natural numbers, it will try (among many others) the lemmas <code>add_comm</code> and <code>add_assoc</code>. This means it will try to synthesize many different type classes of <code>Nat</code>, and so it does a lot of duplicate work.</p>\n<p>The only downside could be that the extra caching may or may not cost too much time/memory.</p>",
        "id": 438128850,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715455401
    },
    {
        "content": "<p>I guess the only way to find out is to try it...</p>",
        "id": 438130354,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715457018
    },
    {
        "content": "<p>Here is a Mathlib-free example that shows that also intermediate instances that have been found (as opposed to non-instances) are not cached.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">n.succ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">xyz</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This first synthesizes <code>A 0</code> (by backtracking up to the provided instance <code>A 20</code>); on the way it sees <code>A 1</code>, but then <code>A 1</code> gets synthesized from scratch again for <code>baz 1</code>.</p>\n<p>Replacing <code>baz 1</code> by <code>baz 0</code> shows that the end result of the first search <em>does</em> get cached and re-used.</p>",
        "id": 438131477,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715458218
    },
    {
        "content": "<p>It seems to me lines 726-728 do redundant work: <a href=\"https://github.com/leanprover/lean4/blob/f74980ccee82ca2abdae65dcbc5571d4640ed076/src/Lean/Meta/SynthInstance.lean#L726\">https://github.com/leanprover/lean4/blob/f74980ccee82ca2abdae65dcbc5571d4640ed076/src/Lean/Meta/SynthInstance.lean#L726</a><br>\nIf an instance has been retrieved from the cache, then there is no need to check again that it applies. (also <code>assignOutParams</code> is marked as <code>let rec</code> without being recursive)</p>",
        "id": 438226142,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715563342
    },
    {
        "content": "<p>How do I get to benchmark my Lean PR on Mathlib? <a href=\"https://github.com/leanprover/lean4/pull/4152\">lean4#4152</a></p>",
        "id": 438879654,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715804737
    },
    {
        "content": "<p>Do you want to benchmark it against <code>master</code> or <code>nightly-testing</code>?</p>",
        "id": 438879818,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715804810
    },
    {
        "content": "<p>For the former, cherry pick your commits on top of <code>v4.8.0-rc1</code> (or whatever is the current mathlib toolchain). Release copies of your custom toolchain on your fork. Update the <code>lean-toolchain</code> on your mathlib branch to that toolchain. Fix errors and clear lints. Push and create a draft PR. Comment <code>!bench</code>. </p>\n<p>For the latter, just rebase on <code>nightly-with-mathlib</code> and let the automation take over. Create a draft PR from the generated mathlib branch after fixing errors and clearing lints. Comment <code>!bench</code>.</p>",
        "id": 438880632,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715805148
    },
    {
        "content": "<p>Though, right now, the benchmark server is taking a nap</p>",
        "id": 438880892,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715805262
    },
    {
        "content": "<p>Does it make a difference which one I choose? I believe I had rebased to <code>nightly-with-mathlib</code> at the start. Where do I find the generated mathlib branch?</p>",
        "id": 438884720,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715806879
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/lean-pr-testing-4152\">branch#lean-pr-testing-4152</a> is where it would be</p>",
        "id": 438888712,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715808467
    },
    {
        "content": "<p>The bot still wants you to rebase on another commit to branch off <code>nightly-with-mathlib</code></p>",
        "id": 438889279,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715808696
    },
    {
        "content": "<p>So I've now tried to get this mathlib branch on my laptop, but I get error: binary package was not provided for 'windows'. How do I go around this?</p>",
        "id": 439015114,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715864450
    },
    {
        "content": "<p>Ah, I seem to be able to do this on Gitpod</p>",
        "id": 439017612,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715865232
    },
    {
        "content": "<p>The full CI tag should be applied to Lean PR if you want builds on all arch/OS’s.</p>",
        "id": 439017890,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715865307
    },
    {
        "content": "<p>From <a href=\"https://lean-lang.org/lean4/doc/dev/index.html#dev-setup-using-elan\">the manual</a></p>\n<blockquote>\n<p>It is also possible to generate releases that others can use, simply by pushing a tag to your fork of the Lean 4 github repository (and waiting about an hour; check the <code>Actions</code> tab for completion). If you push <code>my-tag</code> to a fork in your github account <code>my_name</code>, you can then put <code>my_name/lean4:my-tag</code> in your <code>lean-toolchain</code> file in a project using <code>lake</code>. (You must use a tag name that does not start with a numeral, or contain <code>_</code>).</p>\n</blockquote>\n<p>If you don't want to keep bugging the core team for things like this</p>",
        "id": 439020625,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715866136
    },
    {
        "content": "<p>Just make sure you have permissions set correctly for the actions or they will fail after an hour and you will be annoyed</p>",
        "id": 439020789,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715866188
    },
    {
        "content": "<p>Added <code>full-ci</code> to that PR so that the next PR release contains windows binaries. If yuo use these pr releases locally,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">uninstall</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is a magic incarnation after CI built a new one :-)</p>",
        "id": 439036399,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715870520
    },
    {
        "content": "<p>At this application of the function <a href=\"https://github.com/leanprover/lean4/blob/1382e9fbc4877820570d99f8a1226081a4a41750/src/lake/Lake/Load/Main.lean#L196C49-L196C63\"><code>fetchOrCreate</code></a>, it synthesizes an instance of <code>MonadStore1</code>. This type class has an outParam, but there are multiple instances available that give different values for the outParam. The current algorithm is very lucky to find the right one, because there are two instances directly applicable (call them inst1 and inst2), such that inst1 is what is in the final solution, but if we set inst1 to a <code>high</code> priority, then the synthesis fails. So the existence of inst2 pushes the type class search in the \"right\" direction without actually being used.</p>\n<p>My version failed here, causing the build to fail <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 439110815,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715897720
    },
    {
        "content": "<p>I tried replacing the outParam by a semiOutParam, but this didn't work</p>",
        "id": 439110874,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715897759
    },
    {
        "content": "<p>The two instances in question are <code>Lake.instMonadStore1OfMonadDStore</code> and <code>Lake.instMonadStore1OfMonadDStoreOfFamilyOut</code> respectively</p>",
        "id": 439111696,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715898157
    },
    {
        "content": "<p>Can one be deleted in master?</p>",
        "id": 439112754,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715898727
    },
    {
        "content": "<p>Well, deleting the (here) unused instance will make the type class synthesis fail</p>",
        "id": 439116705,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715900761
    },
    {
        "content": "<p>The reason that there are multiple possible instances is that there is a stack of multiple <code>StateT</code> monad transformers, and the type class search is expected to figure out which one to use.</p>",
        "id": 439122819,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715904399
    },
    {
        "content": "<p>Here's an interesting minimalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonadStore1</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonadDStore</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MonadDStore</span> <span class=\"n\">Name</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"n\">β</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- inst : MonadStore1 `hoihoi β m</span>\n</code></pre></div>\n<p>this synthesis succeeds, but if you remove the <code>outParam</code>, or replace it by a <code>semiOutParam</code>, then it fails, with a very surprising unification failure. This must have been the reason why this <code>outParam</code> was put there in the first place, even though it doesn't really belong there.</p>",
        "id": 439128166,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715908260
    },
    {
        "content": "<p>I solved the problem by changing the outParams into semiOutParams, and adding the following two instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonadStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n  <span class=\"n\">fetch</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">MonadDStore.fetch</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n  <span class=\"n\">store</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">MonadDStore.store</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">o</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">fetch</span><span class=\"bp\">?</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">fetch</span><span class=\"bp\">?</span> <span class=\"n\">k</span>\n  <span class=\"n\">store</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">store</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>These are non-dependent/constant copies of equivalent instances of the dependent <code>MonadDStore</code>. (Recall <code>abbrev MonadStore κ α m := MonadDStore κ (fun _ =&gt; α) m</code>). Unification is having trouble applying the general <code>MonadDStore</code> instances in the non-dependent case. It would be nice if unification in type class search could be configured in a way where the original instances would apply automatically, e.g. in the example above.</p>",
        "id": 439134005,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715912672
    },
    {
        "content": "<p>Reminiscent of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a>.</p>",
        "id": 439182203,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715936837
    },
    {
        "content": "<p>In particular, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905#issuecomment-1793562341\">https://github.com/leanprover-community/mathlib4/pull/7905#issuecomment-1793562341</a></p>",
        "id": 439182469,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715936927
    },
    {
        "content": "<p>I'm not sure it it is the same. In that case it was just about speedup right? In this case the dependent instance will simply not unify (unless we illegally mark an outParam</p>",
        "id": 439197396,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715942666
    },
    {
        "content": "<p>Sure but the underlying cause was ineffective beta reduction to go from the dependent version to the non-dependent one</p>",
        "id": 439198036,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715942962
    },
    {
        "content": "<p>Here the cause was a failed unification when applying the dependent version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"bp\">=?=</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.205</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Lean.Name</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.203</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">β</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">β</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">foApprox</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">hoihoi</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n    <span class=\"o\">[</span><span class=\"n\">constApprox</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">hoihoi</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"bp\">=?=</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.205</span>\n  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">`</span><span class=\"n\">hoihoi</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"bp\">=?=</span> <span class=\"n\">MonadStore1</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.204</span> <span class=\"bp\">?</span><span class=\"n\">m.206</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.205</span>\n</code></pre></div>",
        "id": 439202368,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715944965
    },
    {
        "content": "<p>I encountered a very surprising slow failing type class search in mathlib. the function <code>synthInstance?</code> runs <code>withNewMCtxDepth</code>, which means that metavariables that are already in the type class expression will not be instantiated during the type class search. However, in this example, this rule is somehow broken. It tries to synthesize <code>CommRing ?m.2404</code>, and somehow manages to instantiate the metavariable. It then goes on a wild search for 1 second until failing.</p>\n<p>I've minimized the example a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Opposite</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">CategoryTheory.Limits</span> <span class=\"n\">AlgebraicGeometry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">RingHom.PropertyIsLocal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.PropertyIsLocal</span> <span class=\"bp\">@</span><span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sourceAffineLocally_of_source_openCover'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Scheme.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAffine</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">X.OpenCover</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsAffine</span> <span class=\"o\">(</span><span class=\"bp\">𝒰.</span><span class=\"n\">obj</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">sourceAffineLocally</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">base</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">𝒰.</span><span class=\"n\">IsOpen</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base_open.isOpen_range</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rangeIsAffineOpenOfOpenImmersion</span> <span class=\"o\">(</span><span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span> <span class=\"o\">:</span> <span class=\"n\">X.affineOpens</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">U</span>\n  <span class=\"c1\">-- Porting note: here is what we are eliminating into Lean</span>\n  <span class=\"n\">apply</span> <span class=\"n\">of_affine_open_cover</span>\n    <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ofRestrict</span> <span class=\"o\">(</span><span class=\"n\">Opens.openEmbedding</span> <span class=\"n\">V.val</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">))</span> <span class=\"n\">U</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">U</span> <span class=\"n\">r</span> <span class=\"n\">H</span>\n    <span class=\"c1\">-- Porting note: failing on instance synthesis for an (unspecified) meta variable</span>\n    <span class=\"c1\">-- made φ explicit and forced to use dsimp in the proof</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hP.StableUnderComposition</span>\n      <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.restrict</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Opens.openEmbedding</span> <span class=\"n\">U.val</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.restrict</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Opens.openEmbedding</span> <span class=\"o\">(</span><span class=\"n\">X.basicOpen</span> <span class=\"n\">r</span><span class=\"o\">))))</span>\n      <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- Porting note: need to pass Algebra through explicitly</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">HoldsForLocalizationAway</span> <span class=\"n\">_</span> <span class=\"n\">hP</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.restrict</span> <span class=\"o\">(</span><span class=\"n\">X.basicOpen</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">openEmbedding</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span> <span class=\"o\">(</span><span class=\"n\">eqToHom</span> <span class=\"n\">U.1.openEmbedding_obj_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 439218960,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715951240
    },
    {
        "content": "<p>It is possible that this problem is caused by an oversight in this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Return true if `mvarId.isReadOnly` return true or if `mvarId` is a synthetic opaque metavariable.</span>\n\n<span class=\"sd\">Recall `isDefEq` will not assign a value to `mvarId` if `mvarId.isReadOnlyOrSyntheticOpaque`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.MVarId.isReadOnlyOrSyntheticOpaque</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarDecl</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span>\n  <span class=\"k\">match</span> <span class=\"n\">mvarDecl.kind</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MetavarKind.syntheticOpaque</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConfig</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assignSyntheticOpaque</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mvarDecl.depth</span> <span class=\"bp\">!=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">depth</span>\n</code></pre></div>\n<p>When a variable is <code>syntheticOpaque</code>, and lives at a lower depth, and <code>assignSyntheticOpaque := true</code>, then the variable is read-only, but this function will return <code>false</code>.</p>",
        "id": 439222290,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715952227
    },
    {
        "content": "<p>Is <code>assignSyntheticOpaque := true</code> at that point in the example?</p>",
        "id": 439222917,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715952392
    },
    {
        "content": "<p>I'm not sure how to check that</p>",
        "id": 439222979,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715952411
    },
    {
        "content": "<p>Modify the toolchain to dump the config in the trace also?</p>",
        "id": 439223325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715952497
    },
    {
        "content": "<p>Ok, I'll make a PR for it</p>",
        "id": 439226735,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715953549
    },
    {
        "content": "<p>You can usually do it much faster on your local machine using <code>elan override</code></p>",
        "id": 439226871,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715953575
    },
    {
        "content": "<p>I haven't yet figured out how to build Lean on my laptop</p>",
        "id": 439228999,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715954242
    },
    {
        "content": "<p>OS?</p>",
        "id": 439229210,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715954304
    },
    {
        "content": "<p>Windows</p>",
        "id": 439229333,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715954355
    },
    {
        "content": "<p>WSL?</p>",
        "id": 439229369,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715954370
    },
    {
        "content": "<p>I don't think I have it</p>",
        "id": 439229579,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715954415
    },
    {
        "content": "<p>Should be as simple as typing <code>wsl --install</code> in the terminal</p>",
        "id": 439229781,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715954471
    },
    {
        "content": "<p>Cool, I've installed it</p>",
        "id": 439230291,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715954608
    },
    {
        "content": "<p>How do I use <code>elan override</code>?</p>",
        "id": 439230706,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715954740
    },
    {
        "content": "<p>Brb in 15</p>",
        "id": 439230765,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715954762
    },
    {
        "content": "<p>I should also mention there's a wsl vscode extension which allows you to run your project inside wsl. Afterwards, you can install the lean vscode extension in wsl and you should be able to build from the command line within vscode</p>",
        "id": 439230856,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715954783
    },
    {
        "content": "<ul>\n<li>Fork <code>leanprover/lean4</code> and pull a local copy. </li>\n<li>You probably want to <code>git switch --detach v4.8.0-rc1</code> and create a new branch so that the changes are built on top of something that mathlib runs on. </li>\n<li><code>mkdir -p build/release</code> from the root of the repo. </li>\n<li><code>cd build/release</code></li>\n<li><code>cmake ../..</code></li>\n<li><code>make -jN</code> where N is the number of cores for your processor. You can just <code>make</code> also but this speeds it up quite a bit. </li>\n<li>(optional) <code>make test ARGS=-jN</code> for running the test suite </li>\n<li><code>elan toolchain link some_name stage1</code> </li>\n<li><code>cd</code> back into a local copy of <code>mathlib</code> </li>\n<li><code>elan override set some_name</code></li>\n<li><code>lake build</code></li>\n</ul>",
        "id": 439235631,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715956350
    },
    {
        "content": "<p>After this you should be using the local toolchain to re-build mathlib</p>",
        "id": 439235759,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715956396
    },
    {
        "content": "<p>Someone who develops on windows might be able to give as nitty-gritty a set of steps. But, I haven't tried windows proper (= non-WSL)</p>",
        "id": 439236114,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715956467
    },
    {
        "content": "<p>After a lot of perseverance, I managed to do it. But I still think making a PR is faster/more efficient, because building mathlib locally is very slow. Anyways, I can confirm that the metavariable in question has <code>MetavarKind.syntheticOpaque</code> and that the Config has <code>assignSyntheticOpaque := true</code>, confirming my hypothesis. The whole config is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">foApprox</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">ctxApprox</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">quasiPatternApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">constApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">isDefEqStuckEx</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">unificationHints</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">proofIrrelevance</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">assignSyntheticOpaque</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">offsetCnstrs</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">transparency</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Meta.TransparencyMode.default</span><span class=\"o\">,</span>\n  <span class=\"n\">trackZetaDelta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">etaStruct</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Meta.EtaStructMode.all</span><span class=\"o\">,</span>\n  <span class=\"n\">univApprox</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 439278250,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715972876
    },
    {
        "content": "<p>Yeah, that is certainly a bug</p>",
        "id": 439278623,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715973045
    },
    {
        "content": "<p>You can also push a tag to your fork and use GitHub CI to build the toolchains. Then you can use that toolchain in Mathlib CI if your local machine takes too much time.</p>",
        "id": 439278744,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715973113
    },
    {
        "content": "<p>How do tags work?</p>",
        "id": 439279156,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715973320
    },
    {
        "content": "<ul>\n<li><code>git tag your_tag $(git rev-parse --short HEAD)</code> makes the tag with the commit hash at your head</li>\n<li><code>git push your_tag origin</code> pushes the tag to GitHub </li>\n<li>Then GitHub CI (inherited from the <code>leanprover/lean4</code>) takes over and builds toolchains, assuming the permissions for actions are set </li>\n<li>Once this is done, you can use <code>github_username/lean4:your_tag</code> in the <code>lean-toolchain</code></li>\n<li>Pushing this to your mathlib branch after fork's CI finishes and releases the toolchains will start mathlib CI</li>\n</ul>",
        "id": 439279585,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715973528
    },
    {
        "content": "<p>But at this point, things are about as fast as making a core PR branching off <code>nightly-with-mathlib</code> assuming you don't need all the toolchains.</p>",
        "id": 439280434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715973940
    },
    {
        "content": "<p>I've created pull requests for the two problems that I solved today: <a href=\"https://github.com/leanprover/lean4/pull/4205\">lean4#4205</a> and <a href=\"https://github.com/leanprover/lean4/pull/4206\">lean4#4206</a>.</p>",
        "id": 439288011,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715977927
    },
    {
        "content": "<p>This is great but I fear the form of those PRs will not be very successful. Did you carefully read <a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md</a>?</p>",
        "id": 439288361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715978123
    },
    {
        "content": "<p>Note that the process is very different from what is used by Mathlib.</p>",
        "id": 439288436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715978154
    },
    {
        "content": "<p>They are documented better than <a href=\"https://github.com/leanprover/lean4/pull/4126\">lean#4126</a> :)</p>",
        "id": 439288652,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715978276
    },
    {
        "content": "<p>You should probably at least add tests (that fail on current master) to improve them.</p>",
        "id": 439288708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715978287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4126\">lean#4126</a> probably counts as being self-documenting.</p>",
        "id": 439288827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715978356
    },
    {
        "content": "<p>Should I also make an issue for the pull requests?</p>",
        "id": 439288898,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715978397
    },
    {
        "content": "<p>I would make issues because I can imagine other possible fixes, eg finding the underlying issue with dependent vs non-dependent signature unification or breaking up <code>readOnlyOrSyntheticOpaque</code> into separate functions.</p>",
        "id": 439290257,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715979141
    },
    {
        "content": "<p>Note that I am not part of the Lean core dev team. I am only worried that valuable contributions (and potentially lots of future valuable contributions) could be lost if you don’t follow the contributing guidelines.</p>",
        "id": 439290261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715979144
    },
    {
        "content": "<p>And there are good reasons why the external contributions guidelines are so demanding. Writing tests in particular is a very standard requirement in any software project.</p>",
        "id": 439290494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715979264
    },
    {
        "content": "<p>I have now added a small test for both PR's</p>",
        "id": 439295657,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715982260
    },
    {
        "content": "<p>FYI, in the MonadStore test, only the second one fails on 4.8.0-rc1 on my computer.</p>",
        "id": 439296102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715982542
    },
    {
        "content": "<p>Yes, that is correct, maybe I should rephrase the comment. It is able to find exactly one instance due to the outParam</p>",
        "id": 439296191,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715982599
    },
    {
        "content": "<p>Ok, I think the comment is indeed misleading (or maybe my knowledge of the English language is misleading me).</p>",
        "id": 439296283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715982649
    },
    {
        "content": "<p>It actually turns out that duplicating these specific instances isn't necessary, and the following instance can be added instead to help with the non-dependent case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The constant type family -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FamilyDef</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">family_key_eq_type</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 439300877,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715985481
    },
    {
        "content": "<p>I've updated the PR description explaining this</p>",
        "id": 439302201,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715986357
    },
    {
        "content": "<p>I was just ping by <a href=\"https://github.com/leanprover/lean4/pull/4205\">lean4#4205</a> and discovered this thread by searching for <code>MonadStore</code> on Zulip. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Could I get a run down of what the problem is? Unforunately, this thread is quite long and my skim through it did not enlighten me sufficiently how this issue with <code>Monad(D)Store(1)</code> is causing trouble. I am quite surprised any but me in the Lake internals is interacting with it! <span aria-label=\"shocked\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"shocked\">:shocked:</span></p>",
        "id": 439316362,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715998597
    },
    {
        "content": "<p>It originated from me editing the instance synthesis algorithm. My version failed on a synthesis of <code>MonadStore1</code>, and then I found out that this wasn't a problem with my implementation, but that this type class has an outParam that can have multiple different values.</p>",
        "id": 439316508,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715998779
    },
    {
        "content": "<p>It then turned out that simply turning it into a semiOutParam didn't work due to unification issues, but adding the above extra instance solves it.</p>",
        "id": 439316705,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715998967
    },
    {
        "content": "<p>What I am confused about here is why that is troublesome. Having multiple resolution paths for  an <code>outParam</code> is quite common. For instance,  all the <code>Monad*</code> classes (<code>MonadExcept</code>, <code>MonadState</code>,  etc.) have a <code>[Monad*Of] : Monad*</code> instance. Thus, if there are multiple valid <code>Monad*Of</code> instance there will be different values for the <code>outParam</code>.</p>\n<p>For example, <code>StateT S1 &lt;| StateT S2 Id</code> will have both a <code>MonadState S1</code> and a <code>MonadState S2</code> possible resolution and the synthesis algorithm always chooses the outermost, latest appearing one (which is relied upon quite heavily in monad code).</p>",
        "id": 439316732,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715999008
    },
    {
        "content": "<p>The funny thing is that in this particular case, the instance that was generated and used corresponds to the innermost <code>StateT</code> in a stack of <code>StateT</code>s</p>",
        "id": 439316838,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999129
    },
    {
        "content": "<p>The <code>Monad*Of</code> classes all have semiOutParams, exactly because they can have multiple different instances.</p>",
        "id": 439316945,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999231
    },
    {
        "content": "<p>At the very start of type class search, outParams are replaced by metavariables, and at the end it checks that these are instantiated correctly. Thus having multiple different possibilities is problematic.</p>",
        "id": 439317038,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439316945\">said</a>:</p>\n<blockquote>\n<p>The <code>Monad*Of</code> classes all have semiOutParams, exactly because they can have multiple different instances.</p>\n</blockquote>\n<p>Yes, but they are used to produce the <code>outParam</code> <code>Monad*</code> instances, thus there are multiple possibilites there as well..</p>",
        "id": 439317061,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715999399
    },
    {
        "content": "<p>A mistake I have yet to have the time correct with the <code>MonadStore</code> classes is that they should also follow the pattern of the other <code>Monad*</code> classes and have both a <code>semiOutParam``*Of</code> version and <code>outParam</code> version. It had not been a pressing refactor, though.</p>",
        "id": 439317108,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715999408
    },
    {
        "content": "<p>To demonstrate how this multiple possibilty problem also shows up for the other monad classes, consider these xamples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σₐ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₁</span> <span class=\"o\">:=</span> <span class=\"n\">MonadState.get</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ₂</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₂</span> <span class=\"o\">:=</span> <span class=\"n\">MonadState.get</span> <span class=\"c1\">-- errors</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σₐ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₁</span> <span class=\"o\">:=</span> <span class=\"n\">MonadStateOf.get</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 439317278,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715999626
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/1382e9fbc4877820570d99f8a1226081a4a41750/src/lake/Lake/Load/Main.lean#L196C49-L196C63\"><code>fetchOrCreate</code></a>, is the example that I encountered, and it needs the <code>Monad*Of</code> variant, but it got lucky that the type class synthesis decided to choose the inner-most <code>StateT</code>.</p>",
        "id": 439317473,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999818
    },
    {
        "content": "<p>(Like in your second example)</p>",
        "id": 439317502,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999866
    },
    {
        "content": "<p>But I believe that when you get around to doing this refactor, you will run into the same issue I did, and then this extra instance for the constant type family will be necessary.</p>",
        "id": 439317607,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715999960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> I agree with the extra <code>FamilyDef</code> instance. The problem is that we do want to perserve an <code>outParam</code> variant for inferring the type of the value when using the <code>fetch?</code>/<code>store</code> methods (e.g., just like <code>get</code> does).</p>",
        "id": 439317710,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716000054
    },
    {
        "content": "<p>The reason why it works with the outParam, is because of the metavariables that are put in place for outParams, and this affects the unification during type class search.</p>",
        "id": 439317711,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716000054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> I think my confusion is, that I far as I understand, there is suppose to be a defined order for which instance gets synthesize first, even in the case of <code>outParam</code>. Thus, this should always reliable produce the same instance. As in the example above where the outer-most state is always choosen due to ordering of <code>MonadState</code> instances for lifting and transformers.</p>",
        "id": 439318417,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716000807
    },
    {
        "content": "<p>the language in deterministic, so in some sense it can be relied upon, however, in this particular case something weird happens: we have instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FamilyOut</span> <span class=\"n\">β</span> <span class=\"n\">k</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"n\">α</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>and the second one is tried first, and the first one eventually succeeds. If we remove the second one or reduce its priority, then the order magically changes, and the wrong instance is synthesised.</p>",
        "id": 439318679,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716001062
    },
    {
        "content": "<p>And if we were to rely on an order I'd want it to be outer-first just like in StateT</p>",
        "id": 439318869,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716001204
    },
    {
        "content": "<p>By the way, the order in the case of <code>MonadExcept</code> seems to be a bit inconsistent. In a stack of <code>ExceptT</code>s, it picks the outer one, but if I wrap it around <code>MetaM</code>, it picks up the instance from <code>MetaM</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ε₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">ε₁</span> <span class=\"n\">MetaM</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"n\">throw</span> <span class=\"n\">e</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 439319064,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716001383
    },
    {
        "content": "<p>Yes,  that was the point I was trying to make. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  It has the similar conceptual  problems to <code>MonadStore</code>, they are just usually avoided in core because the instances have been ordered to work as desired. They can often pop up in downstreams use though.</p>",
        "id": 439319211,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716001505
    },
    {
        "content": "<p>I agree, however, that these are real problems.</p>",
        "id": 439319311,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716001596
    },
    {
        "content": "<p>For example, the current outermost ordering for transformer instance is just a by product of how instance syntehsi happens to decides between the lift and transformer instances. If we change this (via priorities) we can switch the ordering:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MyLean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonadStateOf</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">semiOutParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">σ</span>\n  <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">PUnit</span>\n  <span class=\"n\">modifyGet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">MonadStateOf</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Similar to `MonadStateOf`, but `σ` is an `outParam` for convenience. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">MonadState</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">σ</span>\n  <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">PUnit</span>\n  <span class=\"n\">modifyGet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">MonadState</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"n\">modifyGet</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadState</span> <span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n  <span class=\"n\">set</span>         <span class=\"o\">:=</span> <span class=\"n\">MonadStateOf.set</span>\n  <span class=\"n\">get</span>         <span class=\"o\">:=</span> <span class=\"n\">MonadStateOf.get</span>\n  <span class=\"n\">modifyGet</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">MonadStateOf.modifyGet</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Outermost</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span>         <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">MonadStateOf.get</span>\n  <span class=\"n\">set</span>       <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonadStateOf.set</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">modifyGet</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">monadLift</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonadState.modifyGet</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span>       <span class=\"o\">:=</span> <span class=\"n\">StateT.get</span>\n  <span class=\"n\">set</span>       <span class=\"o\">:=</span> <span class=\"n\">StateT.set</span>\n  <span class=\"n\">modifyGet</span> <span class=\"o\">:=</span> <span class=\"n\">StateT.modifyGet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σₐ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₁</span> <span class=\"o\">:=</span> <span class=\"n\">get</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ₂</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₂</span> <span class=\"o\">:=</span> <span class=\"n\">get</span> <span class=\"c1\">-- errors</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Innermost</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span>       <span class=\"o\">:=</span> <span class=\"n\">StateT.get</span>\n  <span class=\"n\">set</span>       <span class=\"o\">:=</span> <span class=\"n\">StateT.set</span>\n  <span class=\"n\">modifyGet</span> <span class=\"o\">:=</span> <span class=\"n\">StateT.modifyGet</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span>         <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">MonadStateOf.get</span>\n  <span class=\"n\">set</span>       <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonadStateOf.set</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">modifyGet</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">monadLift</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonadState.modifyGet</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σₐ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₁</span> <span class=\"o\">:=</span> <span class=\"n\">get</span> <span class=\"c1\">-- errors</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">σ₁</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ₂</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">σ₂</span> <span class=\"o\">:=</span> <span class=\"n\">get</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 439319445,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716001718
    },
    {
        "content": "<p>I have been frustrated myself about this before. This is caused by <code>MonadError.toMonadExceptOf</code> being tried first. I think it would be a fix to put a high instance priority on the relevant instance.</p>\n<p>Edit: instead, there should be a low priority for the instance that allows you to pass through an <code>ExceptT</code>.</p>",
        "id": 439319465,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716001740
    },
    {
        "content": "<p>So why is it not the case that the lift instance has a low priority?</p>",
        "id": 439320035,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716002111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439320035\">said</a>:</p>\n<blockquote>\n<p>So why is it not the case that the lift instance has a low priority?</p>\n</blockquote>\n<p>I unfortunately do not know, the other Lean developers would have to chime in. If you think it should be, it might be worth making an issue about this. It seems like it would be a good idea to properly clarify the intended design around <code>outParam</code>s, instance priorites, and synthesis order.</p>",
        "id": 439320269,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716002300
    },
    {
        "content": "<p>My two main points about the current design, from my understanding of it:</p>\n<ul>\n<li>It is expected that there will be multiple resolution paths for an <code>outParam</code>. However, it is also expected that only one will be consistently followed based ont the current ordering rules.</li>\n<li>If you are proposing to change the synthesis order, this will break many things that can rely on this. Ideally, there should be a way to recover the existing order users relied  on (e.g., via priority annotations) without losing existing features in the process (such as downgrading to an <code>semiOutParam</code> and losing the inference provided by <code>outParam</code>).</li>\n</ul>",
        "id": 439320336,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716002400
    },
    {
        "content": "<p>Also, I am perfectly happy to change <code>fetchOrCreate</code> / <code>MonadStore</code> to follow a new order. I have no particular love for the current one, so I personally have no compliants with any of this.</p>",
        "id": 439320531,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716002569
    },
    {
        "content": "<p>It is only under very specific circumstances that going from <code>outParam</code> to <code>semiOutParam</code> is a downgrade in terms of synthesis, namely when <code>isDefEq</code> fails to unify two expressions that can be unified.</p>",
        "id": 439320618,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716002649
    },
    {
        "content": "<p>Hmm, that's not true, the other benefit of <code>outParam</code>s is that they also succeed in synthesizing when the parameter is still a metavariable.</p>",
        "id": 439320746,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716002813
    },
    {
        "content": "<p>Yes, they are used to assign metavariables via synthesis.</p>",
        "id": 439320877,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716002943
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">IO.Error</span> <span class=\"n\">m</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"c1\">-- works due to `outParam` in `MonadState`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">IO.Error</span> <span class=\"n\">m</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">MonadStateOf.get</span><span class=\"o\">)</span> <span class=\"c1\">-- errors due to metavariable</span>\n</code></pre></div>",
        "id": 439321094,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716003164
    },
    {
        "content": "<p>I've made an issue for it: 4212</p>",
        "id": 439322481,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716004836
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4206\">lean4#4206</a> breaks a couple of proofs in Mathlib, and I've fixed those on the corresponding mathlib branch. The <a href=\"http://speed.lean-fro.org/mathlib4/run-detail/5604cd41-2381-4225-942c-bcf8d88248f7\">benchmarking</a> shows a decrease of 0.3% in the amount of build instructions. I've extended the documentation on the Lean PR. Should I still make an issue where I just copy this comment?</p>",
        "id": 439354223,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716037988
    },
    {
        "content": "<p>one proof was fixed by removing 2 lines that were added in during the port :)</p>",
        "id": 439354608,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716038352
    },
    {
        "content": "<p>It does seem like <code>convert</code> and <code>refine'</code> are fairly fragile tactics. Do we know why they need extra unification hints after the change? Also, does <code>refine</code> do a better job figuring things out?</p>",
        "id": 439354846,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716038530
    },
    {
        "content": "<p>Both tactics call <code>elabTermEnsuringType</code>, which in turn calls <code>withAssignableSyntheticOpaque &lt;| isDefEq eType expectedType</code>, and this bug appears when <code>assignableSyntheticOpaque := true</code>. In the congr tactic, called by <code>convert</code>, there is also <code>try withAssignableSyntheticOpaque mvarId.refl</code>. The bug is basically that it would instantiate metavariables that it wasn't supposed to, which sometimes can be helpful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 439355340,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716039055
    },
    {
        "content": "<p>I looked at the <code>refine'</code> proofs again, and I've now replaced them all with either <code>exact</code> or <code>apply</code></p>",
        "id": 439355894,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716039592
    },
    {
        "content": "<p>For <code>convert</code>, in most cases the issue was that there were type class problems in which the metavariables weren't instantiated yet, so adding these explicitly allows the instances to be synthesized. I don't know if it is possible to modify the tactic to improve this. But there were also some more complicated cases where I had no clue how the original tactic managed to prove the goal, and I had to add a non-trivial amount to the proof</p>",
        "id": 439356670,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716040285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I found out instead of the constant type family, it also suffices to have the general type family instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The general type family -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FamilyDef</span> <span class=\"n\">Fam</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Fam</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">family_key_eq_type</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The cool thing about this is that this means we can get rid of the non-type-family instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>simplifying the situation.</p>\n<p>This type class <code>FamilyDef Fam a β</code> strongly reminds me of <a href=\"https://downloads.haskell.org/~ghc/7.4.1/docs/html/users_guide/equality-constraints.html\">Equality constraints</a> in Haskell, which allow you to impose that two types are equal. That is exactly what we're doing here: enforcing that <code>β k</code> and <code>α</code> are equal. I wonder if such a design would make sense to use in Lean. I think it is much more intuitive to read this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">β</span> <span class=\"n\">k</span> <span class=\"bp\">~</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"n\">α</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>compared to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FamilyOut</span> <span class=\"n\">β</span> <span class=\"n\">k</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"n\">α</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 439387250,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716071834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439387250\">said</a>:</p>\n<blockquote>\n<p>The cool thing about this is that this means we can get rid of the non-type-family instance</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It is my understanding that it is best to avoid <code>cast</code> where possible in Lean, so being able to use the instance without it when possible is desirable.</p>",
        "id": 439398722,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716085130
    },
    {
        "content": "<p>Ooh, interesting, so in that case it would actually be better to go back to not even having the constant instance for <code>FamilyDef</code>, and instead have the direct instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadDStore</span> <span class=\"n\">κ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadStore1</span> <span class=\"n\">k</span> <span class=\"n\">α</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 439399165,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716085633
    },
    {
        "content": "<p>I suppose that is then also a reason why implementing equality constraint a la Haskell isn't ideal in Lean, because the <code>cast</code> function causes some overhead? Do you know what this overhead/drawback is?</p>",
        "id": 439399363,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716085805
    },
    {
        "content": "<p>I don't think there is any such overhead, <code>cast</code> is compiled to a no-op. It makes proofs harder but I don't think this is relevant for Lake.</p>",
        "id": 439427487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716114101
    },
    {
        "content": "<p>Also, is there a reason to use cast over <code>▸</code> (in the case that the equality needs to be substituted)? <code>h ▸ x</code> seems a lot simpler than <code>cast (by rw [h]) x</code></p>",
        "id": 439436084,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716122946
    },
    {
        "content": "<p>Not that I know of. Again, it makes a difference for proofs about the resulting object but lake doesn't do any such proofs so it doesn't matter</p>",
        "id": 439436434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716123263
    },
    {
        "content": "<p>cast works better with simp, as I understand it. But that might not be relevant in your case</p>",
        "id": 439436451,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716123286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> , I copied the definition of MonadStore1 into <code>MonadStore1Of</code>. <code>MonadStore1</code> has <code>α</code> as an outParam, and it exports the <code>fetch?</code> function, <code>MonadStore1Of</code> has <code>α</code> as a semiOutParam and it exports <code>store</code> and is used in <code>fetchOrCreate</code>. This follows the design of <code>get</code> being the only thing exported from <code>MonadState</code>. This is because we only care about the outParam being synthesized when it can't be synthesized by normal type inference, such as in <code>get</code>. (So in the current situation, <code>MonadStore1</code> isn't used anywhere because <code>fetch?</code> isn't used anywhere)</p>",
        "id": 439468490,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716154543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> <code>fetchOrCreate</code> uses <code>fetch?</code> (and <code>store</code> as you mentioned)</p>",
        "id": 439471272,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716157592
    },
    {
        "content": "<p>Sorry you're right, I was thinking of <code>fetchOrCreate</code> as being sort of part of the definition. <code>fetch?</code> is not used anywhere else.</p>",
        "id": 439471367,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716157696
    },
    {
        "content": "<p>Correct, and <code>fetchOrCreate</code> uses the <code>outParam</code> type class to help infer <code>α</code>.</p>",
        "id": 439471516,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716157814
    },
    {
        "content": "<p>Relatedly, <code>fetchOrCreate</code> is a good example of a place where you somtimes want help inferring the result and a place were you sometimes already know it. Depending on the use case you either want an <code>outParam</code> or <code> semiOutParam</code>, which is sadly not possible in the current inference setup (just like with <code>get</code>).</p>",
        "id": 439471656,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716157983
    },
    {
        "content": "<p>I thought the <code>outParam</code> is not so useful there because it can be inferred from either the output type or the argument</p>",
        "id": 439471675,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158018
    },
    {
        "content": "<p>It can be, assuming it is not a metavariable already in both of those cases.</p>",
        "id": 439471734,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716158057
    },
    {
        "content": "<p>In the case of <code>get</code>, your code can look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and you want to know the type of <code>s</code> before looking at the stuff below it.</p>",
        "id": 439471772,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158133
    },
    {
        "content": "<p>But with <code>fetchOrCreate</code>, I don't see a scenario where it is really something you want. That is assuming that you write out the type of your function, which is always good to do.</p>",
        "id": 439471859,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158252
    },
    {
        "content": "<p>Similarly, with <code>fetchOrCreate</code> your code could look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">fetchOrCreate</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>In which case you want <code>fetchOrCreate</code> to determine what the type <code>fromJson?</code> should return.</p>",
        "id": 439471920,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716158292
    },
    {
        "content": "<p>Hmm, the same problem appears in <code>set</code>, which also uses a <code>semiOutParam</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 439471985,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158388
    },
    {
        "content": "<p>Yeah, it does.</p>",
        "id": 439472041,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716158406
    },
    {
        "content": "<p>So in an ideal world, for <code>set</code>/<code>fetchOrCreate</code>, Lean would attempt type class synthesis with either an <code>outParam</code> or a <code>semiOutParam</code> and return the result of which ever one works?</p>",
        "id": 439472187,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158576
    },
    {
        "content": "<p>I think, ideally, <code>outParam</code> (or some variant) would work like <code>outParam</code> in the presence of metavariables but like <code>semiOutParam</code> when the type is know. I think that would fix problem. However, I am not the authority on type class synthesis within the team, so such a change/addition would likely need to go through an RFC process.</p>",
        "id": 439472354,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716158766
    },
    {
        "content": "<p>In the meantime, I think you are right, that according to standards of the Lean core, <code>fetchOrCreate</code> should use the <code>semiOutParam</code> variant of the class.</p>",
        "id": 439472368,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716158804
    },
    {
        "content": "<p>In the current situation, type class synthesis isn't allowed to instantiate any metavariables that appear in the query, except for arguments that are <code>outParam</code>s. But for <code>outParam</code>s it goes quite far, namely ignoring completely what was there originally. We need a mix: allowing to instantiate metavariables in the outParam without ignoring what was already there.</p>",
        "id": 439472458,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158891
    },
    {
        "content": "<p>So I agree with your point</p>",
        "id": 439472488,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716158956
    },
    {
        "content": "<p>It gets trickier when there are shared metavariables between the different arguments, like the goal <code>MonadState ?s (StateT ?s ?m)</code>. In that case the <code>?s</code> should \"not count\" as a metavariable because it appears in the other argument.</p>",
        "id": 439472692,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716159159
    },
    {
        "content": "<p>Although even the current system doesn't work well with that: I think that <code>MonadState ?s (StateT Nat (StateT ?s ?m))</code> will instantiate <code>?s := Nat</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 439472907,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716159406
    },
    {
        "content": "<p>Maybe the notions of <code>outParam</code> and <code>semiOutParam</code> could even be unified with this mix that has the best of both worlds.<br>\nIf so, then that would also be helpful for new people confused about the difference.</p>",
        "id": 439473455,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716159898
    },
    {
        "content": "<p>I've made an issue on the topic of merging <code>outParam</code> and <code>semiOutParam</code>: <a href=\"https://github.com/leanprover/lean4/pull/4225\">lean4#4225</a></p>",
        "id": 439484637,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716171496
    },
    {
        "content": "<p>After fixing the metavariable assignment bug and the <code>MonadStore</code> instance, here (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13079\">#13079</a>) is the first result of the effect of caching intermediate type class results. Type class synthesis decreased by 8%, and Mathlib as a whole by 3%.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Benchmark</span>                                                          <span class=\"n\">Metric</span>                <span class=\"n\">Change</span>\n  <span class=\"bp\">===============================================================================================</span>\n<span class=\"bp\">+</span> <span class=\"n\">build</span>                                                              <span class=\"n\">typeclass</span> <span class=\"n\">inference</span>    <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Algebra.NonUnitalSubalgebra</span>                       <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Algebra.Unitization</span>                               <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.BigOperators.Finsupp</span>                              <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Lie.Weights.Killing</span>                               <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Module.LinearMap.Basic</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Module.LocalizedModule</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Ring.CentroidHom</span>                                  <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Star.NonUnitalSubalgebra</span>                          <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.TrivSqZeroExt</span>                                     <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Analytic.Basic</span>                                   <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Basic</span>                          <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Defs</span>                           <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Mul</span>                               <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Mul</span>                              <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Symmetric</span>                        <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Calculus.Implicit</span>                                <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Convex.Function</span>                                  <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Convolution</span>                                      <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Fourier.FourierTransformDeriv</span>                    <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>                          <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.InnerProductSpace.OfNorm</span>                         <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.InnerProductSpace.Projection</span>                     <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.Banach</span>                               <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.Multilinear.Basic</span>                    <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.Multilinear.Curry</span>                    <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.OperatorNorm.Basic</span>                   <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear</span>                <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.Star.Multiplier</span>                      <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.TrivSqZeroExt</span>                        <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.NormedSpace.lpSpace</span>                              <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.Seminorm</span>                                         <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Deriv</span>                       <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.CategoryTheory.Bicategory.Adjunction</span>                      <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.CategoryTheory.Monoidal.Braided.Basic</span>                     <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.CategoryTheory.Monoidal.Rigid.Basic</span>                       <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Data.Num.Lemmas</span>                                           <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Geometry.Manifold.ContMDiff.NormedSpace</span>                   <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.GroupTheory.MonoidLocalization</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.BilinearMap</span>                                 <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>                      <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.Matrix.ToLin</span>                                <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Basic</span>                         <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Tower</span>                         <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.MeasureTheory.Group.FundamentalDomain</span>                     <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.MeasureTheory.Integral.SetToL1</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar</span>                     <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.NumberTheory.RamificationInertia</span>                          <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.IsTensorProduct</span>                                <span class=\"n\">instructions</span>          <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.Kaehler</span>                                        <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.Localization.Basic</span>                             <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.TensorProduct.Basic</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Topology.Algebra.Module.Basic</span>                             <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Topology.ContinuousFunction.NonUnitalFunctionalCalculus</span>   <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 439810000,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716295899
    },
    {
        "content": "<p>There are a few files that got slower:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  Mathlib.CategoryTheory.Category.Cat.Limit:           +5.0626 * 10⁹ (+5.09%)\n  Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory:\n                                                       +3.5426 * 10⁹ (+1.48%)\n  Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated:\n                                                       +2.9497 * 10⁹ (+1.13%)\n  Mathlib.CategoryTheory.Monad.Basic:                  +2.4588 * 10⁹ (+4.72%)\n  Mathlib.Geometry.RingedSpace.PresheafedSpace.Gluing:\n                                                       +2.0459 * 10⁹ (+0.492%)\n  Mathlib.CategoryTheory.Limits.Final:                 +1.4472 * 10⁹ (+1.07%)\n  Mathlib.Algebra.Homology.HomotopyCategory.Triangulated:\n                                                       +1.3580 * 10⁹ (+0.692%)\n  Mathlib.CategoryTheory.Preadditive.EilenbergMoore:   +1.3519 * 10⁹ (+0.570%)\n  Mathlib.CategoryTheory.Monoidal.Discrete:            +1.2469 * 10⁹ (+1.11%)\n  Mathlib.CategoryTheory.Bicategory.Kan.Adjunction:    +1.2169 * 10⁹ (+1.78%)\n  Mathlib.CategoryTheory.Monoidal.Mon_:                +1.1204 * 10⁹ (+0.644%)\n</code></pre></div>\n<p>but <em>many more</em> that got faster.</p>\n<p>The fikles above are in <code>CategoryTheory</code> (and in <code>Algebra.Homology</code>), however the two files that gained the most are also in <code>CategoryTheory</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 439811122,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716296256
    },
    {
        "content": "<p>Out of curiosity, what if you cache only those instances containing <code>Expr</code> meta-variables and disregard <code>Level</code> meta-variables?</p>",
        "id": 439820263,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716298870
    },
    {
        "content": "<p>Compared to regular type class search, instead of immediately returning when a solution is found, my implementation continues to construct instances to other goals by propagating solutions that are already available. This adds a small cost to the search, which I suspect is what causes the slow-down it those few files. A better design might be to store partial solutions, so storing which instances have been tried so far and what the results, if any, are so far.</p>",
        "id": 439823602,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716299682
    },
    {
        "content": "<p>Another improvement would be to keep cache between different theorems/definitions. This cache could be cleared whenever a new instance is added to the environment, but is kept otherwise. I suspect that this could also make a significant improvement in efficiency.</p>",
        "id": 439824306,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716299842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439820263\">said</a>:</p>\n<blockquote>\n<p>What if you cache only those instances containing <code>Expr</code> meta-variables and disregard <code>Level</code> meta-variables?</p>\n</blockquote>\n<p>What do you mean? Currently there is no global cache for goals with assignable metavariables (but this is cached within a single type class search)</p>",
        "id": 439824830,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716299961
    },
    {
        "content": "<p>But this could be improved upon by unifying the local and global cache into one cache.</p>",
        "id": 439827539,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716300720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> how do you find the files that got slower?</p>",
        "id": 439827825,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716300815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439824306\">said</a>:</p>\n<blockquote>\n<p>Another improvement would be to keep cache between different theorems/definitions. This cache could be cleared whenever a new instance is added to the environment, but is kept otherwise. I suspect that this could also make a significant improvement in efficiency.</p>\n</blockquote>\n<p>This sounds nice but one must keep in mind the upcoming work on parallelism inside files that makes everything like this more complicated.</p>",
        "id": 439828038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716300874
    },
    {
        "content": "<p>How would this work with instances? you can't elaborate a theorem if you haven't elaborated the instance defined directly above it.</p>",
        "id": 439828537,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716301046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439827825\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> how do you find the files that got slower?</p>\n</blockquote>\n<p>I have written a shell script that downloads the json file with the relevant information from <code>http://speed.lean-fro.org</code>, filters it to extract files that have their instruction count changed by 10⁹ or more (separately for positive and negative changes), saves the information to a couple of files, and then calls Magma with a program that does the sorting and formatting. (There are certainly shell commands that could do that as well, but I'm conformtable using Magma...)</p>",
        "id": 439828562,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716301057
    },
    {
        "content": "<p><code>significant,bash</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"c1\"># usage: significant commit1 commit2</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># gets the json file for the comparison from http://speed.lean-fro.org/mathlib4</span>\n<span class=\"c1\"># and prints the files / categories with an instruction change of at least 10^9,</span>\n<span class=\"c1\"># first the ones that got slower, then the ones that got faster</span>\n\ncurl<span class=\"w\"> </span>http://speed.lean-fro.org/mathlib4/api/compare/<span class=\"nv\">$1</span>/to/<span class=\"nv\">$2</span>?all_values<span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>temp.json\n\njq<span class=\"w\"> </span><span class=\"s1\">'.differences | .[] | select(.dimension.metric == \"instructions\") |  select(.diff &gt;= 1000000000) | [.dimension.benchmark, .diff, (.reldiff * 100)]'</span><span class=\"w\"> </span>temp.json<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>temp1\njq<span class=\"w\"> </span><span class=\"s1\">'.differences | .[] | select(.dimension.metric == \"instructions\") |  select(.diff &lt;= -1000000000) | [.dimension.benchmark, .diff, (.reldiff * 100)]'</span><span class=\"w\"> </span>temp.json<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>temp2\n\nmagma<span class=\"w\"> </span>-b<span class=\"w\"> </span>~/lean4/significant.magma\n</code></pre></div>\n<p>`significant.magma' :</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>// read in the two files with the data\n// format is\n// [\n//   \"~Mathlib.Analysis.NormedSpace.Star.Matrix\",\n//   1177909609,\n//   0.86267198115728\n// ]\n\nlines1 := Split(Read(\"temp1\"));\nlines2 := Split(Read(\"temp2\"));\n\n// parse into triples &lt;\"file\", diff, reldiff&gt;\nassert IsDivisibleBy(#lines1, 5) and IsDivisibleBy(#lines2, 5);\n\nfor i -&gt; l in lines1 do\n  if l[#l] eq \",\" then Prune(~lines1[i]); end if;\nend for;\nfor i -&gt; l in lines2 do\n  if l[#l] eq \",\" then Prune(~lines2[i]); end if;\nend for;\n\nfunction parse(lseq, i)\n  name := Split(lseq[5*i+2], \" ~\\\"\")[1]; //\"\n  d := StringToInteger(lseq[5*i+3]);\n  rd := eval lseq[5*i+4];\n  return &lt;name, d, rd&gt;;\nend function;\n\nseq1 := [parse(lines1, i) : i in [0..(#lines1 div 5)-1]];\nseq2 := [parse(lines2, i) : i in [0..(#lines2 div 5)-1]];\n\nseq := [e : e in seq1 cat seq2 | e[1,1] ne \"M\"];\nseq1 := [e : e in seq1 | e notin seq];\nseq2 := [e : e in seq2 | e notin seq];\n\n// sort\nSort(~seq1, func&lt;x,y | y[2]-x[2]&gt;);\nSort(~seq2, func&lt;x,y | x[2]-y[2]&gt;);\n\n// print\nprocedure print_entry(e)\n  if #e[1] gt 50 then\n    printf \"  %o:\\n\"*\" \"^55*\"%o%o * 10⁹ (%o%o%%)\\n\", e[1], e[2] gt 0 select \"+\" else \"\",\n           ChangePrecision(e[2]*1e-9, 5), e[3] gt 0 select \"+\" else \"\", ChangePrecision(e[3], 3);\n  else\n    printf \"  %-51o  %o%o * 10⁹ (%o%o%%)\\n\", e[1]*\":\", e[2] gt 0 select \"+\" else \"\",\n           ChangePrecision(e[2]*1e-9, 5), e[3] gt 0 select \"+\" else \"\", ChangePrecision(e[3], 3);\n  end if;\nend procedure;\n\nprintf \"\\n\"*\"=\"^78*\"\\n\";\nprintf \"General information:\\n\";\nfor e in seq do\n  print_entry(e);\nend for;\nprintf \"\\nFiles that got slower:\\n\";\nfor e in seq1 do\n  print_entry(e);\nend for;\nprintf \"\\nFiles that got faster:\\n\";\nfor e in seq2 do\n  print_entry(e);\nend for;\nprintf \"=\"^78*\"\\n\";\n\nquit;\n</code></pre></div>",
        "id": 439828793,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716301129
    },
    {
        "content": "<p>The commits can be extracted from the link URL that gets posted by the bot (the parts left and right of <code>/to/</code>).</p>",
        "id": 439828975,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716301194
    },
    {
        "content": "<p>Can you run the same check on instances that you did at the start of this thread? Then we could see what instances are affected most by this change.</p>",
        "id": 439829086,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716301219
    },
    {
        "content": "<p>Maybe later today.</p>",
        "id": 439829236,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716301269
    },
    {
        "content": "<p>Jovan, this is a complicated story, but it worked in Lean 3. I am sure Leo and Sebastian want to make it even better in Lean 4 but this is complicated so it was postponed when developing Lean 4.</p>",
        "id": 439829243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716301271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439824830\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439820263\">said</a>:</p>\n<blockquote>\n<p>What if you cache only those instances containing <code>Expr</code> meta-variables and disregard <code>Level</code> meta-variables?</p>\n</blockquote>\n<p>What do you mean? Currently there is no global cache for goals with assignable metavariables (but this is cached within a single type class search)</p>\n</blockquote>\n<p>Hmm. Disregard. This is probably not a good idea for anything global.</p>",
        "id": 439829448,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716301327
    },
    {
        "content": "<p>I didn't actually mean global, I meant in-declaration, which is more global than the local cache within a single call to <code>synthInstance</code>.</p>",
        "id": 439833982,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716302714
    },
    {
        "content": "<p>Though a more global cache (if feasible) could have an even more pronounced effect, as usually there are many similar instance searches in a given file.</p>",
        "id": 439834332,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716302811
    },
    {
        "content": "<p>Yes, I think this could be done with something like an environment extension. A detail here is that the current \"global\" cache is stored in a persistent hash map inside the state of <code>MetaM</code>, meaning that it can be reverted. I don't know why you'd want to do this, but the reverting won't happen if you have an environment extension with a regular hashmap.</p>",
        "id": 439836174,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716303305
    },
    {
        "content": "<p>The risk here is that when using the <code>MonadBacktrack</code> instance of <code>MetaM</code> or <code>TacticM</code> to reset the state, the name generator gets reset, meaning that you'll get new meta/free variables with names that had already appeared, and this invalidates the cache.</p>\n<p>So maybe in the more global cache, we'd want to not store anything with meta/free variables.</p>",
        "id": 439838054,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716303760
    },
    {
        "content": "<p>Moving things from the temporary cache to permanent cache used in unification if they only have level metavariables (instead of the status quo where they either level or expr metavariables) suprisingly</p>\n<ul>\n<li>didn't break anything </li>\n<li>sped up mathlib mildly </li>\n</ul>\n<p>This is just want I was thinking of, see <a href=\"#narrow/stream/270676-lean4/topic/universe.20issues/near/438023843\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20issues/near/438023843</a></p>",
        "id": 439846613,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716306201
    },
    {
        "content": "<p>Looking at the <code>isDefEq</code> cache, none of it is cached in between independent <code>isDefEq</code> calls, as <code>isDefEq</code> clears both the transient and permanent cache at the start. There is a TODO there to figure out why keeping the permanent cache  doesn't work. So not very permanent...</p>",
        "id": 439853043,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716308127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439838054\">said</a>:</p>\n<blockquote>\n<p>The risk here is that when using the <code>MonadBacktrack</code> instance of <code>MetaM</code> or <code>TacticM</code> to reset the state, the name generator gets reset, meaning that you'll get new meta/free variables with names that had already appeared, and this invalidates the cache.</p>\n</blockquote>\n<p>The name generator does not get reset by backtracking. See <a href=\"https://github.com/leanprover/lean4/blob/82401938cfe99f4a12195aa18a076b27399e20ae/src/Lean/CoreM.lean#L205\">this function</a>, which is used in the  <code>MonadBacktrack</code> instance for <code>MetaM</code>.</p>\n<p>However, local instances might be a problem for any global caching strategy.</p>",
        "id": 439854299,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716308564
    },
    {
        "content": "<p>Local instances are already part of the lookup key for instance caching, so this is already being dealt with.</p>",
        "id": 439854846,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716308744
    },
    {
        "content": "<p>So in that case, why do we use persistent data structures for caching? And how big is the performance difference between <code>HashMap</code> and <code>PersistentHashMap</code>?</p>",
        "id": 439855405,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716308947
    },
    {
        "content": "<p>Another question I have is whether the speed from the benchmarking is the only metric we should try to improve, or whether maybe excessive memory usage during caching might be problematic somehow?</p>",
        "id": 439855981,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716309147
    },
    {
        "content": "<p>I ran a second benchmark, after removing a line of code. The total of build instructions decreased by 0,006 %, but the build time is 1% faster. Is it true that build time has a much higher standard deviation than build instructions? And is the build instructions count deterministic?</p>",
        "id": 439857434,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716309632
    },
    {
        "content": "<p>The build time can vary +-3% in my experience</p>",
        "id": 439857571,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716309681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439855405\">said</a>:</p>\n<blockquote>\n<p>So in that case, why do we use persistent data structures for caching? And how big is the performance difference between <code>HashMap</code> and <code>PersistentHashMap</code>?</p>\n</blockquote>\n<p>The <code>MonadBacktrack</code> functionality is also used for snapshots, made by the server after every declaration(?). If the cache should be part of these snapshots, it needs to be a persistent data structure (but I don't know whether it should).</p>",
        "id": 439859581,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716310269
    },
    {
        "content": "<p>I would expect the performance difference between persistent and non-persistent hash maps to be fairly big in a microbenchmark. But Sebastian once told me that operations on these hash maps basically don't show up during profiling, so apparently they're not relevant in the grand scheme of things.</p>",
        "id": 439859829,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716310360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/439829086\">said</a>:</p>\n<blockquote>\n<p>Can you run the same check on instances that you did at the start of this thread? Then we could see what instances are affected most by this change.</p>\n</blockquote>\n<p>Here are the results of building <code>Mathlib</code> with <code>set_option profiler true</code> on <code>lean-pr-testing-4152</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>total time for typeclass inference: 16428.3 seconds  (33.06%)\ntotal time for simp: 7605.18 seconds  (15.30%)\ntotal time for interpretation: 5244.79 seconds  (10.55%)\ntotal time for elaboration: 4975.45 seconds  (10.01%)\ntotal time for tactic execution: 4682.08 seconds  (9.422%)\ntotal time for import: 4206.50 seconds  (8.465%)\ntotal time for type checking: 2280.80 seconds  (4.590%)\ntotal time for compilation: 1927.37 seconds  (3.879%)\ntotal time for aesop: 533.690 seconds  (1.074%)\ntotal time for dsimp: 436.107 seconds  (0.8776%)\ntotal time for linting: 399.036 seconds  (0.8030%)\ntotal time for .olean serialization: 353.838 seconds  (0.7120%)\ntotal time for initialization: 273.796 seconds  (0.5510%)\ntotal time for parsing: 166.096 seconds  (0.3343%)\ntotal time for attribute application: 71.3646 seconds  (0.1436%)\ntotal time for ring: 52.2042 seconds  (0.1051%)\ntotal time for norm_num: 40.1689 seconds  (0.08083%)\ntotal time for C code generation: 15.2958 seconds  (0.03078%)\n</code></pre></div>\n<p>Note that the percentage for typeclass inference is down by 3.5 points.</p>\n<p>The top twenty typeclass searches:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>proportion for typeclass inference of Module (&gt; 0.1s): 7.75307%\nproportion for typeclass inference of Nonempty (&gt; 0.1s): 7.06358%\nproportion for typeclass inference of Algebra (&gt; 0.1s): 6.11472%\nproportion for typeclass inference of AddMonoidHomClass (&gt; 0.1s): 4.81564%\nproportion for typeclass inference of HSMul (&gt; 0.1s): 4.25272%\nproportion for typeclass inference of CoeT (&gt; 0.1s): 4.08880%\nproportion for typeclass inference of CoeFun (&gt; 0.1s): 3.97967%\nproportion for typeclass inference of ZeroHomClass (&gt; 0.1s): 3.54000%\nproportion for typeclass inference of SMul (&gt; 0.1s): 3.27658%\nproportion for typeclass inference of ContinuousConstSMul (&gt; 0.1s): 3.01271%\nproportion for typeclass inference of AddHomClass (&gt; 0.1s): 2.79991%\nproportion for typeclass inference of AddCommMonoid (&gt; 0.1s): 2.57972%\nproportion for typeclass inference of CovariantClass (&gt; 0.1s): 2.29647%\nproportion for typeclass inference of MulHomClass (&gt; 0.1s): 2.03958%\nproportion for typeclass inference of FiniteDimensional (&gt; 0.1s): 1.99274%\nproportion for typeclass inference of HasOrthogonalProjection (&gt; 0.1s): 1.63697%\nproportion for typeclass inference of CategoryTheory.Limits.HasColimit (&gt; 0.1s): 1.56189%\nproportion for typeclass inference of NormedSpace (&gt; 0.1s): 1.48793%\nproportion for typeclass inference of Fintype (&gt; 0.1s): 1.36851%\nproportion for typeclass inference of IsScalarTower (&gt; 0.1s): 1.30739%\n</code></pre></div>\n<p>Note that I have a faster machine now, so the 100ms threshold cuts off more (the proportion of typeclass searches over 100ms is 11.94% in this run).</p>\n<p><code>Subsingleton</code> is down to position 50. The top part is still dominated by algebra (and <code>CoeT</code>/<code>CoeFun</code>), with <code>SMul</code> related stuff still fairly prominent. (This should get better once Yaël gets to refactoring the algebra and order hierarchies). <code>Nonempty</code> is also very high up; this might be a target for closer inspection.</p>",
        "id": 440063003,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716374329
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9252\">#9252</a> needs a hack to find instances, which might also be related to the metavariable assignment bug.</p>",
        "id": 440183589,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716411970
    },
    {
        "content": "<p>What's the hack?</p>",
        "id": 440192186,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716415448
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/9252/commits/3d60bc9f316da42f6d6cbf27a8e5908541eef330\">https://github.com/leanprover-community/mathlib4/pull/9252/commits/3d60bc9f316da42f6d6cbf27a8e5908541eef330</a>.</p>",
        "id": 440315877,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716468698
    },
    {
        "content": "<p>Build failed without it.</p>",
        "id": 440316133,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716468766
    },
    {
        "content": "<p>Could we make Lean4 not check the instance parameter during TC search (do something like <a href=\"https://github.com/negiizhao/lean4/pull/7/files\">https://github.com/negiizhao/lean4/pull/7/files</a>)? It doesn't seem to accelerate much overall, but it can accelerate some specific instances. See <a href=\"#narrow/stream/287929-mathlib4/topic/TC.20slowness\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/TC.20slowness</a></p>",
        "id": 440367510,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716485053
    },
    {
        "content": "<p>I'm looking at the failure, and am a bit confused: without the hack, the instance search returns no instance. With the hack, the instance search errors. But I don't understand why this causes the thing to fail...</p>",
        "id": 440368372,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716485388
    },
    {
        "content": "<p>I don't understand what you mean</p>",
        "id": 440368903,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716485618
    },
    {
        "content": "<p>Look at this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b3</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b4</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b5</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b6</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">b7</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"c1\">-- (deterministic) timeout at `typeclass`</span>\n</code></pre></div>\n<p>Lean4 treats <code>@B 0 a1 ...</code> and <code>@B 0 a2 ...</code> as different instances, but we need to make sure that different instances parameters we found are defeq, so there are actually some redundant attempts here. Mathlib also builds successfully in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12810\">#12810</a> (the diff is broken now).</p>",
        "id": 440371144,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716486631
    },
    {
        "content": "<p>Does this explain the failure that you solved with the hack?</p>",
        "id": 440371569,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716486812
    },
    {
        "content": "<p>No, I believe this should be an unrelated topic. (But they were both found while resolving the failure of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6326\">#6326</a> IIRC.)</p>",
        "id": 440372497,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716487223
    },
    {
        "content": "<p>In <a href=\"https://github.com/negiizhao/lean4/pull/7/files\">https://github.com/negiizhao/lean4/pull/7/files</a>, this solution is only safe under the assumption that different instances of the same type are always <code>isDefEq</code>, but that isn't necessarily a safe assumption. Although I think this assumption is supposed to hold in Mathlib</p>",
        "id": 440377768,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716489485
    },
    {
        "content": "<p>I've found out what causes the mysterious failure, and why the hack helps. This is the failing theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inv_le_one_of_one_le</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">inv_le_one'</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n</code></pre></div>\n<p>The code that throws the error does this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">trySynthInstance</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">undef</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"c1\">-- we will try later</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"failed to synthesize{indentExpr type}</span><span class=\"se\">\\n</span><span class=\"s2\">{useDiagnosticMsg}\"</span>\n</code></pre></div>\n<p>So the problem is that we want <code>trySynthInstance</code> to return <code>.undef</code> instead of <code>.none</code>. <code>.undef</code> is returned when a read-only metavariable (such as a type class variables) tries to be instantiated during unification. During the type class search, the only instance that is found is <code>OrderedCommMonoid.toCovariantClassLeft</code>, which has a multiplication operation derived from a <code>OrderedCommMonoid</code> instance. But the multiplication in <code>inv_le_one'</code> is derived from a <code>Group</code> instance. So unification isn't able to relate the <code>Group</code> and <code>OrderedCommMonoid</code> instance. Therefore, synthesis returns <code>.none</code>, implying that no instance will ever be applicable. But by hacking in another instance that causes type class search to return <code>.undef</code>, we try synthesizing again later when the metavariables are instantiated. And at that point we know that our type has a <code>OrderedCommGroup</code> instance.</p>",
        "id": 440390218,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716494662
    },
    {
        "content": "<p>While figuring this out, I noticed that there were many identical type class searches to <code>Group ?m</code> for a fixed metavariable <code>?m</code>. It turns out that <code>.undef</code> results of type class search are not cached. I think that this is another point in which efficiency can be improved.</p>",
        "id": 440390564,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716494817
    },
    {
        "content": "<p>Can someone explain the reason for having <code>OrderedCommMonoid</code> be a class instead of <code>CommMonoid</code> and <code>Ordered</code> being separate type classes? Because that is what is causing the problem here.</p>",
        "id": 440392788,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716495749
    },
    {
        "content": "<p>Simplicity. But I'll try making the algebra and order hierarchies more separate at some point this summer</p>",
        "id": 440393490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716496037
    },
    {
        "content": "<p>Surely an OrderedCommMonoid is not just a CommMonoid with an order? There'll be some axiom relating the structures, right? So you'll need OrderedCommMonoid somehow right?</p>",
        "id": 440398011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716498110
    },
    {
        "content": "<p>Oh you could have <code>IsOrderedCommMonoid</code> I guess</p>",
        "id": 440398120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716498140
    },
    {
        "content": "<p>I think Yaël's idea is to have data-carrying typeclasses for algebra and for order and then mix-ins for the compatibilities.</p>",
        "id": 440398160,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716498156
    },
    {
        "content": "<p>Will that solve the problem <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> is flagging?</p>",
        "id": 440398378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716498247
    },
    {
        "content": "<p>By the way, my understanding is that <code>Group ?m</code> should fail instantly because it's obviously a bad idea.</p>",
        "id": 440398566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716498320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440398378\">said</a>:</p>\n<blockquote>\n<p>Will that solve the problem <span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> is flagging?</p>\n</blockquote>\n<p>I wanted to say yes, but it turns out no: <code>CommMonoid</code> and <code>Group</code> are still not well-related in the hierarchy <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 440399205,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716498622
    },
    {
        "content": "<p>So it's the lack of separation of algebra and order hierarchies itself prevents attempts to separate them...</p>",
        "id": 440399698,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716498847
    },
    {
        "content": "<p>There are two ways to get from CommGroup to Monoid and all four of the vertices of the square are useful mathematical things...</p>",
        "id": 440401397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716499562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440377768\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/negiizhao/lean4/pull/7/files\">https://github.com/negiizhao/lean4/pull/7/files</a>, this solution is only safe under the assumption that different instances of the same type are always <code>isDefEq</code>, but that isn't necessarily a safe assumption. Although I think this assumption is supposed to hold in Mathlib</p>\n</blockquote>\n<p>I'm still wondering if we can just believe they are defeq. Even if we do not use <code>CovariantClass</code> there are still some duplicate attempts. Although after a couple fixes to the TC search it probably will not stop us from separating algebra and order hierarchies anymore...</p>",
        "id": 440403218,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716500417
    },
    {
        "content": "<p>Not necessarily using the method in <a href=\"https://github.com/negiizhao/lean4/pull/7/files\">https://github.com/negiizhao/lean4/pull/7/files</a>, that was just a test.</p>",
        "id": 440403680,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716500679
    },
    {
        "content": "<p>If you want to get type class search to not duplicate its search on <code>isDefEq</code> instances of the same type, then for the lookup table you'll have to do some trick like replacing all instance arguments with free variables, and after each lookup use <code>isDefEq</code> to check that these instances are indeed isDefEq. I'm not sure that doing this will improve overall efficiency because of the cost of modifying the lookup key.</p>",
        "id": 440408098,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716503068
    },
    {
        "content": "<p>I was trying to minimize the failure to a small example, and I discovered that replacing  <code>inv_le_one'.mpr</code> by <code>Iff.mpr inv_le_one'</code> solves the problem. So this failure only occurs when the expected type is not propagated correctly. So maybe it is more of an elaboration problem instead?</p>",
        "id": 440411133,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716504973
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">AA</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">asNum</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">AB</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kd\">extends</span><span class=\"w\"> </span><span class=\"n\">AA</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">BA</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kd\">extends</span><span class=\"w\"> </span><span class=\"n\">AA</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">BB</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kd\">extends</span><span class=\"w\"> </span><span class=\"n\">AB</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">BA</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AB</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">AA.asNum</span><span class=\"w\"> </span><span class=\"n\">where</span>\n\n<span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">X_rfl</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BA</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">AA.asNum</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AA.p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">AA.p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Iff.rfl</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  X ?m.234 AA.asNum</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">BB</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AA.p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">AA.p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">X_rfl.mpr</span>\n</code></pre></div>\n<p>I don't know much about how expected types are passed around, but maybe this can be an easy fix?</p>",
        "id": 440412573,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716505839
    },
    {
        "content": "<p>On the topic of caching <code>.undef</code> results of TC, yes these are supposed to fail quickly, but seeing this trace, I still think a noticeable amount of time could be saved:</p>\n<p>Edit: This turns out to not be valid to cache, because metavariable instantiations in the types of local instances can change in the meantime, which may make a previously <code>.undef</code> result now be successful or failing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mf\">0.030101</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">CovariantClass</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000033</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">CovariantClass</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.030044</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toCovariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CovariantClass</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.030005</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">CovariantClass</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span>\n<span class=\"w\">          </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">≟</span><span class=\"w\"> </span><span class=\"n\">CovariantClass</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96757</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96757</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000175</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000387</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000167</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000337</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000171</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000367</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000211</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000410</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000150</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000348</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000181</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000437</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000156</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000410</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000136</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000336</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000144</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000337</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000144</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000331</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000144</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000341</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000177</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000340</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000158</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000347</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000143</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000339</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000142</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000319</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000157</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000391</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000173</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000371</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000155</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000365</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000158</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000357</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000149</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000528</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000169</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000376</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000159</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000385</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000158</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000377</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000155</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000358</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000149</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.000356</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">💥</span><span class=\"w\"> </span><span class=\"n\">OrderedCommMonoid</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">96723</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 440412648,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716505899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440377768\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/negiizhao/lean4/pull/7/files\">https://github.com/negiizhao/lean4/pull/7/files</a>, this solution is only safe under the assumption that different instances of the same type are always <code>isDefEq</code>, but that isn't necessarily a safe assumption. Although I think this assumption is supposed to hold in Mathlib</p>\n</blockquote>\n<p>Isn't this the same assumption as <a href=\"https://github.com/leanprover/lean4/pull/4003\">lean4#4003</a>?</p>",
        "id": 440416058,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716508433
    },
    {
        "content": "<p>Hmm, that's true</p>",
        "id": 440416308,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716508647
    },
    {
        "content": "<p>Actually, isn't it the case for <code>SMul Nat Nat</code> and <code>SMul Nat M</code> for an additive monoid <code>M</code> that the instances are definitionally not equal if you substitute <code>Nat</code> for <code>M</code>?</p>\n<p>For this example <del>I think <a href=\"https://github.com/leanprover/lean4/pull/4003\">lean4#4003</a> will not cause problems</del> could cause problems here, and with your change this could also result in a failed type class search in the wrong circumstances.</p>",
        "id": 440418625,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716510511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> mathlib should have only one <code>SMul Nat Nat</code> up to defeq. That is why our definition of <code>AddCommMonoid</code> comes with an <code>nsmul</code> field.</p>",
        "id": 440430245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716519762
    },
    {
        "content": "<p>Ah, I see, and the same for <code>zsmul</code> as a field of <code>SubNegMonoid</code>.</p>",
        "id": 440513707,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716558638
    },
    {
        "content": "<p>Don't forget <code>nnqsmul</code> and <code>qsmul</code> in <code>Field</code> :-)</p>",
        "id": 440517045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716559638
    },
    {
        "content": "<p>I've made more progress on speeding up type-class search for Mathlib.</p>\n<ul>\n<li>I made a big oversight when implementing the caching of intermediate type class results: I only stored positive results. Caching intermediate failures is also useful. This is a bit more complicated than it seems at first, because of the loop-detection: a search branch can \"fail\" due to a detected loop, but that doesn't mean that there will not eventually be an instance found for it. So I keep a <code>noLoops : Bool</code> in the state and only cache failures when <code>noLoops := true</code>. In the first version I just set <code>noLoops</code> to false whenever the search tree becomes a non-tree. This gave another speedup of around 8% to type class search in mathlib. I then replaced this with a more sophisticated algorithm that can tell apart a diamond from a loop, so that negative caching can happen even more often, but the speedup from this was relatively neglegible. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/13191\">#13191</a> and see below.</li>\n<li>The recent optimization of canonical instances is only applied when the subgoal doesn't have metavariables. But I believe that it should also apply when the subgoal has level metavariables. This gives a marginal overall speedup of 0.011% (I think that is statistically significant) <a href=\"https://github.com/leanprover-community/mathlib4/pull/13194\">#13194</a>.</li>\n<li>The implementation of the TC algorithm truns out to be a bit sloppy, so by cleaning it up, I managed to get another speedup: mathlib overall becomes 0.8% faster (so ~2.8% speedup for TC resolution) (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13207\">#13207</a>). This includes things like deduplicating a computation that is done twice, and making sure that computations meant for trace messages are only executed when the trace option is set to true. This performance improvement is orthogonal to the other one.</li>\n</ul>\n<p>This is the benchmark for the improved intermediate TC result caching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Benchmark</span><span class=\"w\">                                                                   </span><span class=\"n\">Metric</span><span class=\"w\">                </span><span class=\"n\">Change</span>\n<span class=\"w\">  </span><span class=\"bp\">========================================================================================================</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">                                                                       </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">5.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">                                                                       </span><span class=\"n\">task</span><span class=\"bp\">-</span><span class=\"n\">clock</span><span class=\"w\">             </span><span class=\"bp\">-</span><span class=\"mf\">5.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">                                                                       </span><span class=\"n\">typeclass</span><span class=\"w\"> </span><span class=\"n\">inference</span><span class=\"w\">   </span><span class=\"bp\">-</span><span class=\"mf\">16.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">lint</span><span class=\"w\">                                                                        </span><span class=\"n\">wall</span><span class=\"bp\">-</span><span class=\"n\">clock</span><span class=\"w\">             </span><span class=\"bp\">-</span><span class=\"mf\">5.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">NonUnitalSubalgebra</span><span class=\"w\">                                </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">14.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Quasispectrum</span><span class=\"w\">                                      </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">16.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Subalgebra</span><span class=\"bp\">.</span><span class=\"n\">Unitization</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">17.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Unitization</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">25.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">Finsupp</span><span class=\"w\">                                       </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">29.5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">ModuleCat</span><span class=\"bp\">.</span><span class=\"n\">ChangeOfRings</span><span class=\"w\">                           </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">6.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Lie</span><span class=\"bp\">.</span><span class=\"n\">Weights</span><span class=\"bp\">.</span><span class=\"n\">Killing</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">12.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                     </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">14.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">LocalizedModule</span><span class=\"w\">                                     </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">12.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">MonoidAlgebra</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">11.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Defs</span><span class=\"w\">                                          </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">17.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">ToIntervalMod</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">18.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Polynomial</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                    </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">16.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">CentroidHom</span><span class=\"w\">                                           </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">14.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Star</span><span class=\"bp\">.</span><span class=\"n\">NonUnitalSubalgebra</span><span class=\"w\">                                   </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">20.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">TrivSqZeroExt</span><span class=\"w\">                                              </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">26.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">.</span><span class=\"n\">Morphisms</span><span class=\"bp\">.</span><span class=\"n\">QuasiSeparated</span><span class=\"w\">                         </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">7.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Analytic</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                            </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Analytic</span><span class=\"bp\">.</span><span class=\"n\">CPolynomial</span><span class=\"w\">                                      </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">11.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Analytic</span><span class=\"bp\">.</span><span class=\"n\">Inverse</span><span class=\"w\">                                          </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">ContDiff</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                   </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">ContDiff</span><span class=\"bp\">.</span><span class=\"n\">Bounds</span><span class=\"w\">                                  </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">7.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">ContDiff</span><span class=\"bp\">.</span><span class=\"n\">Defs</span><span class=\"w\">                                    </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">Deriv</span><span class=\"bp\">.</span><span class=\"n\">Mul</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">13.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Analytic</span><span class=\"w\">                                  </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                     </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Measurable</span><span class=\"w\">                                </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">12.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Mul</span><span class=\"w\">                                       </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Prod</span><span class=\"w\">                                      </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">11.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">FDeriv</span><span class=\"bp\">.</span><span class=\"n\">Symmetric</span><span class=\"w\">                                 </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">24.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">Implicit</span><span class=\"w\">                                         </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">LineDeriv</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                  </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">16.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Calculus</span><span class=\"bp\">.</span><span class=\"n\">Rademacher</span><span class=\"w\">                                       </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">16.8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convex</span><span class=\"bp\">.</span><span class=\"n\">Function</span><span class=\"w\">                                           </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">31.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convex</span><span class=\"bp\">.</span><span class=\"n\">Gauge</span><span class=\"w\">                                              </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convex</span><span class=\"bp\">.</span><span class=\"n\">Jensen</span><span class=\"w\">                                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">19.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convex</span><span class=\"bp\">.</span><span class=\"n\">Mul</span><span class=\"w\">                                                </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convex</span><span class=\"bp\">.</span><span class=\"n\">Segment</span><span class=\"w\">                                            </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">19.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Convolution</span><span class=\"w\">                                               </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Distribution</span><span class=\"bp\">.</span><span class=\"n\">SchwartzSpace</span><span class=\"w\">                                </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">7.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Fourier</span><span class=\"bp\">.</span><span class=\"n\">FourierTransformDeriv</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">InnerProductSpace</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                   </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">8.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">InnerProductSpace</span><span class=\"bp\">.</span><span class=\"n\">OfNorm</span><span class=\"w\">                                  </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">21.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">InnerProductSpace</span><span class=\"bp\">.</span><span class=\"n\">Projection</span><span class=\"w\">                              </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">BallAction</span><span class=\"w\">                                    </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">21.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">Banach</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">BoundedLinearMaps</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">13.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">MStructure</span><span class=\"w\">                                    </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">30.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">Multilinear</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">13.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">Multilinear</span><span class=\"bp\">.</span><span class=\"n\">Curry</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">12.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">OperatorNorm</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                            </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">17.8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">OperatorNorm</span><span class=\"bp\">.</span><span class=\"n\">Bilinear</span><span class=\"w\">                         </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">18.2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">OperatorNorm</span><span class=\"bp\">.</span><span class=\"n\">Prod</span><span class=\"w\">                             </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">14.7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">PiTensorProduct</span><span class=\"bp\">.</span><span class=\"n\">InjectiveSeminorm</span><span class=\"w\">             </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">6.5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">SphereNormEquiv</span><span class=\"w\">                               </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">41.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">Star</span><span class=\"bp\">.</span><span class=\"n\">ContinuousFunctionalCalculus</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"w\">   </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">Star</span><span class=\"bp\">.</span><span class=\"n\">Multiplier</span><span class=\"w\">                               </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">12.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">TrivSqZeroExt</span><span class=\"w\">                                 </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">20.5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">NormedSpace</span><span class=\"bp\">.</span><span class=\"n\">lpSpace</span><span class=\"w\">                                       </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">7.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">Seminorm</span><span class=\"w\">                                                  </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">SpecialFunctions</span><span class=\"bp\">.</span><span class=\"n\">Pow</span><span class=\"bp\">.</span><span class=\"n\">Deriv</span><span class=\"w\">                                </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Bicategory</span><span class=\"bp\">.</span><span class=\"n\">Adjunction</span><span class=\"w\">                               </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">20.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Monoidal</span><span class=\"bp\">.</span><span class=\"n\">Braided</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                              </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">20.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Monoidal</span><span class=\"bp\">.</span><span class=\"n\">Rigid</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Pointwise</span><span class=\"w\">                                              </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">9.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                                                  </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">14.4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Num</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span><span class=\"w\">                                                    </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">Pointwise</span><span class=\"bp\">.</span><span class=\"n\">Interval</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">15.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">FieldTheory</span><span class=\"bp\">.</span><span class=\"n\">KummerExtension</span><span class=\"w\">                                        </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">8.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Euclidean</span><span class=\"bp\">.</span><span class=\"n\">Angle</span><span class=\"bp\">.</span><span class=\"n\">Oriented</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"w\">                            </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 440662684,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716669734
    },
    {
        "content": "<p>Careful! You're gonna get hired by the FRO <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 440665496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716672860
    },
    {
        "content": "<p>I realize now why the more sophisticated loop detection doesn't give any improvement (I made a mistake in it at first but fixing it didn't give an improvement either). The reason is that instead of caching intermediate results globally at the end of a <code>synthInstance?</code> call, this is done immediately. So if there is a diamond, say with instances AA =&gt; AB, AA =&gt; BA, AB =&gt; BB, BA =&gt; BB, and if we get subgoal BB. Then first we find subgoal AB, and then AA. Then AA fails, and this is globally cached, and so AB fails and this is globally cached. Next we find subgoal BA and then AA again. But since we first lookup AA in the global cache, we see that AA has no solutions, and crucially we did not detect that there is a diamond, because of finding AA in the global cache instead of the local cache, keeping <code>noLoops := true</code>.</p>\n<p>So now it only (locally) registers that an entry is done when the entry is not able to be cached globally.</p>",
        "id": 440702506,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716718366
    },
    {
        "content": "<p>By the way, is it possible to install the lean version from a specific commit (i.e. not the most recent one) to a lean4 PR?</p>",
        "id": 440709246,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716725517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479299\">Jovan Gerbscheid</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440709246\">said</a>:</p>\n<blockquote>\n<p>By the way, is it possible to install the lean version from a specific commit (i.e. not the most recent one) to a lean4 PR?</p>\n</blockquote>\n<p>No.</p>",
        "id": 440715848,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716732488
    },
    {
        "content": "<p>(I mean, you can use <code>elan override set</code>, but you can't do this just via <code>lean-toolchain</code>.)</p>",
        "id": 440715878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716732539
    },
    {
        "content": "<p>Just a word of warning here: it's exciting that there are performance improvements here, but reviewing changes to core language features like TC search may not be quick, because it requires very careful review from people with a lot on their plate. The easier you can make PRs to review (thorough tests, good comments, clearly explained motivated in PR descriptions, etc), the better, but even then no promises!</p>",
        "id": 440715995,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716732661
    },
    {
        "content": "<p>Also, please review <a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md</a>. Realistically, we would prefer to see individual issues for each of your bullet points in the current PR description.</p>",
        "id": 440716552,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716733245
    },
    {
        "content": "<p>Ok, I have made an issue for each bullet point. <a href=\"https://github.com/leanprover/lean4/pull/4277\">lean4#4277</a></p>\n<p>I'll add tests to some of these later, but many don't need tests.</p>",
        "id": 440732493,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716749649
    },
    {
        "content": "<p>And I made a bonus issue <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <a href=\"https://github.com/leanprover/lean4/pull/4288\">lean4#4288</a></p>",
        "id": 440733503,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716750843
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4288\">lean4#4288</a> ?</p>",
        "id": 440733814,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716751164
    },
    {
        "content": "<p>Oh, whoops</p>",
        "id": 440733887,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716751221
    },
    {
        "content": "<p>Reading and trying to apply <a href=\"https://github.com/leanprover-community/leanprover-community.io/pull/472\">leanprover-community/leanprover-community.io#472</a>, two follow-up questions occurred to me. I'd be very happy to learn about positive answers to these! Specifically,</p>\n<ul>\n<li>is there a way to match the output of <code>profiler.true</code> with individual lines? Say, when a proof has six <code>simp</code>s, but I get output about three of them being slow, can I easily find out which ones? (I can work around this, e.g. by uncommenting them individually - but less workarounds mean I'm more productive.)</li>\n<li>is there a common way to speed up <code>linting took &lt;a long time&gt;</code>?</li>\n</ul>",
        "id": 442065380,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717342592
    },
    {
        "content": "<p>I'm pretty sure there is no direct way to tell from which line/function a <code>set_option profiler true</code> message is coming from. There is instead <code>set_option trace.profiler true</code>, which does allow you to see which <code>simp</code> corresponds to what trace, but I'm not sure if that is more convenient to use.</p>",
        "id": 442068107,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717344155
    },
    {
        "content": "<p>When I tried that, I got <em>many</em> lines with times close to zero - but I guess setting <code>trace.profiler.threshold</code> would help with that?</p>",
        "id": 442069019,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717344660
    },
    {
        "content": "<p>I think so</p>",
        "id": 442069083,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717344694
    },
    {
        "content": "<p>The default for <code>profiler.threshold</code> is 100ms, whereas for <code>trace.profiler.threshold</code>, it is 10ms.</p>",
        "id": 442070436,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717345353
    },
    {
        "content": "<p>I made a change to the caching in <a href=\"https://github.com/leanprover/lean4/pull/4272\">lean4#4272</a>, so that it doesn't use or modify the cache for classes that contain <code>outParam</code> arguments. This is because <code>outParam</code> are treated differently when they are the main goal vs an intermediate goal: Every <code>outParam</code> argument in the main goal is replaced by a fresh metavariable, that is unified with the original argument after the type class search. This means that if someone came along and added a high priority instance for <code>HAdd Nat Nat Int</code>, then <code>HAdd Nat Nat Nat</code> will fail as a main goal, but <code>HAdd Nat Nat Nat</code> will succeed if it is an intermediate goal. I'm not convinced this is a beneficial state of affairs (see also <a href=\"https://github.com/leanprover/lean4/pull/4225\">lean4#4225</a>), but I think my extra caching shouldn't change this behaviour.</p>\n<p>After this change the total mathlib speedup is 4.6% instead of 5.1%.</p>",
        "id": 442071293,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717345754
    },
    {
        "content": "<p>I'm back to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7873\">#7873</a> and got 10.2% improvement in typeclass inference.</p>",
        "id": 443416816,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717816453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> Thanks so much! Can you please summarize what you still want to do with this PR? (It is labelled <code>WIP</code>.)</p>",
        "id": 443421169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717819710
    },
    {
        "content": "<p>There are mysterious slowdowns in some files. But maybe we can merge it first if we can't find the reason now.</p>",
        "id": 443422890,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717821256
    },
    {
        "content": "<p>Well, I was mostly asking whether you wanted reviews already, or were still planning major work on the PR.</p>",
        "id": 443423018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717821382
    },
    {
        "content": "<p>I agree that it would be good to get a better understanding of the slowdowns.</p>",
        "id": 443423025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717821393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> can you run your interpretation of the speedcenter data on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7873\">#7873</a>? Some files are 100% slower here, it would be good to understand better what that means</p>",
        "id": 443433894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717830375
    },
    {
        "content": "<p>Should Michael's code be added to the PR summary after each <code>!bench</code>?  In particular, should it be automated?</p>",
        "id": 443436537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717831586
    },
    {
        "content": "<p>I've run my script; the output is some 1500 lines. Do you want me to add it as a comment to the PR? Or what would be a good way of making it available?</p>\n<p>The largest changes are:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  lint:                                                +299.52 * 10⁹ (+2.50%)\n  build:                                               -4486.2 * 10⁹ (-3.70%)\n\nFiles that got slower by at least 15*10⁹ instructions:\n  Mathlib.CategoryTheory.Preadditive.EilenbergMoore:   +82.070 * 10⁹ (+34.6%)\n  Mathlib.LinearAlgebra.TensorProduct.Graded.External: +57.056 * 10⁹ (+18.5%)\n  Mathlib.CategoryTheory.Preadditive.EndoFunctor:      +43.177 * 10⁹ (+31.8%)\n  Mathlib.Algebra.Order.Field.Defs:                    +27.138 * 10⁹ (+68.6%)\n  Mathlib.CategoryTheory.Preadditive.SingleObj:        +26.084 * 10⁹ (+143.%)\n  Mathlib.Algebra.Field.Basic:                         +21.982 * 10⁹ (+53.1%)\n  Mathlib.Combinatorics.Schnirelmann:                  +17.875 * 10⁹ (+70.6%)\n  Mathlib.Algebra.Polynomial.BigOperators:             +17.769 * 10⁹ (+33.3%)\n  Mathlib.Geometry.Euclidean.Angle.Oriented.Basic:     +15.993 * 10⁹ (+13.9%)\n\nFiles that got slower by at least 30%:\n  Mathlib.CategoryTheory.Preadditive.SingleObj:                       +143.%\n  Mathlib.Algebra.EuclideanDomain.Instances:                          +100.%\n  Mathlib.Algebra.Field.IsField:                                      +72.4%\n  Mathlib.Combinatorics.Schnirelmann:                                 +70.6%\n  Mathlib.Algebra.Order.Field.Defs:                                   +68.6%\n  Mathlib.Algebra.Order.Sub.Canonical:                                +60.8%\n  Mathlib.Algebra.Field.Basic:                                        +53.1%\n  Mathlib.Algebra.Order.Sub.Defs:                                     +37.2%\n  Mathlib.CategoryTheory.Preadditive.EilenbergMoore:                  +34.6%\n  Mathlib.Algebra.Ring.Equiv:                                         +33.8%\n  Mathlib.Algebra.Polynomial.BigOperators:                            +33.3%\n  Mathlib.Data.ZMod.Defs:                                             +33.2%\n  Mathlib.CategoryTheory.Preadditive.EndoFunctor:                     +31.8%\n  Mathlib.LinearAlgebra.Matrix.Charpoly.Basic:                        +30.2%\n\nFiles that got faster by at least 25*10⁹ instructions:\n  Mathlib.FieldTheory.Adjoin:                          -62.854 * 10⁹ (-22.7%)\n  Mathlib.RingTheory.DedekindDomain.Different:         -59.765 * 10⁹ (-41.8%)\n  Mathlib.RingTheory.IntegralRestrict:                 -55.813 * 10⁹ (-34.8%)\n  Mathlib.NumberTheory.RamificationInertia:            -54.219 * 10⁹ (-17.9%)\n  Mathlib.Algebra.Quaternion:                          -50.853 * 10⁹ (-23.8%)\n  Mathlib.Topology.ContinuousFunction.StoneWeierstrass:\n                                                       -46.435 * 10⁹ (-18.6%)\n  Mathlib.LinearAlgebra.Dual:                          -46.255 * 10⁹ (-12.5%)\n  Mathlib.Geometry.Manifold.ContMDiff.NormedSpace:     -46.023 * 10⁹ (-23.3%)\n  Mathlib.LinearAlgebra.TensorProduct.Graded.Internal: -45.843 * 10⁹ (-17.7%)\n  Mathlib.FieldTheory.SeparableDegree:                 -44.346 * 10⁹ (-22.0%)\n  Mathlib.Analysis.Convolution:                        -44.057 * 10⁹ (-11.7%)\n  Mathlib.RingTheory.Trace:                            -41.745 * 10⁹ (-35.0%)\n  Mathlib.FieldTheory.PurelyInseparable:               -41.482 * 10⁹ (-18.9%)\n  Mathlib.FieldTheory.RatFunc.Basic:                   -41.168 * 10⁹ (-18.5%)\n  Mathlib.RingTheory.FractionalIdeal.Operations:       -39.789 * 10⁹ (-36.9%)\n  Mathlib.NumberTheory.NumberField.Discriminant:       -37.172 * 10⁹ (-17.2%)\n  Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus.Instances:\n                                                       -35.498 * 10⁹ (-11.5%)\n  Mathlib.Algebra.Lie.Weights.RootSystem:              -35.190 * 10⁹ (-18.1%)\n  Mathlib.Algebra.Algebra.Subalgebra.Rank:             -34.750 * 10⁹ (-29.1%)\n  Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots:      -34.711 * 10⁹ (-37.5%)\n  Mathlib.Analysis.Calculus.FDeriv.Mul:                -33.574 * 10⁹ (-7.69%)\n  Mathlib.RingTheory.IntegralClosure:                  -32.421 * 10⁹ (-31.1%)\n  Mathlib.Algebra.Category.AlgebraCat.Monoidal:        -32.371 * 10⁹ (-11.7%)\n  Mathlib.LinearAlgebra.Semisimple:                    -32.216 * 10⁹ (-38.4%)\n  Mathlib.AlgebraicGeometry.EllipticCurve.Affine:      -30.444 * 10⁹ (-17.7%)\n  Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm:\n                                                       -30.417 * 10⁹ (-10.1%)\n  Mathlib.Algebra.Lie.Weights.Killing:                 -29.928 * 10⁹ (-13.0%)\n  Mathlib.Analysis.InnerProductSpace.Adjoint:          -28.446 * 10⁹ (-13.3%)\n  Mathlib.LinearAlgebra.Matrix.ToLin:                  -27.938 * 10⁹ (-18.3%)\n  Mathlib.NumberTheory.NumberField.Embeddings:         -27.892 * 10⁹ (-21.1%)\n  Mathlib.AlgebraicGeometry.EllipticCurve.Group:       -27.225 * 10⁹ (-20.1%)\n  Mathlib.FieldTheory.Normal:                          -27.088 * 10⁹ (-28.5%)\n  Mathlib.Analysis.NormedSpace.lpSpace:                -27.079 * 10⁹ (-10.4%)\n  Mathlib.Topology.ContinuousFunction.UniqueCFC:       -26.821 * 10⁹ (-12.1%)\n  Mathlib.Algebra.Algebra.NonUnitalSubalgebra:         -25.469 * 10⁹ (-17.2%)\n\nFiles that got faster by at leat 30%:\n  Mathlib.RingTheory.DedekindDomain.Different:                        -41.8%\n  Mathlib.RingTheory.Nullstellensatz:                                 -40.8%\n  Mathlib.FieldTheory.MvPolynomial:                                   -40.7%\n  Mathlib.RingTheory.DedekindDomain.IntegralClosure:                  -40.2%\n  Mathlib.LinearAlgebra.Semisimple:                                   -38.4%\n  Mathlib.Algebra.Order.Field.Subfield:                               -38.2%\n  Mathlib.RingTheory.Localization.NormTrace:                          -38.2%\n  Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots:                     -37.5%\n  Mathlib.RingTheory.FractionalIdeal.Operations:                      -36.9%\n  Mathlib.RingTheory.Trace:                                           -35.0%\n  Mathlib.RingTheory.Algebraic:                                       -34.9%\n  Mathlib.RingTheory.IntegralRestrict:                                -34.8%\n  Mathlib.RingTheory.Localization.Away.AdjoinRoot:                    -34.5%\n  Mathlib.RingTheory.LaurentSeries:                                   -34.2%\n  Mathlib.NumberTheory.NumberField.FractionalIdeal:                   -33.0%\n  Mathlib.Algebra.Ring.Subring.Order:                                 -32.3%\n  Mathlib.RingTheory.Unramified.Basic:                                -32.0%\n  Mathlib.RingTheory.Jacobson:                                        -32.0%\n  Mathlib.RingTheory.IntegralClosure:                                 -31.1%\n  Mathlib.RingTheory.Perfection:                                      -31.0%\n  Mathlib.LinearAlgebra.FreeModule.Norm:                              -30.8%\n  Mathlib.RingTheory.Etale.Basic:                                     -30.7%\n  Mathlib.FieldTheory.NormalClosure:                                  -30.4%\n  Mathlib.Algebra.Ring.Subsemiring.Order:                             -30.2%\n  Mathlib.RingTheory.IsAdjoinRoot:                                    -30.1%\n  Mathlib.FieldTheory.PolynomialGaloisGroup:                          -30.0%\n</code></pre></div>",
        "id": 443439679,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717833220
    },
    {
        "content": "<p>It may be necessary to (locally) re-adjust some instance priorities in certain files.</p>\n<p>(I don't think that there is one single \"best\" assignment of priorities; depending on context some instances should have higher priority than others, but which ones these are will not always be the same.)</p>",
        "id": 443447176,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717839893
    },
    {
        "content": "<p>I have posted the detailed output of my script in a comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7873\">#7873</a> (with four expandable subsections).</p>",
        "id": 443447892,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717840581
    },
    {
        "content": "<p>Some slowdowns in <code>isDefEq</code> may be caused by reordering <code>extends</code>. Eliminating defeq abuse of <code>Quiver.Hom</code> avoids slowdowns in preadditive categories.</p>",
        "id": 443531330,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717887233
    },
    {
        "content": "<p>Why is the second one much slower?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"kn\">scoped</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n\n<span class=\"n\">count_heartbeats</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">-- Used 1591 heartbeats</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"bp\">.</span><span class=\"n\">toSemifield'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semifield</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">›</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">inv_zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">dif_pos</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">dif_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">  </span><span class=\"n\">nnqsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n\n<span class=\"n\">count_heartbeats</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">-- Used 6564 heartbeats</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"bp\">.</span><span class=\"n\">toSemifield''</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semifield</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toSemiring</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">›</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">inv_zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">dif_pos</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">dif_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">  </span><span class=\"n\">nnqsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 443549800,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717903357
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"kn\">scoped</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">backward</span><span class=\"bp\">.</span><span class=\"n\">isDefEq</span><span class=\"bp\">.</span><span class=\"n\">lazyProjDelta</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"n\">count_heartbeats</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">-- Used 2997 heartbeats</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"bp\">.</span><span class=\"n\">toSemifield'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semifield</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">›</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">inv_zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">dif_pos</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">dif_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">  </span><span class=\"n\">nnqsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">backward</span><span class=\"bp\">.</span><span class=\"n\">isDefEq</span><span class=\"bp\">.</span><span class=\"n\">lazyProjDelta</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"n\">count_heartbeats</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">-- Used 2884 heartbeats</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"bp\">.</span><span class=\"n\">toSemifield''</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsField</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semifield</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toSemiring</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">›</span>\n<span class=\"w\">  </span><span class=\"bp\">__</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">inv_zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">dif_pos</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">dif_neg</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">  </span><span class=\"n\">nnqsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 443550775,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717904298
    },
    {
        "content": "<p>I used <code>set_option backward.isDefEq.lazyProjDelta false</code> to speed up some of the slower files.</p>",
        "id": 443560618,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717912222
    },
    {
        "content": "<p>Formally, the reason the second one is slower is because it has a ton of</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.014299</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>s which turn into</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.014669</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toOfNat0</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toOfNat0</span>\n</code></pre></div>\n<p>s, where the LHS is <code>@Zero.toOfNat0 R AddMonoid.toZero : OfNat R 0</code> and the RHS is the slightly different <code>@Zero.toOfNat0 R MonoidWithZero.toZero : OfNat R 0</code>, and all the 0.015's add up.</p>\n<p>(NB I found this by comparing outputs using <code>set_option trace.profiler true in</code>; of course it doesn't answer the underlying question but it is some information about what's going on)</p>",
        "id": 443570283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717919275
    },
    {
        "content": "<p>After further adjustments I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">instructions</span><span class=\"w\">           </span><span class=\"bp\">-</span><span class=\"mf\">5.9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">typeclass</span><span class=\"w\"> </span><span class=\"n\">inference</span><span class=\"w\">   </span><span class=\"bp\">-</span><span class=\"mf\">13.8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">wall</span><span class=\"bp\">-</span><span class=\"n\">clock</span><span class=\"w\">             </span><span class=\"bp\">-</span><span class=\"mf\">6.0</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>But there are also more things that need to be fixed.</p>",
        "id": 443586424,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1717932708
    },
    {
        "content": "<p>I think this is great but am concerned about a couple of  things.</p>\n<p>What is the explanation for this? It is hard to disentangle the reordering, the changes in priority for projections from preferred and non-preferred parents, and the new backwards compatibility flags being enabled. </p>\n<p>My guess is that by moving the parent with the deepest/most data fields to the preferred slot you can avoid defeq checks on the data itself probably because they become syntactic equalities earlier in the process. </p>\n<p>How much of the changes to the priorities can be achieved by just asking core to set new values for the projections from preferred and non-preferred parents? Everyone seems to think this is a problem but we haven't had good hard performance-based evidence for a change to bring to core. It would be great and much less ad-hoc if this was it. </p>\n<p>Turning on new backward compatibility flags is probably not going to get merged though. So we will have to understand the regressions there better and either fix themselves ourselves or make a compelling case upstream.</p>",
        "id": 444279419,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718209616
    },
    {
        "content": "<p>Also, some of the worst regressions can probably be helped with <a href=\"https://github.com/leanprover-community/mathlib4/pull/11521\">#11521</a></p>",
        "id": 444279973,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718209751
    },
    {
        "content": "<p>One thing I just noticed is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetLike.instCoeSortType#doc\">docs#SetLike.instCoeSortType</a> directly uses a lambda and membership:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeSort</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>Since this is a coercion, it is unfolded and therefore loads of mathlib terms contain these explicit lambdas. (This also needs a dedicated delaborator, written just below it.) Has anyone tried replacing this with a call to a <code>setToType</code> function? The specific reason I have to believe that this will improve performance across the library is that I can see failed instance searches caused by the fact that the indexing is not able to handle the lambdas: if I have definitions <code>foo, bar : Subgroup G</code> then <code>CommGroup ↑foo</code> also attempts to apply an instance for <code>CommGroup ↑bar</code>. Normally this would not happen because the discrimination tree can tell them apart, but after the aforementioned elaboration the result is <code>CommGroup {x // x ∈ foo}</code> vs <code>CommGroup {x // x ∈ bar}</code> and lean gives up indexing at the lambda.</p>",
        "id": 444310726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718219149
    },
    {
        "content": "<p>Let's find out.</p>",
        "id": 444312355,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718219654
    },
    {
        "content": "<p>Wouldn't the explicit lambda be applied to an argument? In that case the discrimination tree gets rid of the lambda and there is no problem.</p>",
        "id": 444315618,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1718220682
    },
    {
        "content": "<p>I'm referring to the lambda in <code>Subtype</code>, i.e. the set abstraction in the code block</p>",
        "id": 444324716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718223692
    },
    {
        "content": "<p>the <code>fun p =&gt; </code> lambda is indeed applied</p>",
        "id": 444324796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718223716
    },
    {
        "content": "<p>What is the status of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11521\">#11521</a> now? I think my PRs really need it to eliminate some regressions.</p>",
        "id": 444389387,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1718258548
    },
    {
        "content": "<p>I looked at a different angle: are there any low-hanging fruit to speed up files. Turns out that yes, there are: sometimes, small changes to a file have a big effect. Three small examples, each a one-line change:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13769\">#13769</a> replaces a slow <code>continuity</code> call by <code>fun_prop</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13772\">#13772</a> avoid a really slow <code>change</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13771\">#13771</a> uses <code>suppress_compilation</code> in one file (no downstream files are affected)</li>\n</ul>",
        "id": 444409548,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718266761
    },
    {
        "content": "<p>Wow, thanks for the speedy reviews and merges. Next in the list is <a href=\"https://github.com/leanprover-community/mathlib4/pull/13770\">#13770</a>, which expands a few slow <code>measurability</code> calls: this one is more a matter of discussion. In my opinion, the effects make it worth talking about - and if the solution is to improve <code>fun_prop</code> to handle these instead :-)<br>\nCC <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> as one of the probability/measure theory maintainers</p>",
        "id": 444430844,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718273908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/444324716\">said</a>:</p>\n<blockquote>\n<p>I'm referring to the lambda in <code>Subtype</code>, i.e. the set abstraction in the code block</p>\n</blockquote>\n<p>I see, so what is going on is that the currying of <code>Membership.mem</code> is the wrong way around, because <code>fun x =&gt; x ∈ foo</code> would be eta reduced in the discrimination tree if <code>x</code> was the last argument of <code>Membership.mem</code>. Is there a reason for having the arguments in this order? Apart from \"that's the order in which the arguments appear in the notation\".</p>\n<p>We could also define a (not reducible) constant <code>memRev</code> with notation <code>∋</code> for this purpose, if we want to keep the currying in the order in which we write arguments.</p>",
        "id": 444447602,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1718279654
    },
    {
        "content": "<p>I tried to do some other things with <code>InjSurj</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13795\">#13795</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">compilation</span><span class=\"w\">      </span><span class=\"bp\">-</span><span class=\"mf\">6.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">linting</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">5.3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\">    </span><span class=\"bp\">-</span><span class=\"mf\">5.4</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 444516189,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1718298420
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7873\">#7873</a> + <a href=\"https://github.com/leanprover-community/mathlib4/pull/13852\">#13852</a> + <a href=\"https://github.com/leanprover-community/mathlib4/pull/13690\">#13690</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">instructions</span><span class=\"w\">          </span><span class=\"bp\">-</span><span class=\"mf\">10.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">linting</span><span class=\"w\">                </span><span class=\"bp\">-</span><span class=\"mf\">6.1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"n\">execution</span><span class=\"w\">       </span><span class=\"bp\">-</span><span class=\"mf\">6.6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">task</span><span class=\"bp\">-</span><span class=\"n\">clock</span><span class=\"w\">             </span><span class=\"bp\">-</span><span class=\"mf\">8.8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">typeclass</span><span class=\"w\"> </span><span class=\"n\">inference</span><span class=\"w\">   </span><span class=\"bp\">-</span><span class=\"mf\">25.0</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">        </span><span class=\"n\">wall</span><span class=\"bp\">-</span><span class=\"n\">clock</span><span class=\"w\">            </span><span class=\"bp\">-</span><span class=\"mf\">10.2</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 445471788,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1718749247
    },
    {
        "content": "<p>Thanks so much for doing this! The speedup is impressive. Yet,  looking at the PRs together with <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> we have two requests:</p>\n<ul>\n<li>Could you please create a (draft) PR that combines all three PRs, so that we can see detailed benchmarking stats for the final effects.</li>\n<li>Could you please write an issue that describes the method that applied for determining these priorities. In that issue, please address the questions by <span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> in <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/444279419\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/444279419</a>. Please refer to this issue in the PR commit message (aka top post) for all 3 PRs.</li>\n</ul>",
        "id": 446146355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718995171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/444312355\">said</a>:</p>\n<blockquote>\n<p>Let's find out.</p>\n</blockquote>\n<p>I ran into some <code>stage0</code> issues (I think) with this <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 448390219,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719853923
    }
]