[
    {
        "content": "<p>I'm looking through the code on <code>Oplax</code> functors, and I noticed the following use of <code>reassoc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">reassoc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">mapComp_naturality_left</span><span class=\"w\"> </span><span class=\"n\">mapComp_naturality_right</span><span class=\"w\"> </span><span class=\"n\">map₂_associator</span>\n\n<span class=\"c1\">-- the simpNF linter complains that `map₂_leftUnitor_assoc` etc can be</span>\n<span class=\"c1\">-- proved with `simp` so I move them here</span>\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">reassoc</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">map₂_leftUnitor</span><span class=\"w\"> </span><span class=\"n\">map₂_rightUnitor</span>\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">map₂_leftUnitor</span><span class=\"w\"> </span><span class=\"n\">map₂_rightUnitor</span>\n</code></pre></div>\n<p>So here it is not possible to add <code>map₂_leftUnitor</code> and <code>map₂_rightUnitor</code> to the line after <code>attribute [reassoc (attr := simp)]</code> as then simpNF complains that <code>map₂_leftUnitor_assoc</code> is already provable by simp. Is this intended, or is it a bug? Because wouldn't most <code>_assoc</code> theorems set up in this way be provable by simp (by <code>simp only [original lemma, assoc]</code>).</p>",
        "id": 445530539,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1718784270
    },
    {
        "content": "<p>If the simp lemma is <code>a &gt;&gt; b = c &gt;&gt; d</code>, then the assoc version would be <code>a &gt;&gt; b &gt;&gt; f = c &gt;&gt; d &gt;&gt; f</code>, and it would not be provable by simp. It is only when the LHS does not contain <code>&gt;&gt;</code> that the assoc version would be provable.</p>",
        "id": 445673305,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718821097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60reassoc.20.28attr.3A.3Dsimp.29.60.20issue/near/445673305\">said</a>:</p>\n<blockquote>\n<p>If the simp lemma is <code>a &gt;&gt; b = c &gt;&gt; d</code>, then the assoc version would be <code>a &gt;&gt; b &gt;&gt; f = c &gt;&gt; d &gt;&gt; f</code>, and it would not be provable by simp. It is only when the LHS does not contain <code>&gt;&gt;</code> that the assoc version would be provable.</p>\n</blockquote>\n<p>I didn't think of that, thanks a lot! Then maybe I should modify this comment in the snippet above (from the file <code>Oplax.lean</code>) to mention this reason.</p>",
        "id": 445676623,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1718822383
    }
]