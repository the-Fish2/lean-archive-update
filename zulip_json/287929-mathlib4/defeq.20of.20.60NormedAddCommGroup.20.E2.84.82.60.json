[
    {
        "content": "<p>If you turn on <code>set_option trace.Meta.Tactic.simp.discharge true</code> you see an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.fun_prop.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">differentiable_const</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"kd\">instance</span>\n                  <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">ℂ</span>\n                <span class=\"n\">sythesized</span> <span class=\"n\">value</span>\n                  <span class=\"n\">Complex.instNormedAddCommGroupComplex</span>\n                <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n                  <span class=\"n\">NonUnitalNormedRing.toNormedAddCommGroup</span>\n</code></pre></div>\n<p>It looks like that <code>Complex.instNormedAddCommGroupComplex</code> and <code>NonUnitalNormedRing.toNormedAddCommGroup</code> are not defeq under \"reducible and instances\" transparency.</p>\n<p>I'm not exactly sure what to do about it. One way to fix this would be to remove this defeq check or loosen the transparency but I'm just doing the same thing Lean's simplifier is doing. Doing something different might not be a good idea.</p>\n<p>Other option is that this is actually mathlib's problem how it sets up instances. But so far I do not really understand what is going wrong in the defeq check.</p>",
        "id": 422248635,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708354117
    },
    {
        "content": "<p>I have two instances of  <code>NormedAddCommGroup ℂ</code> that are not defeq under \"reducible and instances\" transparency. The trace suggests that the check fails on <code>norm =?= ⇑Complex.abs</code> but when I try that alone it works.  What is going on? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n<span class=\"c1\">-- set_option trace.Meta.isDefEq true</span>\n\n<span class=\"c1\">-- error: not defeq</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">NonUnitalNormedRing.toNormedAddCommGroup</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Complex.instNormedAddCommGroupComplex</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducibleAndInstances</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"are defeq\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"not defeq\"</span>\n\n\n<span class=\"c1\">-- are defeq</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Complex.abs</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducibleAndInstances</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"are defeq\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"not defeq\"</span>\n</code></pre></div>",
        "id": 422249611,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708354431
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> has been telling us we have a reducible transparency issue throughout our hierarchy, perhaps he knows that answer to this.</p>",
        "id": 422251792,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708355073
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/defeq.20of.20.60NormedAddCommGroup.20.E2.84.82.60\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/defeq.20of.20.60NormedAddCommGroup.20.E2.84.82.60</a> the correct topic, BTW</p>",
        "id": 422252190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708355195
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/fun_prop.20issues\">#mathlib4 &gt; fun_prop issues</a> by <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>.</p>",
        "id": 422252345,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708355245
    },
    {
        "content": "<p>It’s already mathlib’s problem because simp isn’t changing.</p>",
        "id": 422260290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708357521
    },
    {
        "content": "<p>I see so before mathlib fixes this I will just changes the defeq transparency level in <code>fun_prop</code>.</p>",
        "id": 422262158,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708358168
    },
    {
        "content": "<p>Is it a fixable problem Matthew?</p>",
        "id": 422265699,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708358943
    },
    {
        "content": "<p>I think the issue is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddGroupNorm.toNormedAddCommGroup#src\">src#AddGroupNorm.toNormedAddCommGroup</a> which should be reducible</p>",
        "id": 422268110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708359411
    },
    {
        "content": "<p>(but isn't)</p>",
        "id": 422268134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708359417
    },
    {
        "content": "<p>I tested with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">NonUnitalNormedRing.toNormedAddCommGroup</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Complex.instNormedAddCommGroupComplex</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Complex.instNormedAddCommGroupComplex</span>\n    <span class=\"c1\">-- unfold NonUnitalNormedRing.toNormedAddCommGroup</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">AddGroupNorm.toNormedAddCommGroup</span>\n    <span class=\"c1\">-- unfold Complex.abs Complex.normSq</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(adding <code>unfold</code>s until the <code>rfl</code> worked)</p>",
        "id": 422268315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708359463
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10726\">#10726</a></p>",
        "id": 422275096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708361111
    },
    {
        "content": "<p>i think all of these were marked <code>@[to_additive (attr := reducible)]</code>. Why do we need <code>abbrev</code>?</p>",
        "id": 422285280,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708365700
    },
    {
        "content": "<p>Oh, I missed that.</p>",
        "id": 422287973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708367136
    },
    {
        "content": "<p>I think the answer is that only some of them were marked <code>reducible</code>, but I didn't notice because it was hidden between docstrings</p>",
        "id": 422288097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708367191
    },
    {
        "content": "<p>It's possible that <code>abbrev</code> is broken with <code>to_additive</code>? I didn't check</p>",
        "id": 422288162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708367230
    },
    {
        "content": "<p>will <code>abbrev</code> get passed on to <code>to_additive</code>?</p>",
        "id": 422288175,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708367238
    },
    {
        "content": "<p>Apparently yes, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonCat.AssocAddMonoidHom#doc\">docs#AddMonCat.AssocAddMonoidHom</a></p>",
        "id": 422289762,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708368173
    },
    {
        "content": "<p>doesn't seem to have <code>@[inline, reducible]</code></p>",
        "id": 422306604,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708376526
    },
    {
        "content": "<p>How can you check?</p>",
        "id": 422307757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708377248
    },
    {
        "content": "<p>it doesn't appear on docgen but I guess you're right</p>",
        "id": 422310322,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708378923
    },
    {
        "content": "<p>:(</p>",
        "id": 422310346,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708378928
    },
    {
        "content": "<p>guess it can be checked by doing a defeq check manually</p>",
        "id": 422310358,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708378937
    },
    {
        "content": "<p>this weird thing about attributes is annoyign</p>",
        "id": 422310383,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708378953
    },
    {
        "content": "<p>Did we already figure out this is fixed by deleting the <code>to_additive</code> and adding a reducible <code>AddGroupNorm.toNormedAddCommGroup</code> by hand?</p>",
        "id": 422329894,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708392710
    },
    {
        "content": "<p>Ah ok. <code>to_additive</code> and <code>abbrev</code> don’t get along which is probably why have to feed attributes to <code>to_additive</code> directly anyway!</p>",
        "id": 422330250,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708392988
    },
    {
        "content": "<p>So if Eric changes from <code>abbrev</code> to <code>to_additive (attr := reducible)</code> we are good here</p>",
        "id": 422330285,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708393025
    },
    {
        "content": "<p>Feel free to push that change, I might not get around to it today</p>",
        "id": 422339115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708399962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/defeq.20of.20.60NormedAddCommGroup.20.E2.84.82.60/near/422330250\">said</a>:</p>\n<blockquote>\n<p>Ah ok. <code>to_additive</code> and <code>abbrev</code> don’t get along which is probably why have to feed attributes to <code>to_additive</code> directly anyway!</p>\n</blockquote>\n<p>Maybe we should have a linter for this, though maybe that's harder than fixing it</p>",
        "id": 422339147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708399999
    },
    {
        "content": "<p>I pushed changes. Two fixes required:</p>\n<ol>\n<li>delete some stuff <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </li>\n<li>addresses a porting note (I think)</li>\n</ol>\n<p>Currently benchmarking. It would good if someone(s) could carefully go over the changes in <code>Analysis.Normed.Group.Basic</code> to make sure nothing was missed, both in terms of <code>def</code>’s that should be reducible and with actually implementing the changes. </p>\n<p>Also someone with familiarity with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.integral_boundary_rect_eq_zero_of_differentiable_on_off_countable#doc\">docs#Complex.integral_boundary_rect_eq_zero_of_differentiable_on_off_countable</a> who can find a more elegant proof now that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.coe_restrictScalars#doc\">docs#ContinuousLinearMap.coe_restrictScalars</a>’ fires <code>simp</code> would be a great help!</p>",
        "id": 422507721,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708466062
    },
    {
        "content": "<p>Ok <code>mathlib3</code> proof is what works for 2.</p>",
        "id": 422510564,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708467348
    }
]