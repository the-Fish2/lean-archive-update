[
    {
        "content": "<p>While eliding the types of proofs and replacing elided proofs with <code>...</code> makes sense in the infoview, it has also resulted in a number of opaque, uninformative docstrings. For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Over.homMk_right_down_down#doc\">docs#CategoryTheory.Over.homMk_right_down_down</a> now reads </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">CategoryTheory.Over.homMk_right_down_down</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">}</span>     <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Over</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Over</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U.left</span> <span class=\"bp\">⟶</span> <span class=\"n\">V.left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">autoParam</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.CategoryStruct.comp</span> <span class=\"n\">f</span> <span class=\"n\">V.hom</span> <span class=\"bp\">=</span> <span class=\"n\">U.hom</span><span class=\"o\">)</span> <span class=\"n\">_auto</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">⋯</span> <span class=\"bp\">=</span> <span class=\"bp\">⋯</span>\n</code></pre></div>\n<p>which completely removes the thing the theorem actually proves. </p>\n<p>It would probably be best to somehow exempt the documentation generator from such elision.</p>",
        "id": 429160908,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1711261437
    },
    {
        "content": "<p>I'm not sure why that's a theorem -- it's stating that two proofs are equal, but that's already the case by proof irrelevance. Plus, I don't believe <code>simp</code> will ever rewrite proofs, so this lemma will never be used.</p>",
        "id": 429169815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711267717
    },
    {
        "content": "<p>Sure, but it's just an example. There's a whole bunch of things-with-long-types that have them almost completely elided, making their docstrings mostly useless; I'm sure I could come up with a more serious example if I looked, this was just the one I happened to run across.</p>",
        "id": 429169866,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1711267794
    },
    {
        "content": "<p>For what it's worth, the only recent difference to <code>pp.proofs</code> should be that it pretty prints the omitted proofs using <code>⋯</code> rather than <code>_</code>.</p>",
        "id": 429169913,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711267810
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Is it expected that <code>simps</code> on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Over.homMk#doc\">docs#CategoryTheory.Over.homMk</a> could generate a simp lemma on proofs?)</p>",
        "id": 429170005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711267928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean.204.2E7.2E0-rc2.20breaks.20docs.20with.20.60.2E.2E.2E.60/near/429169866\">said</a>:</p>\n<blockquote>\n<p>I'm sure I could come up with a more serious example if I looked, this was just the one I happened to run across.</p>\n</blockquote>\n<p>If you could look for examples, that would help.</p>\n<p>I'm not sure having proofs present inside terms is too helpful, but it would be nice if, for example, hovering over a <code>⋯</code> in the docs would show at least the type of what's being omitted.</p>\n<p>I suppose there was one other change in a recent Lean: the option <code>pp.proofs.withType</code> was switched to <code>false</code> by default. When it's true, it would pretty print as <code>(⋯ : p)</code> instead. The docs could turn this option back on.</p>",
        "id": 429170215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711268146
    },
    {
        "content": "<p>Yes, simps sometimes generates equalities for propositions. See <a href=\"#narrow/stream/287929-mathlib4/topic/simps.20generates.20useless.20lemmas/near/340927522\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simps.20generates.20useless.20lemmas/near/340927522</a>. I just created <a href=\"https://github.com/leanprover-community/mathlib4/pull/11622\">#11622</a></p>",
        "id": 429180806,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711274892
    }
]