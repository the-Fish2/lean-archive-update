[
    {
        "content": "<p>Here is an even simpler example of the error I got in a recent thread. Why doesn't <code>algHom_C</code> fire here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Rename</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">killCompl_C</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial.killCompl</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.algHom_C</span><span class=\"o\">]</span> <span class=\"c1\">-- Why doesn't this work?</span>\n</code></pre></div>",
        "id": 425096995,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709734647
    },
    {
        "content": "<p>If my understanding is correct,<code>MvPolynomial.algHom_C</code> takes an input <code>(f : MvPolynomial σ R →ₐ[R] MvPolynomial σ R)</code> i.e. <code>f : X →ₐ[R] X</code> and you're trying to apply it to an algebra hom between two different rings.</p>\n<p>I debugged this by changing the <code>rw</code> to a <code>refine</code> (filling in the holes with <code>?_</code>) and then a  <code>convert</code>. Let me know if I've misunderstood.</p>",
        "id": 425277020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709808821
    },
    {
        "content": "<p>The ring is always <code>R</code>. You mean the type of variables in <code>AlgHom_C</code> has to be the same, whereas in my lemma it's different (<code>τ</code> to <code>σ</code>). Thanks, I don't know how I missed that.</p>",
        "id": 425296912,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709816121
    },
    {
        "content": "<p>Hmm, should <code>algHom_C</code> hold for different variable types though?</p>",
        "id": 425297139,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709816202
    },
    {
        "content": "<p>Yeah I just checked, the proof of <code>algHom_C</code> does go through for different variable types, and correcting this makes my proof work. Thanks for helping me catch this.</p>",
        "id": 425297846,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709816432
    },
    {
        "content": "<p>I feel like when I was doing this myself I got to this stage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Rename</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">killCompl_C</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial.killCompl</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MvPolynomial.algHom_C</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.killCompl</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>And I got the message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">MvPolynomial.killCompl</span> <span class=\"bp\">?</span><span class=\"n\">m.769</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">MvPolynomial.killCompl</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I don't get why I get this message here, and I think it's why I stopped the \"specify implicits\" train. Why does the first thing that it is unifying have a metavariable in it? I specify the argument right there!</p>",
        "id": 425312761,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709820996
    },
    {
        "content": "<p>Does using refine instead of apply help?</p>",
        "id": 425320520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709822474
    },
    {
        "content": "<p>It tells me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">MvPolynomial.killCompl</span> <span class=\"n\">hf</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"bp\">?</span><span class=\"n\">m.663</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Which I suppose is helpful, since it would trigger me to start filling implicits again, but the implicit I feel like I have to fill is <code>(f := f)</code> and this doesn't change the error.</p>",
        "id": 425321632,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709822734
    },
    {
        "content": "<p>I have no idea what the difference is between refine and apply for this use case, but they both look wrong.</p>",
        "id": 425322043,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709822833
    },
    {
        "content": "<p>Here is the code with refine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Rename</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">killCompl_C</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial.killCompl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.C</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">MvPolynomial.algHom_C</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.killCompl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 425322242,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709822878
    },
    {
        "content": "<p>I can even MWE it down to a mathlib-free version. Let me continue in a thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 425325328,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709823528
    }
]