[
    {
        "content": "<p>Is there a way to fill in the <code>?</code> below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.cast_ofReal</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so that for <code>n : ℕ</code>, <code>Complex.cast_of_Real n</code> is syntactically the same as <code>Complex.nat_cast_ofReal</code>, where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.nat_cast_ofReal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(and similarly for Int and Rat...) ?</p>\n<p>I tried <code>[Coe α ℝ]</code>, which results in a <code>rfl</code> lemma, but does not trigger when applied to <code>n : ℕ</code> since there is no <code>[Coe ℕ ℝ]</code> instance. There seem to be type classes for coercions <em>from</em> <code>Nat</code> (or <code>Int</code> or <code>Rat</code>...): <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NatCast#doc\">docs#NatCast</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntCast#doc\">docs#IntCast</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RatCast#doc\">docs#RatCast</a>, but what I need here is a type class for coercions <em>to</em> <code>Real</code>.</p>\n<p>For motivation/background, see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/410427402\">here</a>.</p>",
        "id": 410442159,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703862904
    },
    {
        "content": "<p>I see that there are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofReal_nat_cast#doc\">docs#Complex.ofReal_nat_cast</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofReal_int_cast#doc\">docs#Complex.ofReal_int_cast</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofReal_rat_cast#doc\">docs#Complex.ofReal_rat_cast</a>. The fact that there are separate lemmas for each of these likely indicates that there is no way of stating this so that it applies to all of them.</p>",
        "id": 410442654,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703863241
    },
    {
        "content": "<p>Yep, exactly. You should write one for each.</p>",
        "id": 410447724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703866206
    },
    {
        "content": "<p>What is the rationale behind setting it up in this way? I assume using the analogue of <code>Coe</code> in Lean3 would have worked.</p>",
        "id": 410447896,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703866304
    },
    {
        "content": "<p>The design of <code>Coe</code> in lean 4 means you should pretty much never write <code>[Coe A B]</code>, as then your lemma ends up about <code>Coe.coe</code>, but any real use will be about <code>A.toB</code> (as <code>↑</code> unfolds the <code>Coe.coe</code> as part of elaboration)</p>",
        "id": 410447903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703866308
    },
    {
        "content": "<p>This is a great change from Lean 3 because it makes the goal easier to understand as you no longer have <code>coe</code> mean lots of different things, but is also a terrible change because it makes general lemmas harder to write as you no longer have <code>coe</code> mean lots of different things.</p>",
        "id": 410448143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703866437
    }
]