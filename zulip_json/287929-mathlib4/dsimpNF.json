[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> et al, <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9491254649/job/26156301555?pr=13789\">here</a> is the output from the new simpNF linter on Mathlib.</p>",
        "id": 444358194,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718240376
    },
    {
        "content": "<p>(There are failures.)</p>",
        "id": 444358200,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718240379
    },
    {
        "content": "<p>I think maybe we should revert the Batteries change, make a new PR, and sort out the Mathlib failures by pointing a branch of Mathlib at the branch.</p>",
        "id": 444369482,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718247622
    },
    {
        "content": "<p>Ok, I guess that's a better path forward.</p>",
        "id": 444375685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718251107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> Here's a PR for the revert: <a href=\"https://github.com/leanprover-community/batteries/pull/841\">batteries#841</a></p>",
        "id": 444380343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718253398
    },
    {
        "content": "<p>I am trying out <a href=\"https://github.com/leanprover-community/mathlib4/pull/13793\">#13793</a> for the syntax linter deprecating \"no since\" <code>deprecated</code>.</p>\n<p>To be honest, my main motivation is to practice self-correcting code, rather than the linter itself: I would like to add a step that automatically adds the <code>since</code> part, wherever the linter flags a warning.</p>",
        "id": 444383776,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718255389
    },
    {
        "content": "<p>Here is a batteries-free MWE of the first dsimpNF complaint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kn\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" ≃ \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"sd\">/-- Inverse of an equivalence `e : α ≃ β`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">symm</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">invFun</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">toFun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"sd\">/-- `M →ₙ* N` is the type of functions `M → N` that preserve multiplication. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">MulHom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">y</span>\n\n<span class=\"sd\">/-- `M →ₙ* N` denotes the type of multiplication-preserving maps from `M` to `N`. -/</span>\n<span class=\"kn\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" →ₙ* \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"sd\">/-- `MulEquiv α β` is the type of an equiv `α ≃ β` which preserves multiplication. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→ₙ*</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"sd\">/-- Notation for a `MulEquiv`. -/</span>\n<span class=\"kn\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" ≃* \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"sd\">/-- The inverse of an isomorphism is an isomorphism. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">works_as_expected</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp?</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">symm_mk'</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- succeeds</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: tactic 'simp' failed, nested error:</span>\n<span class=\"sd\">maximum recursion depth has been reached</span>\n<span class=\"sd\">use `set_option maxRecDepth &lt;num&gt;` to increase limit</span>\n<span class=\"sd\">use `set_option diagnostics true` to get diagnostic information</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">fails_as_unexpected</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">symm_mk'</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- fails, but `symm_mk'` is a rfl lemma</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n</code></pre></div>",
        "id": 444396103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718261741
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Technical.20Debt.20Counters\">#mathlib4 &gt; Technical Debt Counters</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 444396143,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718261761
    },
    {
        "content": "<p>I haven't looked into the others. But it seems to me that this is maybe just a bad lemma to begin with?</p>",
        "id": 444396227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718261799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you have an idea whether <code>symm_mk'</code> is desirable or not?</p>",
        "id": 444399425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718263051
    },
    {
        "content": "<p>My guess here is that <code>dsimp</code> is recursing into the proof fields</p>",
        "id": 444404184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718264780
    },
    {
        "content": "<p>At first glance the lemma looks suspicious because the LHS contains the RHS, but in fact this loop only happens within the proofs which should be ok.</p>",
        "id": 444404332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718264874
    },
    {
        "content": "<p>But do we want to have lemmas like this in our default simp-set? From that angle it still looks very suspicious to me.</p>",
        "id": 444448643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718279969
    },
    {
        "content": "<p>This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">map_mul'</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">        </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 444449749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718280285
    },
    {
        "content": "<p>So I claim that either this is a <code>dsimp</code> bug; or that there should be some way to generate <code>symm_mk'.aux</code> automatically to protect its contents from dsimp</p>",
        "id": 444449774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718280291
    },
    {
        "content": "<p>Updated version of the MWE, displaying the two versions: the MWE coming from mathlib, and Eric's workaround.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kn\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" ≃ \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"sd\">/-- Inverse of an equivalence `e : α ≃ β`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">symm</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">invFun</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">toFun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">Equiv</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"sd\">/-- `M →ₙ* N` is the type of functions `M → N` that preserve multiplication. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">MulHom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"w\">  </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">y</span>\n\n<span class=\"sd\">/-- `M →ₙ* N` denotes the type of multiplication-preserving maps from `M` to `N`. -/</span>\n<span class=\"kn\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" →ₙ* \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">MulHom</span>\n\n<span class=\"sd\">/-- `MulEquiv α β` is the type of an equiv `α ≃ β` which preserves multiplication. -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→ₙ*</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"sd\">/-- Notation for a `MulEquiv`. -/</span>\n<span class=\"kn\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"s2\">\" ≃* \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"sd\">/-- The inverse of an isomorphism is an isomorphism. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">case1</span><span class=\"w\"> </span><span class=\"c1\">-- MWE from mathlib</span>\n\n<span class=\"c1\">-- lemma similar to something in mathlib</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">symm_mk</span><span class=\"w\"> </span><span class=\"c1\">-- leads to breakage</span>\n<span class=\"c1\">-- attribute [simp] symm_mk' -- works</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">works_as_expected</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c1\">-- succeeds</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: tactic 'simp' failed, nested error:</span>\n<span class=\"sd\">maximum recursion depth has been reached</span>\n<span class=\"sd\">use `set_option maxRecDepth &lt;num&gt;` to increase limit</span>\n<span class=\"sd\">use `set_option diagnostics true` to get diagnostic information</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">fails_as_unexpected</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- fails, but `symm_mk'` is a rfl lemma</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">case1</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">case2</span><span class=\"w\"> </span><span class=\"c1\">-- workaround by Eric Wieser</span>\n\n<span class=\"c1\">-- aux lemma for `symm_mk'`</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n\n<span class=\"c1\">-- variant of `symm_mk` above, but this one does not cause problems</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">        </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">symm_mk'</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">works_as_expected</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">does_not_fail</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"o\">{(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n<span class=\"w\">        </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">case2</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">MulEquiv</span>\n</code></pre></div>",
        "id": 444458796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718283298
    },
    {
        "content": "<p>Is there some elaborator <code>foo% x</code> which means \"create an auxiliary declaration with value <code>x</code>, and reference it here\"?</p>",
        "id": 444466061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718285436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimpNF/near/444448643\">said</a>:</p>\n<blockquote>\n<p>But do we want to have lemmas like this in our default simp-set? From that angle it still looks very suspicious to me.</p>\n</blockquote>\n<p>Nevertheless <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 444477696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718288547
    },
    {
        "content": "<p>I think the lemma is very reasonable to have in the dsimp set</p>",
        "id": 444478149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718288688
    },
    {
        "content": "<p><code>⟨⟨f, f'⟩, h⟩ : M ≃* N).symm</code> is clearly less simple than <code>⟨⟨f', f⟩, h2⟩ : M ≃* N)</code></p>",
        "id": 444478282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718288724
    },
    {
        "content": "<p>The fact that <code>h2</code> is a mess should be irrelevant, it's a proof term</p>",
        "id": 444478338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718288743
    },
    {
        "content": "<p>But I think you should compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"c1\">-- vs</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">__</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⋯</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Maybe that <code>let</code> expression shouldn't appear in the RHS of a dsimp lemma.</p>",
        "id": 444480258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718289255
    },
    {
        "content": "<p>In Lean 3 there was a tactic <code>dsimp_result</code>, which might have been handy here.</p>",
        "id": 444480800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718289396
    },
    {
        "content": "<p>What happens if you manually expand the RHS and change <code>__src</code> to <code>src</code>?</p>",
        "id": 444484431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718290342
    },
    {
        "content": "<p>Like so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">symm_mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">≃*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"bp\">.</span><span class=\"n\">map_mul'</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Same problem...</p>",
        "id": 444491158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718291874
    },
    {
        "content": "<p>The <code>let </code>is a distraction here, the problem persists if you inline the <code>src</code></p>",
        "id": 444491314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718291912
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13804\">#13804</a> fixes some of these lemmas: dsimp visits proof subterms for a good reason</p>",
        "id": 444529485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718302502
    },
    {
        "content": "<p>To keep things well typed?</p>",
        "id": 444534930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718304016
    },
    {
        "content": "<p>To get rid of artificial dependencies</p>",
        "id": 444535020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718304040
    },
    {
        "content": "<p>Here is another mystery</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toOfNat0</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">›.</span><span class=\"m\">1</span>\n\n<span class=\"sd\">/-- Typeclass for the `⊥` (`\\bot`) notation -/</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"⊥\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span>\n\n<span class=\"sd\">/-- Typeclass for types with a scalar multiplication operation, denoted `•` (`\\bu`) -/</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">SMul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">smul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span><span class=\"w\"> </span><span class=\"s2\">\" • \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SMul</span><span class=\"bp\">.</span><span class=\"n\">smul</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">SMul</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"w\">  </span><span class=\"n\">zero_mem</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">SMul</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_eq_bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ohai</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n\n<span class=\"sd\">/-- error: dsimp made no progress -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">oops</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 444535931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718304306
    },
    {
        "content": "<p>Simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toOfNat0</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">›.</span><span class=\"m\">1</span>\n\n<span class=\"sd\">/-- Typeclass for the `⊥` (`\\bot`) notation -/</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"⊥\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_eq_bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ohai</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n\n<span class=\"sd\">/-- error: dsimp made no progress -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">oops</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 444538779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718305171
    },
    {
        "content": "<p><code>OfNat</code> is to blame here, everything works with <code>Zero.zero</code></p>",
        "id": 444540181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718305585
    },
    {
        "content": "<p>Specifically, the builtin <code>OfNat</code> is special-cased internally, and that breaks things</p>",
        "id": 444540560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718305697
    },
    {
        "content": "<p>It works fine if you roll your own:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n\n<span class=\"sd\">/-- Typeclass for the `⊥` (`\\bot`) notation -/</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"sd\">/-- The bot (`⊥`, `\\bot`) element -/</span>\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"⊥\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bot</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">bot</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">MyOfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toMyOfNat0</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MyOfNat</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">›.</span><span class=\"m\">1</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"bp\">.</span><span class=\"n\">toOfNat0</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">‹</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">›.</span><span class=\"m\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_eq_bot</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MyOfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_eq_bot'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">ohai</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MyOfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">oops</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 444540575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718305703
    },
    {
        "content": "<p>possibly <a href=\"https://github.com/leanprover/lean4/pull/2867\">lean4#2867</a>?</p>",
        "id": 444542707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718306373
    },
    {
        "content": "<p>Could well be! So I think we should tag this one as <code>nolint simpNF</code> and add a comment pointing to that issue.</p>",
        "id": 444621531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718343769
    },
    {
        "content": "<p>Another PR fixes two of the dsimpNF problems flagged by the (temporarily reverted) linter fix.</p>\n<blockquote>\n<p>chore(Topology/Spectral/Hom): fix problem with dsimp lemma, fix porting note <a href=\"https://github.com/leanprover-community/mathlib4/pull/13818\">#13818</a></p>\n</blockquote>\n<p>After this one, I think we are ready to re-revert the linter fix in batteries.</p>",
        "id": 444631248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718347872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think we are ready to refix the linter.</p>\n<blockquote>\n<p>Reapply \"chore(Tactic/Lint/Simp): make simpNF linter dsimp-aware (<a href=\"https://github.com/leanprover-community/batteries/pull/839\">batteries#839</a>)\" (<a href=\"https://github.com/leanprover-community/batteries/pull/841\">batteries#841</a>) <a href=\"https://github.com/leanprover-community/batteries/pull/844\">batteries#844</a></p>\n</blockquote>",
        "id": 444653388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718355668
    },
    {
        "content": "<p>I think this PR needs a mathlib companion PR to ensure the issue is not repeated</p>",
        "id": 444805682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718407931
    },
    {
        "content": "<p>If you could just add a link to a Mathlib PR using this Batteries PR, we can check CI looks good.</p>",
        "id": 444836210,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718434418
    },
    {
        "content": "<blockquote>\n<p>testing new dsimpNF linter <a href=\"https://github.com/leanprover-community/mathlib4/pull/13855\">#13855</a></p>\n</blockquote>\n<p>just passed CI</p>",
        "id": 444895747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718476971
    },
    {
        "content": "<p>I have also added a link to this testing PR as requested.</p>",
        "id": 444900023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718479640
    },
    {
        "content": "<p>I've merged <a href=\"https://github.com/leanprover-community/batteries/pull/841\">batteries#841</a>, and will merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/13855\">#13855</a> as soon as it passes. Thanks!</p>",
        "id": 444924543,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718498189
    },
    {
        "content": "<blockquote>\n<p>chore: remove many <code>nolint simpNF</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13889\">#13889</a></p>\n</blockquote>\n<p>tries to remove a bunch of <code>nolint simpNF</code>s. Is there an easy way to automate this? So far, I've just removed all of them, and then manually restored a whole bunch of them...</p>",
        "id": 445455876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718742940
    },
    {
        "content": "<p>Sounds like a job for Damiano auto-correction Testa</p>",
        "id": 445456049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718742993
    },
    {
        "content": "<p>... though this one is one level harder, as the simpNF linter is global on all of mathlib (if I understood correctly...)</p>",
        "id": 445457991,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718743597
    },
    {
        "content": "<p>I think a sensible direction would be to make <code>nolint simpNF</code> an error if the lemma does not trigger the linter in the first place</p>",
        "id": 445458149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743647
    },
    {
        "content": "<p>Of course, this doesn't help for cases where we <code>nolint some_linter</code> to prevent the linter crashing</p>",
        "id": 445458210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743674
    },
    {
        "content": "<p>Funny that you mention this, but I've been just writing a prototype \"unnecessary syntax\" linter that flags syntax uses that do not cause errors when removed.  I can try it with <code>no_lint simpNF</code> when I'm back at a computer, if you want.</p>",
        "id": 445465917,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718746521
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13970\">#13970</a> is a preliminary version of the \"unnecessary <code>nolint simpNF</code>\"-linter.  This is a linter that flags when a flag to not lint for simpNF is in fact not necessary.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 445710481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718834733
    },
    {
        "content": "<p>I look forward to a linter that flags when this linter is unnecessary.</p>",
        "id": 445710498,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718834739
    },
    {
        "content": "<p>If anyone wants to take a look at the <code>nolints</code> flagged by the linter, feel free to do so!  I would like to make the linter self-correcting, but this one is a little challenging, since <code>nolint</code> takes a space-separated list of linters and <code>nolint</code> itself is in a comma-separated list of attributes, so either I rely on the pretty-printed syntax, or removing by hand the right stuff is going to be tricky.</p>",
        "id": 445710504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718834743
    },
    {
        "content": "<p>Oh, if you do look at the <code>nolint</code>s flagged by the linter and find some mistakes, please let me know!</p>\n<p>As a by-product of this experiment, the linter essentially implements a syntax-version of the environment <code>simpNF</code>linter.  Thus, if there is interest in making the syntax <code>simpNF</code> linter available, then getting it to align with the environment linter would be good!  Of course, the syntax linter has the advantage that it gives live warnings.  However, the environment linter also flags auto-generated declarations and post-hoc <code>attributes</code>, which is trickier with the syntax linter.</p>",
        "id": 445711380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718835006
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13982\">#13982</a> removes 86 unused <code>nolint simpNF</code>s.</p>",
        "id": 445767147,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718864622
    },
    {
        "content": "<p>As a consequence of the removal, I also have essentially implemented a syntax version of the <code>simpNF</code> linter.  It does the \"local\" checking, so misses some global lints, but flags issues \"live\".</p>\n<p>Is there interest in polishing it and PRing it?</p>",
        "id": 445767394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718864754
    },
    {
        "content": "<p>For reference, the linter flagged the 86 <code>nolint</code>s in the PR, together with 22 extra ones that the global linter flags, but the local one does not.</p>",
        "id": 445767577,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718864828
    },
    {
        "content": "<p>I also wonder whether these \"polishing up code\" linters should self-correct and should only be run every once in a while by CI.</p>",
        "id": 445767645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718864868
    },
    {
        "content": "<p>Kim, you delegated the removal of <code>nolint simpNF</code>, but you also PRed some adaptations where you add some <code>nolint</code>s back: can I check somehow that the <code>nolint</code>s that I would be removing would not have to be added back with the bump?</p>",
        "id": 445773137,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718867438
    },
    {
        "content": "<p>Specifically, some of the ones in <code>Mathlib/Data/NNRat/Defs.lean</code> may fit the general pattern of the ones you had to re-<code>nolint</code>.</p>",
        "id": 445773825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718867729
    },
    {
        "content": "<p>Can you just run your machinery on <code>nightly-testing</code>?</p>",
        "id": 445774618,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718868060
    },
    {
        "content": "<p>Oh, sure: I'll look for the nightly-testing branch.</p>",
        "id": 445774723,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718868101
    },
    {
        "content": "<p>Ok, I am not sure that I will have much more time soon, but this is an initial observation, that may be helpful in case you know what else has changed!</p>\n<p>The Expr-tree of the lhs of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.one_apply#doc\">docs#Pi.one_apply</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">one_apply</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>goes from being</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- on master</span>\n<span class=\"n\">inspect</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"mi\">1</span><span class=\"bp\">'</span>\n\n<span class=\"bp\">'</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|-'</span><span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">421</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|-'</span><span class=\"mi\">1</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- lit</span>\n<span class=\"bp\">|-'</span><span class=\"n\">One</span><span class=\"bp\">.</span><span class=\"n\">toOfNat1'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">421</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">421</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n</code></pre></div>\n<p>to being</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- on nightly-testing</span>\n<span class=\"n\">inspect</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">i'</span>\n\n<span class=\"bp\">'</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|-</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">i'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- forallE</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">415</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"mi\">0</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- bvar</span>\n<span class=\"bp\">|-'</span><span class=\"mi\">1</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- lit</span>\n<span class=\"bp\">|-'</span><span class=\"n\">One</span><span class=\"bp\">.</span><span class=\"n\">toOfNat1'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">i'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- forallE</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">415</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"mi\">0</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- bvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'</span><span class=\"n\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instOne'</span><span class=\"w\"> </span><span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">415</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">416</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|</span><span class=\"w\">   </span><span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">418</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|-'_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">417</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"c1\">-- fvar</span>\n</code></pre></div>",
        "id": 445780874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718870093
    },
    {
        "content": "<p>Surely that first one is a typo, and it shoudn't say <code>inspect: '1'</code>?</p>",
        "id": 445793961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718873964
    },
    {
        "content": "<p>Actually, both should be correct: the LHS even pretty prints differently</p>",
        "id": 445794431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718874082
    },
    {
        "content": "<p>So on master the LHS of <code>(1 : ∀ i, f i) i = 1</code> is <code>1</code>? Are you reducing somehow?</p>",
        "id": 445794553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718874117
    },
    {
        "content": "<p>No, that is just what you see with the cursor right after <code>:=</code></p>",
        "id": 445794736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718874155
    },
    {
        "content": "<p>(\"no\" was to reducing, yes, on master that is how the LHS looks like, just 1)</p>",
        "id": 445794974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718874223
    },
    {
        "content": "<p>You are making me doubt, but I checked a few times.  I'm on mobile now, though, but feel like I should be checking again!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 445796034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718874492
    },
    {
        "content": "<p>I am now at a computer and I no longer see the lhs as  <code>1</code>, but instead as <code>1 i</code>.  I am not sure what was happening when I was looked at this earlier.</p>",
        "id": 445805520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718877280
    }
]