[
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11377\">#11377</a>, which introduces two changes to CI:</p>\n<ul>\n<li>it checks that <code>Archive</code> and <code>Counterexamples</code> are quiet;</li>\n<li>it uploads the cache even when <code>Mathlib</code> is noisy.</li>\n</ul>\n<p>Of course, I think that both are improvements, but I am happy to take comments!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 426584717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710434965
    },
    {
        "content": "<p>I am also running a side PR to make sure that the noisiness of <code>Mathlib</code> is indeed guaranteed: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11378\">#11378</a>.</p>",
        "id": 426586976,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710435663
    },
    {
        "content": "<p>Floris pointed out that the cache is uploaded already, before the change.  The check of noisiness does not happen with the current CI, though and does happen with the proposed change.</p>",
        "id": 426598950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710439427
    },
    {
        "content": "<p>A bigger change to CI that would be great would be too parallelize as much as possible after the build job. This would require turning steps into jobs, and generally making the CI file more complicated.</p>",
        "id": 426628357,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710450145
    },
    {
        "content": "<p>Artifacts are not automatically shared between jobs.</p>",
        "id": 426628458,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710450188
    },
    {
        "content": "<p>We could either do a lot of cache get, or use existing GitHub tools to move files between jobs. I don't think there is an example of this in Mathlib CI yet, although Lean CI does this I think.</p>",
        "id": 426628675,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710450260
    },
    {
        "content": "<p>Running the lean4checker requires nothing of the sort, right?  It could start running as soon as you know that mathlib built, while Archive and Counterexamples still use the Mathlib cache, no?</p>",
        "id": 426629031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710450375
    },
    {
        "content": "<p>I am saying this, since that is the single slowest step after building mathlib and does not actually seem to use any artifacts, other than the knowledge that it has a chance of succeeding, since Lean already verified mathlib.</p>",
        "id": 426629123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710450422
    },
    {
        "content": "<p>Ok, I did not realize that lean4checker verifies the correctness of the <code>olean</code>s, so sharing is required.</p>",
        "id": 426633940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710452401
    },
    {
        "content": "<p>Given the expected failure profile of <code>lean4checker</code>, it would be completely okay to turn this into a job that runs only daily or weekly on <code>master</code>, as long as it reports failures very obviously. (e.g. zulip bot message)</p>",
        "id": 426655616,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710464380
    },
    {
        "content": "<p>Maybe it could be a test that is only run by bors when merging into master, but that does not run on PRs.</p>",
        "id": 426678311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710481760
    }
]