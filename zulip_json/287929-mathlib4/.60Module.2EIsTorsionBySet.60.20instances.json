[
    {
        "content": "<p>I'm looking at the instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.IsTorsionBySet.isScalarTower#doc\">docs#Module.IsTorsionBySet.isScalarTower</a> and must say I don't see how it is supposed to work in Lean 4: looks like the <code>hm</code> parameter is intended to be inferred by unification with the <code>SMul</code> instance, <code>(IsTorsionBySet.module hM).toSMul</code>. But isn't this always synthesized separately and later checked for defeq, so not able to be supplied at all?</p>",
        "id": 420658639,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707487427
    },
    {
        "content": "<p>What happens if you change it to a def and recompile? :-)</p>",
        "id": 420660647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707488122
    },
    {
        "content": "<p>I was hoping not to have to wait for a Mathlib recompilation :)</p>",
        "id": 420661011,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707488246
    },
    {
        "content": "<p>I think the idea is that you get the tower instance when you locally make the def an instance</p>",
        "id": 420661114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707488281
    },
    {
        "content": "<p>I doubt anything downstream uses the instance, so I don't think disabling it and seeing if everything still works is very useful</p>",
        "id": 420661255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707488323
    }
]