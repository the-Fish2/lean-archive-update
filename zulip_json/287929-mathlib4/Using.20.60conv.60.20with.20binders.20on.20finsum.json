[
    {
        "content": "<p>Is there a mechanism for hooking custom congruence lemmas into <code>conv</code>? How can I tell it to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsum_congr_Prop#doc\">docs#finsum_congr_Prop</a> in the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- goal: | ∑ᶠ (_ : i &lt; 3), i</span>\n    <span class=\"n\">skip</span>\n    <span class=\"c1\">-- how do I get my goal to be `| i &lt; 3` via `finsum_congr_Prop`?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426524577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710417003
    },
    {
        "content": "<p><code>rw [finsum_congr_Prop _ fun x =&gt; rfl]</code> is close, but it leaves me with a metavariable that I want <code>conv</code> to absorb</p>",
        "id": 426524883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710417137
    },
    {
        "content": "<p>It's clunky, but you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsum_congr_Prop</span>\n    <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">skip</span>\n    <span class=\"c1\">-- | i &lt; 3</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsum_congr_Prop</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- | i &lt; 3</span>\n</code></pre></div>",
        "id": 426525249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710417289
    },
    {
        "content": "<p>(To a first approximation, <code>congr</code> just does <code>apply</code> with a congruence lemma.)</p>",
        "id": 426525378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710417344
    },
    {
        "content": "<p>There's no mechanism for custom congruence lemmas yet though. I think only the <code>congr!</code> tactic (and tactics using <code>congr!</code>) is the only use of them outside of <code>simp</code>.</p>",
        "id": 426525550,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710417393
    },
    {
        "content": "<p>That second example doesn't work for me, there's a stray <code>⊢ ℕ → Prop</code> that comes first</p>",
        "id": 426526531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710417770
    },
    {
        "content": "<p>Weird, something changed in the last week of mathlib (or Lean? I don't know, I was on nightly-testing I think)</p>",
        "id": 426527772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710418235
    },
    {
        "content": "<p>This does the right thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"n\">finsum_congr_Prop</span>\n    <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 426528107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710418359
    },
    {
        "content": "<p>Anyway, I'd like to see <code>conv</code> have some tactics for applying a <code>@[congr]</code> lemma, maybe that could be <code>congr</code> itself, so <code>enter</code> would gain that power.</p>",
        "id": 426528418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710418489
    }
]