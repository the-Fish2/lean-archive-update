[
    {
        "content": "<p>Can someone recommend a next step in debugging this failure? (This is from a branch...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RingHomId</span> <span class=\"o\">(</span><span class=\"n\">R.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">R.map_id</span> <span class=\"n\">X</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RingHomId</span> <span class=\"o\">(</span><span class=\"n\">R.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PresheafOfModules</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n                  <span class=\"c1\">-- failed to synthesize instance RingHomId ‚áë(R.map (ùüô X))</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n<span class=\"c1\">-- [Meta.synthInstance] ‚ùå RingHomId ‚áë(R.map (ùüô X)) ‚ñº</span>\n<span class=\"c1\">--   [] no instances for RingHomId ‚áë(R.map (ùüô X)) ‚ñº</span>\n<span class=\"c1\">--     [instances] #[]</span>\n</code></pre></div>",
        "id": 428339705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711117169
    },
    {
        "content": "<p>In particular, how can I get more info from Lean why it thinks there are no instances? Clearly there is an instance a few lines up. (And this instance works when provided manually.)</p>",
        "id": 428341792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711117714
    },
    {
        "content": "<p>your code seems to work as is for me?</p>",
        "id": 428343389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711118110
    },
    {
        "content": "<p>Right, because I didn't give you my branch. I'll push it now.</p>",
        "id": 428356684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711121644
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/jmc-comp-triples\">branch#jmc-comp-triples</a></p>",
        "id": 428356762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711121669
    },
    {
        "content": "<p>What‚Äôs the imports?</p>",
        "id": 428357343,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711121834
    },
    {
        "content": "<p>The problem occurs halfway the file <code>Mathlib/Algebra/Category/ModuleCat/Presheaf.lean</code> on that branch.</p>",
        "id": 428358386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711122151
    },
    {
        "content": "<p>It is trying to coerce from a ring hom whereas the instance is coercing from a function.</p>",
        "id": 428360499,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711122779
    },
    {
        "content": "<p>Can you tell me how you found that?</p>",
        "id": 428361036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711122941
    },
    {
        "content": "<p>Expanding the term coming from the instance and expanding what was expected at the failure</p>",
        "id": 428361611,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711123111
    },
    {
        "content": "<p>I can‚Äôt really dig anymore at the moment</p>",
        "id": 428361710,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711123149
    },
    {
        "content": "<p>Ok, I think I understand what you mean:</p>\n<ul>\n<li>the instance is using <code>RingCat.instFunLike</code> under the hood, whereas</li>\n<li>the failure expects something using <code>RingHom.instFunLike</code>.</li>\n</ul>\n<p>Those two are defeq, but Lean probably doesn't get a chance to realize that.</p>",
        "id": 428362874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711123490
    },
    {
        "content": "<p>Oh right! Sorry <code>\\to</code> and <code>\\hom</code> look almost the same now in nvim</p>",
        "id": 428363085,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711123561
    },
    {
        "content": "<p>I guess this note is relevant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instFunLike</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Note: this is apparently _not_ defeq to RingHom.instFunLike with reducible transparency</span>\n  <span class=\"n\">ConcreteCategory.instFunLike</span>\n</code></pre></div>",
        "id": 428373662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711126726
    },
    {
        "content": "<p>And I should point out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">RingCat.instFunLike</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.instFunLike</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 428373712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711126749
    },
    {
        "content": "<p>Can we just put Homs of RingCat et al. in a structure wrapper already?</p>",
        "id": 428373851,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711126799
    },
    {
        "content": "<p>Part of me is a bit sad if that is necessary, but maybe it's the path of least resistance.</p>",
        "id": 428374172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711126898
    },
    {
        "content": "<p>The path of more resistance would be to unbundle homs from <code>Category</code>.</p>",
        "id": 428374431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711126971
    },
    {
        "content": "<p>or maybe make certain things reducible in a clever way which isn't obvious to me.</p>",
        "id": 428374566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711127022
    },
    {
        "content": "<p>This works, but it's an ugly <code>convert</code> hack.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Algebra/Category/ModuleCat/Presheaf.lean b/Mathlib/Algebra/Category/ModuleCat/Presheaf.lean</span>\n<span class=\"gh\">index 572cc07091..6a36a907ec 100644</span>\n<span class=\"gd\">--- a/Mathlib/Algebra/Category/ModuleCat/Presheaf.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Algebra/Category/ModuleCat/Presheaf.lean</span>\n<span class=\"gu\">@@ -62,37 +62,22 @@ theorem map_apply (P : PresheafOfModules R) {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (x) :</span>\n<span class=\"w\"> </span>    P.map f x = (P.presheaf.map f) x :=\n<span class=\"w\"> </span>  rfl\n\n<span class=\"gd\">-instance (X : C·µí·µñ) : RingHomId (R.map (ùüô X)) where</span>\n<span class=\"gi\">+instance ringHomId (X : C·µí·µñ) : RingHomId (R.map (ùüô X)) where</span>\n<span class=\"w\"> </span>  eq_id := by rw [R.map_id X]; rfl\n\n<span class=\"gd\">-instance {X Y Z : C·µí·µñ} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :</span>\n<span class=\"gi\">+instance ringHomCompTriple {X Y Z : C·µí·µñ} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :</span>\n<span class=\"w\"> </span>    RingHomCompTriple (R.map f) (R.map g) (R.map (f ‚â´ g)) where\n<span class=\"w\"> </span>  comp_eq := by rw [R.map_comp f g]; rfl\n\n<span class=\"w\"> </span>@[simp]\n<span class=\"w\"> </span>theorem map_id (P : PresheafOfModules R) (X : C·µí·µñ) :\n<span class=\"gd\">-    P.map (ùüô X) = LinearMap.id' := by</span>\n<span class=\"gi\">+    P.map (ùüô X) = by convert LinearMap.id'; apply ringHomId := by</span>\n<span class=\"w\"> </span>  ext\n<span class=\"w\"> </span>  simp\n\n<span class=\"w\"> </span>@[simp]\n<span class=\"w\"> </span>theorem map_comp (P : PresheafOfModules R) {X Y Z : C·µí·µñ} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :\n<span class=\"gd\">-    P.map (f ‚â´ g) = (P.map g).comp (P.map f) := by</span>\n<span class=\"gi\">+    P.map (f ‚â´ g) = by convert (P.map g).comp (P.map f); apply ringHomCompTriple := by</span>\n<span class=\"w\"> </span>  ext\n<span class=\"w\"> </span>  simp\n</code></pre></div>",
        "id": 428376101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711127568
    },
    {
        "content": "<p>I suppose <code>RingHom.comp (P.map g) (P.map f)</code> should also work instead of <code>convert ...</code>?</p>",
        "id": 428376381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711127672
    },
    {
        "content": "<p>Got a little time. Let me poke at the reducible and instances defeq failure</p>",
        "id": 428376422,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711127691
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11590\">#11590</a> with this changes.</p>",
        "id": 428376478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711127707
    },
    {
        "content": "<p>Feel free to push to that branch</p>",
        "id": 428376495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711127713
    },
    {
        "content": "<p>The goal is to refactor <code>RingHomCompTriple</code> so that it no longer talks about ring homs, but just any functions. Then the infrastructure can be reused for other kinds of equivariant homs.</p>",
        "id": 428376614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711127752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> needs something like that for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a></p>",
        "id": 428376648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711127763
    },
    {
        "content": "<p>It won‚Äôt unfold <code>CategoryTheory.forget RingCat</code></p>",
        "id": 428376801,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711127815
    },
    {
        "content": "<p>Strange</p>",
        "id": 428377272,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711128000
    },
    {
        "content": "<p>Here is a default transparency successful trace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">RingCat.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">RingHom.instFunLike</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">RingCat.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CategoryTheory.ConcreteCategory.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n            <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CategoryTheory.CategoryStruct.toQuiver.1</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CategoryTheory.BundledHom.MapHom</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span><span class=\"o\">)</span> <span class=\"n\">R.str</span> <span class=\"n\">S.str</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor.2</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.BundledHom.bundledHomOfParentProjection</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">R.str</span> <span class=\"n\">S.str</span>\n                    <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.BundledHom.bundledHomOfParentProjection</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">R.str</span> <span class=\"n\">S.str</span>\n                      <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">SemiRingCat.bundledHom.toFun</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">SemiRingCat.bundledHom.1</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚áë</span><span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">RingHom.instFunLike.1</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span> <span class=\"bp\">‚ñº</span>\n                                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë</span><span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">f</span> <span class=\"bp\">‚ñº</span>\n                                    <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">f.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">f.1</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor.1</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R.1</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R.1</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">R.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">R.1</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor.1</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">S.1</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">S.1</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">S.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">S.1</span>\n</code></pre></div>",
        "id": 428377876,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711128225
    },
    {
        "content": "<p>Versus the unsuccessful <code>with_reducible_and_instances rfl</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">RingCat.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">RingHom.instFunLike</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">RingCat.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CategoryTheory.ConcreteCategory.instFunLike</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n            <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">Quiver.Hom</span> <span class=\"bp\">=?=</span> <span class=\"n\">RingHom</span>\n            <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CategoryTheory.BundledHom.MapHom</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span><span class=\"o\">)</span> <span class=\"n\">R.str</span> <span class=\"n\">S.str</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">SemiRingCat.AssocRingHom</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">S</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor.2</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor.2</span> <span class=\"n\">f</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 428378314,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711128365
    },
    {
        "content": "<p>This is a possibility </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">bundledHom</span> <span class=\"o\">:</span> <span class=\"n\">BundledHom</span> <span class=\"n\">AssocRingHom</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">_</span>\n  <span class=\"n\">comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f.comp</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 428380006,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711129007
    },
    {
        "content": "<p>I see two non-reducible declarations in there</p>",
        "id": 428380082,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711129031
    },
    {
        "content": "<p>No it is most likely non-reducibility of <code>RingCat</code></p>",
        "id": 428381782,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711129650
    },
    {
        "content": "<p>Hmm. Nope</p>",
        "id": 428382452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711129900
    },
    {
        "content": "<p><del>Well I fixed it</del> Nevermind the error wasn‚Äôt highlighted</p>",
        "id": 428383425,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711130266
    },
    {
        "content": "<p>Apparently you can delete <code>deriving</code> for <code>LargeCategory RingCat</code> and nothing between there and this file breaks</p>",
        "id": 428383902,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711130452
    },
    {
        "content": "<p>Lol, crazy mathlib facts you're spitting there (-;</p>",
        "id": 428384411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711130625
    },
    {
        "content": "<p>Ok now I think I really did fix it. Make <code>RingCat</code> <code>reducible</code> and then <code>ConcreteCategory RingCat</code> becomes a <code>inferInstance</code> but you need to change the proof to that. Or you can just get rid of the explicit <code>LargeCategory</code> and <code>ConcreteCategory</code> instances since Lean can find them with <code>RingCat</code> reducible</p>",
        "id": 428385834,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711131176
    },
    {
        "content": "<p>And duh. That deletion I mentioned only works because I made <code>RingCat</code> <code>reducible</code></p>",
        "id": 428385918,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711131206
    },
    {
        "content": "<p>It seems fine to make <code>RingCat</code> <code>reducible</code> since it wraps <code>Bundled Ring</code> which is a structure instance</p>",
        "id": 428386116,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711131279
    },
    {
        "content": "<p>I guess one should check performance to be safe</p>",
        "id": 428386641,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711131479
    },
    {
        "content": "<p>Unfortunately it still doesn‚Äôt fix the error you originally presented since <code>Bundled.\\a</code> is not reducible (I think)</p>",
        "id": 428387309,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711131734
    },
    {
        "content": "<p>Making that reducible doesn‚Äôt help</p>",
        "id": 428388239,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711132116
    },
    {
        "content": "<p>Hmmz, ok. So maybe the conclusion should be that these lemmas are crossing API boundaries?</p>",
        "id": 428389483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711132634
    },
    {
        "content": "<p>I certainly think cleaner boundaries would help</p>",
        "id": 428389701,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711132726
    },
    {
        "content": "<p>Here is _a_ fix to the original problem given the above is already implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bizzle</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R.obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">R.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">R.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RingHomId</span> <span class=\"o\">(</span><span class=\"n\">bizzle</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 428391236,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711133351
    },
    {
        "content": "<p>I haven‚Äôt tried to disentangle the two things</p>",
        "id": 428391418,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711133409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11595\">#11595</a> makes <code>SemiRingCat</code> and <code>RingCat</code> reducible. Performance impact currently being assessed</p>",
        "id": 428414177,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711144108
    },
    {
        "content": "<p>At worst <a href=\"http://speed.lean-fro.org/mathlib4/compare/d10767eb-80ab-4658-901c-305e2bfe7eae/to/9b2f1252-337e-4f7d-9186-33a93eeab0f7\">neutral</a></p>",
        "id": 428416737,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711145651
    }
]