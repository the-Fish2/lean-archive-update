[
    {
        "content": "<p>I've been experimenting with adding <code>@[simp]</code> to <code>Nat.succ_eq_add_one</code>. I got a fair way, but have run out of time for now.</p>\n<p>If anyone would like to see if they can push it through, please use the <code>lean-pr-testing-3579</code> branch.</p>",
        "id": 424577938,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528149
    },
    {
        "content": "<p>Mostly, fixing it consists of finding places where <code>simp</code> is looping because it is being given lemmas that introduce <code>succ</code>.</p>",
        "id": 424578059,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528219
    },
    {
        "content": "<p>But the current errors on that branch look a bit weirder.</p>",
        "id": 424578070,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528231
    },
    {
        "content": "<p>I think it would be nice to be certain that <code>Nat.succ</code> never appeared in the simp normal form of a <code>Nat</code> expression.</p>",
        "id": 424578092,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528270
    },
    {
        "content": "<p>There were also plans to make <code>+1</code> the default syntax used in induction/recursion. I guess that should maybe be done first?</p>",
        "id": 424578100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528272
    },
    {
        "content": "<p>It doesn't seem necessary to do that first.</p>",
        "id": 424578149,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528286
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> was working on that.</p>",
        "id": 424578155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528289
    },
    {
        "content": "<p>Both make sense to do, but it hasn't been on obstacle on this toolchain/branch.</p>",
        "id": 424578167,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528311
    },
    {
        "content": "<p>Right, it's not a \"formal\" prerequisite.</p>",
        "id": 424578172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528325
    },
    {
        "content": "<p>But I always refrained from adding that simp attribute, because it felt to me like you're fighting a tide if <code>induction</code> doesn't cooperate.</p>",
        "id": 424578208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528365
    },
    {
        "content": "<p>Better to fight the tide than drown in <code>succ</code>s. :-)</p>",
        "id": 424578294,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/424577938\">said</a>:</p>\n<blockquote>\n<p>I've been experimenting with adding <code>@[simp]</code> to <code>Nat.succ_eq_add_one</code>. I got a fair way, but have run out of time for now.</p>\n<p>If anyone would like to see if they can push it through, please use the <code>lean-pr-testing-3579</code> branch.</p>\n</blockquote>\n<p>Might it make more sense to add this attribute in mathlib initially so that it doesn't end up tied to the cadence of lean releases? Or is there too much stuff about succ in core/std for that to work?</p>",
        "id": 424580847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709530378
    },
    {
        "content": "<p>Yes, it requires changes in the lean4 repository, and I would like to have the benefits there, too.</p>",
        "id": 424585640,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709533645
    },
    {
        "content": "<p>Moreover, I would like to reduce the discrepancies between the simp normal forms in different libraries, rather than increase them!</p>",
        "id": 424585713,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709533685
    },
    {
        "content": "<p>We're starting to add test files in Lean verifying various simp reductions. It would be great if we could start running these automatically post-Mathlib to guard against breakages.</p>",
        "id": 424585793,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709533760
    },
    {
        "content": "<p>(obviously this requires coordination, and there's no obligation on Mathlib to not break things, but if we can pull it off it makes life better for everyone)</p>",
        "id": 424585905,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709533809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/424578155\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> was working on that.</p>\n</blockquote>\n<p>The obstruction so far has been issue <a href=\"https://github.com/leanprover/lean4/pull/3022\">lean4#3022</a>, where the custom induction principle ends up with expressions such as <code>Nat.add n 0</code> instead of <code>n</code>.</p>",
        "id": 424586123,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709533946
    },
    {
        "content": "<p>Leo has just fixed this!</p>",
        "id": 425224294,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709784752
    },
    {
        "content": "<p>Unfortunately Mathlib's lean-pr-testing-3579 branch is an unusable state right now, but hopefully I will get it working soon. I would love to add @[simp] to succ_eq_add_one now!</p>",
        "id": 425226300,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709786361
    },
    {
        "content": "<p>Thanks to <a href=\"https://github.com/leanprover/lean4/pull/3616\">lean4#3616</a>, I've now gone ahead and made <a href=\"https://github.com/leanprover/lean4/pull/3629\">lean4#3629</a> for making custom induction/cases principles (thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> for the initial work on creating these attributes) and giving <code>Nat</code> the custom principles we've long wanted.</p>",
        "id": 425235575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709792797
    },
    {
        "content": "<p>Beyond needing to be reviewed, merging will also need to wait for a mathlib that includes <a href=\"https://github.com/leanprover/lean4/pull/3616\">lean4#3616</a>, to create the likely large bump PR</p>",
        "id": 425235743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709792923
    },
    {
        "content": "<p><code>nightly-testing</code> currently has lots fo failures from <a href=\"https://github.com/leanprover/lean4/pull/3616\">lean4#3616</a>. Fixes welcome!</p>",
        "id": 425271752,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709807195
    },
    {
        "content": "<p>Making <code>· + 1</code> the normal form looks like the right decision to me, and adding <code>@[simp]</code> to <code>Nat.succ_eq_add_one</code> is a great first step. However this transition is as of now incomplete even for core, for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_cons#doc\">docs#List.length_cons</a> still introduces <code>Nat.succ</code>, and there is no theorem equivalent to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pred_succ#doc\">docs#Nat.pred_succ</a> for <code>· + 1</code> and <code>· - 1</code>.</p>\n<p>I would like to create a PR which addresses some of these issues, which I find easy to fix. This would be my first PR for Lean. Would such a PR be welcomed? Is there enough bandwidth to review such a PR? How long should I expect a review cycle to take?</p>",
        "id": 439342585,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1716025818
    },
    {
        "content": "<p>Yes, I can review a PR to change the RHS of <code>length_cons</code>, and similarly (separately?) to add an analogue of <code>pred_succ</code>.</p>\n<p>Please make sure you base it off the <code>nightly-with-mathlib</code> tag, so we get automatic testing of downstream projects.</p>",
        "id": 439481797,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716168695
    },
    {
        "content": "<p>There are quite a few more such theorems with missing analogues, my first instinct would have been to collect them all into a single PR. But it sounds that I should make a separate PR for each.</p>\n<p>I'm looking at <a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>, does it make sense to create a RFC issue for this?</p>",
        "id": 439513304,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1716188278
    },
    {
        "content": "<p>I think two PRs will suffice: one that tries to avoid Nat.succ or Nat.pred on the RHS of a lemma, when the arithmetical version suffices, and then a second one that introduces the missing analogues.</p>",
        "id": 439513747,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716188418
    },
    {
        "content": "<p>For the second such PR, perhaps tell me something more about how many lemmas you anticipate adding?</p>",
        "id": 439513800,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716188442
    },
    {
        "content": "<p>For the first such PR, no RFC necessary, this discussion will do.</p>",
        "id": 439513822,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716188454
    },
    {
        "content": "<p>So far in my personal project I organically encountered three cases: <code>Nat.succ_eq_one_add</code>, <code>Nat.succ_le_of_lt</code>, <code>Nat.pred_lt</code>, which all belong in the second PR. I found the examples I gave here (<code>Nat.pred_succ</code>, and <code>List.length_cons</code>) using loogle.</p>\n<p>They all fall into the useful, but trivially to prove, category, so the work is primarily to find each theorem, check if an analogous theorem already exists and add it otherwise. That's why my plan is to fix them all in one go. I don't know how many theorems these are. To avoid disruption, I don't plan to remove any theorems, just to add the missing ones. </p>\n<p>Next step for me is to set up the two PRs with the examples I already have, and see if they look good. Then add additional examples later.</p>",
        "id": 439519969,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1716191257
    },
    {
        "content": "<p>I've started a <a href=\"https://github.com/leanprover/lean4/pull/4242\">draft PR</a>. I based it on <code>nightly-with-mathlib</code> and the first commit only changed documentation (for <code>Nat.succ</code>),  but the CI test failed nevertheless.</p>\n<p>Most of the work consists of identifying the functions and checking if a substitute exists, as I do in <a href=\"https://github.com/leanprover/lean4/pull/4242#issuecomment-2122807840\">this comment</a>. A ✓ means that I found a theorem that I believe is a suitable substitute, while \"new\" is the name of the new theorem.</p>",
        "id": 439898239,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1716323162
    },
    {
        "content": "<p>Sorry about the Mathlib CI failure. This may be an interaction with recent changes in Lake, I'll investigate. I'm hoping it may just come good when you get your PR to build next, and or rebase it onto <code>nightly-with-mathlib</code> again (this tag gets overwritten every day).</p>",
        "id": 439926537,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716334054
    },
    {
        "content": "<p>I've been going through TPIL recently and ran into this change breaking several of the examples in the Inductive Types chapter (basically all of the tactic proofs at the end of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html#defining-the-natural-numbers\">Defining the Natural Numbers</a>).</p>",
        "id": 446392853,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719133066
    },
    {
        "content": "<p>And as a minimal case, this proof leads to <code>simp</code> looping:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 446393009,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719133130
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"651480\">@Derrik Petrin</span> for the heads up on this. I guess that PRs for <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> are welcome? I think <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> are the most likely people to do an overall update.</p>",
        "id": 446393026,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719133137
    },
    {
        "content": "<p>Is there a different lemma that the TPIL examples should be using?</p>",
        "id": 446393080,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719133157
    },
    {
        "content": "<p>Well, in my opinion it should be proving a different statement, now that we try to hide <code>Nat.succ</code> as much as possible from users!</p>",
        "id": 446393168,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719133186
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 446393326,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719133227
    },
    {
        "content": "<p>I do wonder if turning <code>Nat.add_assoc</code> into a global simp lemma would be fine. I am increasingly in favour of including associativity lemmas in the simp set.</p>",
        "id": 446393469,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719133281
    },
    {
        "content": "<p>Since that particular section/chapter is using <code>Nat</code> to demonstrate defining and using inductive types, it probably wants to keep <code>succ</code> explicit. But I'll see if using assoc works for the affected example proofs.</p>",
        "id": 446394060,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719133571
    },
    {
        "content": "<p>Yes, it really needs to be updated to use a <code>MyNat</code>!</p>",
        "id": 446394192,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719133644
    },
    {
        "content": "<p>Ah, yep, that sounds like the overall best move here :)</p>",
        "id": 446395516,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719134211
    },
    {
        "content": "<p>Considering one of the proofs is for <code>add_assoc</code> itself, using <code>simp [add_assoc]</code> feels a little like cheating <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 446395717,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719134299
    },
    {
        "content": "<p>In the meantime, <code>simp only [...]</code> seems to work fine.</p>",
        "id": 446395776,
        "sender_full_name": "Derrik Petrin",
        "timestamp": 1719134347
    },
    {
        "content": "<p>We'll see what happens to Mathlib on <a href=\"https://github.com/leanprover/lean4/pull/4539\">lean#4539</a>.</p>",
        "id": 446396471,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719134910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/446393026\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"651480\">Derrik Petrin</span> for the heads up on this. I guess that PRs for <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> are welcome? I think <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> and <span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> are the most likely people to do an overall update.</p>\n</blockquote>\n<p>I have nothing to do with TPIL, I’m only an author of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>.</p>",
        "id": 446419201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719149455
    },
    {
        "content": "<p>TPIL is due for a major overhaul. I added an issue on Github.</p>",
        "id": 446468180,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1719173373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/446396471\">said</a>:</p>\n<blockquote>\n<p>We'll see what happens to Mathlib on <a href=\"https://github.com/leanprover/lean4/pull/4539\">lean#4539</a>.</p>\n</blockquote>\n<p>It's not good. I think we would need to reverse the direction of <code>Nat.add_assoc</code> before we could consider making it a <code>@[simp]</code> lemma, but this first step would itself be highly disruptive.</p>",
        "id": 446489547,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719187316
    },
    {
        "content": "<p>What' s your general rationale behind associativity lemmas becoming simp lemmas?</p>",
        "id": 446533427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719212725
    },
    {
        "content": "<p>They don't seem to hurt, generally, it improves canonicalisation, and often with some additional lemmas (e.g. as generated by <code>@[reassoc]</code> in the category theory library) you can effectively to rewriting up to associativity without any additional automation.</p>",
        "id": 446535256,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719213430
    },
    {
        "content": "<p>Yes, but the counterargument is that you don't want a nonterminal simp to shuffle your goal around. As in, I'm fine with simp reassociating my goal when it closes it anyway, but I'm not fine with having to remove the associativity lemmas one by one from a nonterminal <code>simp only</code> to make sure my goal isn't shuffled around.</p>",
        "id": 446536178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719213763
    },
    {
        "content": "<p>Commutativity lemmas also improve canonicalisation, yet there is a pretty clear consensus that they shouldn't be simp lemmas</p>",
        "id": 446536272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719213798
    },
    {
        "content": "<p>In fact, distributivity lemmas also improve canonicalisation, yet we have decided that they really shouldn't be simp lemmas, at least when they are not affine</p>",
        "id": 446536584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719213907
    },
    {
        "content": "<p><code>and_congr_left_iff</code> and <code>and_congr_right_iff</code> are two useful simp lemmas, and they can’t both be simp if associativity is simp in either direction.</p>\n<p>These are the ones I come across personally, but there are analogues where the goals are arithmetic rather than logic.</p>",
        "id": 446865408,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719317967
    },
    {
        "content": "<p>Edit: I guess they can be simp, but would compete with simped associativity in cases where they are the better choice.</p>",
        "id": 446865715,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719318037
    },
    {
        "content": "<p>We can restore confluence by adding additional lemmas, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">and_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_congr_left_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Of course there may be too many for this to be viable. Joachim has a lovely automated tool for identifying missing confluence lemmas.</p>",
        "id": 447024433,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719360085
    },
    {
        "content": "<p>I've started the experiment of making the inverse of <code>Nat.add_assoc</code> a simp lemma in <a href=\"https://github.com/leanprover/lean4/pull/4557\">this draft PR</a> and CI succeeds for Lean.</p>\n<p>I needed to fix a lot of proofs, but the fixes where pretty trivial, and only in one place I had to use <code>simp [..., - Nat.add_assoc]</code>and at least a few proofs became simpler in the sense, that <code>simp</code> required fewer additional lemmas.</p>\n<p>I will check how this would impact Mathlib and Batteries, when I find the time in the next few days.</p>",
        "id": 447307492,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1719429062
    },
    {
        "content": "<p>Thanks for investigating. I will be curious what you find!</p>",
        "id": 447387571,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719464488
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/batteries/compare/lean-pr-testing-4557...markusschmaus:batteries:lean-pr-testing-4557\">fixes for <code>batteries</code> are done</a>. Just like in core search and replacing <code>← Nat.add_assoc</code> with <code>Nat.add_assoc'</code> and <code>Nat.add_assoc</code> with <code>Nat.add_assoc'</code> works for most cases. This leads to a few <code>rfl</code> becoming superfluous which need to be deleted. There were a few places where bigger changes were needed, almost all of them were in Batteries/Data/String/Lemmas.</p>",
        "id": 447691230,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1719562195
    },
    {
        "content": "<p>Mathlib now builds as well with <a href=\"https://github.com/leanprover-community/mathlib4/compare/nightly-testing...lean-pr-testing-4557\">these fixes</a>.</p>",
        "id": 447972299,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1719664291
    },
    {
        "content": "<p>Those are surprisingly good.</p>",
        "id": 448055402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719710915
    },
    {
        "content": "<p>We'll need to think a bit further on this, and consult, but I am cautiously optimistic that we can at least add this lemma, and <em>possibly</em> make it @[simp]. It's good to see that this does not actually break anything in Mathlib in the manner Yaël was concerned about above. (Is that right?)</p>",
        "id": 448055567,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719711070
    },
    {
        "content": "<p>Changes like <a href=\"https://github.com/leanprover-community/mathlib4/compare/nightly-testing...lean-pr-testing-4557#diff-07d04a046d145326d6b194de8cc9f54deb9c9b0aee2e2f458919db2685eec351R119-R121\">this one</a> do look suspicious</p>",
        "id": 448070713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719722988
    },
    {
        "content": "<p>That proof should be <code>by simp [choose]; omega</code> in any case. We shouldn't be fighting with <code>Nat</code> by hand unnecessarily anymore. :-)</p>",
        "id": 448074097,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719725847
    },
    {
        "content": "<p>There were a couple of proofs where <code>omega</code> would have significantly simplified things. For this experiment I decided to avoid it and tried to stick as close as possible to the style of proofs that I found, so I could better understand the impact of adding this simp lemma. <a href=\"https://github.com/leanprover-community/mathlib4/compare/nightly-testing...lean-pr-testing-4557#diff-b4725538bcf94fe2b292062b6e2197cc3c5412ac4c8e3d45d0e2e044089ed7ccR426-R427\">Here is another example</a> in which omega would have worked wonders.</p>\n<p>Many of the proofs that needed manual adjustments used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_comm#doc\">docs#Nat.add_comm</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_left_comm#doc\">docs#Nat.add_left_comm</a> to arrange the summands in an order which allowed another lemma to be used, this often conflicted with the normal form defined by <code>Nat.add_assoc'</code>, sometimes switching to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_right_comm#doc\">docs#Nat.add_right_comm</a> fixed things, in other cases I used the <code>Nat.add_rotate</code> lemma I introduced (analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_rotate#doc\">docs#add_rotate</a>), since it goes from normal form to normal form.</p>",
        "id": 448089989,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1719737179
    },
    {
        "content": "<p>Yes, I think you've taken the right approach for this experiment, being conservative about replacing <code>Nat</code>-fighting with <code>omega</code>. It was more intended as \"in future, I hope we will do less <code>Nat</code>-fighting\".</p>",
        "id": 448090322,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719737455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/447024433\">said</a>:</p>\n<blockquote>\n<p>Joachim has a lovely automated tool for identifying missing confluence lemmas.</p>\n</blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Can this tool run on mathlib? What is its current output there? Should this run more regularly, after fixing things if needed?</p>",
        "id": 448090941,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719738022
    },
    {
        "content": "<p>It probably could, but it will suggest a <em>lot</em>! I am planning on starting to run it on the <code>List</code> API in Lean soon(*), and hopefully gain some experience there before we try it at larger scales.</p>",
        "id": 448091048,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719738098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/experiment.20making.20.60succ_eq_add_one.60.20.40.5Bsimp.5D.60/near/448091048\">said</a>:</p>\n<blockquote>\n<p>It probably could, but it will suggest a <em>lot</em>! I am planning on starting to run it on the <code>List</code> API in Lean soon(*), and hopefully gain some experience there before we try it at larger scales.</p>\n</blockquote>\n<p>But mathlib also has a <em>lot</em> it would like fixed, right? So I see that as a good thing (and agree with a gradual roll-out).</p>",
        "id": 448256649,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719821174
    }
]