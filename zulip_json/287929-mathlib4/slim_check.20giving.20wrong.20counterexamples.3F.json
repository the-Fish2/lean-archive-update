[
    {
        "content": "<p>Maybe I am just dumb, but it appears that the counterexamples <code>slim_check</code> is producing here are all wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">testBit_pred</span> <span class=\"o\">:</span>\n    <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n      <span class=\"o\">(</span><span class=\"n\">Bool.xor</span> <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span> <span class=\"n\">testBit</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">testBit</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span> <span class=\"c1\">-- proposes various small counterexamples of the form `x &lt; 20`, `i = 1`.</span>\n\n<span class=\"c1\">-- None of which are actually counterexamples:</span>\n<span class=\"n\">run_meta</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"mi\">32</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"mi\">6</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n        <span class=\"o\">(</span><span class=\"n\">Bool.xor</span> <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span> <span class=\"n\">testBit</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">testBit</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"k\">then</span>\n        <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Would anyone have time/inclination to look into this? <code>slim_check</code> is currently a rather incomplete implementation of a wonderful wonderful thing, and could use adoption or even just some attention.</p>",
        "id": 420008365,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707212480
    },
    {
        "content": "<p>I noticed it making some false counterexamples in something else recently, too</p>",
        "id": 420009257,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707212791
    },
    {
        "content": "<p>I have a PR open that probably fixes this</p>",
        "id": 420089480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707237949
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9722\">#9722</a></p>",
        "id": 420089623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707237982
    },
    {
        "content": "<p>Unfortunately it's impossible to test because <code>slim_check</code> uses <code>IO.println</code>, but tests aren't allowed to write to stdout (see <a href=\"#narrow/stream/113488-general/topic/noisy.20tests/near/419142386\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/noisy.20tests/near/419142386</a>)</p>",
        "id": 420089703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238014
    },
    {
        "content": "<p>slim_check should be using <code>logInfo</code> instead of <code>IO.println</code></p>",
        "id": 420239043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707308327
    },
    {
        "content": "<p>Even though logInfo sometimes goes <a href=\"#narrow/stream/270676-lean4/topic/logInfo.20in.20.23eval/near/409412941\">into the void</a>?</p>",
        "id": 420349804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707342952
    },
    {
        "content": "<p>that's an issue with <code>#eval (_ : MetaM _)</code>, not <code>logInfo</code></p>",
        "id": 420373675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707356947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slim_check.20giving.20wrong.20counterexamples.3F/near/420239043\">said</a>:</p>\n<blockquote>\n<p>slim_check should be using <code>logInfo</code> instead of <code>IO.println</code></p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10393\">#10393</a></p>",
        "id": 420741440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707517240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slim_check.20giving.20wrong.20counterexamples.3F/near/420089480\">said</a>:</p>\n<blockquote>\n<p>I have a PR open that probably fixes this</p>\n</blockquote>\n<p>I added this as a test and can confirm the problem is gone after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9722\">#9722</a></p>",
        "id": 420744351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707518693
    }
]