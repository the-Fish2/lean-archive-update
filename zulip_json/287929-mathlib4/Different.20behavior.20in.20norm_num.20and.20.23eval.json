[
    {
        "content": "<p>This works instantly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.LegendreSymbol</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberTheorySymbols</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">21234</span> <span class=\"bp\">|</span> <span class=\"mi\">2512349331023485</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>but this takes forever:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">21234</span> <span class=\"bp\">|</span> <span class=\"mi\">2512349331023485</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why isn't jacobiSym evaluation like in <code>Mathlib.Tactic.NormNum.LegendreSymbol</code> defined as also a <code>csimp</code> rule? I am writing some primality tests and do need a fast computation for jacobiSym. Is there a way to do that currently, using what we have in <code>Mathlib.Tactic.NormNum.LegendreSymbol</code>?</p>",
        "id": 409268335,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1703110146
    },
    {
        "content": "<p>Because nobody did it so far.</p>",
        "id": 409268576,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703110263
    },
    {
        "content": "<p>It should be quite possible to use the algorithm behind the <code>norm_num</code> extension for Jacobi symbols for implementing a reasonably fast function that computes it (it is more or less the euclidean algorithm with some minor twists to deal with powers of two, and one has to keep track of the sign). But so far, nobody has expressed a need for it.</p>",
        "id": 409268876,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703110385
    },
    {
        "content": "<p>Thank you, I just wanted to check I'm not missing something existing in mathlib.</p>",
        "id": 409268938,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1703110413
    },
    {
        "content": "<p>(The <em>definition</em> is based on factorization and Legendre symbols, so it is perhaps not surprising that <code>#eval</code> is slow.)</p>",
        "id": 409269065,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703110462
    },
    {
        "content": "<p>You can use <code>#norm_num</code> by the way rather than <code>#eval</code></p>",
        "id": 409269096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703110475
    },
    {
        "content": "<p>but that doesn't help needing to do the computations at runtime inside another program, unless you set up some things.</p>",
        "id": 409269163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703110519
    }
]