[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Is the following expected behavior for Loogle?</p>",
        "id": 429455073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711383527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⊢ TopologicalSpace.SeparableSpace (?α → ?β)</p>",
        "id": 429455128,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711383538
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 429455131,
        "sender_full_name": "loogle",
        "timestamp": 1711383539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⊢ TopologicalSpace.SeparableSpace ((i : ?α) → ?β i)</p>",
        "id": 429455207,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711383556
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Bases.html#TopologicalSpace.instSeparableSpaceForAllTopologicalSpace\">TopologicalSpace.instSeparableSpaceForAllTopologicalSpace</a></p>",
        "id": 429455213,
        "sender_full_name": "loogle",
        "timestamp": 1711383557
    },
    {
        "content": "<p>Hmm, I don’t claim that there isn’t some amount of accidentialy here, but I would argue that it could be somewhat intentional. The metavariable <code>?β</code> is introduced outside any local scopes, so it won’t unify with something mentioning local variables. Or put differently, <code>?α → ?β</code> looks like a non-dependent arrow, so it's not wrong to reject that.</p>\n<p>But I admit I am rationalizing :-)</p>",
        "id": 429468850,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711386605
    },
    {
        "content": "<p>It matches what <code>conv =&gt; pattern</code> does, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- does not work:</span>\n  <span class=\"c1\">-- conv =&gt; pattern (?a → ?b)</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pattern</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429469370,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711386753
    },
    {
        "content": "<p>That feels a bit like a bug, but I'll accept that it possibly needs to be this way. I just tried to think through in my head a way to get the second query out of the first, but it seems infeasible in general (unless you implement explicit support for exactly \"is this subexpression of the form metavariable → metavariable? If so, replace it with a dependent one\").</p>",
        "id": 429475042,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711388353
    },
    {
        "content": "<p>I agree it’s not perfect yet.</p>",
        "id": 429475534,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711388509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">TopologicalSpace.SeparableSpace</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works too.</p>",
        "id": 429475776,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711388574
    },
    {
        "content": "<p>Loogle's behavior seems like the desired behavior to me.</p>",
        "id": 429756297,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711495968
    }
]