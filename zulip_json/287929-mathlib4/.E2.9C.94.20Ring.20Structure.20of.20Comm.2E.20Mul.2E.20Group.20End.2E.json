[
    {
        "content": "<p>Hi all, suppose we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>How should I go about defining </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">Monoid.End</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the addition is pointwise multiplication, and multiplication is composition.</p>\n<p>In mathlib <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.commGroup#doc\">docs#MonoidHom.commGroup</a> gives us the additive structure but as a multiplicative group, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoid.End.instRing#doc\">docs#AddMonoid.End.instRing</a> asks for additive group as input.</p>\n<p>Clearly the multiplication notation class is already used for <code>Monoid.End G</code> as composition, so what should be done?</p>",
        "id": 425461620,
        "sender_full_name": "Qi Ge",
        "timestamp": 1709882464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> we very briefly discussed about this but unfortunately I didn't quite get what you mentioned <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 425461650,
        "sender_full_name": "Qi Ge",
        "timestamp": 1709882476
    },
    {
        "content": "<p>I guess the obvious answer is to just use additive group <code>G</code>. But the groups I'm interested in are multiplicative.</p>",
        "id": 425464177,
        "sender_full_name": "Qi Ge",
        "timestamp": 1709883939
    },
    {
        "content": "<p>You could use <code>AddMonoid.End (Additive G)</code> if you want to stick to a multiplicative <code>G</code></p>",
        "id": 425465391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709884532
    },
    {
        "content": "<p>Then you get the ring structure automatically</p>",
        "id": 425465530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709884583
    },
    {
        "content": "<p>Thank you! Now I recall thats exactly what <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> told me as well.</p>",
        "id": 425465909,
        "sender_full_name": "Qi Ge",
        "timestamp": 1709884774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668959\">Qi Ge</span> has marked this topic as resolved.</p>",
        "id": 425466538,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709884991
    }
]