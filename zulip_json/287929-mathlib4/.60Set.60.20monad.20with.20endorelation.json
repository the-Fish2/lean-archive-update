[
    {
        "content": "<p>I'm looking into how I can used monads to reason about code. One monad which is of particular interest to me is the <code>Predicate</code> monad, which I recently discovered is already included in Mathlib as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.monad#doc\">docs#Set.monad</a>. There is another related monad which I find of interest, and this is a set, (or predicate) equipped with an endorelation.</p>\n<p>Does anybody know something about this monad? How is it called in the literature?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">StructuredSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">relation</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">consistency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">relation</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">StructuredSet</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Set.monad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>  <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">relation</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₁</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">r.relation</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₁</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relation</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r.set</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"o\">)</span>\n  <span class=\"n\">mk</span> <span class=\"n\">set</span> <span class=\"n\">relation</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">rel</span>\n    <span class=\"n\">unfold_let</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.bind_def</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">rel</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">rel</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"n\">use</span> <span class=\"n\">a₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">rel</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 433121972,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713089098
    },
    {
        "content": "<p>Can you try to prove LawfulMonad for that?</p>",
        "id": 433215110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713164549
    },
    {
        "content": "<p>It looks to me like it might not satisfy <code>pure a &gt;&gt;= f = f a</code></p>",
        "id": 433215383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713164641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Set.60.20monad.20with.20endorelation/near/433215110\">said</a>:</p>\n<blockquote>\n<p>Can you try to prove LawfulMonad for that?</p>\n</blockquote>\n<p>Yes, I can. Sorry if the proof isn't polished, I've learnt a lot about proofs since I wrote this, but the only change I made was to switch from the <code>Predicate</code> monad to the <code>Set</code> monad.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Endorelation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Endorelation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Endorelation</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Endorelation</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">functor</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">Endorelation</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Endorelation</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">functor.lawful</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"n\">Endorelation</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_const</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n  <span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">map</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span>\n  <span class=\"n\">comp_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">r</span>\n    <span class=\"n\">funext</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">b'</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"n\">a'</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">b''</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">use</span> <span class=\"n\">a''</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b''</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Endorelation</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">StructuredSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">relation</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">consistency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">relation</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">StructuredSet</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Set.monad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>  <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">relation</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₁</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">r.relation</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">r.set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₁</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relation</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r.set</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"o\">)</span>\n  <span class=\"n\">mk</span> <span class=\"n\">set</span> <span class=\"n\">relation</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">rel</span>\n    <span class=\"n\">unfold_let</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.bind_def</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">rel</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">rel</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"n\">use</span> <span class=\"n\">a₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">rel</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relation_eq</span> <span class=\"o\">:</span> <span class=\"n\">r₁.relation</span> <span class=\"bp\">=</span> <span class=\"n\">r₂.relation</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">predicate_eq</span> <span class=\"o\">:</span> <span class=\"n\">r₁.set</span> <span class=\"bp\">=</span> <span class=\"n\">r₂.set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">relation_s</span><span class=\"o\">,</span> <span class=\"n\">predicate_s</span><span class=\"o\">,</span> <span class=\"n\">property_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">r₁</span>\n  <span class=\"n\">subst</span> <span class=\"n\">relation_eq</span>\n  <span class=\"n\">subst</span> <span class=\"n\">predicate_eq</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r.set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Endorelation.map</span> <span class=\"n\">f</span> <span class=\"n\">r.relation</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Endorelation.map</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">ra'b'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">r.consistency</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">ra'b'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a'</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">b'</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">functor</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_relation</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relation</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r.relation</span> <span class=\"o\">:</span> <span class=\"n\">Endorelation</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_predicate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">r.set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">functor.lawful</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_const</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">a</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_relation</span><span class=\"o\">,</span> <span class=\"n\">id_map</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_predicate</span><span class=\"o\">,</span> <span class=\"n\">Set.fmap_eq_image</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">Set.image_id'</span><span class=\"o\">]</span>\n  <span class=\"n\">comp_map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">r</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_relation</span><span class=\"o\">,</span> <span class=\"n\">Endorelation.functor.lawful.comp_map</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_predicate</span><span class=\"o\">,</span> <span class=\"n\">comp_map</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pure_relation</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relation</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pure_predicate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bind_predicate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">StructuredSet</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r.set</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monad.lawful</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">StructuredSet</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_map</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">exists_false</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">consistency</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_predicate</span><span class=\"o\">,</span> <span class=\"n\">pure_predicate</span><span class=\"o\">,</span> <span class=\"n\">pure_bind</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n          <span class=\"n\">use</span> <span class=\"n\">b₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₂</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"n\">use</span> <span class=\"n\">b₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₂</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₂</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">b</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">b</span>\n            <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₂</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a₁</span>\n            <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n            <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n            <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span>\n          <span class=\"n\">use</span> <span class=\"n\">b₁</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b₂</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">b</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n          <span class=\"n\">use</span> <span class=\"n\">a</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_predicate</span><span class=\"o\">,</span> <span class=\"n\">bind_assoc</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">r</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">r</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bind.bind</span><span class=\"o\">,</span> <span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Pure.pure</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">,</span>\n      <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">exists_false</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">]</span>\n      <span class=\"n\">funext</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span>\n      <span class=\"n\">apply</span> <span class=\"n\">propext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">use</span> <span class=\"n\">a₁</span>\n        <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">rel</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">r.consistency</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">rel</span>\n        <span class=\"n\">use</span> <span class=\"n\">a₁</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">]</span>\n        <span class=\"n\">use</span> <span class=\"n\">a₂</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_predicate</span><span class=\"o\">,</span> <span class=\"n\">pure_predicate</span><span class=\"o\">,</span> <span class=\"n\">map_predicate</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.instLawfulMonadSetMonad.bind_pure_comp</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">r</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 433238728,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713172239
    },
    {
        "content": "<p>For context, the reason I find this monad interesting is, because a sorted <code>List</code> with unique elements can be uniquely specified by an element of this \"<code>StructuredSet</code>\" monad.</p>",
        "id": 433239973,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713172675
    },
    {
        "content": "<p>What's the <code>relation</code> in that example?</p>",
        "id": 433242934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713173632
    },
    {
        "content": "<p>The relation the <code>List</code> is sorted by, restricted to elements from the <code>List</code> / <code>Set</code>.</p>",
        "id": 433243469,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713173783
    }
]