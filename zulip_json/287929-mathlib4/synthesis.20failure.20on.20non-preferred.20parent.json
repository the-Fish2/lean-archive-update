[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Congruence</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">AddCon.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Con.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RingCon.Quotient''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span> <span class=\"c1\">-- ok, finds the above</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>Should I already know the answer as to why this fails?</p>",
        "id": 429241798,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711310340
    },
    {
        "content": "<p>Even more troubling </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.toAddCon.Quotient</span><span class=\"bp\">’’’</span><span class=\"o\">)</span> <span class=\"bp\">—</span> <span class=\"n\">fails</span>\n</code></pre></div>\n<p>Hopefully this is user error :)</p>",
        "id": 429243649,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711311636
    },
    {
        "content": "<p>Mathlib free is easy </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Con</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RingCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">AddCon.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Con.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RingCon.Quotient''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span> <span class=\"bp\">—</span> <span class=\"n\">ok</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span> <span class=\"bp\">—</span> <span class=\"n\">fails</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.toAddCon.Quotient'''</span><span class=\"o\">)</span> <span class=\"bp\">—</span>  <span class=\"n\">fails</span>\n</code></pre></div>",
        "id": 429244556,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711312318
    },
    {
        "content": "<p>I think it is reasonable to expect this to succeed right?</p>",
        "id": 429245034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711312682
    },
    {
        "content": "<p>Well this works… </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RingCon.toAddCon</span><span class=\"bp\">’</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toSetoid</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.toAddCon</span><span class=\"bp\">’.</span><span class=\"n\">Quotient</span><span class=\"bp\">’’’</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429248041,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711314389
    },
    {
        "content": "<p>If I mark it reducible it fails again</p>",
        "id": 429248056,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711314409
    },
    {
        "content": "<p>Further minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Con</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid</span> <span class=\"n\">R</span>\n<span class=\"kd\">structure</span> <span class=\"n\">AddCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid</span> <span class=\"n\">R</span>\n<span class=\"kd\">structure</span> <span class=\"n\">RingCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">c.toSetoid</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">c.toAddCon.toSetoid</span><span class=\"o\">)</span> <span class=\"c1\">--  fails</span>\n</code></pre></div>",
        "id": 429249235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315208
    },
    {
        "content": "<p>The problem with the second one is that the expression is <code>c.toMulCon.toSetoid</code> which doesn't match the pattern <code>AddCon.toSetoid ?_</code> that the first instance expects.</p>",
        "id": 429249286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315271
    },
    {
        "content": "<p>You can even remove <code>Setoid</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Setoid'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Setoid'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Setoid'.Quotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Con</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RingCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingCon.toAddCon'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">toSetoid'</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'</span><span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">AddCon.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AddCon.instAdd</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Con.Quotient'''</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Con.instMul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient'''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RingCon.Quotient''</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c'.Quotient'''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.toAddCon'.Quotient'''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">AddCon.Quotient'''</span> <span class=\"n\">c.toAddCon</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429249305,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711315296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429249286\">said</a>:</p>\n<blockquote>\n<p>The problem with the second one is that the expression is <code>c.toMulCon.toSetoid</code> which doesn't match the pattern <code>AddCon.toSetoid ?_</code> that the first instance expects.</p>\n</blockquote>\n<p>The third one in this example is fixed by making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient#src\">src#Quotient</a> reducible</p>",
        "id": 429249588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429249286\">said</a>:</p>\n<blockquote>\n<p>The problem with the second one is that the expression is <code>c.toMulCon.toSetoid</code> which doesn't match the pattern <code>AddCon.toSetoid ?_</code> that the first instance expects.</p>\n</blockquote>\n<p>Thanks! It only fails to match with reducible transparency</p>",
        "id": 429249624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711315524
    },
    {
        "content": "<p>Well it doesn't match syntactically either, which I think is the problem</p>",
        "id": 429249665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429249588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429249286\">said</a>:</p>\n<blockquote>\n<p>The problem with the second one is that the expression is <code>c.toMulCon.toSetoid</code> which doesn't match the pattern <code>AddCon.toSetoid ?_</code> that the first instance expects.</p>\n</blockquote>\n<p>The third one in this example is fixed by making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient#src\">src#Quotient</a> reducible</p>\n</blockquote>\n<p>Third? I get that working always. The fourth you can toggle on/off by toggling reduciblity of <code>RingCon.toAddCon’</code></p>",
        "id": 429249829,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711315646
    },
    {
        "content": "<p>I'm counting in my code sample not yours</p>",
        "id": 429249913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315689
    },
    {
        "content": "<p>Making the three structures classes in my example, along with reducible Quotient, fixes everything</p>",
        "id": 429249972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315737
    },
    {
        "content": "<p>Not that it make any sense for them to be classes...</p>",
        "id": 429250004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429249972\">said</a>:</p>\n<blockquote>\n<p>Making the three structures classes in my example, along with reducible Quotient, fixes everything</p>\n</blockquote>\n<p>Do you understand the underlying reason? I haven’t opened the source yet</p>",
        "id": 429250452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711315991
    },
    {
        "content": "<p>In the last code block I shared, you only need to make <code>AddCon</code> a class</p>",
        "id": 429252873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711317638
    },
    {
        "content": "<p>For all but the 2nd.</p>",
        "id": 429253236,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711317871
    },
    {
        "content": "<p>And of course if you switch the order of the parents the failures flip</p>",
        "id": 429253435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711317989
    },
    {
        "content": "<p>Can you think of any reason that <code>Quotient</code> shouldn't be reducible?</p>",
        "id": 429253645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711318156
    },
    {
        "content": "<p>No (edit: assuming benchmarking doesn’t complain)</p>",
        "id": 429253755,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711318204
    },
    {
        "content": "<p>But I think the issue is broader than that</p>",
        "id": 429253805,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711318220
    },
    {
        "content": "<p>Ah ok, there is a discrimination tree involved</p>",
        "id": 429256278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711319914
    },
    {
        "content": "<p>We don’t match on </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>Add,<span class=\"w\"> </span>Quotient,<span class=\"w\"> </span>*,<span class=\"w\"> </span>AddCon.0,<span class=\"w\"> </span>*<span class=\"o\">]</span>\n</code></pre></div>\n<p>but </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>Mul,<span class=\"w\"> </span>Quotient,<span class=\"w\"> </span>*,<span class=\"w\"> </span>Con.0,<span class=\"w\"> </span>*<span class=\"o\">]</span>\n</code></pre></div>\n<p>is ok</p>",
        "id": 429257381,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711320750
    },
    {
        "content": "<p>With <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.DiscTree.getUnify#doc\">docs#Lean.Meta.DiscTree.getUnify</a></p>",
        "id": 429257423,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711320812
    },
    {
        "content": "<p>And <code>trace.Meta.Disctree</code> is not turned on…</p>",
        "id": 429258449,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711321560
    },
    {
        "content": "<p>It looks like that since the custom projection <code>RingCon.toAddCon’</code> is reducible we end up at <code>c.toSetoid’</code> which takes <code>(c : Con R)</code> as an argument and goes into the keys for the discrimination tree search. But this doesn’t match the <code>AddCon</code> in the entry from the <code>Add</code> instance so it just gets tossed. </p>\n<p>If you don’t make the custom projection <code>RingCon.toAddCon’</code> reducible, then you get <code>AddCon</code> as the key to match on.</p>",
        "id": 429264470,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711326575
    },
    {
        "content": "<p>Since projections from classes are not reducible, this is another way to block the unfolding and make it work.</p>",
        "id": 429264830,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711326820
    },
    {
        "content": "<p>Should Lean be able to synthesis these instances (really only needs to not cut them here)? </p>\n<p>My answer is “obviously, yes” but what do I know. I feel like this might be a contributing factor to other failures coming from passing to non-preferred parents.</p>",
        "id": 429374550,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711368816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429264470\">said</a>:</p>\n<blockquote>\n<p>It looks like that since the custom projection <code>RingCon.toAddCon’</code> is reducible we end up at <code>c.toSetoid’</code> which takes <code>(c : Con R)</code> as an argument and goes into the keys for the discrimination tree search. But this doesn’t match the <code>AddCon</code> in the entry from the <code>Add</code> instance so it just gets tossed. </p>\n<p>If you don’t make the custom projection <code>RingCon.toAddCon’</code> reducible, then you get <code>AddCon</code> as the key to match on.</p>\n</blockquote>\n<p>Sorry, this is what I was trying to say above.</p>",
        "id": 429409069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent/near/429264830\">said</a>:</p>\n<blockquote>\n<p>Since projections from classes are not reducible, this is another way to block the unfolding and make it work.</p>\n</blockquote>\n<p>Are they reducible on structures?</p>",
        "id": 429409256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374249
    }
]