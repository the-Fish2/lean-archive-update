[
    {
        "content": "<p>The following code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Equiv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AlgEquiv.map_sum</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>gives me the bizarre error message:</p>\n<blockquote>\n<p><code>AlgEquiv.map_sum</code> has been deprecated, use <code>AlgEquiv.map_sum</code> instead</p>\n</blockquote>",
        "id": 438431363,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715628099
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgEquiv.map_sum#doc\">docs#AlgEquiv.map_sum</a> says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span> <span class=\"n\">map_sum</span><span class=\"kd\">]</span>\n<span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_sum</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_sum</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">alg_equiv.map_sum</span> <span class=\"n\">AlgEquiv.map_sum</span>\n</code></pre></div>\n<p>and probably, the <code>deprecated</code> tag should be <code>@[deprecated _root_.map_sum]</code>.</p>",
        "id": 438432874,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715628646
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/leanprover-community/mathlib4/pull/12873\">#12873</a> for this</p>",
        "id": 438433965,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715629051
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 438436692,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715630046
    },
    {
        "content": "<p>Hmm, I thought someone claimed you couldn't combine a replacement with the <code>since</code> syntax. I must have misunderstood</p>",
        "id": 438438144,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715630561
    },
    {
        "content": "<p>By the way, what does <code>nonrec</code>means in the above definition?</p>",
        "id": 438438710,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715630785
    },
    {
        "content": "<p>non-recursive</p>",
        "id": 438438805,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715630828
    },
    {
        "content": "<p>Otherwise lean thinks the <code>map_sum</code> in the body is a recursive reference to the lemma itself</p>",
        "id": 438438845,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715630849
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 438444191,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715632949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.80.9Cdeprecated.E2.80.9D.20error.20message/near/438438144\">said</a>:</p>\n<blockquote>\n<p>Hmm, I thought someone claimed you couldn't combine a replacement with the <code>since</code> syntax. I must have misunderstood</p>\n</blockquote>\n<p>That was me; I was wrong - the <code>since</code> needs to come after the better name, then it works.</p>",
        "id": 438445427,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715633389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.80.9Cdeprecated.E2.80.9D.20error.20message/near/438438845\">said</a>:</p>\n<blockquote>\n<p>Otherwise lean thinks the <code>map_sum</code> in the body is a recursive reference to the lemma itself</p>\n</blockquote>\n<p>Generally, I think it is better to fully qualify the \"other name\", rather than writing <code>nonrec</code>. Way easier to read and understand later.</p>",
        "id": 438479016,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715649209
    },
    {
        "content": "<p>This just came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13540\">#13540</a>, where I removed <code>nonrec</code> and replaced <code>gaussSum_frob</code>by <code>_root_.gaussSum_frob</code> in the proof; then <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> commented \"This is what <code>nonrec</code> is for, so I'm not sure we should avoid it.\"</p>\n<p>Is there some consensus as to the preferred style in such cases?</p>",
        "id": 443314292,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717771902
    },
    {
        "content": "<p>It's true it is what <code>nonrec</code> is for, but it is also just additional language surface area, that can be avoided. To be honest I'd prefer if we could <em>remove</em> it as a language feature (are there situations where it really is unavoidable?), on the the principles of not unnecessary giving people multiple ways to say the same thing.</p>",
        "id": 443338839,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717781266
    },
    {
        "content": "<p>I would also think that <code>nonrec</code> in front of a <code>lemma</code> or  <code>theorem</code> mightbe confusing to people who are not into lean specifics so much... (when used with a function definition, it probably makes more intuitive sense).</p>",
        "id": 443339539,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717781494
    },
    {
        "content": "<p>For the original issue I'd make <code>AlgEquiv.map_sum</code> protected, but since it's deprecated I guess it doesn't matter ...</p>",
        "id": 443341355,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717782181
    },
    {
        "content": "<p>I think this came up during the port as well, when I argued we should use <code>nonrec</code> since it exists for this purpose</p>",
        "id": 443373253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717791997
    },
    {
        "content": "<p>I think there are some cases where you genuinely need nonrec to avoid accidentally referring to the theorem itself in an over-eager tactic, but probably such tactics should be considered buggy</p>",
        "id": 443373513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717792048
    },
    {
        "content": "<p>Presumably <code>deprecated</code> should raise an error if it makes a self reference?</p>",
        "id": 443374107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717792165
    },
    {
        "content": "<p>Yes please</p>",
        "id": 443374626,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717792258
    },
    {
        "content": "<p>At least <code>@[deprecated] alias</code> can't make self references</p>",
        "id": 443374716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717792281
    }
]