[
    {
        "content": "<p>and leanc?</p>\n<p>In the official repo of Lean4 contains a flake, it has an output package <code>buildLeanPackage</code>. I can call <code>buildLeanPackage</code> with custom lean leanmake lake leanc? They comes from I package I had already made</p>",
        "id": 409700567,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1703322460
    },
    {
        "content": "<p>The nix setup is not very actively used and maintained, so if you want to go that route, you probably have to answer many questions yourself.</p>",
        "id": 409702851,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703324517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Can.20I.20use.20.60buildLeanPackage.60.20with.20custom.20lean.20leanmake.20lake/near/409702851\">发言道</a>：</p>\n<blockquote>\n<p>The nix setup is not very actively used and maintained, so if you want to go that route, you probably have to answer many questions yourself.</p>\n</blockquote>\n<p>I will try to write a plain drv to do that, where as the build result in <code>$out</code> will just contains <code>.lake</code>... I am not sure whether this is acceptable for using libraries as dependencies for daily development, and how can I use it though</p>",
        "id": 409703119,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1703324765
    },
    {
        "content": "<p>Worth a try. In the long run we probably want a nix setup that builds on top of lake, rather than replicating some of its work; sounds like that is what you have in mind.</p>",
        "id": 409704547,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703325914
    },
    {
        "content": "<p>After some inspection on the structure of Nix build outputs, I decide to write a lake2nix package. Wish it goes okay</p>",
        "id": 409726702,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1703345708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Can.20I.20use.20.60buildLeanPackage.60.20with.20custom.20lean.20leanmake.20lake/near/409704547\">said</a>:</p>\n<blockquote>\n<p>Worth a try. In the long run we probably want a nix setup that builds on top of lake, rather than replicating some of its work; sounds like that is what you have in mind.</p>\n</blockquote>\n<p>This presumably would need some way to query a dependency graph from lake before building, and a way to ask lake to generate trace files when invoked on a single target?</p>",
        "id": 409734097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703351123
    },
    {
        "content": "<p>Or forfeit fine-grained derivations, and map lake packages to nix derivations, or even full projects. Kinda sad. It'd not be useful for developing, but for testing , packaging and deployment only, I fear</p>",
        "id": 409738527,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703355495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662001\">Alissa Tung</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Can.20I.20use.20.60buildLeanPackage.60.20with.20custom.20lean.20leanmake.20lake/near/409726702\">said</a>:</p>\n<blockquote>\n<p>After some inspection on the structure of Nix build outputs, I decide to write a lake2nix package. Wish it goes okay</p>\n</blockquote>\n<p>Prior (and AFAIK) discontinued work at <a href=\"https://github.com/Kha/nale\">https://github.com/Kha/nale</a></p>",
        "id": 409738571,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703355556
    }
]