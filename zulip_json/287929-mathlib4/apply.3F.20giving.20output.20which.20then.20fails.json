[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.degreeOf_C_mul_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial.degreeOf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">MvPolynomial.degreeOf</span> <span class=\"n\">j</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">degreeOf</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">degrees_mul</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.degrees_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"c1\">-- exact?  -- exact Multiset.count_le_of_le j this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Multiset.count_le_of_le</span> <span class=\"n\">j</span> <span class=\"n\">this</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>",
        "id": 418158639,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706214143
    },
    {
        "content": "<p>Looks like the difference is in the decidability instance; <code>convert</code> instead of <code>exact</code> works</p>",
        "id": 418159593,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706214492
    },
    {
        "content": "<p>What's going on under the hood here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.degreeOf_C_mul_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial.degreeOf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">MvPolynomial.degreeOf</span> <span class=\"n\">j</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">degreeOf</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">degrees_mul</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.degrees_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"c1\">-- what `exact?` is actually doing is:</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">allowSynthFailures</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">Multiset.count_le_of_le</span>\n  <span class=\"n\">solve_by_elim</span><span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 418751011,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577699
    },
    {
        "content": "<p>Curiously even though <code>apply Multiset.count_le_of_le</code> by itself fails with a typeclass synthesis error, with <code>(config := {allowSynthFailures := true}) </code> it doesn't actually return any additional goals!</p>",
        "id": 418751098,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577746
    },
    {
        "content": "<p>That seems a bit mysterious.</p>",
        "id": 418751108,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577756
    },
    {
        "content": "<p>One approach here would be to have <code>exact?</code> verify that its suggestion really works, and if it doesn't, try again with <code>convert</code>, and then report that if it works.</p>",
        "id": 418751156,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577795
    },
    {
        "content": "<p>This could be done without touching the internals of <code>exact?</code>, but instead as a wrapper around <code>Std.Tactic.TryThis.addExactSuggestion</code>.</p>",
        "id": 418751187,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577825
    },
    {
        "content": "<p>Anyone interested?</p>",
        "id": 418751197,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706577834
    }
]