[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> reminded me of my old porting-era effort to port <code>mono</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2323\">#2323</a>), which was still an open PR. I'll repeat some of my comment on that PR here:</p>\n<p>I believe the consensus from a long-ago porting meeting was that the PR introduced too much infrastructure, that the stopgap behavior (using <code>solve_by_elim</code>) was ok, and that we had another tactic (which I now forget) to handle some specific cases anyway.</p>\n<p>However,  <code>mono</code> is still just using that stopgap behavior. There's currently no distinction between <code>mono</code> and <code>mono*</code>, and it actually throws errors upon seeing <code>left</code>/<code>right</code>/<code>both</code>, <code>with</code>, and <code>using</code> syntax.</p>\n<p>Now that we're post-port, I feel like there's an argument to be made for intentionally abandoning or modifying some of the syntax:</p>\n<ul>\n<li><code>mono ... with</code> was essentially an artifact of <code>mono</code>'s bespoke backtracking procedure.</li>\n<li><code>using</code> could still be supported in spirit, and perhaps pass lemmas to a <code>solve_by_elim</code> or <code>aesop</code> call.</li>\n<li><code>left</code> and <code>right</code> could be useful to someone, and it maybe makes sense to have some way to distinguish between different sorts of lemmas based on strictness, but I'm not sure calling them \"left\" and \"right\" is really a clear, understandable abstraction. Also, <code>mono left</code> and <code>mono right</code> seem pretty infrequent.</li>\n</ul>\n<p>What should we do with <code>mono</code>? Relevant questions include:</p>\n<ul>\n<li>Should we simply jettison all other syntax and make the current behavior the only behavior?</li>\n<li>Should we switch to <code>aesop</code> instead of <code>solve_by_elim</code>?</li>\n<li>Should we make an effort to improve the API and provide something instead of <code>left</code> and <code>right</code> to distinguish between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul#doc\">docs#mul_lt_mul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul%27%3F#doc\">docs#mul_lt_mul'?</a></li>\n<li>Or should we even still try to port the lean 3 version with some modifications, such as giving <code>mono</code> single-step behavior and preserving <code>left</code>, <code>right</code>, and <code>using</code> behavior?</li>\n</ul>\n<p>I feel the best choice to make is the one preferred by users of <code>mono</code>. I'm not a user of <code>mono</code>, so I can't really give an opinion here.</p>\n<p>How do people feel?</p>",
        "id": 421744703,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708032833
    },
    {
        "content": "<p>I assume the tactic you're referring to is Heather's<code>gcongr</code>?</p>",
        "id": 421745169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708033049
    },
    {
        "content": "<p>Yes, I believe so! Thanks, I couldn't quite remember.</p>",
        "id": 421745205,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708033066
    },
    {
        "content": "<p>Removing the unsupported syntax seems like the lowest effort improvement and doesn't prevent us from adding it back if someone needs it</p>",
        "id": 421745461,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708033174
    },
    {
        "content": "<p>We could do that, but would that amount to leaving another porting note? I'm kind of wondering what people think the \"final\" ported version of <code>mono</code> in lean 4 should be (with respect to how it was in lean 3).</p>",
        "id": 421745652,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708033257
    },
    {
        "content": "<p>What problem is <code>mono</code> actually solving at this point? Can we just not have it?</p>",
        "id": 421760564,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708040522
    },
    {
        "content": "<p>Fwiw, I'm not counting many uses: maybe 10-20 if we include porting notes mentioning it? Could be worth just trying to replace those and see what happens (if we want to try removing it).</p>",
        "id": 421761301,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708040916
    },
    {
        "content": "<p>I would be in support of just dropping <code>mono</code> and replacing it with <code>gcongr</code> and similar tactics, and/or redesigning a <code>mono</code>-alike from a clean slate</p>",
        "id": 422586341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708511239
    },
    {
        "content": "<p>I've used <code>mono</code> a bit in the Lean 3 days and <code>gcongr</code> feels so much user-friendlier than <code>mono</code> was.</p>",
        "id": 422594141,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1708513954
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13881\">#13881</a> is a PR replacing most occurrence of <code>mono</code> by <code>gcongr</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/13890\">#13890</a> is a drive-by clean-up (not strictly required) - to enable using <code>gcongr</code> in one more instance. Review welcome!</p>",
        "id": 445124587,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718628447
    },
    {
        "content": "<p>I would like feedback on <a href=\"https://github.com/leanprover-community/mathlib4/commit/136a9e6195f305aad61cfa081bed3328d0878390\">136a9e6</a>: it seems <code>gcongr</code> doesn't pick up local hypothesis by itself? Help welcome how to makes this as nice as the one-line <code>mono</code> was.</p>",
        "id": 445124836,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718628526
    },
    {
        "content": "<p>In two cases, I need help: after <code>gcongr</code>, a goal remains which is not so obvious to me (apparently <code>mono</code> used local hypotheses)</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/blob/038291e64d9af7db0fe403a6859ba51bae828462/Mathlib/Algebra/ContinuedFractions/Computation/Approximations.lean#L232\">in ContinuedFractions/Computation/Approximations.lean</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/blob/038291e64d9af7db0fe403a6859ba51bae828462/Mathlib/Dynamics/OmegaLimit.lean#L249\">in <code>Dynamics/OmegaLimit.lean</code></a></li>\n</ul>\n<p>With these fixed, all occurrences of <code>mono</code> can be replaced by <code>gcongr</code>!</p>",
        "id": 445125798,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718628801
    }
]