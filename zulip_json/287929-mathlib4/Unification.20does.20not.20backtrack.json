[
    {
        "content": "<p>Is this a known issue? Is this even an issue/bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- this fails: h ▸ h'</span>\n  <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.to_iff.trans</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 439627947,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716229245
    },
    {
        "content": "<p>It seems the unification for <code>\\t</code> does not backtrack when it fails... or something</p>",
        "id": 439627995,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716229267
    },
    {
        "content": "<p>Also, are there <code>set_option</code> trace options to debug unification? I can't seem to find it</p>",
        "id": 439628530,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716229460
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.subst</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this works</p>",
        "id": 439629935,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716229929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>Doesn't depend on Mathlib version</p>",
        "id": 439631558,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1716230549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Unification.20does.20not.20backtrack/near/439628530\">said</a>:</p>\n<blockquote>\n<p>Also, are there <code>set_option</code> trace options to debug unification? I can't seem to find it</p>\n</blockquote>\n<p>Try this!  <code>set_option trace.Meta.isDefEq true</code></p>",
        "id": 445416404,
        "sender_full_name": "AG",
        "timestamp": 1718730886
    },
    {
        "content": "<p><code>h ▸ e</code> is complicated by the way. It's sort of like <code>by have e' := e; first | rw [h]; exact e | rw [&lt;- h]; exact e | rw [h] at e'; exact e' | rw [&lt;- h] at e'; exact e'</code>, though I don't know the exact order of what it tries.</p>",
        "id": 445417317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731182
    },
    {
        "content": "<p>It first tries to rewrite the expected type, and only if it can’t rewrite there, tries other things.</p>",
        "id": 445417950,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718731371
    },
    {
        "content": "<p>I doubt it does <code>rw [h]</code> first, since if it does then it would have succeeded, right?</p>",
        "id": 445418153,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718731430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">h'</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h'</span>\n</code></pre></div>\n<p>This works (obviously?)</p>",
        "id": 445418363,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718731476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420256\">AG</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Unification.20does.20not.20backtrack/near/445416404\">said</a>:</p>\n<blockquote>\n<p><code>set_option trace.Meta.isDefEq true</code></p>\n</blockquote>\n<p>Okay it's weird, since the first line of the trace is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span>\n</code></pre></div>\n<p>Shouldn't it just end there?</p>",
        "id": 445418541,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718731531
    },
    {
        "content": "<p>Looking at <code>trace.Meta.isDefEq</code> is not the full story. The <code>\\t</code> operator is not handled by unification. It has a whole elaborator implementing it (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabSubst#doc\">docs#Lean.Elab.Term.elabSubst</a>)</p>",
        "id": 445418770,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731615
    },
    {
        "content": "<p>The source code does show that it tries rewriting the expected type first (and Joachim would likely know, I think he was the last to touch this elaborator)</p>",
        "id": 445418880,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731670
    },
    {
        "content": "<p>Though maybe it's doing <code>rw [&lt;- h]</code> first? That would explain the failure, since then the expected type would be <code>f aᶜᶜ ↔ g aᶜᶜᶜ</code></p>",
        "id": 445419123,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731735
    },
    {
        "content": "<p>Even if so, if that fails it should fall back to the other cases right? I will try my best to have a look when I get back</p>",
        "id": 445419236,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718731769
    },
    {
        "content": "<p>I just checked what the exact error message was in your example. That shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">h'</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜᶜ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which is consistent with it doing <code>rw [&lt;- h]</code> first and committing to it.</p>",
        "id": 445419637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Maybe subst notation should be implemented using backtracking, rather than committing to a particular rewrite?</p>",
        "id": 445419786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718731924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Unification.20does.20not.20backtrack/near/445419637\">said</a>:</p>\n<blockquote>\n<p>I just checked what the exact error message was in your example. That shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">h'</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜᶜ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which is consistent with it doing <code>rw [&lt;- h]</code> first and committing to it.</p>\n</blockquote>\n<p>Hmm but <code>  h.symm ▸ h'</code> still doesn't work</p>",
        "id": 445420633,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718732212
    },
    {
        "content": "<p>That's weird.</p>\n<p>At least if you make the expected type inaccessible it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜᶜ</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">ᶜ</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"o\">:)</span>\n</code></pre></div>",
        "id": 445421552,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718732499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Unification.20does.20not.20backtrack/near/445419786\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> Maybe subst notation should be implemented using backtracking, rather than committing to a particular rewrite?</p>\n</blockquote>\n<p>If you ask me it should be implemented simpler, not trickier :-). It is too innocently looking for such a complicated notation.</p>\n<p>It does backtrack, so to say, if <code>rw [ &lt;- h]</code> in the expected type doesn't work, it tries something else. But it doesn't backtrack other later failures. I'm wairy of such backtracking, can't it lead to even harder to understand effects at a distance? You make a change somewhere and suddenly the notation rewrites the other direction?</p>",
        "id": 445433988,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718736112
    },
    {
        "content": "<p>Right now it's basically</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">first</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">e'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">      </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">e'</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">e'</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e'</span>\n</code></pre></div>\n<p>and my backtracking question is whether it should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">e'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">  </span><span class=\"n\">first</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">e'</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e'</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">e'</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">e'</span>\n</code></pre></div>",
        "id": 445434668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718736310
    },
    {
        "content": "<p>Hmm, I don’t have opinions either way here.</p>",
        "id": 445462083,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718744892
    }
]