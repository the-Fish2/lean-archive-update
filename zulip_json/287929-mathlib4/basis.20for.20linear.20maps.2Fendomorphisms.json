[
    {
        "content": "<p>Do we have a basis for linear maps/endomorphisms? I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- move to Mathlib.LinearAlgebra.Matrix.ToLin</span>\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span> <span class=\"n\">repr_apply</span> <span class=\"n\">repr_symm_apply</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">Basis.end</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.toMatrix</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c1\">-- move to Mathlib.LinearAlgebra.Matrix.ToLin</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Basis.end_apply</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">b.end</span> <span class=\"n\">ij</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLin</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.stdBasis</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span> <span class=\"n\">ij</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">end_repr_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.total_single</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- move to Mathlib.LinearAlgebra.Matrix.ToLin</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Basis.end_apply_apply</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">b.end</span> <span class=\"n\">ij</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">ij.2</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">ij.1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ij</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">end_apply</span><span class=\"o\">,</span> <span class=\"n\">Matrix.stdBasis_eq_stdBasisMatrix</span><span class=\"o\">,</span> <span class=\"n\">Matrix.toLin_self</span><span class=\"o\">]</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.stdBasisMatrix</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ite_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">ite_and</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_ite_eq</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Algebra.TensorProduct</span> <span class=\"n\">LinearMap</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Basis.baseChange_end</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">baseChange</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">b.end</span> <span class=\"n\">ij</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"n\">A</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">end</span> <span class=\"n\">ij</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"n\">A</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">basis_apply</span><span class=\"o\">,</span> <span class=\"n\">baseChange_tmul</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">end_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">basis_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.tmul_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 424843181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709636264
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.dualBasis#doc\">docs#Basis.dualBasis</a> is all I can find, which I assume is a special case?</p>",
        "id": 424844209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709636621
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 424854139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709640310
    }
]