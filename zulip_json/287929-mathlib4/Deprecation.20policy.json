[
    {
        "content": "<p>In the past weeks, the question of a deprecation policy for mathlib has come up a few times. I think it would be helpful to make a formal decision, to simplify guidance for future PR authors. Let me suggest a first draft, based on what I took away from discussions so far.</p>",
        "id": 436691955,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714655933
    },
    {
        "content": "<h2>Mathlib deprecation policy</h2>\n<p><strong>This policy applies to</strong> all items in mathlib tagged with the <code>@deprecated</code> attribute. This can be aliasses, but also definitions, theorems and lemmas.</p>\n<p><strong>Deprecating items.</strong> When deprecating a new item, please add the current date (to allow removing it in the future).<br>\nSince Lean 4.8, the @deprecated attribute allows including a date in the <code>since</code> field (as a string of the form <code>2024-04-01</code>).<br>\nSome existing items have no deprecation date; PRs adding them are welcome. </p>\n<p><strong>Please deprecate when renaming.</strong> When renaming a definition or theorem, please create an <code>alias</code> for the old name and mark it with <code>deprecated</code>. This step can be skipped when the declaration is very new (say, less than one week).<br>\nThere is no need to create aliasses for renaming instances. <br>\nFor automatically generated declarations (e.g. by <code>to_additive</code> or <code>simps</code>), please ensure the generated declaration is also tagged with this attribute. </p>\n<p><strong>Removing deprecated items.</strong><br>\nDeprecated items can be removed from mathlib after &lt;time&gt; after their initial deprecation date. PRs doing so are welcome.</p>",
        "id": 436692029,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714655949
    },
    {
        "content": "<p>I would appreciate comments on e.g the following questions:</p>\n<ul>\n<li>Any general comments about this? Missing aspects?</li>\n<li>Time-frame for skipping a deprecation.</li>\n<li>Are there other cases of generated declarations which could be deprecated? I've only seen this with <code>to_additive</code> (added: and <code>simps</code>) so far.</li>\n<li>Time-frame when items can be removed is up for discussion. (So far, I gather that \"a year\" is considered plenty and \"six months\" considered sufficient by some, but at least \"three months\" seems to be desired. But that is probably not a representative sample/will have overheard some!)</li>\n</ul>\n<p>If/once there's broad consensus, we could e.g. have a poll on the last question (which is perhaps the most controversial).</p>",
        "id": 436692083,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714655967
    },
    {
        "content": "<p>Currently in mathlib,</p>\n<ul>\n<li>some declarations generated by <code>to_additive</code> are missing this attribute (update: it seems there is only one offender, fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12597\">#12597</a>),</li>\n<li>not all deprecated declarations are tagged with a date (my WIP branch <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-deprecation-dates-all\">branch#MR-deprecation-dates-all</a> makes some progress on this; some PRs for this are open for review)</li>\n<li>deprecation dates are using doc comments; I presume PRs converting this to the <code>since</code> field are welcome</li>\n</ul>",
        "id": 436692435,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714656052
    },
    {
        "content": "<p>My personal opinion (but I'm not a maintainer, so no need to weigh it highly): I think at least four months could be useful. In practice, deprecation dates are usually the date when the PR is filed, and merging it can take a while (especially with big refactoring PRs). A four months policy ensures the deprecation will be on mathlib for at least three months.</p>",
        "id": 436692990,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714656183
    },
    {
        "content": "<p>Quick note, I think <code>simps</code> also generates candidates</p>",
        "id": 436697741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714657498
    },
    {
        "content": "<p>Did we end up recommending that people update mathlib on the lean release cadence? If so, we could use <em>x</em> of those as a cutoff</p>",
        "id": 436706640,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714659868
    },
    {
        "content": "<p>I would say 1 year max and 1 stable release minimum, and for things in the middle we try to keep them if it's not an undue amount of work</p>",
        "id": 436728166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666008
    },
    {
        "content": "<p>(I have nothing to add, but this is great to see discussed/given attention to!)</p>",
        "id": 436728954,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714666250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Deprecation.20policy/near/436692990\">said</a>:</p>\n<blockquote>\n<p>My personal opinion (but I'm not a maintainer, so no need to weigh it highly): I think at least four months could be useful. In practice, deprecation dates are usually the date when the PR is filed, and merging it can take a while (especially with big refactoring PRs). A four months policy ensures the deprecation will be on mathlib for at least three months.</p>\n</blockquote>\n<p>I think deprecation dates should reflect when they actually landed in mathlib, not when the deprecation was proposed. We may be able to do this more effectively by having PRs not put a date and then having a bot automatically add dates to unadorned deprecations directly on master</p>",
        "id": 436729787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666522
    },
    {
        "content": "<p>Stupid consideration: What about the 100 chars line limit?</p>",
        "id": 436729923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714666563
    },
    {
        "content": "<p>try to leave enough space?</p>",
        "id": 436730068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666611
    },
    {
        "content": "<p>the bot would probably fail and ping someone to help</p>",
        "id": 436730111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666626
    },
    {
        "content": "<p>I would be fine not mandating deprecations for lemmas generated by <code>simps</code>:</p>\n<ul>\n<li>They are generally not typed manually (though they could appear in <code>simp only</code> calls</li>\n<li>It's very hard to have a lemma generated by <code>simps</code> in your code without the original definition, and the <code>simps</code> lemma should change very predictably. (assuming the only change is renaming the <code>def</code>.)</li>\n</ul>",
        "id": 436744276,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714671549
    },
    {
        "content": "<p>Our policy should probably say something about renaming <code>X</code> to <code>Y</code> and in the same PR renaming <code>W</code> to <code>X</code>. E.g.:</p>\n<blockquote>\n<p>We allow but discourage contributors to rename declaration <code>X</code> to <code>Y</code> and at the same time renaming <code>W</code> to <code>X</code>. In this case, no deprecation attribute is required for <code>X</code> (but it is for <code>W</code>).</p>\n</blockquote>\n<p>But maybe we should have a better solution for this case? <br>\nE.g. a line in the docstring of (the new) <code>X</code> of the form \"On &lt;date&gt; <code>X</code> was renamed to <code>Y</code>.\"</p>",
        "id": 436745139,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714671840
    },
    {
        "content": "<p>Random thought: instead of recording the \"date\" when a decl was deprecated, we record the PR number... Tooling can figure out the date on which a PR landed. Much less hassle for users.</p>",
        "id": 436765654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714679294
    },
    {
        "content": "<p>That means tying the deprecation notice to a git repo, which we might not want to do sine the deprecation system is supposed to be used across the Lean ecosystem</p>",
        "id": 436765907,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714679396
    },
    {
        "content": "<p>Lean is intrinsically connected to both git and github in several places. I don't think this is an issue</p>",
        "id": 436767010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714679811
    },
    {
        "content": "<p>In any case this is a mathlib-local decision. You can put <code>(since := \"#12345\")</code> if you want and lean won't care</p>",
        "id": 436767145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714679875
    },
    {
        "content": "<p>About deprecating stuff: I’m bumping MIL and I just met the effect of a line of Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">op_norm_le_of_shell</span> <span class=\"o\">:=</span> <span class=\"n\">opNorm_le_of_shell</span>\n</code></pre></div>",
        "id": 436770224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714681086
    },
    {
        "content": "<p>with the associated code action. It’s really great!</p>",
        "id": 436770265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714681112
    },
    {
        "content": "<p>Of course we can still dream of a command line tool doing all those renames for us. But this is already infinitely nicer than getting an error and searching the changelog website (and I don’t even mention the situation before the changelog).</p>",
        "id": 436770407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714681182
    }
]