[
    {
        "content": "<p>I am adding some API to <code>Cat</code>, and I am runnning into a linter problem with simpNF and I am wondering what to do. The short story is that my lemma is not in simpNF, but it is proven by <code>rfl</code>, and the lemmas taking it to simpNF are not dsimp lemmas. What should I do here? The problem is if I rewrite it to simpNF then <code>dsimp</code> will not be able to prove the original lemma, because the lemmas taking it to simpNF are not dsimp lemmas.</p>\n<p>Here is one of the lemmas for reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">leftUnitor_hom_app</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">‚ü∂</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom.app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">ùüô</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F.obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The reason the LHS is not in simpNF is because strict bicategories have a simp-lemma rewriting  <code>(Œª_ F)</code> to <code>eqToIso</code>, but this is usually proved automatically by <code>aesop_cat</code> when defining the strict bicategory instance, so <code>dsimp</code> can't use it.</p>",
        "id": 444651887,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1718355209
    },
    {
        "content": "<p>There is work going on to fix this right now :)</p>",
        "id": 444651955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718355232
    },
    {
        "content": "<p>For now you can <code>nolint simpNF</code> with a comment about dsimp</p>",
        "id": 444652051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718355254
    },
    {
        "content": "<p>perfect, thanks!</p>",
        "id": 444652106,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1718355275
    },
    {
        "content": "<p>Actually, maybe it would be a good idea to make the lemma <code>(Œª_ F) = eqToIso</code> a dsimp lemma. How would I go about doing this? Proving it by <code>rfl</code> when defining the instance as follows doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">bicategory.strict</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bicategory.Strict</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">id_comp</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">comp_id</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\"> </span><span class=\"c1\">-- This doesn't make it a dsimp lemma sadly</span>\n<span class=\"w\">  </span><span class=\"n\">leftUnitor_eqToIso</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm guessing this is because the place where its tagged <code>@[simp]</code> is in another file, which is in a more general setting where it can't be proven by rfl. Can I somehow overwrite that here (and would that even be a good idea)?</p>",
        "id": 444654006,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1718355854
    }
]