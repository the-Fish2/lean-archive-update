[
    {
        "content": "<p>Do we want this? I would like to be fairly confident that if it builds and lints on my machine then CI will happy. </p>\n<p>The example I got bit by was <code>says</code></p>",
        "id": 419512013,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706898739
    },
    {
        "content": "<p>By \"lints on my machine\" you presumably don't mean \"I added some stuff to one file and <code>#lint</code> was happy\"?</p>",
        "id": 419517366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706900729
    },
    {
        "content": "<p>if <code>lake build</code> and <code>lake exe runLinter mathlib</code> are happy on my machine I would very much hope they are on other machines</p>",
        "id": 419517664,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706900841
    },
    {
        "content": "<p>I was just observing that mathlib linting is much more then \"put #lint at the bottom of the file\" but it looks like you're running more than that (presumably you're running what CI runs)</p>",
        "id": 419518211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706901051
    },
    {
        "content": "<p><code>says</code> is about whether the <code>says.verify</code> option is enabled, which is currently true for CI and false for local use, hence the issue</p>",
        "id": 419552750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706916986
    },
    {
        "content": "<p>this is mostly orthogonal to linting</p>",
        "id": 419552771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917007
    },
    {
        "content": "<p>This was one of the reasons I was against using <code>says</code> in the library BTW</p>",
        "id": 419552815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917033
    },
    {
        "content": "<p>it's all well and good to have the mechanism, but actually <em>using</em> it in mathlib means more text on screen and more runtime, both in CI and locally, unless you disable <code>says.verify</code> locally and then you miss errors that appear in CI as mentioned here. I see only downsides</p>",
        "id": 419552996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917143
    },
    {
        "content": "<p>Hard error or not. I can be swayed. I think inconsistent behavior between CI and local has no benefits.</p>",
        "id": 419553349,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706917343
    },
    {
        "content": "<p>I think to some extent we should expect differences; most people are not going to be running <code>shake</code>, <code>runLinter</code> and <code>lean4checker</code> locally</p>",
        "id": 419553605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917506
    },
    {
        "content": "<p>of course it's possible for you to mimic a CI run locally, but I think it's okay if we optimize the in-editor experience for fast iteration over full checking</p>",
        "id": 419553741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917609
    },
    {
        "content": "<p>in fact I'd love it if we got that <a href=\"#narrow/stream/270676-lean4/topic/quick.20and.20dirty.20mode\">quick-and-dirty option</a> so that we can just skip proofs in the file we don't care about</p>",
        "id": 419553781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706917648
    },
    {
        "content": "<p>Sure. (I only care about <code>lake build</code> and <code>lake exe runLinter Mathlib</code> locally.) _If_ you choose to run something locally, you should expect non-divergent behavior in CI.</p>",
        "id": 419554448,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706918114
    },
    {
        "content": "<p>are you willing to take <code>lake build -KCI</code> as an option?</p>",
        "id": 419555008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706918483
    },
    {
        "content": "<p>I did not know about that. What does it do beside turn this on?</p>",
        "id": 419555823,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706918955
    },
    {
        "content": "<p>I think <code>says.verify</code> is a bad option that shoudp almost never be on</p>",
        "id": 419556030,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706919050
    },
    {
        "content": "<p>I agree, it kind of defeats the purpose</p>",
        "id": 419556535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706919406
    },
    {
        "content": "<p>but people were concerned about the hints going out of date</p>",
        "id": 419556584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706919440
    },
    {
        "content": "<p>or if it suggests more or less than it used to</p>",
        "id": 419556607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706919457
    },
    {
        "content": "<p>but in those cases I think it's fine to just let it go out of date</p>",
        "id": 419556636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706919477
    },
    {
        "content": "<p>Is <code>says.verify</code> the only difference with the <code>-KCI</code> flag?</p>",
        "id": 419559987,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706921743
    },
    {
        "content": "<p>actually it appears <code>says.verify</code> does not use the -KCI flag; if you use the default settings then it checks the <code>CI</code> environment variable during elaboration. So you have to do <code>CI=true lake build</code> instead</p>",
        "id": 419597451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706956839
    },
    {
        "content": "<p>Here's one CI error which I'm not managing to reproduce locally: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7869281349/job/21468075433\">https://github.com/leanprover-community/mathlib4/actions/runs/7869281349/job/21468075433</a></p>",
        "id": 420986393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707730680
    },
    {
        "content": "<p>I would be interested to even know where it is coming from.</p>",
        "id": 420986472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707730695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.MapDeclarationExtension.insert</span> <span class=\"n\">Lean.Environment</span><span class=\"o\">:</span><span class=\"mi\">607</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">assertion</span> <span class=\"n\">violation</span><span class=\"o\">:</span> <span class=\"n\">env.getModuleIdxFor</span><span class=\"bp\">?</span> <span class=\"n\">declName</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">isNone</span> <span class=\"c1\">-- See comment at `MapDeclarationExtension`</span>\n</code></pre></div>",
        "id": 420989319,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707731561
    },
    {
        "content": "<p>that means you are adding an attribute/extension entry for a declaration not in the current module</p>",
        "id": 420991343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732130
    },
    {
        "content": "<p>most attributes catch this in order to present a better error message (that also makes people sad), this is what happens if you don't</p>",
        "id": 420991462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732164
    },
    {
        "content": "<p>I am reproducing it locally</p>",
        "id": 420992362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732407
    },
    {
        "content": "<p>remember that panics show a popup and appear in the Output &gt; \"Lean: Editor\" panel, not as red squiggles</p>",
        "id": 420992506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732450
    },
    {
        "content": "<p>the culprit is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_decl_doc</span> <span class=\"n\">AddMonoidHom.map_zero</span>\n</code></pre></div>",
        "id": 420992582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732471
    },
    {
        "content": "<p>which should be relocated to the same file as the declaration</p>",
        "id": 420992768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732515
    },
    {
        "content": "<p>(you can also use the <code>@[to_additive \"declaration doc here\"]</code> form to add a doc on the additive version of a declaration)</p>",
        "id": 420992904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707732557
    },
    {
        "content": "<p>Yeah I know about this, but it was very very hard to edit this file because the LSP server becomes unusably slow when there's &gt;= 30 errors in the file (is this a known issue? I've been encountering it a lot).</p>",
        "id": 421006297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707736300
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3311\">lean4#3311</a></p>",
        "id": 421011000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707737986
    }
]