[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, is <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Lift.lean#L167\">this</a> another example of the <code>←</code> lifting over <code>if</code> footgun? (Admittedly a relatively harmless one.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">hUsing.isNone</span> <span class=\"k\">then</span> <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">prf.mvarId</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 379342271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509825
    },
    {
        "content": "<p>i.e. <code>getGoals</code> will be invoked regardless of the value of <code>hUsing.isNone</code>.</p>",
        "id": 379342318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509844
    },
    {
        "content": "<p>and the preferred way to write this is just to add a <code>do</code>, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">hUsing.isNone</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">prf.mvarId</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 379342388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509876
    },
    {
        "content": "<p>yes</p>",
        "id": 379342654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690509994
    },
    {
        "content": "<p>I would put the <code>do</code> after the <code>withMainContext</code>, although I guess it probably doesn't matter what context you run <code>getGoals</code> in</p>",
        "id": 379342737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510046
    },
    {
        "content": "<p>Yikes, what about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Parse an integer -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">parseInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"sc\">'-'</span> <span class=\"k\">then</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">parseNat</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">parseNat</span>\n</code></pre></div>\n<p>from <code>Mathlib/Tactic/Sat/FromLRAT.lean</code>.</p>",
        "id": 379342849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510105
    },
    {
        "content": "<p>Doesn't that run the <code>parseNat</code> twice in the negative branch?</p>",
        "id": 379342881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510137
    },
    {
        "content": "<p>Oh, actually I take it back, both this and the previous example are not the footgun case</p>",
        "id": 379342926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510169
    },
    {
        "content": "<p>because this is the <code>if</code> doElem, not the <code>if</code> expr</p>",
        "id": 379342941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510181
    },
    {
        "content": "<p>Aha!</p>",
        "id": 379342951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510190
    },
    {
        "content": "<p>the <code>if</code> doElem doesn't have the same issue because the lifting stops when you get to the surrounding doSeq</p>",
        "id": 379342965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510202
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">arg.occurs</span> <span class=\"n\">i</span> <span class=\"bp\">||</span> <span class=\"n\">l</span> <span class=\"bp\">!=</span> <span class=\"n\">Level.zero</span>\n      <span class=\"k\">then</span> <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Exists</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">mkLambdaFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">And</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>from <code>Mathlib.Tactic.MkIffInductiveProp.lean</code> is an example?</p>",
        "id": 379343157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510302
    },
    {
        "content": "<p>yes</p>",
        "id": 379343169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510312
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6199\">#6199</a>. That was the only one I could readily find by grepping for <code>←</code> near a <code>then</code> or <code>else</code>.</p>",
        "id": 379343908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510724
    },
    {
        "content": "<p>Is this issue tracked / mentioned / discussed / linted against anywhere. I just spent a good few hours debugging something that came down to this and it still seems highly unintuitive that lean functions in this way</p>",
        "id": 427461746,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710764807
    },
    {
        "content": "<p>Could hovering over the <code>←</code> indicate where the operation has been lifted to, somehow?</p>",
        "id": 427485907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710769067
    },
    {
        "content": "<p>That should be possible, we do something similar for <code>return</code></p>",
        "id": 427488084,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710769625
    },
    {
        "content": "<p>(i.e. please open an issue!)</p>",
        "id": 427488117,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710769637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.86.90.60.20lifting.20over.20.60if.60.20footgun/near/427485907\">said</a>:</p>\n<blockquote>\n<p>Could hovering over the <code>←</code> indicate where the operation has been lifted to, somehow?</p>\n</blockquote>\n<p>To be honest I'm not sure a hover would have helped me, I'm not in the habit of hovering over my meta code. Its only after isolating the problem line via manual debugging that I remembered the existence of this behaviour</p>",
        "id": 427488523,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710769746
    },
    {
        "content": "<p>I will make an issue</p>",
        "id": 427488544,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710769750
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3713\">https://github.com/leanprover/lean4/issues/3713</a></p>",
        "id": 427645314,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710838665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.86.90.60.20lifting.20over.20.60if.60.20footgun/near/427645314\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/issues/3713\">https://github.com/leanprover/lean4/issues/3713</a></p>\n</blockquote>\n<p>Would we want to have this behaviour: any <code>if</code> statement that has a <code>←</code> in the <code>then</code> or <code>else</code> case that would normally get lifted over the <code>if</code>, is transformed like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n<span class=\"bp\">=&gt;</span>\n<span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>So in your example that would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"bp\">←</span> <span class=\"n\">somethingBad</span> <span class=\"k\">else</span> <span class=\"mi\">9</span>\n<span class=\"bp\">=&gt;</span>\n<span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">something</span> <span class=\"n\">Bad</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 427683468,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710851604
    },
    {
        "content": "<p>As unlikely as it might be, what if someone is relying on every monadic action embedded in an expression (no matter what it is) getting lifted?</p>\n<p>I'm wondering if this case should be detected and be a linter(?) warning</p>",
        "id": 427684807,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710851957
    },
    {
        "content": "<p>I think it should be an error, just like <code>let x := fun _ =&gt; (&lt;- foo)</code> is an error</p>",
        "id": 427685424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710852170
    },
    {
        "content": "<p>Then what would the error say? Something like \"lifting <code>(&lt;- ...)</code> over <code>if</code> is confusing\"? I think having a linter might be best, because if someone really wants to lift <code>←</code> over <code>if</code>, they can turn the linter off.</p>",
        "id": 427689629,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710853526
    },
    {
        "content": "<p>the error normally just says that you can't lift <code>&lt;-</code> over a binder</p>",
        "id": 427690893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710853966
    },
    {
        "content": "<p>and it's not \"confusing\", it's \"wrong\"</p>",
        "id": 427690937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710853980
    },
    {
        "content": "<p>But here we're lifting over an <code>if</code>, which is not a binder</p>",
        "id": 427691086,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710854032
    },
    {
        "content": "<p>sure, so say we're lifting out of an if branch if we have the ability to customize the error message</p>",
        "id": 427691216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710854065
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">←</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- cannot lift `(&lt;- ...)` over a binder, this error usually happens</span>\n<span class=\"c1\">-- when you are trying to lift a method nested in a `fun`, `let`, or `match`-alternative,</span>\n<span class=\"c1\">-- and it can often be fixed by adding a missing `do`</span>\n</code></pre></div>",
        "id": 427691480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710854148
    },
    {
        "content": "<p>it also seems to lift out of <code>if h : cond then</code> branches, and here there really is a binder</p>",
        "id": 427691805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710854232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"n\">Id</span> <span class=\"kt\">Prop</span> <span class=\"k\">from</span>\n  <span class=\"n\">return</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n                                <span class=\"c1\">-- ^   ^ unknown identifier 'h'</span>\n</code></pre></div>\n<p>this is wrong behavior, not merely confusing</p>",
        "id": 427692352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710854397
    },
    {
        "content": "<p>in general, &lt;- should not lift over any syntax which uses lazy evaluation, like <code>&lt;|&gt;</code>'s right argument or <code>if</code>'s branches</p>",
        "id": 427692722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710854511
    },
    {
        "content": "<p>Yes, you're right</p>",
        "id": 427693082,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710854623
    }
]