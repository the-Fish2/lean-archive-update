[
    {
        "content": "<p>A TODO in Order/SuccPred.Basic.lean <a href=\"https://github.com/leanprover-community/mathlib4/blob/ab939c0c1c77dbec774196ac070ab0387cf09dc7/Mathlib/Order/SuccPred/Basic.lean#L47-L54\">here</a> asks if <code>pred</code> and <code>succ</code> form a Galois connection. I saw this and got nerdsniped but I really need to get back to other things now so I thought I'd post my thoughts (which can I'm sure be golfed):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">SuccPred</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">GaloisConnection</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Order</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Preorder</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">SuccOrder</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PredOrder</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_succ_pred</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsMin</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">le_pred_iff_isMin</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">le_succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pred_covBy_of_not_isMin</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">    </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">push_neg</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">succ_le_of_lt</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">push_neg</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h4</span><span class=\"bp\">⟩</span>\n<span class=\"w\">      </span><span class=\"n\">specialize</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">le_succ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">succ_le_iff_isMax</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">exfalso</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h3</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"bp\">.</span><span class=\"m\">2</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">pred_mono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">pred_le_pred</span><span class=\"w\"> </span><span class=\"n\">h</span>\n</code></pre></div>\n<p>By symmetry I'm assuming that one can prove <code>pred (succ a) &lt;= a</code> and <code>succ_mono</code>, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaloisConnection.monotone_intro#doc\">docs#GaloisConnection.monotone_intro</a> to finish, if anyone would like to take this on. In particular I think it's true. Note that it's not symmetric: it's not true that <code>succ (pred a) &lt;= a</code> because if the base type is <code>Fin 37</code> then <code>succ (pred 0) = 1 &gt; 0</code>.</p>",
        "id": 442495391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717496703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> this is all your doing</p>",
        "id": 442495830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717496841
    },
    {
        "content": "<p>Wait what! I didn't think anyone (or you out of all of them) would figure this one out.</p>",
        "id": 442503083,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717499260
    },
    {
        "content": "<p>For the symmetry-claim, can't you use <code>OrderDual</code>?</p>",
        "id": 442503563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499428
    },
    {
        "content": "<p>I think you can use <code>yael-golf</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 442504619,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717499774
    },
    {
        "content": "<p>That tactic is very expensive. It comes with a 2~3 week delay because of some exams or such....</p>",
        "id": 442504836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499866
    },
    {
        "content": "<p>Well it's been a TODO since something like 2021 so I'm not sure there's a hurry :-)</p>",
        "id": 442506693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717500485
    },
    {
        "content": "<p>I think this morally obligates <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> to prove some FLT sorries <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 442514479,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717502976
    },
    {
        "content": "<p>I mean, given that I might be in Imperial for several months next year, hmm, maybe?</p>",
        "id": 442529116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717507441
    },
    {
        "content": "<p>The tactic is bored of revision:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_succ_pred</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsMin</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">le_pred</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">le_succ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred_covBy_of_not_isMin</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wcovBy</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span>\n</code></pre></div>",
        "id": 442537150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717509718
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13505\">#13505</a></p>",
        "id": 442539649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717510344
    },
    {
        "content": "<p>Actually,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_succ_pred</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pred_wcovBy</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span>\n</code></pre></div>",
        "id": 442542588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717511196
    },
    {
        "content": "<p><code>exact?</code> could have <em>almost</em> figured out a conjecture in the doc.</p>",
        "id": 442568638,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717517479
    },
    {
        "content": "<p>... yep</p>",
        "id": 442569584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717517714
    },
    {
        "content": "<p>It's interesting! Yael wrote in 2021 that they weren't sure if it was true or not, and in fact I probably spent over an hour  in total on the proof above because I also didn't know if it was true or not. The stuff I deleted before I posted here was two potential counterexamples to the Galois connection claim built as inductive types, the first one of which failed to work, and then I started working on the hypothesis that corollaries of the Galois connection claim might be easier to disprove, and came up with the second counterexample to <code>a ≤ succ (pred a)</code> which also failed to work out etc. This has been my \"tube problem\" for the last two days. I even tried to create some kind of structure theorem for PredSuccOrders and ended up with some kind of understanding of what they might look like, which ultimately led me to the proof. But once you know what you're actually trying to <em>do</em> (because the process converged on the journey in this morning), things get much easier. Once I had the proof I figured I'd broken the back of it and I'd let someone else analyse my work. It doesn't surprise me that there's a much shorter proof but I wasn't expecting a one-liner :-)</p>",
        "id": 442569588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717517715
    },
    {
        "content": "<p>Actually, you are missing a key step. When <span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> was working on polytopes, they needed the covering relation. We wrote <a href=\"https://github.com/leanprover-community/mathlib/pull/10676\">!3#10676</a> together and I immediately got the hunch that <code>covby.succ_eq</code> (now <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CovBy.succ_eq#doc\">docs#CovBy.succ_eq</a>) was going to be key to proving the Galois connection. But I couldn't figure it out, so I wrote a mysterious \"<code>covers</code> should help here.\" in the module doc instead.</p>",
        "id": 442571770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717518303
    },
    {
        "content": "<p>That lemma only works for partial orders and I decided that I definitely wanted to stay in preorderland, but the preorder version is easy to guess</p>",
        "id": 442572382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717518477
    },
    {
        "content": "<p>As it turns out, my hunch was exactly right, as all we needed was <code>CovBy.succ_eq</code>, <code>Order.covBy_succ</code> and a few corollaries added over the years (Floris' <code>WCovBy</code> turns out to be really useful, but all it does here is saving us the case split. Without it, you get my second-to-last code snippet).</p>",
        "id": 442572393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717518480
    },
    {
        "content": "<p>I guess <code>exact?</code> could have helped had you stated your lemma for <code>PartialOrder</code>? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WCovBy.le_succ#doc\">docs#WCovBy.le_succ</a> requires <code>PartialOrder</code> on master (I'm weakening it to <code>Preorder</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13505\">#13505</a>).</p>",
        "id": 442573064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717518661
    }
]