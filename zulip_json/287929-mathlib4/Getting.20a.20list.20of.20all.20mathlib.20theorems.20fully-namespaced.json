[
    {
        "content": "<p>Working in <code>/Data</code>, I often notice things that are present in only one of the <code>Polynomial</code> and <code>MvPolynomial</code> namespaces, but should be present in both. The same goes for <code>Finset</code> <code>Multiset</code> and <code>List</code>. </p>\n<p>I'd like to investigate this a bit more rigorously. Is there some way to get a list of all the lemmas in mathlib so I can see if there are other namespaces that overlap and which lemmas from other namespaces overlap with which others?</p>",
        "id": 426454814,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710380480
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Expr.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- all constants in imported files</span>\n  <span class=\"k\">let</span> <span class=\"kd\">constants</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₁.toList.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- remove some auto-generated constants</span>\n  <span class=\"k\">let</span> <span class=\"kd\">constants</span> <span class=\"bp\">←</span> <span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">filterM</span> <span class=\"k\">fun</span> <span class=\"n\">nm</span> <span class=\"bp\">↦</span> <span class=\"n\">return</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">nm.isBlackListed</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- print first 100</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{constants |&gt;.take 100}\"</span>\n</code></pre></div>",
        "id": 426567066,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710430015
    },
    {
        "content": "<p>That works perfectly, thanks!</p>",
        "id": 426630480,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710450919
    },
    {
        "content": "<p>For Zulip's viewing pleasure: the top 100 most similar namespace pairs by intersection-over-union (out of namespaces with at least 200 declarations).</p>\n<div class=\"codehilite\" data-code-language=\"Todotxt\"><pre><span></span><code>IOU: 0.51 Subring Subsemiring\nIOU: 0.41 WithTop WithBot\nIOU: 0.39 AddMonoidHom MonoidHom\nIOU: 0.39 Subgroup AddSubgroup\nIOU: 0.38 AddSubmonoid Submonoid\nIOU: 0.26 Finsupp DFinsupp\nIOU: 0.24 Submonoid Subsemiring\nIOU: 0.23 Submonoid Subring\nIOU: 0.23 AddSubgroup AddSubmonoid\nIOU: 0.22 AddSubmonoid Subring\nIOU: 0.22 AddSubmonoid Subsemiring\nIOU: 0.22 Subgroup Submonoid\nIOU: 0.21 AddEquiv RingEquiv\nIOU: 0.20 ULift MulOpposite\nIOU: 0.20 Subalgebra Subsemiring\nIOU: 0.20 Filter.Germ Function.Injective\nIOU: 0.20 Subalgebra Subring\nIOU: 0.19 AlgEquiv RingEquiv\nIOU: 0.19 AddSubgroup Submonoid\nIOU: 0.18 Subgroup AddSubmonoid\nIOU: 0.17 MonoidHom RingHom\nIOU: 0.17 AddMonoidHom RingHom\nIOU: 0.17 Function.Injective MulOpposite\nIOU: 0.17 AlgEquiv AddEquiv\nIOU: 0.16 RingHom AlgHom\nIOU: 0.16 Filter.Germ MulOpposite\nIOU: 0.15 ULift Filter.Germ\nIOU: 0.15 ULift Function.Injective\nIOU: 0.15 Subgroup Subring\nIOU: 0.15 AlgEquiv AlgHom\nIOU: 0.15 IntermediateField Subalgebra\nIOU: 0.15 AddSubgroup Subring\nIOU: 0.14 AddSubgroup Subsemiring\nIOU: 0.14 Filter.Tendsto Continuous\nIOU: 0.14 Subgroup Subsemiring\nIOU: 0.14 LinearEquiv AddEquiv\nIOU: 0.13 LinearEquiv RingEquiv\nIOU: 0.13 ENNReal NNReal\nIOU: 0.13 Pi ULift\nIOU: 0.13 LinearEquiv AlgEquiv\nIOU: 0.13 Pi Function.Injective\nIOU: 0.13 Pi Prod\nIOU: 0.13 Nat Int\nIOU: 0.12 LinearEquiv ContinuousLinearEquiv\nIOU: 0.11 Pi Filter.Germ\nIOU: 0.11 Set Finset\nIOU: 0.10 OrderIso Homeomorph\nIOU: 0.10 MonoidHom AlgHom\nIOU: 0.10 Complex IsROrC\nIOU: 0.10 Real Complex\nIOU: 0.10 Submodule AddSubmonoid\nIOU: 0.10 Pi MulOpposite\nIOU: 0.10 IntermediateField Subring\nIOU: 0.10 AddMonoidHom AlgHom\nIOU: 0.09 Submonoid Subalgebra\nIOU: 0.09 WithTop EReal\nIOU: 0.09 ContinuousMap BoundedContinuousFunction\nIOU: 0.09 IntermediateField Subsemiring\nIOU: 0.09 Homeomorph ContinuousLinearEquiv\nIOU: 0.08 WithBot EReal\nIOU: 0.08 WithTop Filter.Germ\nIOU: 0.08 AddSubmonoid Subalgebra\nIOU: 0.08 ContinuousLinearMap ContinuousMultilinearMap\nIOU: 0.08 LinearMap ContinuousLinearMap\nIOU: 0.08 Finset Multiset\nIOU: 0.08 RingEquiv AlgHom\nIOU: 0.08 LinearEquiv Homeomorph\nIOU: 0.08 ContinuousLinearEquiv AddEquiv\nIOU: 0.08 LinearMap AddMonoidHom\nIOU: 0.08 Equiv Homeomorph\nIOU: 0.08 MulOpposite TrivSqZeroExt\nIOU: 0.08 WithBot Filter.Germ\nIOU: 0.08 Submodule AddSubgroup\nIOU: 0.08 List Multiset\nIOU: 0.07 Filter.Germ TrivSqZeroExt\nIOU: 0.07 ULift TrivSqZeroExt\nIOU: 0.07 Prod ULift\nIOU: 0.07 CategoryTheory.ShortComplex HomologicalComplex\nIOU: 0.07 RingHom RingEquiv\nIOU: 0.07 Submodule Submonoid\nIOU: 0.07 AddMonoidHom AddEquiv\nIOU: 0.07 Homeomorph AddEquiv\nIOU: 0.07 AddSubgroup Subalgebra\nIOU: 0.07 ENNReal WithTop\nIOU: 0.07 LieSubmodule Subring\nIOU: 0.07 ContinuousLinearMap AddMonoidHom\nIOU: 0.07 Equiv OrderIso\nIOU: 0.07 AffineSubspace LieSubmodule\nIOU: 0.07 LieSubmodule Subsemiring\nIOU: 0.07 RingHom AlgEquiv\nIOU: 0.06 AffineSubspace Subring\nIOU: 0.06 AffineSubspace Subsemiring\nIOU: 0.06 AddSubmonoid LieSubmodule\nIOU: 0.06 Homeomorph RingEquiv\nIOU: 0.06 Option Part\nIOU: 0.06 AlgEquiv ContinuousLinearEquiv\nIOU: 0.06 ContinuousLinearEquiv RingEquiv\nIOU: 0.06 Pi DFinsupp\nIOU: 0.06 Subgroup Subalgebra\nIOU: 0.06 Equiv LinearEquiv\n</code></pre></div>",
        "id": 426636404,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710453466
    },
    {
        "content": "<p>\"Similar\" means \"contain many lemmas with the same name\"? Or what exactly?</p>",
        "id": 426668118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710473524
    },
    {
        "content": "<p>It just means that a large fraction of lemma names that appear in one appear in both.</p>",
        "id": 426672718,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710477053
    }
]