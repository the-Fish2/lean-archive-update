[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Epi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- A morphism `f` is an epimorphism if it can be cancelled when precomposed. -/</span>\n  <span class=\"n\">left_cancellation</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.epi</span> <span class=\"n\">CategoryTheory.Epi</span>\n\n<span class=\"sd\">/-- A morphism `f` is a monomorphism if it can be cancelled when postcomposed:</span>\n<span class=\"sd\">`g ≫ f = h ≫ f` implies `g = h`.</span>\n\n<span class=\"sd\">See &lt;https://stacks.math.columbia.edu/tag/003B&gt;.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- A morphism `f` is a monomorphism if it can be cancelled when postcomposed. -/</span>\n  <span class=\"n\">right_cancellation</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.mono</span> <span class=\"n\">CategoryTheory.Mono</span>\n</code></pre></div>\n<p>When \\gg is defined this way, it makes it seem like a monomorphism is right cancellative like the above would say, but this wrong. Why is it written this way?</p>",
        "id": 428313722,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711108444
    },
    {
        "content": "<p>I don't understand your question. Are you claiming the definition is mathematically incorrect, asking about the definition of <code>≫</code> (it's \"composition but backwards\") or what?</p>",
        "id": 428314406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711108733
    },
    {
        "content": "<p>It says if f is Monomorphism then if  (g ≫ f) = (h  ≫ f) -&gt; g = h<br>\n<a href=\"/user_uploads/3121/qak5FQK8fxNFBPZOcZXjCVNv/Screenshot-2024-03-22-at-5.01.07AM.png\">Screenshot-2024-03-22-at-5.01.07AM.png</a><br>\nBut this is the def of a monomorphism</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qak5FQK8fxNFBPZOcZXjCVNv/Screenshot-2024-03-22-at-5.01.07AM.png\" title=\"Screenshot-2024-03-22-at-5.01.07AM.png\"><img src=\"/user_uploads/3121/qak5FQK8fxNFBPZOcZXjCVNv/Screenshot-2024-03-22-at-5.01.07AM.png\"></a></div>",
        "id": 428314833,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711108892
    },
    {
        "content": "<p>It's not mathematically incorrect but it's confusing lefts and rights maybe?</p>",
        "id": 428314905,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711108921
    },
    {
        "content": "<p>Right, and those (lean def, screenshot) are exactly the same thing, right?</p>",
        "id": 428314958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711108926
    },
    {
        "content": "<p>I am confused about what you are confused about.</p>",
        "id": 428314980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711108936
    },
    {
        "content": "<p><code>f ≫ g = g ∘ f</code>, if that's what you are confused about</p>",
        "id": 428315040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711108957
    },
    {
        "content": "<p>no the f is on the right side in Lean and it should be on the left side of LHS and RHS</p>",
        "id": 428315056,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711108963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Problem.20with.20Mono.2FEpi.20defs.20in.20Category.2EBasic.3F/near/428315040\">said</a>:</p>\n<blockquote>\n<p><code>f ≫ g = g ∘ f</code></p>\n</blockquote>\n<p>yes but why is this done?</p>",
        "id": 428315121,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711108990
    },
    {
        "content": "<p>Because then in commutative diagrams the maps are composed in the same order that they're written. <code>f ≫ g</code> is \"<code>f</code> then <code>g</code>\".</p>",
        "id": 428315202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711109032
    },
    {
        "content": "<p>Okay I understand this btw I am not confused, I see since writing programs we write left to right and writing commutative diagrams is common so we want to write them left to right. But you can write your commutative diagrams right to left and then not have to flip f and g for no reason (unless the reason above)</p>",
        "id": 428315479,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711109140
    },
    {
        "content": "<p>Thank you for the insight</p>",
        "id": 428315592,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711109175
    }
]