[
    {
        "content": "<p>I just came to realising something really quite bad about our import tree, and I do not immediately know how to solve it.</p>",
        "id": 440784854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716791912
    },
    {
        "content": "<p><code>abel</code> depends on <code>norm_num</code> to normalise numerals, and <code>norm_num</code> depends on <code>Field</code> to handle fractions (in fact it even depends on <code>LinearOrderedField</code> to handle nonnegative fractions through <code>NNRat</code>, but I'm pretty sure I know how to fix this).</p>",
        "id": 440785099,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792024
    },
    {
        "content": "<p>This means that eg the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a> can't be made without importing <code>LinearOrderedField</code>. Of course, one could just move to a later file or eliminate the uses of <code>abel</code>, but that's solving the symptom, not the disease.</p>",
        "id": 440785245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792105
    },
    {
        "content": "<p>Can we make it so that <code>abel</code>, a tactic about commutative groups, does not need to know about linearly ordered fields?</p>",
        "id": 440785328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792136
    },
    {
        "content": "<p>Shouldn't the plug-in system of <code>norm_num</code> mean that you can use a barebones <code>norm_num</code> in <code>abel</code> in low-level files, and <code>norm_num</code> (and hence <code>abel</code>) become more powerful once you import higher-level files?</p>",
        "id": 440785857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716792375
    },
    {
        "content": "<p>I would hope so, but currently <code>Tactic.Abel</code> imports <code>Tactic.NormNum</code></p>",
        "id": 440785902,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792402
    },
    {
        "content": "<p>I mean, I understand that is not how it currently works... but it seems that it would be good to make it work like that.</p>",
        "id": 440785903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716792402
    },
    {
        "content": "<p>Actually, what even is the point of fractions in <code>abel</code>? It's only dealing with <code>Int</code> and <code>Nat</code>, right?</p>",
        "id": 440786027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792465
    },
    {
        "content": "<p>Even if we scrap the support for fractions, we still have the issue that those <code>Int</code> and <code>Nat</code> equalities are backed by <code>Ring</code>. That's definitely better than <code>LinearOrderedField</code>, but still not great</p>",
        "id": 440786202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716792545
    },
    {
        "content": "<p>I think this is not worth it. <code>abel</code> uses <code>norm_num</code> and <code>norm_num</code> uses rational numbers in the framework code (not the add-ons). I would instead suggest pulling out a minimal version of fields which <code>Tactic.NormNum.Core</code> can import, and use that whenever you need <code>abel</code>; or don't use <code>abel</code> and prove it by hand / by <code>group</code></p>",
        "id": 440788176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716793380
    },
    {
        "content": "<p>I know that, Mario, but plenty of properties of <code>Rat</code> are proved without using <code>Field</code>, so I'm not convinced <code>norm_num</code> really must depend on <code>Field</code></p>",
        "id": 440788465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716793508
    },
    {
        "content": "<p>Is the issue here the way that norm_num caches algebraic instances in it's result type?</p>",
        "id": 440789454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716793908
    },
    {
        "content": "<p>yes</p>",
        "id": 440793555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795387
    },
    {
        "content": "<p>and also when it has to compute with them</p>",
        "id": 440793577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Dependencies.20of.20abel/near/440788465\">said</a>:</p>\n<blockquote>\n<p>I know that, Mario, but plenty of properties of <code>Rat</code> are proved without using <code>Field</code>, so I'm not convinced <code>norm_num</code> really must depend on <code>Field</code></p>\n</blockquote>\n<p>It's not storing <code>Rat</code>, it's storing rational expressions in a <code>Field</code></p>",
        "id": 440793685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795437
    },
    {
        "content": "<p>all math is performed over appropriate algebraic classes</p>",
        "id": 440793731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795454
    },
    {
        "content": "<p>on the \"programming side\" that means working with <code>Rat</code> but the generated proofs make no reference to <code>Rat</code> and only use field axioms</p>",
        "id": 440793862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795499
    },
    {
        "content": "<p>IMO all the lemmas etc are already being applied as late as they reasonably can be. Feel free to try to separate out the minimum requirements, but I don't think it is worth trying to cleave <code>norm_num</code> into two tactics, which is what you would need to do to make it not know about/handle rational numerals</p>",
        "id": 440794280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716795685
    },
    {
        "content": "<p>I think your idea of a custom <code>Field</code> typeclass could make sense</p>",
        "id": 440795332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716796033
    },
    {
        "content": "<p>Removing <code>abel</code> from the file that defines <code>Module</code> seems like a more reasonable thing to aim for</p>",
        "id": 440795979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716796256
    },
    {
        "content": "<p>Tactics are hard enough to write without making more rules about what they aren't allowed to import</p>",
        "id": 440796140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716796316
    },
    {
        "content": "<p>Okay but that doesn't solve the fact that <code>abel</code> is a tactic about commutative groups</p>",
        "id": 440796395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716796397
    },
    {
        "content": "<p>no, it's more like a tactic about Z-modules</p>",
        "id": 440797613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716796806
    },
    {
        "content": "<p>I suppose there could be an <code>abel_core</code> tactic for early files which does not normalize numerals? (And so doesn't need norm_num)</p>",
        "id": 440797880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716796889
    },
    {
        "content": "<p>I think that's <code>simp [add_assoc, add_left_comm, add_comm]</code></p>",
        "id": 440797976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716796922
    },
    {
        "content": "<p>There is no need to use <code>abel</code> at all in early files</p>",
        "id": 440798092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716796942
    },
    {
        "content": "<p>I've seen a lot of places where <code>abel</code> can be replaced with <code>rw [add_add_add_comm]</code></p>",
        "id": 440798242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716797001
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13274\">#13274</a></p>",
        "id": 440808668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716800508
    },
    {
        "content": "<p>I'd be happy to merge the de-abel bit, but don't have time to review the scope creep moves right now</p>",
        "id": 440817335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716803090
    },
    {
        "content": "<p>Yes, this PR should be split according to paragraphs in the description, no need to do it all at once?</p>",
        "id": 441003435,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716889812
    },
    {
        "content": "<p>I mean the first part is tiny? It's three lines of diff. The main part is the second one</p>",
        "id": 441005889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716890717
    },
    {
        "content": "<p>Well, we can't tell that by looking at the PR; how many of the transitive import changes were caused by the <code>abel</code>/<code>rw</code> swap? If they were separate PRs then the answer would be obvious</p>",
        "id": 441006479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716890907
    },
    {
        "content": "<p>I've opened a separate PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13305\">#13305</a> and removed its diff from <a href=\"https://github.com/leanprover-community/mathlib4/pull/13274\">#13274</a></p>",
        "id": 441013346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716893724
    },
    {
        "content": "<p>Imports aren't quite right yet, but LGTM.</p>",
        "id": 441029438,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716899467
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13305\">#13305</a> passes CI. <a href=\"https://github.com/leanprover-community/mathlib4/pull/13274\">#13274</a> will pass CI soon.</p>",
        "id": 441056355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716907544
    }
]