[
    {
        "content": "<p>I have a definition which I would like to define in terms of <code>dite</code>, but the <code>if</code> condition is something which will rarely (but potentially could in certain circumstances) have an existing <code>Decidable</code> instance. Moreover the condition is a bit messy, so requiring <code>[Decidable messy_condition]</code> everywhere just in order to write the function in a theorem statement is undesirable. To put icing on the cake, in practice the <code>then</code> term will (almost?) always be noncomputable. </p>\n<p>So, my desire would be to use <code>Classical.decidable</code> in the definition, but I realize that this is bad practice. I'm soliciting recommendations.</p>",
        "id": 420471472,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707403062
    },
    {
        "content": "<p>You do have the <code>classical</code> tactic for making proofs which you know won't be needed for computation easier to work with</p>",
        "id": 420471726,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707403137
    },
    {
        "content": "<p>yes, but that doesn't help me with <em>statements</em></p>",
        "id": 420471786,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707403160
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">foo</span> <span class=\"c1\">-- failed, as expected</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance Decidable (foo n)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"c1\">-- this is fine</span>\n</code></pre></div>",
        "id": 420473748,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707403774
    },
    {
        "content": "<p>You can definitely use <code>Classical.decidable</code> in the definition (possibly with an <code>irreducible_def</code> to make sure that unfolding will only happen on purpose), and then register a lemma with <code>[Decidable messy_condition]</code> unfolding the definition but using this decidability condition instead of the <code>Classical.decidable</code> one.</p>",
        "id": 420473935,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707403827
    },
    {
        "content": "<p>Then most lemmas just using the statement wouldn't need any decidability condition, and you can start a proof with <code>classical</code> if you need to unfold the definition inside the proof, and moreover if sometimes you have the <code>[Decidable messy_condition]</code> in the context you can unfold the definition using the lemma I just alluded to, and avoid diamonds like that.</p>",
        "id": 420474283,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707403936
    }
]