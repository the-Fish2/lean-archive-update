[
    {
        "content": "<p>Hi, I know why this is happening and I am looking for workarounds for the moment. Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">DGAlgorithms</span><span class=\"bp\">.</span><span class=\"n\">Models</span><span class=\"bp\">.</span><span class=\"n\">Vector</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Combinatorics</span><span class=\"bp\">.</span><span class=\"n\">SimpleGraph</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Graph</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">adj_arr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">BEq</span>\n</code></pre></div>\n<p>The above is not an MWE. <code>DGAlgorithms.Models.Vector</code> contains a copy of the Vector from <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a> . This clashes with <code>Mathlib.Data.Vector</code> in the form of the error <code>import Mathlib.Data.Vector failed, environment already contains 'Vector.instGetElemNatLt._cstage2' from DGAlgorithms.Models.Vector.Basic</code>. </p>\n<p><strong>Question</strong> : Is there a mechanism for qualified imports to circumvent this?</p>\n<p>Note : The Vector file copy is a temporary stand-in for what I hope will be <code>Batteries.Data.Vector</code> very soon. I just need it sooner.</p>",
        "id": 440530032,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564098
    },
    {
        "content": "<p>Yeah, that's what I was afraid of. I recommend making your changes inside mathlib and only when you think it's ready for batteries, to move it all at once</p>",
        "id": 440530432,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564258
    },
    {
        "content": "<p>I think in this particular case, a PR removing Mathlib.Data.Vector is better, because Mathlib Vectors are apparently not used anywhere in the rest of mathlib.</p>",
        "id": 440530621,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564343
    },
    {
        "content": "<p>I am not sure that it makes sense in this particular instance: One simply needs a migration PR which removes Mathlib.Data.Vector which is apparently unused inside Mathlib</p>",
        "id": 440530822,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564422
    },
    {
        "content": "<p>Last I checked, they were not used much, but still somewhat</p>",
        "id": 440530881,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564440
    },
    {
        "content": "<p>If Vector is unused now, you don't need a migration pr, you should just remove it preemptively</p>",
        "id": 440530931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564471
    },
    {
        "content": "<p>It is not used anywhere : <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20Vector&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20Vector&amp;type=code</a></p>",
        "id": 440531344,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564622
    },
    {
        "content": "<p>Just scrolling through that link, I already find</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">card_vector</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n</code></pre></div>",
        "id": 440531919,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564786
    },
    {
        "content": "<p>Correction, it is used in a couple of places.</p>",
        "id": 440531941,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564792
    },
    {
        "content": "<p>Thank you</p>",
        "id": 440531965,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716564798
    },
    {
        "content": "<p>We made a lot of changes to the Vector API to keep it close to the Array API</p>",
        "id": 440532240,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564887
    },
    {
        "content": "<p>This would have certainly broken mathlib even if it was done inside mathlib</p>",
        "id": 440532320,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716564914
    },
    {
        "content": "<p>Maybe in your branch, but it would not be merged into master</p>",
        "id": 440532562,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716565009
    },
    {
        "content": "<p>That's true, but I am trying to explain why developing it in batteries made sense, other than the fact that the discussion happened entirely in the batteries stream. It's goal is to be efficient first and foremost, making use of the special array support in the compiler. In mathlib, getting something easy for proofs  might have taken precedence.</p>",
        "id": 440532712,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716565071
    },
    {
        "content": "<p>Anyway, what's my quickfix in the example above? I am keen on using the  Vector API rather than re-inventing them again under a different name. Can I fix this by adding a namespace in my project's Vector files? More precisely what is lean's equivalent of haskell's <code>import qualified Vector as V</code></p>",
        "id": 440534229,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716565708
    },
    {
        "content": "<p>can this be fixed by renaming the namespace in Mathlib's Vector to, say, <code>MathVector</code>?</p>",
        "id": 440535193,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716566076
    },
    {
        "content": "<p>Why are you not getting an error that your <code>Vector</code> clashes with mathlib 's <code>Vector</code>?</p>",
        "id": 440552891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716573068
    },
    {
        "content": "<p>Module namespacing</p>",
        "id": 440552998,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716573115
    },
    {
        "content": "<p>I haven't directly imported mathlib Vector</p>",
        "id": 440553083,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716573132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20clash.20with.20Mathlib.20instance.2E/near/440552998\">said</a>:</p>\n<blockquote>\n<p>Module namespacing</p>\n</blockquote>\n<p>What do you mean by this?</p>",
        "id": 440553139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716573155
    },
    {
        "content": "<p>I haven't brought mathlib Vector into scope</p>",
        "id": 440553217,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716573186
    },
    {
        "content": "<p>Is your vector type called <code>YourModule.Vector</code>?</p>",
        "id": 440553219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716573186
    },
    {
        "content": "<p>No</p>",
        "id": 440553250,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716573198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20clash.20with.20Mathlib.20instance.2E/near/440553217\">said</a>:</p>\n<blockquote>\n<p>I haven't brought mathlib Vector into scope</p>\n</blockquote>\n<p>If it's imported transitively then it's in scope</p>",
        "id": 440553261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716573204
    },
    {
        "content": "<p>And if it's not imported transitively the error here doesn't make sense</p>",
        "id": 440553305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716573224
    },
    {
        "content": "<p>My phone is about to lose battery power. I will respond later</p>",
        "id": 440553462,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716573279
    },
    {
        "content": "<p>If Mathlib Vector is in scope then I have no idea why this happens. The error says that the import of Mathlib.Data.Vector failed.</p>",
        "id": 440558060,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716575148
    },
    {
        "content": "<p>The error happens before I use Vector though. At the import line</p>",
        "id": 440558147,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716575173
    },
    {
        "content": "<p>Yes, because you are importing two files which both define Vector</p>",
        "id": 440569864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716580877
    },
    {
        "content": "<p>Or at least, I assume you are. I can't see your other file, so it's hard to say.</p>",
        "id": 440569903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716580901
    },
    {
        "content": "<p>It is identical to the vector folder in <a href=\"https://github.com/leanprover-community/batteries/pull/793\">batteries#793</a></p>",
        "id": 440571440,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716581669
    },
    {
        "content": "<p>I am waiting for that PR to merge so I want to be able to swap the current folders out without too much effort</p>",
        "id": 440571563,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716581730
    },
    {
        "content": "<p>You can't define <code> _root_.Vector</code> in two different files and import them at the same time</p>",
        "id": 440571672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716581777
    },
    {
        "content": "<p>That PR should surely not be merged without a mathlib adaptation PR?</p>",
        "id": 440571797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716581850
    },
    {
        "content": "<p>In which case, the solution for you is to work on the version of mathlib that you create in that mathlib PR</p>",
        "id": 440571859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716581876
    },
    {
        "content": "<p>Or alternatively, put everything in a <code>DG</code>  namespace in your local copy</p>",
        "id": 440571942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716581909
    },
    {
        "content": "<p>Good point. I will add a mathlib adaptation PR. Should the namespace be Mathlib?</p>",
        "id": 440574168,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716583044
    },
    {
        "content": "<p>I think deciding what to do with <code>Vector</code> in Mathlib is a subject for another thread</p>",
        "id": 440575019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716583492
    },
    {
        "content": "<p>Maybe: in a non dependent PR, move Vector to Mathlib.Vector. that could be merged right away?</p>",
        "id": 440582397,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716587737
    },
    {
        "content": "<p>Then, in an adaptation PR (i.e. relying on the batteries branch), delete what has been upstreamed, and deprecate the rest.</p>",
        "id": 440582493,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716587777
    },
    {
        "content": "<p>I learnt that there are one or two places where Mathlib's Vector API is used. It is very different from the Batteries Vector at this point</p>",
        "id": 440583028,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716588077
    },
    {
        "content": "<p>It seems much simpler to just deprecate what's in mathlib</p>",
        "id": 440583063,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716588102
    }
]