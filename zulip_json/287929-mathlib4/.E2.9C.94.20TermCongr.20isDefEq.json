[
    {
        "content": "<p>I'm trying to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.TermCongr.mkCongrOf#doc\">docs4#Mathlib.Tactic.TermCongr.mkCongrOf</a> with a proof containing mvars, but can't get it to work because a <code>isDefEq</code> isn't unifying the mvars. Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.TermCongr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Term</span> <span class=\"n\">Mathlib.Tactic.TermCongr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof'</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">none</span>                          <span class=\"c1\">-- t</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">proof'</span><span class=\"o\">)</span>  <span class=\"c1\">-- #[?x, ?y]</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"n\">proof'</span> <span class=\"n\">args</span>                              <span class=\"c1\">-- t ?x ?y</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mvarCounterSaved</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarCounter</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withLocalDecls</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]),</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])]</span> <span class=\"k\">fun</span> <span class=\"n\">fvars</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">fvars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">mkCHole</span> <span class=\"n\">true</span>  <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span> <span class=\"o\">[])</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>         <span class=\"n\">proof</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">fvars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">mkCHole</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span> <span class=\"o\">[])</span> <span class=\"n\">fvars.reverse</span><span class=\"o\">)</span> <span class=\"n\">proof</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"c1\">-- λ a b, $(t ?x ?y : a + b = b + a)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">mkCongrOf</span> <span class=\"mi\">0</span> <span class=\"n\">mvarCounterSaved</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    Left-hand side of congruence hole is</span>\n<span class=\"cm\">      Nat.add ?x ?y</span>\n<span class=\"cm\">    but is expected to be</span>\n<span class=\"cm\">      Nat.add a b</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>Why doesn't this work? The error shown on the bottom looks like it shouldn't be a problem as <code>Nat.add ?x ?y</code> and <code>Nat.add a b</code> should just unify. But I'm guessing there's something like mvar depth involved here which I don't understand yet.</p>",
        "id": 422961172,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1708672490
    },
    {
        "content": "<p>Those metavariables can't unify with anything involving the local variables a and b since they don't have them in context. If you move the proof creation into underneath the withLocalDecls, it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.TermCongr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Term</span> <span class=\"n\">Mathlib.Tactic.TermCongr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mvarCounterSaved</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarCounter</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withLocalDecls</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]),</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])]</span> <span class=\"k\">fun</span> <span class=\"n\">fvars</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">proof'</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">none</span>                          <span class=\"c1\">-- t</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">proof'</span><span class=\"o\">)</span>  <span class=\"c1\">-- #[?x, ?y]</span>\n    <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"n\">proof'</span> <span class=\"n\">args</span>                              <span class=\"c1\">-- t ?x ?y</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">fvars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">mkCHole</span> <span class=\"n\">true</span>  <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span> <span class=\"o\">[])</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>         <span class=\"n\">proof</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">fvars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">mkCHole</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span> <span class=\"o\">[])</span> <span class=\"n\">fvars.reverse</span><span class=\"o\">)</span> <span class=\"n\">proof</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"c1\">-- λ a b, $(t ?x ?y : a + b = b + a)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">mkCongrOf</span> <span class=\"mi\">0</span> <span class=\"n\">mvarCounterSaved</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">res.eq</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 422962852,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708673373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 422973445,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708678595
    }
]