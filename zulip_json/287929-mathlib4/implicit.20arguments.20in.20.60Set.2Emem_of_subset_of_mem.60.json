[
    {
        "content": "<p>When I use <code>show_term apply Set.mem_of_subset_of_mem a1 a2</code>, I get <code>exact Set.mem_of_subset_of_mem a1 a2</code>, but when I use that, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Set.mem_of_subset_of_mem</span> <span class=\"n\">a1</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">visited</span> <span class=\"bp\">⊆</span> <span class=\"n\">dfs_aux</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nexts</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">visited</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.66788</span> <span class=\"bp\">⊆</span> <span class=\"n\">List.Mem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Set.mem_of_subset_of_mem</span> <span class=\"bp\">?</span><span class=\"n\">m.66892</span> <span class=\"n\">a2</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">dfs_aux</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nexts</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">visited</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.66788</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is this because the <code>{s₁ : Set α} {s₂ : Set α} {a : α}</code> in the theorem are implicit?</p>",
        "id": 439313279,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1715995590
    },
    {
        "content": "<p>For types that aren't metavariables the expression need to match exactly. In the first error the problem is that the expression <code>dfs_aux g (nexts g x ++ stack) (x :: visited)</code> isn't exactly <code>List.Mem x</code>. And for the second error the problem is that <code>x</code> isn't exactly <code>dfs_aux g (nexts g x ++ stack) (x :: visited)</code>. </p>\n<p>You could try using <code>apply Set.mem_of_subset_of_mem</code> and see what that gives.</p>",
        "id": 439388716,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1716073529
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 439477906,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716164449
    }
]