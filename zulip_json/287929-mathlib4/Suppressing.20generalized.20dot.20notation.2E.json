[
    {
        "content": "<p>Hey. I have a family of equivalence on Nat parameterised by a Nat - so I'm in the Nat namespace. But I don't really want my equivalence to use that parameter for the dot notation - like, if I have def MyEquiv (i : Nat) : Nat \\equiv myType, I don't want Lean/the VS code display to default to displaying (I.MyEquiv) - it is inconsistent with other ways I use dot notation in the same file. Is there a way to get it to, well, not?</p>",
        "id": 446575371,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719224412
    },
    {
        "content": "<p>I believe <code>pp_no_dot</code> has <em>not</em> been restored after <code>pp_dot</code> became the default again. So, unless I'm wrong, no you can't</p>",
        "id": 446575661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719224489
    },
    {
        "content": "<p>RIP.</p>",
        "id": 446575935,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719224592
    },
    {
        "content": "<p>Alas.</p>",
        "id": 446575973,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719224604
    },
    {
        "content": "<p>I just tried <code>set_option pp.fieldNotation.generalized false</code>, but it seems it is forbidden by a linter.</p>",
        "id": 446576664,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719224856
    },
    {
        "content": "<p>You can also disable the linter <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 446577489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719225130
    },
    {
        "content": "<p>lol</p>",
        "id": 446577505,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719225138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Suppressing.20generalized.20dot.20notation.2E/near/446575661\">said</a>:</p>\n<blockquote>\n<p>I believe <code>pp_no_dot</code> has <em>not</em> been restored after <code>pp_dot</code> became the default again. So, unless I'm wrong, no you can't</p>\n</blockquote>\n<p>I don't think this is true, <code>@[pp_nodot]</code> should work.</p>",
        "id": 446578272,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1719225399
    },
    {
        "content": "<p>Speaking of suppressing the dot notation, I wish I could disable <code>A.fromBlocks B C D</code> and other declarations that have several arguments of the type in the prefix.</p>",
        "id": 446578976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719225628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Suppressing.20generalized.20dot.20notation.2E/near/446578272\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Suppressing.20generalized.20dot.20notation.2E/near/446575661\">said</a>:</p>\n<blockquote>\n<p>I believe <code>pp_no_dot</code> has <em>not</em> been restored after <code>pp_dot</code> became the default again. So, unless I'm wrong, no you can't</p>\n</blockquote>\n<p>I don't think this is true, <code>@[pp_nodot]</code> should work.</p>\n</blockquote>\n<p>How do you use this with simps?</p>",
        "id": 446579254,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719225692
    },
    {
        "content": "<p>like if I already have @[simps!] at the start</p>",
        "id": 446579311,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719225703
    },
    {
        "content": "<p>ah, comma</p>",
        "id": 446580082,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719225847
    },
    {
        "content": "<p>Indeed, <code>@[pp_nodot]</code> does work, but I quickly checked and there is some syntax in <code>Mathlib.Mathport.Syntax</code> that prevents it from working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Mathport.Syntax -- uncomment me to fail</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">pp_nodot</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">sin</span>\n</code></pre></div>\n<p>I'll make a quick PR!</p>",
        "id": 446593401,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719229598
    },
    {
        "content": "<p>It seems to work in that the display of it changes, but yes it doesn't fully lock it off.</p>",
        "id": 446593539,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1719229654
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14090\">#14090</a></p>",
        "id": 446594412,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719229958
    },
    {
        "content": "<p>This is already addressed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13781\">#13781</a>, which is on the queue.</p>",
        "id": 446598267,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1719231219
    },
    {
        "content": "<p>Ah, I looked at that PR and thought it was already done merging without that fix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 446602635,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719232650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Suppressing.20generalized.20dot.20notation.2E/near/446575661\">said</a>:</p>\n<blockquote>\n<p>I believe <code>pp_no_dot</code> has <em>not</em> been restored after <code>pp_dot</code> became the default again.</p>\n</blockquote>\n<p>While the release notes don't include everything, <code>pp_nodot</code> is mentioned: <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a></p>\n<p>It's also in the blog post for the release: <a href=\"https://lean-lang.org/blog/2024-6-1-lean-480/\">https://lean-lang.org/blog/2024-6-1-lean-480/</a></p>",
        "id": 446671252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719249180
    },
    {
        "content": "<p>Ah, glad to see I am wrong!</p>",
        "id": 446673603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719249691
    },
    {
        "content": "<p>(It's hard to find, but there's a bit of documentation in the description for the <code>pp.fieldNotation</code> option too.)</p>",
        "id": 446673960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719249753
    },
    {
        "content": "<p>Ah, I see where I got confused: <code>pp_nodot</code> was reintroduced but the corresponding lines in Mathlib were not uncommented</p>",
        "id": 446674188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719249813
    },
    {
        "content": "<p>No one seemed to want to merge my PR for the last few weeks :-(</p>\n<p>In any case, there are a number of places to figure out for certain whether <code>pp_nodot</code> exists so there's no need to try to go by memory :-)</p>",
        "id": 446674545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719249916
    },
    {
        "content": "<p>What PR? I will review it (assuming it's to <code>mathlib4</code>)</p>",
        "id": 446684393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719253142
    },
    {
        "content": "<p>Didn't it just land? <a href=\"https://github.com/leanprover-community/mathlib4/pull/13781\">#13781</a></p>",
        "id": 446687999,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719254117
    }
]