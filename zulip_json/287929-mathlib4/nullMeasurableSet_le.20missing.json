[
    {
        "content": "<p>The analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nullMeasurableSet_lt#doc\">docs#nullMeasurableSet_lt</a> for <code>le</code> appears to be missing from Mathlib viz.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nullMeasurableSet_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderClosedTopology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">AEMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">AEMeasurable</span> <span class=\"n\">g</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NullMeasurableSet</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nullMeasurable</span> <span class=\"n\">measurableSet_le'</span>\n</code></pre></div>",
        "id": 418460678,
        "sender_full_name": "Terence Tao",
        "timestamp": 1706404311
    },
    {
        "content": "<p>Thanks, it's great to get reports of gaps like this. I've just created <a href=\"https://github.com/leanprover-community/mathlib4/pull/10074\">#10074</a> to plug this.</p>",
        "id": 418501927,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706447495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> feel free to review the PR (i.e. just make a comment saying \"yes please I need this and the proofs look sensible\" or something) -- you don't have to be a maintainer to review a PR (many people seem to be under this misconception so it's always worth occasionally trying to dispel it).</p>",
        "id": 418502415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706447979
    }
]