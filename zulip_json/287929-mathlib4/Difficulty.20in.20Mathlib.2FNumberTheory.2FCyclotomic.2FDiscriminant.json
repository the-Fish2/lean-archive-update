[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, you're listed as the original author of this file, but anyone else who knows this file well: help here would be much appreciated. (I see that <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> did the port?)</p>\n<p>On the <code>lean-pr-testing-3151</code> branch, I can not get <code>IsCyclotomicExtension.discr_prime_pow</code> working (in <code>Mathlib/NumberTheory/Cyclotomic/Discriminant.lean</code>).</p>\n<p>On this branch, the simplifier is behaving a bit differently, and won't visit instance arguments unless directed to via <code>simp (config := { instances := true })</code>. However, that doesn't seem to fix this proof, and I can't really see what's going on.</p>\n<p>The critical steps of the proof are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c1\">-- Porting note: the goal at this point is `(discr K fun i ↦ ζ ^ ↑i) = 1`.</span>\n      <span class=\"c1\">-- This `simp_rw` is needed so the next `rw` can rewrite the type of `i` from</span>\n      <span class=\"c1\">-- `Fin (natDegree (minpoly K ζ))` to `Fin 1`</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hζ.eq_neg_one_of_two_right</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hζ.eq_neg_one_of_two_right</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">minpoly.eq_X_sub_C_of_algebraMap_inj</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span> <span class=\"n\">natDegree_X_sub_C</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is pretty nasty: we're using <code>rw</code> to rewrite a type. On the <code>lean-pr-testing-3151</code> branch, the first step of the <code>rw</code> fails. I don't see why it used to not fail, to be honest!</p>\n<p>If anyone is able to take a look at this proof and see if they can hack through it, that would be much appreciated.</p>",
        "id": 411870052,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704780041
    },
    {
        "content": "<p>It seems there is some whole API missing for changing the indexing type for <code>discr</code>, and this proof is a fragile hack trying to avoid that?</p>",
        "id": 411871267,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704780420
    },
    {
        "content": "<p>Ah, crisis averted, just adding a <code>dsimp</code> is enough. I've rewritten a little to use <code>convert_to</code> to make the type rewriting clearer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convert_to</span> <span class=\"o\">(</span><span class=\"n\">discr</span> <span class=\"n\">K</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hζ.eq_neg_one_of_two_right</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n        <span class=\"n\">dsimp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hζ.eq_neg_one_of_two_right</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"n\">minpoly.eq_X_sub_C_of_algebraMap_inj</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span> <span class=\"n\">natDegree_X_sub_C</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"bp\">...</span> <span class=\"n\">continue</span> <span class=\"n\">proof</span> <span class=\"n\">as</span> <span class=\"n\">before</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 411872137,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704781033
    },
    {
        "content": "<p>I guess it make sense to PR this diff already, right? Because it's simply a cleaner proof then what's there atm.</p>",
        "id": 411879131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704785348
    },
    {
        "content": "<p>I agree the new proof is better, I can PR it if you want.</p>",
        "id": 411891091,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704791138
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 411905402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704796160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9589\">#9589</a></p>\n<p>It is not your modification, but I've checked that it works in the <code>lean-pr-testing-3151</code> branch. I think this one is more robust, I use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.discr_reindex#doc\">docs#Algebra.discr_reindex</a> to change the type.</p>",
        "id": 411911977,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704798196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, would you mind transplanting it into <code>lean-pr-testing-3151</code>, so I don't have to sort out the conflict later?</p>",
        "id": 411913237,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704798597
    }
]