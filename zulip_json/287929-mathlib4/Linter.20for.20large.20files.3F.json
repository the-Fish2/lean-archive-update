[
    {
        "content": "<p>As I understand it, there's a general consensus that large files should be split up, as this makes adding to, refactoring and minimisation of files much easier. For instance:</p>\n<ul>\n<li>smaller files allow for better parallelism when building mathlib (in principle; depending on number of cores and possibly specifics of the import graphs)</li>\n<li>splitting files helps keeping imports in check</li>\n<li>improves editing times in a file (this will be helped by checking proofs in parallel)</li>\n<li>lower first build times when loading a file (AIUI, this will not)</li>\n<li>minimisation becomes easier</li>\n<li>large files tend to indicate opportunities for splitting or refactoring into less monolithic structures</li>\n<li>personally, it's easier to find things in a smaller file --- especially if the file is old and the main docstring only covers half the results there :-)</li>\n</ul>\n<p>Every file has a tendency to grow over time (as more results are formalised <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>); it's not clear to me if there are any mechanisms to prevent backsliding.</p>\n<p>Should there be a lint for large files, say over 1000 or 1500 lines? We can add the current large files as exception and whittle them down over time. If a PR pushes a file over the limit, the lint can be allowed --- but hopefully, that's a tiny speed bump to nudge reconsidering the structure. (FWIW, this is what <a href=\"https://github.com/rust-lang/rust/pull/60167\">Rust</a> also did.)</p>",
        "id": 416088324,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705514253
    },
    {
        "content": "<p>This has been discussed before (<a href=\"#narrow/stream/287929-mathlib4/topic/Let's.20not.20have.20big.20files.3F\">example</a>), and a style linter suggested. AFAICT, nobody wrote such a linter yet. Can we, as a first step, agree this would be good to have (and perhaps record this in an issue)?</p>",
        "id": 416088462,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705514290
    },
    {
        "content": "<p>Some data: as of <code>a316e2b352f84e46f07f318d51397264a29a5018</code>, mathlib has</p>\n<ul>\n<li>134 files of 800--999 lines</li>\n<li>54 files of 1000-1099 lines</li>\n<li>30 files of 1100-1199 lines</li>\n<li>27 files of 1200-1299 lines</li>\n<li>29 files of 1300-1399 lines</li>\n<li>22 files of 1400-1499 lines</li>\n<li>altogether: 162 files of 1000-1499 lines</li>\n<li>61 files of 1500-1999 lines</li>\n<li>29 files of 2000-2499 lines</li>\n<li>13 files of 2500-2999 lines</li>\n<li>5 files of 3000-3999 lines; one file larger than 4000 lines</li>\n</ul>",
        "id": 416088995,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705514447
    },
    {
        "content": "<p>For reference, here is the list of files with more than 2000 lines.</p>\n<div class=\"codehilite\" data-code-language=\"spoiler,details\"><pre><span></span><code>    4457 Mathlib/Data/List/Basic.lean\n    3992 Mathlib/Data/Finset/Basic.lean\n    3878 Mathlib/GroupTheory/Subgroup/Basic.lean\n    3373 Mathlib/Order/Filter/Basic.lean\n    3196 Mathlib/Data/Multiset/Basic.lean\n    3041 Mathlib/Data/Set/Basic.lean\n    2983 Mathlib/Topology/Order/Basic.lean\n    2865 Mathlib/RingTheory/PowerSeries/Basic.lean\n    2821 Mathlib/Computability/TuringMachine.lean\n    2815 Mathlib/Analysis/Normed/Group/Basic.lean\n    2757 Mathlib/Topology/Algebra/Module/Basic.lean\n    2728 Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.lean\n    2716 Mathlib/Data/Real/ENNReal.lean\n    2715 Mathlib/Data/Matrix/Basic.lean\n    2675 Mathlib/Algebra/BigOperators/Basic.lean\n    2653 Mathlib/Combinatorics/SimpleGraph/Connectivity.lean\n    2593 Mathlib/SetTheory/Ordinal/Arithmetic.lean\n    2551 Mathlib/SetTheory/Cardinal/Basic.lean\n    2550 Mathlib/Data/Finset/Pointwise.lean\n    2410 Mathlib/RingTheory/Ideal/Operations.lean\n    2409 Mathlib/Data/Set/Lattice.lean\n    2395 Mathlib/Data/DFinsupp/Basic.lean\n    2367 Mathlib/Analysis/InnerProductSpace/Basic.lean\n    2362 Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.lean\n    2306 Mathlib/Analysis/Asymptotics/Asymptotics.lean\n    2275 Mathlib/Topology/Separation.lean\n    2250 Mathlib/MeasureTheory/MeasurableSpace/Basic.lean\n    2240 Mathlib/Data/Finset/Lattice.lean\n    2231 Mathlib/Topology/Algebra/Group/Basic.lean\n    2227 Mathlib/Topology/MetricSpace/PseudoMetric.lean\n    2191 Mathlib/MeasureTheory/Measure/MeasureSpace.lean\n    2158 Mathlib/Algebra/MonoidAlgebra/Basic.lean\n    2148 Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean\n    2118 Mathlib/CategoryTheory/Limits/Shapes/Biproducts.lean\n    2111 Mathlib/Analysis/Calculus/ContDiff/Basic.lean\n    2110 Mathlib/GroupTheory/MonoidLocalization.lean\n    2096 Mathlib/Order/CompleteLattice.lean\n    2072 Mathlib/Topology/Basic.lean\n    2069 Mathlib/Computability/TMToPartrec.lean\n    2068 Mathlib/Order/Filter/AtTopBot.lean\n    2066 Mathlib/RingTheory/UniqueFactorizationDomain.lean\n    2065 Mathlib/Logic/Equiv/Basic.lean\n    2046 Mathlib/Data/Complex/Exponential.lean\n    2033 Mathlib/Analysis/NormedSpace/OperatorNorm.lean\n    2020 Mathlib/Data/Fin/Basic.lean\n    2019 Mathlib/Order/UpperLower/Basic.lean\n    2018 Mathlib/Topology/UniformSpace/Basic.lean\n    2010 Mathlib/MeasureTheory/Integral/Bochner.lean\n</code></pre></div>",
        "id": 416089123,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705514490
    },
    {
        "content": "<p>This seems like a good idea (as long as it's easy to override). Probably we mostly need someone to actually do it :)</p>",
        "id": 416089665,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705514655
    },
    {
        "content": "<p>I'm inclined to start with a limit of 1500 lines. We can decide later if really we want to push it down to 1000.</p>",
        "id": 416093605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705515977
    },
    {
        "content": "<p>An \"easy\" split. <code>ENNReal</code> should just get its own folder inside <code>Data</code></p>",
        "id": 416093669,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705516006
    },
    {
        "content": "<p>1000 could still be an informal rule of thumb, with 1500 a hard limit (modulo prehistoric exceptions).</p>",
        "id": 416093678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705516011
    },
    {
        "content": "<p>Let me try to make stone soup: <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-lint-large-files\">branch#MR-lint-large-files</a> has a quick implementation of the lint, set to 1500 lines.</p>",
        "id": 416099101,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705517919
    },
    {
        "content": "<p>I'd also prefer rewriting that in Lean, but I'd need help for this: where to start, where to look. (I haven't really <em>programmed</em> in Lean before.)</p>",
        "id": 416099244,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705517980
    },
    {
        "content": "<p>(The first commit updates the exceptions; this is pre-existing. It seems we're missing the bot updating this file when entries are removed/it hasn't been ported yet.)</p>",
        "id": 416100361,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705518375
    },
    {
        "content": "<p>If you put the current number of lines in the error, will we need to change the exceptions every time the length changes?</p>",
        "id": 416101241,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705518728
    },
    {
        "content": "<p>I'm going to move parts of <code>Filter.Basic</code> to new files.</p>",
        "id": 416101648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705518902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Linter.20for.20large.20files.3F/near/416101241\">said</a>:</p>\n<blockquote>\n<p>If you put the current number of lines in the error, will we need to change the exceptions every time the length changes?</p>\n</blockquote>\n<p>Hm, bummer. Can we configure CI to do this? (Does it do this automatically already?)</p>",
        "id": 416102694,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705519332
    },
    {
        "content": "<p>I'd prefer printing the number of lines to the user (to give some information) - the way update-style-lints works implies this is also printed to the file. I could remove the number.</p>",
        "id": 416102813,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705519388
    },
    {
        "content": "<p>Exceptions can give per-file limits on <code>wc -l</code></p>",
        "id": 416103447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705519630
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/leanprover-community/mathlib4/pull/9821\">#9821</a> for updating the list of style exceptions (prior to my PR) and <a href=\"https://github.com/leanprover-community/mathlib4/pull/9822\">#9822</a> for the new lint.</p>",
        "id": 416103774,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705519744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Linter.20for.20large.20files.3F/near/416103447\">said</a>:</p>\n<blockquote>\n<p>Exceptions can give per-file limits on <code>wc -l</code></p>\n</blockquote>\n<p>I don't understand this sentence. What are you referring to? (I don't know mathlib's CI inside out.)</p>",
        "id": 416103942,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705519790
    },
    {
        "content": "<p>I don't know how does your linter work. I was trying to say that it can be implemented so that it verifies that non-exceptional files have ≤1500 lines and exceptional files have LOC ≤ the number in their entry in a csv, yaml, or json file.</p>",
        "id": 416214183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705520159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Linter.20for.20large.20files.3F/near/416093669\">said</a>:</p>\n<blockquote>\n<p>An \"easy\" split. <code>ENNReal</code> should just get its own folder inside <code>Data</code></p>\n</blockquote>\n<p>Thanks for the idea! I just did this, <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-split-ennreal\">branch#MR-split-ennreal</a> has a split. A helping hand at adding module docs would be very welcome (feel free to just push to the branch directly).</p>",
        "id": 416219528,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705522435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> Do you have some spare moment, by chance?</p>",
        "id": 416219892,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705522579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> I'll try to look in the next 30 minutes or so.</p>",
        "id": 416330954,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705523376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Linter.20for.20large.20files.3F/near/416214183\">said</a>:</p>\n<blockquote>\n<p>I don't know how does your linter work. I was trying to say that it can be implemented so that it verifies that non-exceptional files have ≤1500 lines and exceptional files have LOC ≤ the number in their entry in a csv, yaml, or json file.</p>\n</blockquote>\n<p>Good idea - adding a watermark so exceptional files cannot grow too much without acknowledgement. That goes beyond the current script, though.</p>",
        "id": 416332007,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705523815
    },
    {
        "content": "<p>A simple rule that lands is probably better than a more complicated rule that doesn't. It's not like it's a strict limit</p>",
        "id": 416334556,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705525006
    },
    {
        "content": "<p>It turns out there was a loophole in my argument - I found a very mild hack to add a watermark and updated the script. On errors, the script also prints the watermark, which means the update script also works with this. (I've tested this locally and on CI, by merging master and updating the output.)</p>",
        "id": 416462813,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705534087
    },
    {
        "content": "<p>In other words: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9822\">#9822</a> is ready for review.</p>",
        "id": 416462859,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705534119
    },
    {
        "content": "<p>This PR has landed now. Thanks for the fast review!</p>",
        "id": 416789598,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705674701
    }
]