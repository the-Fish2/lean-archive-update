[
    {
        "content": "<p>I'm getting <code>LinearMap.comp (map φ ψ) comul</code> in the infoview. Can I make it say <code>(map φ ψ).comp comul</code> instead?</p>",
        "id": 418463196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706407167
    },
    {
        "content": "<p>I got as far as this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">LinearMap.comp</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unknown declaration '_aux_scratch___LinearMap_comp_unexpander_1'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 418463215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706407201
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I don't see any error.</p>",
        "id": 418463758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706407836
    },
    {
        "content": "<p>no you're right, I can't reproduce :-) Thanks!</p>",
        "id": 418464392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706408561
    },
    {
        "content": "<p>Should I add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">LinearMap.comp</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">LinearMap.mul'</span>\n</code></pre></div>\n<p>to mathlib?</p>",
        "id": 418464406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706408582
    },
    {
        "content": "<p>I think we really need to make this the default, just as it was in Lean 3.</p>",
        "id": 418673595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706545392
    },
    {
        "content": "<p>I have since discovered <code>∘ₗ</code> and am now confused about what the simp normal form is.</p>",
        "id": 418674419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706545624
    },
    {
        "content": "<p>is that not notation for <code>LinearMap.comp</code>?</p>",
        "id": 418683290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706548364
    },
    {
        "content": "<p>If it's notation then I'm surprised I was seeing <code>comp</code> at all?</p>",
        "id": 418719346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706562000
    },
    {
        "content": "<p>Well it depends whether it's delaborated notation or input-only notation</p>",
        "id": 418722291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706563134
    },
    {
        "content": "<p>I have no idea what this means</p>",
        "id": 418722350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706563157
    },
    {
        "content": "<p>I'm asking you whether <code>∘ₗ</code> has a delaborator, assuming that by \"I was seeing <code>comp</code>\" you mean \"I was seeing <code>comp</code> in the infoview\".</p>",
        "id": 418722689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706563294
    },
    {
        "content": "<p>Yes, it does have one. It's generated by <code>notation3</code>. <a href=\"https://github.com/leanprover-community/mathlib4/blob/89f9777575aaa0e4190c64c8247b03f7864f67e8/Mathlib/Algebra/Module/LinearMap.lean#L575\">https://github.com/leanprover-community/mathlib4/blob/89f9777575aaa0e4190c64c8247b03f7864f67e8/Mathlib/Algebra/Module/LinearMap.lean#L575</a></p>\n<p>Unfortunately, the delaborators it generates can be very very sensitive. For example, <code>notation3</code>'s delaborators only handle matching expressions sort of syntactically. If there are instance arguments, it doesn't know how to do those checks up to defeq.</p>\n<p>This should be improvable, but perhaps (1) the <code>notation</code> command itself could get these improvements and/or (2) <code>notation3</code> could be replaced by a new mathlib 4 notation command, since <code>notation3</code> is after all meant to ease the port of Lean 3 notations -- the delaborator generator made it achieve feature parity with Lean 3's <code>notation</code> command.</p>",
        "id": 418724366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706563829
    },
    {
        "content": "<p>I've also noticed places where, when applying some notation to an extra argument (<code>(L ∘ₗ  L') x</code> instead of <code>L ∘ₗ L'</code>) causes the delaborator to not work.</p>",
        "id": 418814842,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1706613425
    },
    {
        "content": "<p>Overapplication is a common issue with pretty printers. The fundamental issue is that you have to know how many arguments are part of the notation, and how many are additional arguments. The <code>notation</code> command doesn't have much hope of solving it directly, but <code>notation3</code> could.</p>\n<p>Unhandled overapplication is something that's on my radar for things to fix in the delaborator. In the next Lean release we'll see this fixed for overapplied structure projections (so there will be no need for <code>pp_dot</code> on <a href=\"https://github.com/leanprover-community/mathlib4/blob/7f0ee211ff2e3b50be25a1c54bf7afcfcc65fdbd/Mathlib/Combinatorics/Quiver/Basic.lean#L67\">Prefunctor.obj and Prefunctor.map</a> for example).</p>",
        "id": 418886512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706635427
    }
]