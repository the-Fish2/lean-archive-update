[
    {
        "content": "<p>Taking the new diagnostics tool for a ride and this was the biggest offender in the file with the worst regressions with 4.8.</p>",
        "id": 436732261,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714667350
    },
    {
        "content": "<blockquote>\n<p>The canonical map <code>α → αᵒᵖ</code>.</p>\n</blockquote>\n<p>Sounds kinda evil</p>",
        "id": 436734426,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714668109
    },
    {
        "content": "<p>Just to be clear, this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite.op#doc\">docs#Opposite.op</a>, from category theory?</p>",
        "id": 436742991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714671050
    },
    {
        "content": "<p>(Should we namespace the definition in <code>CategoryTheory</code>?)</p>",
        "id": 436743041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714671067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436734426\">said</a>:</p>\n<blockquote>\n<p>Sounds kinda evil</p>\n</blockquote>\n<p>Why is it evil? How else would you go from an object <code>X : C</code> to the corresponding object in the opposite category?</p>",
        "id": 436744767,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1714671718
    },
    {
        "content": "<p>However I did it, I wouldn't tell Lean</p>",
        "id": 436746079,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714672130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436744767\">said</a>:</p>\n<blockquote>\n<p>Why is it evil?</p>\n</blockquote>\n<p>It's evil because an object is not an object of <code>C</code> but rather an object in some unspecified category equivalent to <code>C</code>. (sorry...)</p>",
        "id": 436747864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714672756
    },
    {
        "content": "<p>Anyway, it is completely unreasonable to make <code>Opposite.op</code> irreducible.</p>",
        "id": 436748411,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714672910
    },
    {
        "content": "<p>In terms of impractical?</p>",
        "id": 436748753,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673022
    },
    {
        "content": "<p>Yes.</p>",
        "id": 436748880,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714673064
    },
    {
        "content": "<p>I'm not sure it's completely unreasonable, but if we do make it irreducible we would have to be very careful in developing the initial API.</p>",
        "id": 436748890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714673068
    },
    {
        "content": "<p>I am attempting the experiment now with the new <code>attribute [local semireducible]</code> and trying to quarantine those with <code>irreducible</code></p>",
        "id": 436749017,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673120
    },
    {
        "content": "<p>It's already a structure, right? Is the main issue with eta-reduction?</p>",
        "id": 436749053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714673138
    },
    {
        "content": "<p><code>Opposite</code> is a structure. <code>op</code> is a <code>def</code></p>",
        "id": 436749105,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673155
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite.op#doc\">docs#Opposite.op</a></p>",
        "id": 436749185,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714673170
    },
    {
        "content": "<p>Why aren't we doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 436749245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714673198
    },
    {
        "content": "<p>It this does what I think it does, I would be ok with this.</p>",
        "id": 436749410,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714673258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436749410\">said</a>:</p>\n<blockquote>\n<p>It this does what I think it does, I would be ok with this.</p>\n</blockquote>\n<p>Sorry, I cannot parse \"this\". Are you referring to Adam's suggestion to use the constructor directly?</p>",
        "id": 436750029,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436750029\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436749410\">said</a>:</p>\n<blockquote>\n<p>It this does what I think it does, I would be ok with this.</p>\n</blockquote>\n<p>Sorry, I cannot parse \"this\". Are you referring to Adam's suggestion to use the constructor directly?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 436750111,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714673486
    },
    {
        "content": "<p>That does seem more principled</p>",
        "id": 436750174,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673515
    },
    {
        "content": "<p>Isn't it mostly like making <code>op</code> <em>reducible</em>?</p>",
        "id": 436750246,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714673527
    },
    {
        "content": "<p>Structure eta?</p>",
        "id": 436750371,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20.60op.60.20irreducible/near/436749245\">said</a>:</p>\n<blockquote>\n<p>Why aren't we doing:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Independent of the performance discussion in this thread, we should certainly do this</p>",
        "id": 436751447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714673989
    },
    {
        "content": "<p>Let's see what happens... <a href=\"https://github.com/leanprover-community/mathlib4/pull/12636\">#12636</a></p>",
        "id": 436950417,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714766263
    },
    {
        "content": "<p>I got caught in DTH in one proof and didn't have the energy to fight my way out</p>",
        "id": 436950566,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714766323
    },
    {
        "content": "<p>I had to <code>no_index</code> a couple of instances because the discrimination tree was applying structure eta to get the keys making Lean miss the instance</p>",
        "id": 436950659,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714766371
    },
    {
        "content": "<p><code>AlgebraicGeometry.GammaSpecAdjunction</code> gets sped up by about 10% but is still incredibly slow compared to before v4.8</p>",
        "id": 436951251,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714766633
    }
]