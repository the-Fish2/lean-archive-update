[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Functor</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">NatTrans</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₀</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₀</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₃</span><span class=\"o\">}</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">NatTrans</span> <span class=\"n\">F</span> <span class=\"n\">F'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eφ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">E</span> <span class=\"bp\">⟶</span> <span class=\"n\">F'</span> <span class=\"bp\">⋙</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">whiskerRight</span> <span class=\"n\">φ</span> <span class=\"n\">E</span>\n<span class=\"kd\">def</span> <span class=\"n\">Gφ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span> <span class=\"bp\">⋙</span> <span class=\"n\">F'</span> <span class=\"o\">:=</span>  <span class=\"n\">whiskerLeft</span> <span class=\"n\">G</span> <span class=\"n\">φ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eφ_NatTrans</span> <span class=\"o\">:</span> <span class=\"n\">NatTrans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F'</span> <span class=\"bp\">⋙</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">whiskerRight</span> <span class=\"n\">φ</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">c</span>\n  <span class=\"n\">naturality</span> <span class=\"o\">:=</span> <span class=\"n\">Eφ.naturality</span>\n</code></pre></div>\n<p>For def Eφ_NatTrans, this is the only configuration i can use that doesn't give me an error. I would ideally like to define def Eφ_NatTrans in terms of Eφ without having to construct it again. Any help?</p>",
        "id": 429981145,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711592425
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">φG_NatTrans</span> <span class=\"o\">:</span> <span class=\"n\">NatTrans</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⋙</span> <span class=\"n\">F'</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">φG.app</span> <span class=\"n\">b</span>\n  <span class=\"n\">naturality</span> <span class=\"o\">:=</span> <span class=\"n\">φG.naturality</span>\n</code></pre></div>\n<p>The error it gives me when I define it like this for example: \"don't know how to synthesize placeholder\"</p>",
        "id": 429981484,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711592663
    },
    {
        "content": "<p>The problem is these are variables. Look at the signature of <code>Eφ</code> (e.g. by hovering). There's no \"fixed\" F F' G E in this file: in each declaration they could be different.</p>\n<p>Solution: <code>variable (F F' : C ⥤ D) (G : A ⥤ C) (E : D ⥤ Z)</code> That is, don't use implicit arguments for non-inferrable arguments (unless you're planning to infer them from the expected type, as we often do for theorems).</p>",
        "id": 429984779,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711594588
    }
]