[
    {
        "content": "<p>Why is <a href=\"https://github.com/leanprover-community/mathlib4/pull/14049\">#14049</a> failing? I don't understand the log:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">batteries</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">batteries</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">batteries'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Qq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">aesop</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">proofwidgets</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">importGraph</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"kn\">import</span><span class=\"bp\">-</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph'</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Fetched</span><span class=\"w\"> </span><span class=\"n\">proofwidgets</span><span class=\"o\">:</span><span class=\"n\">optRelease</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">GetAllModules</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">GetAllModules</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"n\">Updating</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Archive</span><span class=\"bp\">.</span><span class=\"n\">lean'</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mf\">1.</span>\n</code></pre></div>",
        "id": 446404237,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719139472
    },
    {
        "content": "<p>It is saying that there is an unexpected file in <code>Archive.lean</code>.  Did you add or remove a file from there?</p>",
        "id": 446408508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719141641
    },
    {
        "content": "<p>(Unexpected simply means that the file is not accounted for by the <code>Archive.lean</code> file, nothing else.)</p>",
        "id": 446408543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719141673
    },
    {
        "content": "<p>Ah, should have clicked the link!  So, when you add a file, try running <code>lake exe mk_all</code> (maybe with also the flag <code>--git</code> if you have files that are not part of the PR in <code>Mathlib</code>) to update the \"import all\" files.  You will see that locally you should get the same output: <code>Updating 'Archive.lean'</code>.  This is telling you that the script modified that file, since it should have found the new <code>Archive/...</code> file and added it.  Now commit the new <code>Archive.lean</code> file and push!</p>",
        "id": 446408689,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719141806
    },
    {
        "content": "<p>(In case you care about these things, the reason CI fails is that the exit code of <code>lake exe mk_all</code> if the number of \"import all\" files that it had to modify.  Thus, CI can only pass if there are no modifications to these files, compared to what the PR pushes.)</p>",
        "id": 446408795,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719141872
    },
    {
        "content": "<p>I think a better error message for this would be nice</p>",
        "id": 446411121,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719142991
    },
    {
        "content": "<p>This step of CI has always been confusing: when it said \"Check that all files are imported\" there were also lots of questions about it.  I am really not sure how to formulate unambiguously what this is flagging.</p>",
        "id": 446412054,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719143861
    },
    {
        "content": "<p>(Part of the reason is probably also that maintaining these \"import all\" files is not something that should be done so much, but that is another discussion.)</p>",
        "id": 446412117,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719143894
    },
    {
        "content": "<p>Can it show the <code>git diff</code> output?</p>",
        "id": 446412719,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719144370
    },
    {
        "content": "<p>What I find really confusing is that it stops CI entirely rather than letting it build mathlib (and giving me cache <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>",
        "id": 446416353,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719147261
    },
    {
        "content": "<p>Yeah, I mentioned that somewhere as well</p>",
        "id": 446417374,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719148076
    },
    {
        "content": "<p>I think that Michael has a PR adding a <code>--check</code> flag to <code>mk_all</code> and wants to use that in CI: maybe that would be a good place to suggest an improvement?</p>",
        "id": 446417510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719148186
    },
    {
        "content": "<p>In fact, since the mk_all step is a guaranteed easy fix, can't we put it <em>after</em> the build step?</p>",
        "id": 446418085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719148602
    },
    {
        "content": "<p>of course the better solution is to have a non-linear CI but it seems github is making that very hard...</p>",
        "id": 446418086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719148602
    },
    {
        "content": "<p>I wonder whether we should have <code>mk_all</code> run</p>\n<ul>\n<li><em>before</em> the build, but without the error being caught, so that CI builds all the files;</li>\n<li><em>and then again</em> after the build, this time failing on errors...</li>\n</ul>",
        "id": 446419185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719149435
    },
    {
        "content": "<p>Yeah, it definitely needs to run before the build</p>",
        "id": 446419360,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719149600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446417510\">said</a>:</p>\n<blockquote>\n<p>I think that Michael has a PR adding a <code>--check</code> flag to <code>mk_all</code> and wants to use that in CI: maybe that would be a good place to suggest an improvement?</p>\n</blockquote>\n<p>It's <a href=\"https://github.com/leanprover-community/mathlib4/pull/13617\">#13617</a>. <span class=\"user-mention\" data-user-id=\"707242\">@Ralf Stephan</span> After that PR, the error message would become <br>\n<code>The file 'Mathlib.lean' is out of date: run `lake exe mk_all` to update it.</code><br>\nWould this have been more understandable to you? Is there a different wording which would have been even better?</p>",
        "id": 446450959,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719165601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446418085\">said</a>:</p>\n<blockquote>\n<p>In fact, since the mk_all step is a guaranteed easy fix, can't we put it <em>after</em> the build step?</p>\n</blockquote>\n<p>It depends on what your PR does. If your PR is merely adding a new file, having CI run and succeed is also confusing - since it's not testing the new code. If you refactor ten files and forgot to add a new leaf file, getting cache is obviously nicer.</p>",
        "id": 446451179,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719165691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446419185\">said</a>:</p>\n<blockquote>\n<p>I wonder whether we should have <code>mk_all</code> run</p>\n<ul>\n<li><em>before</em> the build, but without the error being caught, so that CI builds all the files;</li>\n<li><em>and then again</em> after the build, this time failing on errors...</li>\n</ul>\n</blockquote>\n<p>I like this idea! It seems like it would give the best of both worlds :-)</p>",
        "id": 446451205,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719165706
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">It's</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mf\">13617.</span><span class=\"w\"> </span><span class=\"bp\">@**</span><span class=\"n\">Ralf</span><span class=\"w\"> </span><span class=\"n\">Stephan</span><span class=\"bp\">**</span><span class=\"w\"> </span><span class=\"n\">After</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">PR</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"n\">become</span>\n<span class=\"bp\">`</span><span class=\"ss\">``The</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">lean'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">date</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"ss\">`lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">mk_all</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"bp\">.```</span>\n<span class=\"n\">Would</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">understandable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">you?</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">different</span><span class=\"w\"> </span><span class=\"n\">wording</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">better?</span>\n</code></pre></div>\n<p>I feel like we are closing in on the issue: the automation is telling what humans should be doing...</p>",
        "id": 446451363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719165769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446451179\">said</a>:</p>\n<blockquote>\n<p>It depends on what your PR does. If your PR is merely adding a new file, having CI run and succeed is also confusing - since it's not testing the new code.</p>\n</blockquote>\n<p>I think you misunderstood me. Schematically, I'm saying CI should run <code>lake build; lake exe mk_all</code>, not <code>lake exe mk_all; lake build</code>. Note that we can configure <code>lake build</code> to build all files in the <code>Mathlib</code> directory, not just the ones imported in the <code>Mathlib</code> file.</p>",
        "id": 446467305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719172870
    },
    {
        "content": "<p>This would be a huge change to how <code>lake build</code> works, and contrary to how we currently want people to use <code>lake build</code> by default, so I would discourage Mathlib from doing this.</p>",
        "id": 446489813,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719187494
    },
    {
        "content": "<p>Hmm... okay. Then maybe Damiano's <code>lake exe mk_all (catching errors); lake build; lake exe mk_all</code> is the way to go</p>",
        "id": 446533284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719212672
    },
    {
        "content": "<p>I am testing this out in <a href=\"https://github.com/leanprover-community/mathlib4/pull/14077\">#14077</a>.</p>",
        "id": 446535902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719213663
    },
    {
        "content": "<p>I cannot seem to get past the \"check the cache\" stage on that PR.</p>",
        "id": 446536423,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719213854
    },
    {
        "content": "<p>The first <code>lake exe mk_all</code> notices the error, but the error is caught, <code>lake build</code> builds the extra file as well, the file appears to be uploaded, but <code>lake exe cache get</code> seems to not find it.</p>",
        "id": 446536663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719213948
    },
    {
        "content": "<p>Alternative: <a href=\"https://github.com/leanprover-community/mathlib4/pull/14078\">#14078</a></p>",
        "id": 446537254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719214130
    },
    {
        "content": "<p>I like your version!  I do not have a strong opinion on which following steps to perform anyway (e.g. Archive and Counterexamples).  An argument in favour of adding them would be that if you added a file to <code>Archive</code> you would get nothing from this PR run, other than the same information that we had before the change.</p>",
        "id": 446540737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719214954
    },
    {
        "content": "<p>Ruben, out of curiosity, I checked whether the \"check the cache\" step worked with your workflow as well, but it fails there too: <a href=\"https://github.com/leanprover-community/mathlib4/pull/14079\">#14079</a>.</p>",
        "id": 446546464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719216738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446450959\">said</a>:</p>\n<blockquote>\n<p>It's <a href=\"https://github.com/leanprover-community/mathlib4/pull/13617\">#13617</a>. <span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> After that PR, the error message would become <br>\n<code>The file 'Mathlib.lean' is out of date: run `lake exe mk_all` to update it.</code><br>\nWould this have been more understandable to you? Is there a different wording which would have been even better?</p>\n</blockquote>\n<p>Yes, completely sufficient, thanks.</p>",
        "id": 446547419,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719217073
    },
    {
        "content": "<p>I guess there's a third option, quite similar to what Yael proposed: just reorder the \"lake build\" and \"mk_all\" steps. No modification of lake build, which avoids the issue Kim pointed out, right?</p>\n<p>In terms of user experience, that doesn't seem to have big downsides:</p>\n<ul>\n<li>if a branch just adds a leaf file, building the rest of mathlib is just hitting the cache. If a new file is imported in the relevant file, it will still get built -&gt; good.</li>\n<li>if there is substantial rebuilding to be done, this can happen already, as Yael points out.</li>\n<li>CI still errors if an import-only file is out of date</li>\n</ul>",
        "id": 446548494,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719217372
    },
    {
        "content": "<p>This feels slightly easier than the other CI changes - but I don't have strong preferences either way.</p>",
        "id": 446548584,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719217404
    },
    {
        "content": "<p>I would still like to know: What would it take to have non-linear CI?</p>",
        "id": 446549307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719217652
    },
    {
        "content": "<p>My view is that I would hope that the <code>lake build</code> step in CI is \"what it should be\" and \"what it should be\", in my opinion, is \"a build of all the files in <code>Mathlib</code>.  The fact that the new files in the PR have or have not been explicitly added to <code>Mathlib.lean</code> should not really matter.  Moreover, would the final linting check be possibly different if the file is imported or not?  That is also valuable information.</p>",
        "id": 446549325,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719217658
    },
    {
        "content": "<p>I'm not sure I agree - if I add a leaf file and forget to add it to Mathlib.lean, I still want  to see the errors on github</p>",
        "id": 446549341,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719217662
    },
    {
        "content": "<p>Well, what about we (literally, not schematically) replace the <code>lake build</code> step by <code>lake exe mk_all; lake build</code>? Then we will build all the files, regardless of whether they have been added to <code>Mathlib.lean</code></p>",
        "id": 446550463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719218025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PR.20fail.3A.20Error.3A.20Process.20completed.20with.20exit.20code.201.2E/near/446549307\">said</a>:</p>\n<blockquote>\n<p>I would still like to know: What would it take to have non-linear CI?</p>\n</blockquote>\n<p>I think it's pretty straightforward. You can copy artifacts between build jobs (and indeed there are some github actions that make this relatively painless), and so all jobs that require build artifacts would have to have explicit steps to copy these artifacts (I guess they could just run <code>cache get</code> at every step, but I'd prefer to avoid this significant increase in hitting the cache).</p>",
        "id": 446551649,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719218415
    },
    {
        "content": "<p>Yaël, isn't what you say what both PRs linked above (Ruben's and mine) propose?</p>",
        "id": 446551660,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719218420
    }
]