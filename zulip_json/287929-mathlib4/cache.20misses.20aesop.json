[
    {
        "content": "<p>Am I the only one having to rebuild all of aesop every time I restart the server?</p>",
        "id": 444636223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718349782
    },
    {
        "content": "<p>I had to rebuild everything when I worked on gitpod today, which has never happened to me before.</p>",
        "id": 444676084,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718363403
    },
    {
        "content": "<p>Yeah, batteries as well</p>",
        "id": 444679606,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718364457
    },
    {
        "content": "<p>Me too - I have to rebuild everything (not just aesop) even after a fresh clone and <code>lake exe cache get</code>.</p>",
        "id": 444679773,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718364513
    },
    {
        "content": "<p><del>I'm thinking we should revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/13808\">#13808</a> <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span></del></p>",
        "id": 444682143,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718365415
    },
    {
        "content": "<p>Though the output looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">956</span><span class=\"bp\">/</span><span class=\"mi\">4954</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Aesop</span><span class=\"bp\">.</span><span class=\"n\">Main</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">957</span><span class=\"bp\">/</span><span class=\"mi\">4954</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Aesop</span><span class=\"bp\">.</span><span class=\"n\">Main</span><span class=\"o\">:</span><span class=\"n\">dynlib</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">959</span><span class=\"bp\">/</span><span class=\"mi\">4954</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Aesop</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">960</span><span class=\"bp\">/</span><span class=\"mi\">4954</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Aesop</span><span class=\"o\">:</span><span class=\"n\">dynlib</span>\n</code></pre></div>\n<p>I wonder...</p>",
        "id": 444684622,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718366358
    },
    {
        "content": "<p>False accusation, it starts with <a href=\"https://github.com/leanprover-community/mathlib4/pull/13789\">#13789</a></p>",
        "id": 444685268,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718366549
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-testDriver = \"test\"</span>\n<span class=\"gd\">-precompileModules = false # We would like to turn this on, but it breaks the Mathlib cache.</span>\n<span class=\"gi\">+testDriver = \"AesopTest\"</span>\n<span class=\"gi\">+precompileModules = true</span>\n</code></pre></div>",
        "id": 444685426,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718366615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 444685588,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718366661
    },
    {
        "content": "<p>It breaks the benchmarking also</p>",
        "id": 444685830,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718366756
    },
    {
        "content": "<p>I'll revert. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  it seems precompilation breaks the Mathlib cache after all.</p>",
        "id": 444686755,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718367068
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13835\">#13835</a></p>",
        "id": 444687771,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718367459
    },
    {
        "content": "<p>Sorry for the disruption.</p>",
        "id": 444687790,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718367468
    },
    {
        "content": "<p>It seems the \"check the cache\" test did not catch this as it only tries to restore Mathlib .oleans <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9511124129/job/26216720180#step:16:6\">https://github.com/leanprover-community/mathlib4/actions/runs/9511124129/job/26216720180#step:16:6</a></p>",
        "id": 444694904,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718369860
    },
    {
        "content": "<p>And here I was wondering why <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> spent all morning repeatedly recompiling Mathlib</p>",
        "id": 444694985,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718369882
    },
    {
        "content": "<p>How long until this is fixed from the perspective of a regular mathlib user? I'm teaching lean in front of a class in a couple of hours.</p>",
        "id": 444695803,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718370099
    },
    {
        "content": "<p>Can you use a mathlib from yesterday?</p>",
        "id": 444696035,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718370165
    },
    {
        "content": "<p>That gives me the 'wrong infoview' bug to contend with, which is also not ideal.</p>",
        "id": 444699397,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718371262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444695803\">said</a>:</p>\n<blockquote>\n<p>How long until this is fixed from the perspective of a regular mathlib user? I'm teaching lean in front of a class in a couple of hours.</p>\n</blockquote>\n<p>I think it will be fixed when <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> does the update, which is once a day</p>",
        "id": 444703653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718372597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> this should work now</p>",
        "id": 444711407,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718374907
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 444712065,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718375113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444686755\">said</a>:</p>\n<blockquote>\n<p>I'll revert. <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span>  it seems precompilation breaks the Mathlib cache after all.</p>\n</blockquote>\n<p>This is because mathlib does not yet set <code>platformIndependent := true</code> in its lakefile.</p>",
        "id": 444766335,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718390605
    },
    {
        "content": "<p>(Lake defaults to asssuming packages are platform-dependent.)</p>",
        "id": 444766420,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718390637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444703653\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444695803\">said</a>:</p>\n<blockquote>\n<p>How long until this is fixed from the perspective of a regular mathlib user? I'm teaching lean in front of a class in a couple of hours.</p>\n</blockquote>\n<p>I think it will be fixed when <span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> does the update, which is once a day</p>\n</blockquote>\n<p>Which update? Dependency updates are now (at least, should be, new CI is invariably broken) automatic.</p>",
        "id": 444807263,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718409073
    },
    {
        "content": "<p>Oh sorry I thought you had closed the PR, but I now remember that this the PR about shake. I can't see the automatic update though. <a href=\"https://github.com/leanprover-community/mathlib4/commit/7fa489a5cbf3c4f08d36e1e0b5dee4d761fdbd9b\">https://github.com/leanprover-community/mathlib4/commit/7fa489a5cbf3c4f08d36e1e0b5dee4d761fdbd9b</a> doesn't seem very automatic.</p>",
        "id": 444843980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718441860
    },
    {
        "content": "<p>It's in <code>.github/workflows/update_dependencies.yml</code>. I haven't had a chance to look if it is working. If you would like to debug, help appreciated. :-)</p>",
        "id": 444846118,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443689
    },
    {
        "content": "<p>I actually don't know where the logs go to, nor where I should be expecting to run (\"every hour\" okay, but there isn't always something to update)</p>",
        "id": 444846702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718444152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444766335\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/444686755\">said</a>:</p>\n<blockquote>\n<p>I'll revert. <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span>  it seems precompilation breaks the Mathlib cache after all.</p>\n</blockquote>\n<p>This is because mathlib does not yet set <code>platformIndependent := true</code> in its lakefile.</p>\n</blockquote>\n<p>Should this be done and should we then try again? Precompiled Aesop is ~30% faster on the test suite, though likely somewhat less on Mathlib.</p>",
        "id": 444989649,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718554060
    },
    {
        "content": "<p>Let's test it on separate branches first?</p>",
        "id": 444991496,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718554882
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13891\">#13891</a> sets <code>platformIndependent :=  true</code> in Mathlib and enables Aesop precompilation. In my manual tests, the cache works, both when I check out the PR branch in a new clone of Mathlib and when I create a new project that depends on Mathlib.</p>\n<p>However, the speed center's benchmarking script <a href=\"http://speed.lean-fro.org/mathlib4/run-detail/7da81f51-97a0-405c-87cd-77a5cb1b342a\">appears to break</a>.</p>",
        "id": 445126598,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718629052
    },
    {
        "content": "<p>Actually, the cache also doesn't work. Repro:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/leanprover-community/mathlib4\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span><span class=\"w\"> </span>mathlib4\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>switch<span class=\"w\"> </span>jannis/aesop-precompilation\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n<span class=\"go\">-- succeeds</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build\n<span class=\"go\">-- compiles Aesop (expected) and all files depending on Aesop (unexpected)</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  could you take a look?</p>",
        "id": 445127873,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718629423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I suspect the problem is that Aesop itself does not use <code>platformIndependent = true</code>.</p>",
        "id": 445133313,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718631035
    },
    {
        "content": "<p>Ah, okay. Btw what's the meaning of this flag exactly?</p>",
        "id": 445133964,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718631226
    },
    {
        "content": "<p>Nvm, found the docs. Thanks for the help!</p>",
        "id": 445134311,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718631343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> If you still encounter a problem once Aesop is also platform-independent, feel free to ping me again!</p>",
        "id": 445135734,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718631783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> When you have a fixed version of the branch, I'm happy to look at the benchmarking failure. It seems to be the proxy of <code>leanc</code> is broken, as it has never been necessary before</p>",
        "id": 445139061,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718632783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> The issue unfortunately seems to persist when I set <code>platformIndependent = true</code> in Aesop's <code>lakefile.toml</code>. :( The repro above is still relevant.</p>",
        "id": 445157138,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718637183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> I will debug and see if I can fix the issue.</p>",
        "id": 445178603,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718642940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Found the bug. Fix is at <a href=\"https://github.com/leanprover/lean4/pull/4478\">lean4#4478</a>. Added a test to prevent this problem in the future. If you want, I can bump aesop / the mathlib PR to this toolchain to verify everything works as expected before this goes live.</p>",
        "id": 445238381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718663790
    },
    {
        "content": "<p>The problem is back on rc2 <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 445302788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718699896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, could you clarify? It seems unlikely this has regressed.</p>",
        "id": 445303480,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718700171
    },
    {
        "content": "<p>Okay, I thought it was fixed by the bump to rc2 but apparently it was fixed a bit later? My branch seems to have been on that intermediate version</p>",
        "id": 445304242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718700457
    },
    {
        "content": "<p>Yes, it was fixed in <code>dc44afb4353b441dfdbca70458574c5b4be98b32</code>.</p>",
        "id": 445312075,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718702864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cache.20misses.20aesop/near/445238381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> Found the bug. Fix is at <a href=\"https://github.com/leanprover/lean4/pull/4478\">lean4#4478</a>. Added a test to prevent this problem in the future. If you want, I can bump aesop / the mathlib PR to this toolchain to verify everything works as expected before this goes live.</p>\n</blockquote>\n<p>Beautiful, ty! I'll test with the PR toolchain.</p>",
        "id": 445312215,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718702906
    },
    {
        "content": "<p>Seems to work now: <code>lake exe cache</code> succeeds and <code>lake build</code> only builds the platform-specific Aesop code. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 445338444,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718711555
    },
    {
        "content": "<p>Do we have a Mathlib <code>!bench</code> yet? <code>lake exe cache get &amp;&amp; lake build</code> overhead would also be interesting</p>",
        "id": 445339157,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718711819
    },
    {
        "content": "<p><code>!bench</code> is running: <a href=\"http://speed.lean-fro.org/mathlib4/task-detail/725191f8-ef40-4b90-ab00-2763d647e258\">http://speed.lean-fro.org/mathlib4/task-detail/725191f8-ef40-4b90-ab00-2763d647e258</a></p>",
        "id": 445339950,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718712073
    },
    {
        "content": "<p>On my system and with my internet connection, <code>lake exe cache get</code> takes ~40s with a clean checkout and clean <code>~/.cache/mathlib</code>. <code>lake build</code> then takes another 50s. So the overhead is not great.</p>",
        "id": 445341675,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718712641
    },
    {
        "content": "<p><code>!bench</code> failed, same error as before: <code>leanc</code> reports unknown command <code>/usr/bin/time</code>.</p>",
        "id": 445346678,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718714253
    },
    {
        "content": "<p>Sebastian fixed the benchmark script, so we now have a <a href=\"http://speed.lean-fro.org/mathlib4/compare/8c43b26a-1ee7-4164-8aba-f42d7c2f8c75/to/562c87b2-d78e-46c8-b3e7-c3180478ead0\">performance comparison</a> between no precompilation and precompilation. Copying my comment from <a href=\"https://github.com/leanprover-community/mathlib4/pull/13891\">#13891</a>:</p>\n<ul>\n<li>Aesop -40%</li>\n<li>build wall-clock +7%</li>\n<li>interpretation +10%</li>\n<li><code>open Mathlib</code> task-clock +1000%, wall-clock +225%, instructions +109%</li>\n</ul>\n<p>So a loss overall. But where do these crazy numbers for <code>open Mathlib</code> come from? And why does interpretation get slower?</p>",
        "id": 445580328,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718800840
    }
]