[
    {
        "content": "<p>In mathlib, bases of a topology are parametrized. This makes the definition of a class such as “IsLinearTopology” difficult because the universe of the index set has to be prescribed in advance (if the class says <code>exists i, i-&gt;Ideal R…</code>, the universe of <code>i</code> is imposed…). On the other hand, the bases of a topology only depend on the range of the parametrization so that these universes problems are uninteresting.</p>",
        "id": 423868989,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709141768
    },
    {
        "content": "<p>You could do the usual nonsense of showing that if you have a basis with some crazy index set then there's an equivalent basis with an indexing set in the same universe as your space (by replacing the index set with its image)</p>",
        "id": 423869703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709142022
    },
    {
        "content": "<p>The usual solution is to only consider families of the form <code>Subtype.val</code> indexed by some set</p>",
        "id": 423869732,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709142034
    },
    {
        "content": "<p>And then of course provide links with the indexed version, like Kevin suggests</p>",
        "id": 423869929,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709142103
    },
    {
        "content": "<p>Where do you see parametrized bases of topologies?</p>",
        "id": 423877251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709144705
    },
    {
        "content": "<p>Are you talking about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.IsTopologicalBasis#doc\">docs#TopologicalSpace.IsTopologicalBasis</a> (not parametrized) or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis#doc\">docs#Filter.HasBasis</a> applied to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhds#doc\">docs#nhds</a> ?</p>",
        "id": 423877532,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709144794
    },
    {
        "content": "<p>What condition do you want to write?</p>",
        "id": 423877671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709144850
    },
    {
        "content": "<p>It was in the file about no archimedean topologies. So that's very good if we can go in the Set-style way.</p>",
        "id": 423882591,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709146472
    },
    {
        "content": "<p>We need to formalize a linear topology on a ring (basis of open nhds consisting of ideals).</p>",
        "id": 423882716,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709146522
    },
    {
        "content": "<p>Can you post a <code>docs#</code> link to the definition you're talking about?</p>",
        "id": 423882725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709146524
    },
    {
        "content": "<p>Not from my phone, alas...</p>",
        "id": 423882850,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709146564
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SubmodulesBasis#doc\">docs#SubmodulesBasis</a></p>",
        "id": 423885255,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709147437
    },
    {
        "content": "<p>What predicate do you want to write in terms of this basis? Can you write it with unspecified universes? Then I can help you fix the universes issue.</p>",
        "id": 423918641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709161434
    },
    {
        "content": "<p>Your initial answer that in the topology files, bases are written as subsets is much better than trying to solve moot universes issues. The basic index type that one wishes to consider is in a very small type, most often <code>Type 0</code>, and it is not in the expected <code>Type u</code>, and it would be ridiculous to lift it… So I'll rather go as I wanted and define the basis of ideals as a subset of ideals.</p>",
        "id": 423919901,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709161989
    },
    {
        "content": "<p>Anyway, here is our initial definition of <code>IdealBasis</code>, using parametrized ideals :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A family of ideals of a ring `α` is an `IdealBasis` if the ideals are both left- and</span>\n<span class=\"sd\">  right-ideals, and if every intersection of two of them contains another one. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IdealBasis</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Every intersection of ideals in `B` contains an ideal in `B`. -/</span>\n  <span class=\"n\">inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">⊓</span> <span class=\"n\">B</span> <span class=\"n\">j</span>\n  <span class=\"sd\">/-- Every ideal in `B` is a right ideal. -/</span>\n  <span class=\"n\">mul_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>and here is the class that says that a topology is linear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsLinearTopology</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"n\">where</span>\n  <span class=\"n\">ideals</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">nonempty_ideals</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ideals</span><span class=\"o\">)</span>\n  <span class=\"n\">isIdealBasis</span> <span class=\"o\">:</span> <span class=\"n\">IdealBasis</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideals</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"n\">isTopology</span> <span class=\"o\">:</span>  <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">isIdealBasis.toRingSubgroupsBasis.topology</span>\n</code></pre></div>\n<p>after an attempt of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsLinearTopology</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">toLinearTopology</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">IdealBasis</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">hJ.toRingSubgroupsBasis.topology</span>\n</code></pre></div>\n<p>didn't work well.</p>\n<p>But we will change <code>IdealBasis</code> to remove the function, and change the rest accordingly.</p>",
        "id": 423920370,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709162251
    },
    {
        "content": "<p>Assume that <code>ι : Set (Ideal α)</code> and <code>J</code> is <code>Subtype.val</code>.</p>",
        "id": 423921112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709162714
    },
    {
        "content": "<p>I've been thinking about introducing two-sided ideal in mathlib; I'm inclined to take <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/401348459\"><code>Ideal.IsTwoSided</code></a> and make it a typeclass. We'd the provide instances of this typeclass for RingHom.ker, Submodule.colon, Module.annihilator, Jacobson radical, etc. and generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.Quotient.commRing#doc\">docs#Ideal.Quotient.commRing</a> to allow Ring + Ideal.IsTwoSided. Initial plans also include generalizing results about local rings and connecting the Jacobson radical with simple modules.<br>\n(forgot to mention: generalize Nakayama's lemma (various forms); generalize <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/6277\">#6277</a> to noncommutative rings and prove the Akizuki–Hopkins–Levitzki theorem; redefine Ideal.IsPrime, ...)</p>",
        "id": 423923141,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709163744
    },
    {
        "content": "<p>I would really prefer we don't do a half-baked approach to two-sided ideals, because Kevin's suggestion still doesn't fix the other issue: we can't have ideals in non-unital rings. If people besides me want two-sided ideals soon, I'll make it a priority.</p>",
        "id": 423945899,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709178776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bases.20of.20topologies/near/423882716\">said</a>:</p>\n<blockquote>\n<p>We need to formalize a linear topology on a ring (basis of open nhds consisting of ideals).</p>\n</blockquote>\n<p>I think we have the analogue for topological groups already. I can try to find it later. Would be good to align the designs.</p>",
        "id": 423950100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709181980
    },
    {
        "content": "<p>Aah, I was thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GroupFilterBasis#doc\">docs#GroupFilterBasis</a></p>",
        "id": 423950855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709182610
    },
    {
        "content": "<p>Ooh <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleFilterBasis#doc\">docs#ModuleFilterBasis</a> already exists! <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> That's not on-the-nose the concept that you are looking for, but it might be functionally equivalent? Would that work?</p>",
        "id": 423951409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709183122
    },
    {
        "content": "<p>We need the varians IdealBasis</p>",
        "id": 423957085,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709187793
    },
    {
        "content": "<p>But maybe using filter bases is still helpful? As opposed to topological bases?</p>",
        "id": 423958191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709188585
    },
    {
        "content": "<p>We'll see. It's always possible to redo things. <span class=\"user-mention silent\" data-user-id=\"210574\">Patrick Massot</span> , what do you think?</p>",
        "id": 423958830,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709189048
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wrote the following sentence in the perfectoid paper:</p>\n<blockquote>\n<p>we had to develop the theory of filter bases, which is not so useful for the abstract story, but very convenient to<br>\ndefine concrete instances, like the adic topology defined by an ideal I in a ring R. This I -adic topology is<br>\ncharacterised by the fact that neighbourhoods of zero are subsets containing a power of I .</p>\n</blockquote>",
        "id": 423959807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709189696
    },
    {
        "content": "<p>So I assume that he'll be a fan of the filter version (-;</p>",
        "id": 423959828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709189711
    },
    {
        "content": "<p>I had the impression he also wrote the file on module bases, but we'll look at the filter basis stuff.</p>",
        "id": 423959956,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709189779
    },
    {
        "content": "<p>I think there is a misunderstanding here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingSubrougpsBasis#doc\">docs#RingSubrougpsBasis</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SubmodulesBasis#doc\">docs#SubmodulesBasis</a> etc… are already about filter bases (for neighborhoods of zero), not topological bases. In fact, the associated topology is defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingFilterBasis#doc\">docs#RingFilterBasis</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleFilterBasis#doc\">docs#ModuleFilterBasis</a>, …</p>",
        "id": 423961233,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709190586
    },
    {
        "content": "<p>I think the only reason <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingSubgroupsBasis#doc\">docs#RingSubgroupsBasis</a> doesn’t explicitly mention <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FilterBasis#doc\">docs#FilterBasis</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis#doc\">docs#Filter.HasBasis</a> is that it would be harder to state \"a filter basis made of ideals\" than just redoing the condition by hand</p>",
        "id": 423961502,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709190728
    },
    {
        "content": "<p>There's probably a misunderstanding, but my issue is that a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingSubgroupsBasis#doc\">docs#RingSubgroupsBasis</a> or a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SubmodulesBasis#doc\">docs#SubmodulesBasis</a> are defined as families, while a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FilterBasis#doc\">docs#FilterBasis</a> or a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingBasis#doc\">docs#RingBasis</a> are defined as sets.</p>",
        "id": 423966339,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709193339
    },
    {
        "content": "<p>Yes I understand, I was talking only about the last few messages with Johan.</p>",
        "id": 423966731,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709193497
    },
    {
        "content": "<p>I think the right design choice here is to have <code>IdealBasis</code> defined in terms of families, but restricting families to subset in the definition of <code>IsLinearTopology</code> (from what I understand you had such a version at some point ?). </p>\n<p>One reason we like indexed families so much in mathlib (e.g the most used piece of the filter bases API, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis#doc\">docs#Filter.HasBasis</a>) is that they compose well. If you have the set version, doing an operation on each set of your basis (e.g pulling it backwards through a ring hom) will be stated in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image#doc\">docs#Set.image</a>, which is nasty in that it introduces useless existentials. I'm not at my computer right now so I can't cook up a good example, but I explained some of it in the docstring of <code>Topology/UniformSpace/Equicontinuity</code>.</p>",
        "id": 423967597,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709193918
    },
    {
        "content": "<p>I understand that it is easier to manipulate functions than their <code>Set.range</code>.</p>",
        "id": 423968302,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709194241
    },
    {
        "content": "<p>I think it would be reasonable to redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleFilterBasis#doc\">docs#ModuleFilterBasis</a> in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.IsBasis#doc\">docs#Filter.IsBasis</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FilterBasis#doc\">docs#FilterBasis</a>, but these aren't really used as much as they are in the litterature (e.g Bourbaki, TVS) so I think it just hasn't been annoying enough for people to change it.</p>",
        "id": 423973916,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709196609
    },
    {
        "content": "<p>Re Junyan's comment above: don't take anything I suggest about ideals at all seriously: I have no real understanding of the issues here and my preference is definitely to keep Jireh happy as he's clearly thought about the issue a lot (we even have a roadmap, right?)</p>",
        "id": 423976133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709197487
    },
    {
        "content": "<p>My main contribution here should be thought of as pushing through the commutative theory aggressively back in 2017/8 so I could go around telling people I'd defined schemes, without ever thinking for one minute about the noncommutative case. But it was an extremely different world back then.</p>",
        "id": 423976482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709197620
    },
    {
        "content": "<p>I’d be very surprised if you need the topology basis and not only the neighborhood of zero basis.</p>",
        "id": 424046826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709221016
    },
    {
        "content": "<p>Well, as I wrote, I want a linear topology on a ring, so that's the kind of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingFilterBasis#doc\">docs#RingFilterBasis</a> given by ideals.<br>\n(BTW, there is a misprint in the documentation, an example of a <code>RingFilterBasis</code> is likely to be the neighborhoods of 0 rather than “identity” — which I interpret as 1). For <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingFilterBasis#doc\">docs#RingFilterBasis</a>, everything is about sets, sets of sets…<br>\nand we need essentially that, except that we have ideals, and there is the dichotomy <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SubmodulesBasis#doc\">docs#SubmodulesBasis</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleFilterBasis#doc\">docs#ModuleFilterBasis</a>. (I believe we need the analogue of both, for Ideals, and I'm not sure — yet — that any RingFilterBasis would work. If we have to insist that they are ideals, then we need something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IdealsBasis#doc\">docs#IdealsBasis</a>, except that they are parametrized and they add universe issues — the goal is to evaluate power series in any complete linearly topologized comm ring.)</p>",
        "id": 424122058,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709246412
    },
    {
        "content": "<p>The identity thing is clearly a copy-paste issue coming from the group case.</p>",
        "id": 424127804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709249185
    }
]