[
    {
        "content": "<p>We have some nice custom term elaborators, but I rarely use them, and don't know all of them. What are some term elaborators you use in practice, or think are underused? Note: you can write <code>#help term</code> to see all of them, but that list includes all notation, I believe.</p>",
        "id": 434335632,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713523425
    },
    {
        "content": "<ul>\n<li>I personally use <code>exact?%</code>, for the term-mode equivalent of <code>by exact?</code></li>\n<li>I might start using <code>congr(...)</code> occasionally, to generate congruence lemmas for terms</li>\n<li>I believe there was a term elaborator that allows you to have metavariables in <code>let</code>/<code>have</code> tactics, but I don't remember the syntax and it's hard to search for it.</li>\n</ul>",
        "id": 434335637,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713523428
    },
    {
        "content": "<p><code>prod_assoc%</code> is one that I wrote and probably has never been used. <code>reassoc_of%</code> is used in several category theory proofs.</p>",
        "id": 434340348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713525321
    },
    {
        "content": "<p><code>eval%</code> is another one, which is handy for things like <code>have : 5! = eval% 5! := by rfl</code>, though a <code>norm_num</code> version would be better</p>",
        "id": 434346149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713527666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I expect you wrote more term elaborators than the ones mentioned so far?</p>",
        "id": 434722382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713785071
    },
    {
        "content": "<p>There is also the <code>mod_cast</code> term elab which basically runs norm_cast on the term before inserting, so one can do e.g <code>simp [mod_cast foo]</code> or similar</p>",
        "id": 434744357,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1713791176
    },
    {
        "content": "<p>Should we add a <code>%</code> to its name?</p>",
        "id": 434747001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713791864
    },
    {
        "content": "<p>Also, that description doesn't seem to capture its actual behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mod_cast</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- cast ⋯ ↑↑n = 3</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"c1\">-- cast ⋯ ↑n = 3</span>\n</code></pre></div>\n<p>It also adds the <code>cast</code> in the statement, which presumably makes it useless in <code>simp</code>/<code>rw</code>. Searching for it in mathlib it seems to be (almost?) exclusively used in term mode.</p>",
        "id": 434748095,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713792125
    },
    {
        "content": "<p>My description is likely wrong, I haven't used it so much myself.</p>",
        "id": 434755155,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1713793824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> added this iirc?</p>",
        "id": 434755238,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1713793847
    },
    {
        "content": "<p>I remember upstreaming it, but not writing it!</p>",
        "id": 434757713,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713794381
    },
    {
        "content": "<p>Mathlib term elaborators that I found (including ones already mentioned):</p>\n<ul>\n<li><code>proxy_equiv% t</code> creates an equivalence <code>_ ≃ t</code> where <code>_</code> stands for some sum of products of basic types.</li>\n<li><code>derive_fintype% t</code> derives a <code>Fintype t</code> instance using <code>proxy_equiv% t</code></li>\n<li><code>eval% t</code> evaluates <code>t</code> and then reflects it back to an expression</li>\n<li><code>prod_assoc%</code> uses the expected type (such as <code>(α × β) × (γ × δ) ≃ α × (β × γ) × δ</code>) and derives the equivalence</li>\n<li><code>congr(t)</code> elaborates to a proof of an Eq, HEq, or Iff, where <code>t</code> is a pattern that can be full of <code>$h</code> \"holes\", where <code>h</code> is an Eq, HEq, or Iff, unifying and generalizing the <code>congr</code>/<code>congrFun</code>/<code>congrArg</code> functions</li>\n<li><code>Type*</code> and <code>Sort*</code> add a fresh universe level variable <code>u</code> and elaborate to <code>Type u</code> and <code>Sort u</code></li>\n<li><code>elementwise_of% w</code> takes a lemma <code>w</code> of an equality of morphisms of concrete categories and creates an elementwise version</li>\n<li><code>reassoc_of% w</code> takes a lemmas <code>w</code> of an equality of morphisms and creates a \"reassoc\" lemma</li>\n<li><code>clean% t</code> elaborates <code>t</code> and then eliminates identity functions (type hints) from <code>t</code></li>\n<li><code>delta% t</code> elaborates <code>t</code> and head-delta-reduces it</li>\n<li><code>beta% t</code> elaborates <code>t</code> and then head-beta-reduces it</li>\n<li><code>fbinop%</code> is used to elaborate expressions involving products of container-like types</li>\n</ul>",
        "id": 434822026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713811558
    },
    {
        "content": "<p>From core:</p>\n<ul>\n<li><code>ext_type% bool t</code> and <code>ext_iff_type% bool t</code> create extensionality lemmas for <code>t</code>, where the <code>bool</code> (if <code>true</code>) flattens the structure</li>\n<li><code>eval_prec prec</code> evaluates a precedence expression as a Nat</li>\n<li><code>eval_prec prio</code> evaluates a priority expression as a Nat</li>\n<li><code>by_elab doSeq</code> and <code>by_elab fun expectedType? =&gt; do doSeq</code> let you have an inline term elaborator</li>\n<li><code>with_annotate_term stx e</code> annotates <code>stx</code> with terminfo for <code>e</code> (for hovers)</li>\n<li><code>mod_cast e</code> runs the <code>norm_cast</code> machinery on <code>e</code></li>\n<li><code>include_str \"path\" / \"to\" / \"file\"</code> elaborates to a string literal containing the contents of the file</li>\n<li><code>show_term e</code> elaborates <code>e</code> and shows the elaborated term</li>\n<li><code>by? ...</code> is <code>show_term by ...</code></li>\n<li><code>exact?%</code> is <code>by exact?</code></li>\n<li><code>json% jsonExpr</code> lets you embed a JSON expression to get a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Json#doc\">docs#Lean.Json</a> value</li>\n<li><code> `(...)</code> syntax quotations</li>\n<li><code>let_fun x := v; b</code> for \"elaborate <code>v</code> and then elaborate <code>b</code> with <code>x</code> as a cdecl (value-free)\". (<code>have</code> is implemented using this)</li>\n<li><code>let_delayed x := v; b</code> elaborates as <code>let x := v; b</code> but elaborates <code>b</code> before elaborating <code>v</code></li>\n<li><code>let_tmp x := v; b</code> elaborates like <code>let x := v; b</code> but eliminates the let if <code>x</code> is unused in <code>b</code></li>\n<li><code>haveI</code>/<code>letI</code> are like <code>have</code>/<code>let</code> versions of <code>let_tmp</code> but that substitute the value of <code>x</code> into <code>b</code></li>\n<li><code>type_of% e</code> elaborates to the type of <code>e</code></li>\n<li><code>ensure_type_of% ref msg e</code> elaborates <code>ref</code> and <code>e</code> and ensures that <code>e</code> has the same type as <code>ref</code> has</li>\n<li><code>no_implicit_lambda% e</code> elaborates <code>e</code> with the implicit lambda feature turned off</li>\n<li><code>clear% id; e</code> elaborates <code>e</code> with <code>id</code> cleared from the local context</li>\n<li><code>let_mvar% ?m := v; e</code> assigns the mvar <code>?m</code> to <code>v</code> and elaborates <code>e</code></li>\n<li><code>wait_if_type_mvar% ?m; e</code>, <code>wait_if_type_contains_mvar% ?m; e</code>, and <code>wait_if_contains_mvar% ?m; e</code> are different variations of postponing depending on there being mvars in <code>?m</code></li>\n<li><code>no_error_if_unused%</code> is allowed in match arms for Syntax <code>match</code></li>\n<li><code>h ▸ e</code> elaborates <code>e</code> and tries a number of tactics using the type of <code>e</code> and the expected type to rewrite using <code>h</code> to insert a cast</li>\n</ul>",
        "id": 434833496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713815332
    },
    {
        "content": "<p>From Qq:</p>\n<ul>\n<li><code>q(...)</code> and <code>Q(..)</code> quotations, with <code>~q(...)</code> patterns</li>\n</ul>",
        "id": 434833755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713815407
    },
    {
        "content": "<p>How I found these: I searched for <code>: term</code>, <code>@[term_parser</code> and <code>@[builtin_term_parser</code></p>",
        "id": 434833829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713815431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Useful.20term.20elaborators/near/434833829\">said</a>:</p>\n<blockquote>\n<p><code>exact?%</code> is <code>by exact?</code></p>\n</blockquote>\n<p>I wish! It's <code>by apply?</code></p>",
        "id": 434850582,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713821561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Useful.20term.20elaborators/near/434850582\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Useful.20term.20elaborators/near/434833829\">said</a>:</p>\n<blockquote>\n<p><code>exact?%</code> is <code>by exact?</code></p>\n</blockquote>\n<p>I wish! It's <code>by apply?</code></p>\n</blockquote>\n<p>I think this would be reasonable to change. I'd merge the PR. :-)</p>",
        "id": 434863856,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713826633
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3974\">lean4#3974</a></p>",
        "id": 434880361,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713835348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Useful.20term.20elaborators/near/434346149\">said</a>:</p>\n<blockquote>\n<p><code>eval%</code> is another one, which is handy for things like <code>have : 5! = eval% 5! := by rfl</code>, though a <code>norm_num</code> version would be better</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12353\">#12353</a> introduces <code>conv%</code>, and along with it <code>simp%</code>, <code>push_neg%</code>, and <code>norm_num%</code>. (It also introduces <code>?</code> variants of these as shortcuts for e.g. <code>show_term …</code>, so that it’s easy to check the result.)</p>\n<p>There are some tentative choices made by that PR worth discussing, but probably in a separate thread. :)</p>",
        "id": 434900955,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713846557
    },
    {
        "content": "<p>and a separate PR...</p>",
        "id": 434901715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713847091
    },
    {
        "content": "<p>To be clear, you mean you’d prefer the changes to the command syntax in a separate PR?</p>",
        "id": 434902953,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713848047
    },
    {
        "content": "<p>(Or, well, that you think it would be better for them to be in a separate PR, not necessarily exclusively as a matter of personal preference.)</p>",
        "id": 434903018,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713848115
    },
    {
        "content": "<p>Continued in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/conv.25.20and.20changes.20to.20.23conv.20.28and.20friends.29\">#mathlib4 &gt; conv% and changes to #conv (and friends)</a>. :)</p>",
        "id": 434904436,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713849208
    }
]