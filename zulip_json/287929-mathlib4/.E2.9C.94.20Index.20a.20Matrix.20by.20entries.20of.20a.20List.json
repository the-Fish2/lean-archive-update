[
    {
        "content": "<p>What is the best way to index a Matrix by entries of a List?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.get</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>I am searching for a better way to do the above.</p>",
        "id": 420068404,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707232135
    },
    {
        "content": "<p>Note you should never use <code>fun</code> to create a matrix</p>",
        "id": 420068753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707232245
    },
    {
        "content": "<p>Use <code>.of fun i j =&gt; _</code> in general, or in this case <code>.vecMulVec _ _</code></p>",
        "id": 420068878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707232288
    },
    {
        "content": "<p><code>Matrix.vecMulVec</code> is not useful for my nonMWE. So I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.get</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it possible to declare directly a matrix indexed by entries of list instead of indexed by numbers within the length of the list?</p>",
        "id": 420070554,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707232755
    },
    {
        "content": "<p>What you have looks reasonable to me. What other type of indexing are you hoping for? What if the list contains duplicates?</p>",
        "id": 420072262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707233246
    },
    {
        "content": "<p>To unXY it a bit, I actually want to index my matrix by a multiset (well, not really, but closer than what I posted above).</p>",
        "id": 420072407,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707233284
    },
    {
        "content": "<p><code>Multiset.ToType</code> gives me a weird type to match on.</p>",
        "id": 420072691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707233357
    },
    {
        "content": "<p>Perhaps <code>Multiset.toEnumFinset</code> is what I should be using?</p>",
        "id": 420073507,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707233574
    },
    {
        "content": "<p>This works but it is terrible in every aspect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Fintype</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now I need a matrix that, for each for each element `a` of `s`,</span>\n<span class=\"c1\">-- for each vector `D ^ a.size`, it has a row.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">MyStruct</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">MyStruct</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s.toEnumFinset</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">t.val.fst.size</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420075612,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707234176
    },
    {
        "content": "<p><code>Multiset.ToType</code> is the obvious answer to \"how do I turn entries of a multiset into a type\"</p>",
        "id": 420076937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707234533
    },
    {
        "content": "<p>I want something nicer for indexing.</p>",
        "id": 420077052,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707234563
    },
    {
        "content": "<p>Can you elaborate on what is not nice about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.ToType#doc\">docs#Multiset.ToType</a></p>",
        "id": 420077137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707234586
    },
    {
        "content": "<p>This sentence from its docstring discourages me:<br>\n\"One should not use this definition directly.\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Fintype</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now I need a matrix that, for each for each element `a` of `s`,</span>\n<span class=\"c1\">-- for each vector `D ^ a.size`, it has a row.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">MyStruct</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">MyStruct</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s.ToType</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">t.fst.size</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This again works but isn't nice.<br>\nNote that <code>Fin</code> appears twice there even tho only one of them carries some business logic.</p>",
        "id": 420078758,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707235030
    },
    {
        "content": "<p>Yes, you should write <code>t : s</code> not <code>t : s.ToType</code></p>",
        "id": 420078892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707235076
    },
    {
        "content": "<p>Huh! Is this now idiomatic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Fintype</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now I need a matrix that, for each for each element `a` of `s`,</span>\n<span class=\"c1\">-- for each vector `D ^ a.size`, it has a row.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">MyStruct</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">MyStruct</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">t.fst.size</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420079095,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707235126
    },
    {
        "content": "<p>I think this docstring is outdated, because <code>: s.ToType</code> and <code>: s</code> are syntactically the same with new coercions</p>",
        "id": 420079296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707235180
    },
    {
        "content": "<p>Why is <code>[DecidableEq MyStruct]</code> required?</p>",
        "id": 420085429,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707236854
    },
    {
        "content": "<p>Otherwise you can't count the multiplicities</p>",
        "id": 420086822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707237211
    },
    {
        "content": "<p>I don't want to count multiplicities per se. I just want every element of the multiset to represent a unique row, whether or not it equals another element.</p>",
        "id": 420087659,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707237433
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420088354,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707237626
    },
    {
        "content": "<p>Note you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 420088438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707237652
    },
    {
        "content": "<p>Is your non-mwe not possible to decide equality of?</p>",
        "id": 420088487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707237664
    },
    {
        "content": "<p>I think it is.<br>\nI am not worried that I won't be able to provide the instance.<br>\nI am worried that the requirement shows me I did a mistake elsewhere.</p>",
        "id": 420089161,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707237852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Index.20a.20Matrix.20by.20entries.20of.20a.20List/near/420079095\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Fintype</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now I need a matrix that, for each for each element `a` of `s`,</span>\n<span class=\"c1\">-- for each vector `D ^ a.size`, it has a row.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">MyStruct</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">MyStruct</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">t.fst.size</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Let's say I have <code>D = {a, b}</code> and <code>s = [⟨1⟩, ⟨1⟩, ⟨2⟩]</code>.<br>\nI want my matrix to have rows named:<br>\n<code>![a]</code><br>\n<code>![b]</code><br>\n<code>![a]</code><br>\n<code>![b]</code><br>\n<code>![a,a]</code><br>\n<code>![a,b]</code><br>\n<code>![b,a]</code><br>\n<code>![b,b]</code><br>\nIs it why my code above does?</p>",
        "id": 420089838,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238064
    },
    {
        "content": "<p>What you wrote as what you want doesn't make sense, because some rows have the same name</p>",
        "id": 420090157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238153
    },
    {
        "content": "<p>True. I should have said that I want a matrix that has 8 rows and each of them carries given information.</p>",
        "id": 420090332,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238202
    },
    {
        "content": "<p>But that's correct if you preface them with <code>⟨1, 0⟩</code>, <code>⟨1, 1⟩</code> , and <code>⟨2, 0⟩</code> discrimnators</p>",
        "id": 420090455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238224
    },
    {
        "content": "<p>If you really have a list and not a multiset, I think using list indices as you did originally is probably simpler than saying \"the <code>n</code>th repeat of <code>x</code>\"</p>",
        "id": 420090659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238282
    },
    {
        "content": "<p>I think I am fine with rows named <code>⟨⟨1, 0⟩, ![a]⟩</code> and so on.<br>\nI will simply read <code>1</code> and <code>a</code> from it, ignoring the <code>0</code> which is just an implementation detail.</p>",
        "id": 420091034,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238372
    },
    {
        "content": "<p>Well, if <code>s</code> is actually a list, why not store <code>⟨0, ![a]⟩</code> as your original version did?</p>",
        "id": 420091139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238403
    },
    {
        "content": "<p>You can still read the <code>1</code> with <code>List.get</code></p>",
        "id": 420091167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238412
    },
    {
        "content": "<p>But now you don't need <code>DecidableEq</code></p>",
        "id": 420091200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238421
    },
    {
        "content": "<p>I think I want to keep my Multiset.</p>",
        "id": 420091262,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238438
    },
    {
        "content": "<p>So when you wrote <code>s = [⟨1⟩, ⟨1⟩, ⟨2⟩]</code> you meant <code>s = {⟨1⟩, ⟨1⟩, ⟨2⟩}</code>?</p>",
        "id": 420091382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238458
    },
    {
        "content": "<p>Ah yes, sorry.</p>",
        "id": 420091425,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Index.20a.20Matrix.20by.20entries.20of.20a.20List/near/420091034\">said</a>:</p>\n<blockquote>\n<p>I think I am fine with rows named <code>⟨⟨1, 0⟩, ![a]⟩</code> and so on.<br>\nI will simply read <code>1</code> and <code>a</code> from it, ignoring the <code>0</code> which is just an implementation detail.</p>\n</blockquote>\n<p>I think I will be completely fine with this.<br>\nIt just raises some suspicion on me why there is the <code>0</code> when only <code>1</code> and <code>a</code> will be used later.</p>",
        "id": 420091964,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707238620
    },
    {
        "content": "<p>To avoid having two rows with the same name?</p>",
        "id": 420092810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707238838
    },
    {
        "content": "<p>Yeah, that is good enough reason.</p>",
        "id": 420094301,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707239263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 420094436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707239290
    }
]