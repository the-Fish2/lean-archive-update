[
    {
        "content": "<p>We have <code>∪</code>, <code>∩</code>, <code>∅</code>, <code>univ</code> for sets (and finsets) and <code>⊔</code>, <code>⊓</code>, <code>⊥</code>, <code>⊤</code> for general lattices. Can we teach Lean 4 to parse <code>∪</code> as <code>⊔</code> and show <code>⊔</code> as <code>∪</code> for certain types?</p>",
        "id": 411808606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704744700
    },
    {
        "content": "<p>This would remove lots of code duplication.</p>",
        "id": 411808627,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704744716
    },
    {
        "content": "<p>We discussed this in Lean 3 but decided to postpone the decision till after the port.</p>",
        "id": 411808732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704744748
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and I discussed it. It's very possible but I haven't had time to finish it.</p>",
        "id": 411810765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704745613
    },
    {
        "content": "<p>If you do the meta-programming part, then I can take care of deduplication.</p>",
        "id": 411810845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704745642
    },
    {
        "content": "<p>Can we just train mathematicians not to worry about ⊔, ⊓, ⊥, ⊤?</p>",
        "id": 411811020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704745692
    },
    {
        "content": "<p>Last time we discussed this, the answer was \"no\".</p>",
        "id": 411811105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704745739
    },
    {
        "content": "<p>I don't understand why since using Lean for, e.g., submodules needs lattice notation anyway.</p>",
        "id": 411811176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704745775
    },
    {
        "content": "<p>Okay, I dug up my DMs with Kyle and the branch is <a href=\"https://github.com/leanprover-community/mathlib4/tree/kmill_set_use_lattice\">branch#kmill_set_use_lattice</a>. Feel free to work on it. Kyle is busy doing other things.</p>",
        "id": 411812045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704746142
    },
    {
        "content": "<p>Two previous discussions: <a href=\"#narrow/stream/113488-general/topic/Set.20notation.20in.20lattices\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Set.20notation.20in.20lattices</a> and <a href=\"#narrow/stream/144837-PR-reviews/topic/3083.20finset.20lattice\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/3083.20finset.20lattice</a></p>",
        "id": 411812783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704746517
    },
    {
        "content": "<p>An important argument from one of these discussions: sometimes we want to have both <code>⊆</code> and <code>≤</code>. Example: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset#doc\">docs#Multiset</a></p>",
        "id": 411812915,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704746574
    },
    {
        "content": "<p>Another example when <code>⊆</code> makes more sense than <code>≤</code>: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List#doc\">docs#List</a></p>",
        "id": 411812986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704746612
    },
    {
        "content": "<p>So, what should we do with <code>⊆</code>?</p>",
        "id": 411817179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704748508
    },
    {
        "content": "<p>I would say don't touch it for now</p>",
        "id": 411817655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704748747
    },
    {
        "content": "<p>If we don't touch <code>⊆</code>, then changing <code>∪</code> to <code>⊔</code> in lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.union_subset#doc\">docs#Set.union_subset</a> makes no sense.</p>",
        "id": 411829793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704754134
    },
    {
        "content": "<p>Sorry, but why?</p>",
        "id": 411875352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704783082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> we could still do \"parse <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∪</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊔</mo></mrow><annotation encoding=\"application/x-tex\">\\sqcup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">⊔</span></span></span></span>, and deduplicate many lemmas\", right? Even if we don't do the same thing for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\subseteq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">⊆</span></span></span></span>.</p>",
        "id": 411875752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704783341
    },
    {
        "content": "<p>How about this: if a lattice is <code>SetLike</code> then the set-like symbols are notation for the lattice-like symbols. And the pretty printer can use the set-like symbols whenever an instance of <code>SetLike</code> is available.<br>\nExceptional types like <code>Multiset</code> and <code>List</code> can still use the set-like symbols however they want.</p>",
        "id": 411876144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704783585
    },
    {
        "content": "<p>That would mean that all the lattice lemmas would be duplicated to provide set-like versions. But the duplication would be only once, and could probably be automated using an analogue of <code>to_additive</code>.</p>",
        "id": 411876301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704783671
    },
    {
        "content": "<p>And it means that subgroups and submodules can use set-like notation, which is not too bad, I think.</p>",
        "id": 411876385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704783729
    },
    {
        "content": "<p>The downside is maybe that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋃</mo><msub><mi>H</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\bigcup H_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⋃</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> would depend on whether you take the supremum as subsets or as subgroups. But the place of the coe arrow should make that clear.</p>",
        "id": 411876472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704783793
    },
    {
        "content": "<p>IMHO, I think the issue Johan raises is serious enough that we shouldn't go for this proposal. For the lattice of subgroups of a group, subspaces of a vector space, ideals of a ring, etc it will be really weird and confusing if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∪</span></span></span></span> means something other than the usual mathematical meaning.</p>",
        "id": 412119081,
        "sender_full_name": "David Loeffler",
        "timestamp": 1704885388
    },
    {
        "content": "<p>What is wrong with the status quo? Mathematicians are not going to be dropping standard notation any time soon and our goal as formalisers should be to be mimicking the notation in the books even if it's crap, because that's what people are used to</p>",
        "id": 412120542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704885962
    },
    {
        "content": "<p>I agree with Kevin. With the caveat that we shouldn't ignore options to genuinely improve upon established mathematics. We're proud of how filters do that. And I can imagine that we can sometimes also come up with better/unifying notation compared to established maths. But we shouldn't create roadbumps if we can't show that their benefits clearly outweight the downsides.</p>",
        "id": 412137425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704892479
    }
]