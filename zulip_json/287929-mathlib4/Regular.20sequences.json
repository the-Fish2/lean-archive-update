[
    {
        "content": "<p>I've started working on an implementation of regular sequences, see <a href=\"https://github.com/leanprover-community/mathlib4/commit/1f37e06e117daae45861d056de1d08c73acdcddf\">https://github.com/leanprover-community/mathlib4/commit/1f37e06e117daae45861d056de1d08c73acdcddf</a> for some very early stages work. I don't have a particular roadmap in mind yet. Next steps after cleaning up and merging what I've done so far are to define depth and the koszul complex, and to prove depth sensitivity of the koszul complex. I'd welcome any comments on the commit above or general thoughts on how this cluster of commutative algebra should be implemented.</p>\n<p>One thing I want to note is that mathlib generally tries to work in high generality, but regular sequences are really not well behaved outside of noetherian local rings. While regularity is defined in mathlib for just a monoid, I couldn't find anything satisfying in the literature about regular sequences even over commutative semirings, and so have elected to define it only for commutative rings. In the non local and non Noetherian cases there's a chain of notions of regularity: regular sequence =&gt; weakly regular sequence =&gt; koszul-regular sequence =&gt; H1-regular sequence =&gt; quasi-regular sequence. These all coincide for a sequence in the maximal ideal of a Noetherian local ring. At the moment I've defined the first two of these. I don't know if it's worth spending time defining the rest of them at the moment. But I'll certainly be using the notion of a Koszul-regular sequence even in the Noetherian local case, and probably quasi-regular sequences, even if unnamed. So it's maybe worth defining all these regularity conditions now? But I'm worried about getting bogged down in this and not doing any of the fun commutative algebra :)</p>\n<p>Edit: Also, a lot of stuff about depth and regular sequences have a graded analogue which is also quite useful. I'm not sure if it makes sense to do this in parallel, delay it until it's needed, or use some common abstraction that's been worked out (which I'm not familiar with). </p>\n<p>Again, I'd love to hear others' input on this stuff</p>",
        "id": 436161943,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714434585
    },
    {
        "content": "<p>First of all, great work!<br>\nFirst thought: I think the following definition is easier to use?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsWeaklyRegular</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">::</span> <span class=\"n\">rs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">IsWeaklyRegular</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"n\">rs</span>\n</code></pre></div>",
        "id": 436165087,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714436371
    },
    {
        "content": "<p>Initially I defined it as an inductive prop, which is basically the same as what you've written. But then I realized there's more than one induction principle we're going to want to use for (weakly) regular sequences and so it didn't seem worth it to start with one over the other. Anything you want to do with the defintion you've given there can be done with <code>IsWeaklyRegular.rec</code></p>",
        "id": 436166057,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714436936
    },
    {
        "content": "<p>Also, when I used that original defintion I needed something like <code>IsWeaklyRegular.isWeaklyRegular_cons_iff</code> anyways to establish the equivalence with the \"non-inductive\" definition. So I'm not sure there's much to simplify in the \"bootstrapping\" stage, and once we're past that it doesn't really matter which definition we start with</p>",
        "id": 436166585,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714437242
    },
    {
        "content": "<p>Isn't <code>IsWeaklyRegular.isWeaklyRegular_cons_iff</code> an <code>Iff.rfl</code> under this definition?</p>",
        "id": 436170850,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714439861
    },
    {
        "content": "<p>(Note that this is a recursive function, rather than an inductive Prop)</p>",
        "id": 436170959,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714439919
    },
    {
        "content": "<p>Ah sorry, what I said wasn't very clear. I needed the content of that lemma as it currently stands  in the inductive step of the proof that the inductive definition of IsWeaklyRegular is equivalent to the non-inductive(/non-recursive) defintion</p>",
        "id": 436171615,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714440307
    },
    {
        "content": "<p>(the proof of <code>IsWeaklyRegular.isWeaklyRegular_cons_iff</code> under the inductive defintion isn't an <code>Iff.rfl</code> but it's still trivial, both directions are one liners where you pattern match and shuffle around data)</p>",
        "id": 436172258,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714440685
    },
    {
        "content": "<p>I guess my question is then \"where did you use the non-inductive definition?\" It doesn't seem easy to use.</p>",
        "id": 436176546,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714443194
    },
    {
        "content": "<p>Well it hasn't been used anywhere, because I haven't proven anything yet except comparing definitions. I picked this one because I didn't want to prefer one of the possible two inductive definitions (one changing the ring and one not), because any use of the others can be done using the induction principles, and because it's the one in the stacks project, on Wikipedia, and in Bruns &amp; Herzog</p>",
        "id": 436178352,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714444158
    },
    {
        "content": "<p>Yeah and the point I'm trying to make is that it probably won't be used anywhere. <br>\nThough I don't have much to backup this claim other than my instinct / experience.<br>\nAnd even if you really want such a characterization, <code>Fin n -&gt; R</code> would work better than <code>List R</code> IMO.</p>",
        "id": 436180117,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714445086
    },
    {
        "content": "<p>Maybe I just find it awkward to random access a linked list.</p>",
        "id": 436180281,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714445179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> you also worked on the Koszul complex, right? Or am I misremembering something?</p>",
        "id": 436188734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714450120
    },
    {
        "content": "<p>Ah I guess I see what you meant now. These are different definitions and you want to formalize both. However the \"non-inductive definition\" should still be an inductive definition so that it gives good defeqs IMHO. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulSubmodule</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">rs</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">rs.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">N'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsWeaklyRegular</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">rs.inits.zip</span> <span class=\"n\">rs</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span>\n    <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">rs</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsWeaklyRegular</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>",
        "id": 436240809,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714473220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regular.20sequences/near/436188734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118107\">Amelia Livingston</span> you also worked on the Koszul complex, right? Or am I misremembering something?</p>\n</blockquote>\n<p>I'd love to see this code! One thing I've been wavering on is whether we need the CDGA structure on the koszul complex from the start. DGAs are one of those things that have stayed out of mathlib for a long time, so I'm not sure it's worth diving into right now...</p>\n<p>I have been wondering whether the answer to the DGA type theory woes is to work with internally graded differential modules instead of (co)chain complexes. But this would basically require duplicating the chain complex API. Maybe it's worth it if we want both in the end?</p>",
        "id": 436332514,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714502382
    },
    {
        "content": "<p>(Note that this was a Lean 3 project which Amelia did with me years ago)</p>",
        "id": 436337539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714504432
    },
    {
        "content": "<p>Indeed I do have some old Lean 3 code about Koszul complexes but I very much doubt it's useful - homological algebra in mathlib has changed &amp; progressed a lot since then. But I can double-check tomorrow</p>",
        "id": 436342126,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1714506285
    },
    {
        "content": "<p>An instance where I found the non-inductive characterization easier to work with was when proving this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">AddEquiv.isWeaklyRegular_congr</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Forall₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsWeaklyRegular</span> <span class=\"n\">M</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">IsWeaklyRegular</span> <span class=\"n\">M'</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 436990603,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714797124
    },
    {
        "content": "<p>I'm sure it's possible to do this using the induction principle for <code>Forall₂</code> or for <code>IsWeaklyRegular</code> directly, but I found it more straightforward to extract out the inductive-ness to a lemma saying essentially the image of <code>as.take i • ⊤</code> under <code>e</code> is <code>bs.take i • ⊤</code> and use this to define <code>e' : (M ⧸ List.take i as • (⊤ : Submodule R M)) ≃+ (M' ⧸ List.take i bs • (⊤ : Submodule S M'))</code></p>",
        "id": 436990697,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714797285
    },
    {
        "content": "<p>Fyi I'm still working on this. I'm reaching a cutoff point (permutation of regular sequences over Noetherian local rings) and will start breaking things up into a bunch of smaller commits after that. I'm almost there, I have a general lemma about permutability of regular sequences (which looks a little tortured but will also apply in e.g. the graded case eventually) and just need to write some glue code<br>\n<a href=\"/user_uploads/3121/fK36sPlrvL8N-d8EJJUEZO2D/8bc3d8c7-fb00-4685-b205-e65b591e2331.png\">8bc3d8c7-fb00-4685-b205-e65b591e2331.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fK36sPlrvL8N-d8EJJUEZO2D/8bc3d8c7-fb00-4685-b205-e65b591e2331.png\" title=\"8bc3d8c7-fb00-4685-b205-e65b591e2331.png\"><img src=\"/user_uploads/3121/fK36sPlrvL8N-d8EJJUEZO2D/8bc3d8c7-fb00-4685-b205-e65b591e2331.png\"></a></div>",
        "id": 438672200,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715726334
    },
    {
        "content": "<p>I've created a flood of PRs for all the excess stuff I needed when working on this. After this I just need to merge three files: <code>Algebra/Module/Torsion</code>, <code>RingTheory/Regular/IsSMulRegular</code>, and <code>RingTheory/Regular/RegularSequence</code>. I should be able to separately PR in the changes to that first file, while the latter two are completely new. I'm trying to decide whether the <code>ModSMulBy</code> abstraction is a good idea right now, and will probably try a refactor without it before I start a PR for the bulk of the work on regular sequences</p>",
        "id": 440196890,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716417565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> would you mind linking to the PRs in question that you want to have reviewed?</p>",
        "id": 440214158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716426394
    },
    {
        "content": "<p>(Just write down the number, with a <code>#</code> in front, an zulip will auto-linkify them.)</p>",
        "id": 440214206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716426432
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13100\">#13100</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13102\">#13102</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13116\">#13116</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13117\">#13117</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13118\">#13118</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13119\">#13119</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13120\">#13120</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13121\">#13121</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13122\">#13122</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13123\">#13123</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13126\">#13126</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13127\">#13127</a></p>",
        "id": 440226806,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716427394
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13127\">#13127</a> depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/13119\">#13119</a>, all others are independent. All of them are (imo) small, most are very small</p>",
        "id": 440226871,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716427437
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a>, which depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/13102\">#13102</a></p>",
        "id": 440230732,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716429768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> That's a very nice list!</p>",
        "id": 440236699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716432918
    },
    {
        "content": "<p>I've reviewed most of them.</p>",
        "id": 440238328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716433760
    },
    {
        "content": "<p>These PRs looks suspiciously like the ingredients for \"Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>:</mo><mi>M</mi><mo>→</mo><mi>N</mi><mo>→</mo><mi>P</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\Gamma : M \\to N \\to P \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> be an exact sequence of modules over a local ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> finite free and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> finite, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> is split exact iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊗</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\otimes k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is\" which I happen to need. Maybe you also have this result somewhere?</p>",
        "id": 440266877,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716450889
    },
    {
        "content": "<p>Nope, don't think I've got anything like that sorry</p>",
        "id": 440266987,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716450939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> Please post updated lists of PRs that you want to have reviewed.</p>\n<p>(I really hope that in the future we will have better tooling to track such PRs. Atm the <a href=\"https://bit.ly/3cKk3ld\">#queue</a> is too overwhelming...)</p>",
        "id": 440285852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716457452
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a> is the only one no one's touched yet</p>",
        "id": 440345026,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716477311
    },
    {
        "content": "<p>There's a digit missing in that one...</p>",
        "id": 440345159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716477353
    },
    {
        "content": "<p>Oops, fixed</p>",
        "id": 440345378,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716477427
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span></p>",
        "id": 440345771,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716477547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> can you please merge master into that pr?</p>",
        "id": 440357617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716481417
    },
    {
        "content": "<p>Sure, I'll get around to it later today (~1 hour from now?). I'll remove the awaiting-review tag now and readd it when I get to it</p>",
        "id": 440358219,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716481621
    },
    {
        "content": "<p>Done</p>",
        "id": 440375417,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716488504
    },
    {
        "content": "<p>Thanks! I'll take a look now</p>",
        "id": 440375812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716488684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> I left a few minor comments.</p>",
        "id": 440376463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716488993
    },
    {
        "content": "<p>Okay, currently left to merge are <a href=\"https://github.com/leanprover-community/mathlib4/pull/13121\">#13121</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13122\">#13122</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13126\">#13126</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13127\">#13127</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a>. Of these <a href=\"https://github.com/leanprover-community/mathlib4/pull/13121\">#13121</a> has been reviewed by 2 people and has no comments left on it, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13122\">#13122</a> has an ongoing conversation between me and <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13126\">#13126</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13127\">#13127</a> have been reviewed by <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> and (I think?) are both ready to merge, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a> has had a quick review but might need another pair of eyes on it</p>",
        "id": 440387504,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716493547
    },
    {
        "content": "<p>All of them currently build and except for <a href=\"https://github.com/leanprover-community/mathlib4/pull/13122\">#13122</a> have no outstanding comments</p>",
        "id": 440387634,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716493590
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13122\">#13122</a> should be ready to merge, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a> could still use some review, all the others are tagged maintainer merge</p>",
        "id": 440397581,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716497936
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13130\">#13130</a> has had two sets of eyes on it and currently builds, everything else is on the queue</p>",
        "id": 440405553,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1716501633
    },
    {
        "content": "<p>Okay, the last two files were a mess and I had to change how I did some stuff. The penultimate PR is at a place where I'm happy with it, at <a href=\"https://github.com/leanprover-community/mathlib4/pull/13360\">#13360</a>. I could break this up further but I think I need to get some momentum going again and finish this off</p>",
        "id": 442399836,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717458172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you suggested I ping</p>",
        "id": 442611951,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717530313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> Thanks for the ping. Merged. And, thanks <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> for the reviews.</p>",
        "id": 442691378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717561507
    },
    {
        "content": "<p>Great. Assuming there's no issues with bors, next PR is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12544\">#12544</a>. I think it's at a good state but it'll be easier to review once I can merge master-with-13360 into it</p>",
        "id": 442692025,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717561828
    },
    {
        "content": "<p>yep, ready for review now. The PR adds a single file with <code>645</code> lines</p>",
        "id": 442699070,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1717565750
    }
]