[
    {
        "content": "<p>Compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- ⊢ a = b</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span> <span class=\"c1\">-- extra import</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- ⊢ a = b ∨ c = 0</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>A possible difference: in the first case <code>#synth NoZeroDivisors F</code> says <code>GroupWithZero.noZeroDivisors</code>, but in the second case, it is <code>IsDomain.to_noZeroDivisors F</code>. Still, it is completely unclear to me how this difference would affect <code>field_simp</code>. In any case, I would think that the second behavior does not conform to specifications.</p>",
        "id": 410070534,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703627526
    },
    {
        "content": "<p>Unfortunately, <code>field_simp</code> generates code with lots of \"aux\" lemmas from other files which makes it harder to inspect it.</p>",
        "id": 410090777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703642391
    },
    {
        "content": "<p>those aux lemmas are from <code>simp</code>, they are eq versions of iff lemmas marked <code>@[simp]</code></p>",
        "id": 410091193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703642608
    },
    {
        "content": "<p>It looks like with <code>Field.Basic</code>, it multiplies by the denominators, then gets <code>a * c = b * c</code> and simplifies it to <code>a = b ∨ c = 0</code>.</p>",
        "id": 410091276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703642663
    },
    {
        "content": "<p>Without <code>Field.Basic</code>, it goes along a different path because, e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_div%27#doc\">docs#neg_div'</a> is not available.</p>",
        "id": 410091367,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703642745
    },
    {
        "content": "<p><code>field_simp [*]</code> solves the goal in both cases.</p>",
        "id": 410091431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703642765
    },
    {
        "content": "<p>Maybe <code>field_simp</code> should check whether it \"knows\" that <code>c ≠ 0</code> when simplifying <code>a * c = b * c</code>? After all, <code>c ≠ 0</code> is available in the context in the example above.</p>",
        "id": 410133126,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703672895
    },
    {
        "content": "<p>That's what <code>field_simp [hc]</code> is for</p>",
        "id": 410134258,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703673257
    },
    {
        "content": "<p>In the example, <code>c</code> occurs in the denominator, and <code>field_simp</code> uses <code>h</code> from the context without being specifically asked to do so to clear denominators (which is, as far as I understand, the expected behavior). So it is natural to expect that it would continue to use <code>h</code> in later simplification steps. (In particular seeing that it works without the extra import...)</p>",
        "id": 410134950,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703673573
    },
    {
        "content": "<p>I thought <code>field_simp</code> didn't inspect the context unless asked to?</p>",
        "id": 410143590,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703678046
    },
    {
        "content": "<p>AFAIR, <code>field_simp</code> uses <code>positivity</code> to discharge side goals.</p>",
        "id": 410165863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703689270
    },
    {
        "content": "<p>So, if <code>c ≠ 0</code> appears as a side goal, then <code>field_simp</code> can discharge it. However, if <code>c = 0</code> appears as a part of the simplified goal, then <code>field_simp</code> can't use <code>c ≠ 0</code> to simplify it.</p>",
        "id": 410166028,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703689329
    },
    {
        "content": "<p>Aha!</p>",
        "id": 410170090,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703691308
    },
    {
        "content": "<p>Maybe then some lemmas that state assumptions using or should be removed from field simp's default set then!</p>",
        "id": 410178066,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703695542
    },
    {
        "content": "<p>I guess the issue is that sometimes they'll be resolved with or_true if its something like a term that is passed in but not findable by positivity</p>",
        "id": 410178147,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703695576
    },
    {
        "content": "<p>So it'll break a fair few proofs</p>",
        "id": 410178156,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703695583
    }
]