[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Cyclotomic.PID</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"K\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CyclotomicField</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 958 heartbeats, which is less than the current maximum of 200000.</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 131863 heartbeats, which is less than the current maximum of 200000.</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"t\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This innocuous (to me) use of notation3 to define <code>t</code> is taking 5 seconds to compile on someone's laptop. Whatever is going on?</p>",
        "id": 429649704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711458034
    },
    {
        "content": "<p>If you do <code>set_option pp.all true</code> for the <code>#check</code>, you can see that <code>(IsCyclotomicExtension.zeta_spec 3 ℚ K).toInteger </code> is a much larger term than you might expect.</p>\n<p>I suspect <code>notation3</code> is spending a lot of time making a matcher for that term for the delaborator. You can see the matcher it constructs if you set <code>set_option trace.notation3 true</code>.</p>",
        "id": 429686829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711468379
    },
    {
        "content": "<p>Two observations: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Cyclotomic.PID</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"K\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CyclotomicField</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"t\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>The profiler starts with this and then goes on for another 8000 or so lines displaying the definition of the pretty printer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">711137</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kn\">local</span> <span class=\"n\">notation3</span><span class=\"s2\">\"t\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">038343</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">macro_rules</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">076106</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">538922</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"sd\">/-- Pretty printer defined by `notation3` command. -/</span>\n      <span class=\"kd\">def</span> <span class=\"n\">termT.delab</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span>\n        <span class=\"n\">whenPPOption</span><span class=\"bp\">✝</span> <span class=\"n\">getPPNotation</span><span class=\"bp\">✝</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"n\">getExpr</span><span class=\"bp\">✝</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span><span class=\"bp\">✝</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"o\">(</span><span class=\"n\">matchApp</span><span class=\"bp\">✝</span>\n                    <span class=\"o\">(</span><span class=\"n\">matchApp</span><span class=\"bp\">✝</span>\n                      <span class=\"o\">(</span><span class=\"n\">matchApp</span><span class=\"bp\">✝</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Moreover disabling the pretty printer for the second notation makes it fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Cyclotomic.PID</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"K\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CyclotomicField</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 958 heartbeats, which is less than the current maximum of 200000.</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 461 heartbeats, which is less than the current maximum of 200000.</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"o\">(</span><span class=\"n\">prettyPrint</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"s2\">\"t\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toInteger</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 429692671,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1711470016
    },
    {
        "content": "<p>Thanks for profiling.</p>\n<p>Do I understand correctly from the profiler that it's the elaboration of the <code>def termT.delab...</code> function that's taking the bulk of the time? That means it's not the generation of the matcher per se, but the elaboration of it after it generates the syntax.</p>",
        "id": 429694334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711470543
    },
    {
        "content": "<p>I hope to make a more efficient delaboration generator one day and upstream it into the <code>notation</code> command.</p>\n<p>There are some questions about what it means to match. The <code>notation3</code> command is conservative about what it accepts, and sometimes too conservative. With this example, it's aiming to make sure that it will <em>only</em> pretty print <code>CyclotomicField 3 ℚ</code> as <code>K</code> if the term is exactly what <code>CyclotomicField 3 ℚ</code> would elaborate to. That's why it's really going deep into the instances and creating this massive matcher. Probably it's an OK approximation to not match instances, because we should assume that instances are the canonical ones.</p>",
        "id": 429699067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711472065
    },
    {
        "content": "<p>In what world does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msqrt><mrow><mo>−</mo><mn>3</mn></mrow></msqrt><mo>−</mo><mn>3</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\sqrt{-3}-3}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.383em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.038em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4282em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord sqrt mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8712em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span><span style=\"top:-2.8312em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1688em;\"><span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> take 1800 lines of code to display? Has someone done something wrong here?</p>",
        "id": 429699840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711472286
    },
    {
        "content": "<p>I expect it's the instances involved. There's a lot of algebraic structure to state this.</p>",
        "id": 429700131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711472374
    },
    {
        "content": "<p>It's <a href=\"https://gist.github.com/kbuzzard/e524e25b21676477b17b27333b022da2\">here</a> if anyone wants to marvel at it.</p>",
        "id": 429700539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711472502
    },
    {
        "content": "<p>Once <a href=\"https://github.com/leanprover-community/mathlib4/pull/11700\">#11700</a> builds, could you test out your notation on that branch <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>?</p>",
        "id": 429702223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711473074
    },
    {
        "content": "<p>I just tested it myself. The <code>t</code> notation now takes 5% of the number of heartbeats as before. I spot checked how various <code>notation3</code>s pretty print in mathlib, and while that's not a perfect test, I didn't notice anything broken.</p>",
        "id": 429738876,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711486686
    }
]