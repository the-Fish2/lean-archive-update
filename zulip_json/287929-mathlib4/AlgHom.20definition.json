[
    {
        "content": "<p>In mathlib4, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom#doc\">docs#AlgHom</a> is constructed from a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom#doc\">docs#RingHom</a> and a <code>commutes'</code> property that involves <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=algebraMap#doc\">docs#algebraMap</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Defining the homomorphism in the category R-Alg. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">AlgHom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">RingHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Why isn't it defined by combining <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom#doc\">docs#RingHom</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>, as in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- (Re)defining the homomorphism in the category R-Alg. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">AlgHom'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">RingHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>(My impression is that it would automatize a lot of stuff later.)</p>",
        "id": 410009371,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703587922
    },
    {
        "content": "<p>(this requires some non straightforward modifications, though, since for example, Mathlib.Algebra.Algebra.Prod is loaded by Mathlib.LinearMap.Prod, as I discovered in trying to push this modification up to the definition of a product of algebras)</p>",
        "id": 410010538,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703588559
    },
    {
        "content": "<p>I fell upon this while updating mathlib so that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a> could be semilinear, and redefining <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> in terms of that, etc. and at some point, the coercion from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom#doc\">docs#AlgHom</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> was lost, I don't understand how/why. (This is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a>, <a href=\"https://github.com/leanprover-community/mathlib4/tree/SMulSemiHom\">branch#SMulSemiHom</a>)</p>",
        "id": 410012538,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703589804
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> has an open PR with this change</p>",
        "id": 410016081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703592042
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8686\">#8686</a> ?</p>",
        "id": 410019773,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703594170
    },
    {
        "content": "<p>Apparently, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8686\">#8686</a> does not touch <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom#doc\">docs#AlgHom</a></p>",
        "id": 410020653,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703594790
    },
    {
        "content": "<p>The point of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8686\">#8686</a> is to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgEquiv#doc\">docs#AlgEquiv</a> apply more generally. I guess if we did the same for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom#doc\">docs#AlgHom</a> we could use it for unital non-associative algebras.</p>",
        "id": 410039994,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703605170
    },
    {
        "content": "<p>In a few days I will try to finish up <a href=\"https://github.com/leanprover-community/mathlib4/pull/8686\">#8686</a>. Then we can see if we also want to redefine <code>AlgHom</code> at the same time.</p>",
        "id": 410044685,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703607968
    }
]