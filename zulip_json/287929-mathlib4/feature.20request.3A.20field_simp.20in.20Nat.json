[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `field_simp` fails.</span>\n  <span class=\"c1\">-- Why doesn't `field_simp` use `Nat.div_eq_of_eq_mul_right` here?</span>\n  <span class=\"n\">try</span> <span class=\"n\">field_simp</span>\n\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_eq_of_eq_mul_right</span>\n  <span class=\"bp\">.</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_arith</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `field_simp` works! :)</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 425089848,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709732834
    },
    {
        "content": "<p>Because <code>Rat</code> is a field and <code>Nat</code> is not.</p>",
        "id": 425090092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709732910
    },
    {
        "content": "<p>My point is that it would be useful if <code>field_simp</code> could also can be used in <code>Nat</code>.</p>",
        "id": 425090306,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709732986
    },
    {
        "content": "<p>It is out of scope. Division on Nat is pretty pathological</p>",
        "id": 425090522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709733059
    },
    {
        "content": "<p>As is subtraction</p>",
        "id": 425090548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709733069
    },
    {
        "content": "<p>You can <code>rify</code> or <code>qify</code> first, but you'll need to show that you're not in a pathological case for that to work</p>",
        "id": 425090780,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709733156
    },
    {
        "content": "<p>I know it's not <code>field_simp</code>'s job to do this.</p>\n<p>Just having a tactic to try <code>Nat.div_eq_of_eq_mul_right</code> and <code>Nat.div_eq_of_eq_mul_left</code> would be useful for me.</p>\n<p>It would be nice to have a tactic that hits the commonly performed operation of 'erasing the denominator'.</p>",
        "id": 425091142,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709733281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> </p>\n<blockquote>\n<p>You can rify or qify first, but you'll need to show that you're not in a pathological case for that to work</p>\n</blockquote>\n<p>Thank you ... But I didn't know how to do it. I would like to see an example code.</p>",
        "id": 425091442,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709733366
    },
    {
        "content": "<p>Well, I think the issue with trying to use <code>qify</code> here is that you will run into the non-obviousness of the fact that <code>((n + m) ^ 2 - n ^ 2 - m ^ 2 )</code> is evenly divisible by 2.</p>",
        "id": 425100604,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709735634
    },
    {
        "content": "<p><code>omega</code> is not very good at dealing with polynomials, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">nm</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>\n<p>does work.</p>",
        "id": 425205931,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709772755
    },
    {
        "content": "<p>Actually, the need for <code>generalize</code> there seems to be a straight up <code>omega</code> bug. I'll investigate.</p>",
        "id": 425206155,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709772866
    },
    {
        "content": "<p>Ah, I see, <code>omega</code> has no way of knowing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">omega</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 425206906,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709773259
    },
    {
        "content": "<p>(This is essentially the difference between <code>linarith</code> and <code>nlinarith</code>.)</p>",
        "id": 425206950,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709773287
    },
    {
        "content": "<p>I think this is far enough afield that I am not going to pursue it now. We had talked about adding an extensible mechanism for telling <code>omega</code> new facts about atoms, but have decided not to implement that immediately.</p>\n<p>If someone is keen to push on this I'm happy to explain what would be required.</p>",
        "id": 425207221,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709773437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/287929-mathlib4/topic/feature.20request.3A.20field_simp.20in.20Nat/near/425091142\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have a tactic that hits the commonly performed operation of 'erasing the denominator'.</p>\n</blockquote>\n<p>I would say that natural division is not at all common and was arguably a code smell. <code>a = b / c</code> is sometimes what you want but far more common is the strictly stronger statement <code>a * c = b</code> which is what people would usually use rather than division.</p>",
        "id": 425240759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709795780
    }
]