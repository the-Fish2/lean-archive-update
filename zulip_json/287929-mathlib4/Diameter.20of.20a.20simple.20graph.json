[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12058\">#12058</a>, I've defined the diameter of a simple graph using <code>sSup</code>, and I defined its type to be <code>ℕ∞</code>, mainly for two reasons:</p>\n<ol>\n<li>Infinite graphs.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">Distance</a> between vertices currently is of type <code>ℕ</code>, giving <code>0</code> for unreachable vertices. But in all graph theory references that I'm aware of, it is defined as <code>∞</code> instead. In that case, a disconnected graph will have an infinite diameter too. With <code>diam : ℕ∞</code>, it is easy to replace <code>dist</code> with <code>edist</code> in the future. (Check <a href=\"#narrow/stream/287929-mathlib4/topic/SimpleGraph.2Edist.20of.20disconnected.20vertices.20is.20zero/near/430306623\">this</a>).</li>\n</ol>\n<p>As this is my first time trying to define something (I've only stated and proved lemmas so far), I'm not sure if this is a good way to define the diameter, and would love to hear any feedback. I'm worried about this definition being wrong, and then having to reprove all the lemmas about it.</p>\n<p>Moreover, I'm not sure if the lemmas I included in the API are appropriate, I would like to hear feedback regarding this too. (Also, any help with the <code>sorry</code>'s is greatly appreciated!)</p>\n<p>Note: I didn't post this in the <code>PR reviews</code> stream because this is a draft PR, and I'm requesting advice on a WIP instead of a review, but please let me know if that stream is more appropriate for this sort of post.</p>",
        "id": 432607519,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1712794200
    },
    {
        "content": "<p>I think that the usual reason for the \"if it's infinity then let's call it 0\" approach is simply that people get annoyed with working with extended naturals because a bunch of standard nat tactics like omega won't work with extended nats. If working with extended nats doesn't make you want to pull your hair out then go for it! It might even be helpful if you isolate pain points and suggest tactics which will make working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> easier. </p>\n<p>Note that there is one situation -- order of elements and order of groups -- where making the answer 0 turns out to be an inspired idea. Elements and groups literally can't have order 0 so you know it unambiguously means infinity, and basic theorems like order of product group equals product of orders works really well with the 0 convention! This is to do with the fact that if a surjection from the integers to a cyclic group is injective then its kernel is (0) but the size of the image is infinity.</p>",
        "id": 432608417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712794862
    },
    {
        "content": "<p>Thanks for the clarification! I've noticed that the combination of a supremum and <code>ℕ∞</code> is an especially annoying one, maybe if I was working with a definition involving an infremum instead, it would have been less time consuming. I'm considering renaming the current definition to <code>ediam</code> and defining a new <code>diam</code> which is in <code>ℕ</code>.</p>",
        "id": 432610454,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1712796570
    },
    {
        "content": "<p>But it feels like when we treat infinity as zero in the case of distances and diameters, some information is lost, and this is worrying to me. <br>\nFor example, given two vertices with distance zero, are they unreachable, or are they equal? We may never know.</p>",
        "id": 432611388,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1712797365
    },
    {
        "content": "<p>Yeah, then you need to distinguish those in a different way</p>",
        "id": 432643102,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712820422
    },
    {
        "content": "<p>I wonder if something like omega could work for ENat</p>",
        "id": 432643170,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712820448
    },
    {
        "content": "<p>I was also nervous about this whole \"if it's supposed to be infinity then return the wrong answer\" attitude for a while, but it does work. As Ruben says, you just have to interpret a return of zero as not meaning \"the answer is 0\" but as meaning the answer is either 0 or infinity\" and so your lemmas in the zero case just have the stronger hypothesis that the vertices are the same. Once you write a bunch of API you'll see that this is not hard to deal with, the issue is a psychological one more than anything else. You can look at the API for Nat.card which has exactly the same issue (size of the empty type is 0, size of an infinite type is 0) to see that it can be made to work, and I can testify that Nat.card is sometimes exactly what you want for a cardinality function. It's swings and roundabouts here. Humans are very good at saying \"well obviously adding infinity doesn't change anything\" but actually adding infinity does change something a little bit, and lean rightfully demands that you keep track.</p>\n<p>For both cardinalities and polynomial degrees we do have two functions, one which returns infinity (actually negative infinity in the deg(0) case) if the answer is \"error\" and one which returns zero, and both are used extensively in the library.</p>",
        "id": 432645000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712821208
    },
    {
        "content": "<p>In particular your claim that some information is lost is false. If d(x,y)=0 then you can still ask if x=y because you didn't <em>lose</em> x and y. You make the API around that observation.</p>",
        "id": 432645338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712821368
    },
    {
        "content": "<p>I see, I will reattempt the definition but in the naturals. Thank you!</p>",
        "id": 432645793,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1712821615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Diameter.20of.20a.20simple.20graph/near/432643170\">said</a>:</p>\n<blockquote>\n<p>I wonder if something like omega could work for ENat</p>\n</blockquote>\n<p>It can, the whole first order theory is decidable just like for naturals. The proof is essentially that each element is either infinity or a natural so any formula can be split into cases and the infinite case always simplifies to something trivial. This is basically how such a tactic could be implemented too using omega (similar to <a href=\"https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean\">https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean</a> which was an earlier version of this from before omega existed).</p>",
        "id": 432710283,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712843413
    },
    {
        "content": "<p>Could one write a <code>enat_omega</code> tactic which is a wrapper around <code>omega</code> (as we already have <code>bv_omega</code> for <code>BitVec</code>)?</p>",
        "id": 433186695,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713147487
    },
    {
        "content": "<p>You'd probably just case split all the enats at once. Probably there's a more efficient algorithm that would require integration with <code>omega</code> (so not happening, since it is slated for replacement) that would split one at a time, but avoiding the overhead of rebuilding the <code>omega</code> state each time.</p>",
        "id": 433186875,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713147634
    }
]