[
    {
        "content": "<p>Should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.mul_le_left#doc\">docs#Ideal.mul_le_left</a> be called <code>Ideal.mul_le_right</code> or is this just another twist in the naming convention which I don't understand?</p>",
        "id": 442586597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717522624
    },
    {
        "content": "<p>left_mul_le? I never can tell left and right apart anyway</p>",
        "id": 442590230,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717523672
    },
    {
        "content": "<p>I found this when adding some lemmas to <a href=\"https://github.com/leanprover-community/mathlib4/pull/13308\">#13308</a> at Andrew Yang's suggestion. He wanted <code>quotientMulEquivQuotientProd_fst</code> analogous to <code>quotientInfEquivQuotientProd_fst</code> so I cut and pasted the proof, changing all <code>I ⊓ J</code>s to <code>I * J</code>s and the only problem was that <code>inf_le_left</code> needed to be changed to <code>mul_le_right</code> :-) (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_le_left#doc\">docs#inf_le_left</a> ).</p>",
        "id": 442590942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717523880
    },
    {
        "content": "<p>Related: it's great that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_le_left#doc\">docs#inf_le_left</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_le_left%27#doc\">docs#inf_le_left'</a> so you can decide whether you want it to be a simp lemma or not. What the heck is going on there??</p>",
        "id": 442591303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717523978
    },
    {
        "content": "<p>mathlib3 had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inf_le_left</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">semilattice_inf</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ematch</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inf_le_left'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:)</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">semilattice_inf</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 442591675,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524076
    },
    {
        "content": "<p>Presumably the ematch did something there, and it no longer does in lean</p>",
        "id": 442591757,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524095
    },
    {
        "content": "<p>Is it possible to write some meta code which looks through the library trying to spot all pairs of distinct declarations which are syntactically equal?</p>",
        "id": 442592198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717524227
    },
    {
        "content": "<p>(I guess the answer is inevitably \"yes\" -- perhaps more interesting is \"...and which terminates in finite time?\"</p>",
        "id": 442592367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717524273
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13513\">#13513</a></p>",
        "id": 442593017,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524471
    },
    {
        "content": "<p>And finite time for a mathematician or a physicist?</p>",
        "id": 442593135,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717524496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ideal.2Emul_le_left/near/442586597\">said</a>:</p>\n<blockquote>\n<p>Should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.mul_le_left#doc\">docs#Ideal.mul_le_left</a> be called <code>Ideal.mul_le_right</code></p>\n</blockquote>\n<p>Yes.</p>",
        "id": 442593917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717524749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ideal.2Emul_le_left/near/442592367\">said</a>:</p>\n<blockquote>\n<p>(I guess the answer is inevitably \"yes\" -- perhaps more interesting is \"...and which terminates in finite time?\"</p>\n</blockquote>\n<p>I think it should be pretty okay. Shove things into a DiscrTree, and then check candidate collisions by hand.</p>",
        "id": 442701317,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717567180
    }
]