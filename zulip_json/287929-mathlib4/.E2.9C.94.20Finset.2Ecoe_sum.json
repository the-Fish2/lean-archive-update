[
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.coe_sum#doc\">docs#Finset.coe_sum</a> take an argument <code>(f : ι → Finset α)</code> instead of <code>(f : ι → α)</code> I would expect? Am I missing something?</p>",
        "id": 437388443,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715064474
    },
    {
        "content": "<p>It's in <code>Finset.Pointwise</code>, it says that you can coerce each <code>Finset</code> to a <code>Set</code> inside the sum when adding sets pointwise.</p>",
        "id": 437389017,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715064751
    },
    {
        "content": "<p>Yeah, it's a result about one particular coercion, not a generic one (because you need to assume some compatibility between addition and coercion)</p>",
        "id": 437389580,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715065055
    },
    {
        "content": "<p>I don't get it. How would you prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.sum_toEReal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437389796,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715065176
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_sum#doc\">docs#map_sum</a> in general</p>",
        "id": 437390211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715065368
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_map#doc\">docs#Finset.sum_map</a></p>",
        "id": 437390331,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715065436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.2Ecoe_sum/near/437390211\">said</a>:</p>\n<blockquote>\n<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_sum#doc\">docs#map_sum</a> in general</p>\n</blockquote>\n<p><del>Though <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal#doc\">docs#EReal</a> is badly behaved so this lemma won't work here</del></p>",
        "id": 437390589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715065531
    },
    {
        "content": "<p>Is it bad behaved even tho I have only real values?</p>",
        "id": 437390740,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715065598
    },
    {
        "content": "<p>Actually it's seemingly well enough behaved here for the lemma to apply after all</p>",
        "id": 437390811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715065633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.2Ecoe_sum/near/437390740\">said</a>:</p>\n<blockquote>\n<p>Is it bad behaved even tho I have only real values?</p>\n</blockquote>\n<p>In general this is enough to make the lemma true, but not necessarily enough to allow other general results to apply.</p>",
        "id": 437390897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715065679
    },
    {
        "content": "<p>I think I am missing something. When I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.sum_toEReal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">map_sum</span> <span class=\"n\">Real.toEReal</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">m.23212</span>\n</code></pre></div>\n<p>It looks like it is asking me to prove that <code>(ℝ → EReal) → (ℝ → EReal)</code> is injective, rather than <code>ℝ → EReal</code> is injective.</p>\n<p>What am I doing wrong?</p>",
        "id": 437395000,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715067144
    },
    {
        "content": "<p><code>map_sum </code> expects a bundled morphism. You're giving the plain function</p>",
        "id": 437402754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715069940
    },
    {
        "content": "<p>We don't seem to have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.toReal#doc\">docs#Real.toReal</a> as a bundled hom</p>",
        "id": 437402823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715069970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.2Ecoe_sum/near/437389796\">said</a>:</p>\n<blockquote>\n<p>I don't get it. How would you prove the following?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.sum_toEReal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Does Mathlib have any convenient lemmas to prove this? Or do I have to do it by hand, I mean, by induction?</p>",
        "id": 437403601,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715070249
    },
    {
        "content": "<p>Nono, don't do it by hand. Do what I said. Namely, bundle <code>Real.toReal</code> into <code>Real.toERealHom : ℝ →+* EReal</code> and then your lemma is <code>map_sum Real.toERealHom</code></p>",
        "id": 437403987,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715070391
    },
    {
        "content": "<p>(definitionally, but not syntactically)</p>",
        "id": 437405252,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715070851
    },
    {
        "content": "<p>Ah yeah. I knew I was missing something. I was missing brain.</p>",
        "id": 437405426,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715070923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 437405447,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715070929
    },
    {
        "content": "<p>FYI, in case you want to see how much brain I was missing today, I asked the same question last month:<br>\n<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60</a></p>",
        "id": 437406693,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715071444
    }
]