[
    {
        "content": "<p>Is there a good reason not to define <code>CanonicallyOrderedCancelAddCommMonoid</code> that would combine <code>OrderedCancelAddCommMonoid</code> and <code>CanonicallyOrderedAddCommMonoid</code> together?<br>\nFor example <code>NNReal × NNRat × Nat</code> would be a model.</p>",
        "id": 410186925,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703701278
    },
    {
        "content": "<p>Wait. Isn't every <code>CanonicallyOrderedAddCommMonoid</code> cancellative? Lean doesn't show me such a thing but seems reasonable...</p>",
        "id": 410188450,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703702223
    },
    {
        "content": "<p>No, consider <code>Fin n</code> with saturating addition.</p>",
        "id": 410188505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702274
    },
    {
        "content": "<p>Ah yes.</p>",
        "id": 410188575,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703702296
    },
    {
        "content": "<p>Honestly, we don't really care about these non-cancellative examples, so you could try adding the axiom to <code>CanonicallyOrderedAddCommMonoid</code></p>",
        "id": 410188619,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702331
    },
    {
        "content": "<p>Wait no sorry we do. <code>ℝ≥0∞</code> and <code>ℕ∞</code> are not cancellative. But they are basically the only relevant counterexamples.</p>",
        "id": 410188690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702387
    },
    {
        "content": "<p>If most examples of <code>CanonicallyOrderedAddCommMonoid</code> are <code>OrderedCancelAddCommMonoid</code> but not all that are relevant for us are, it is a case for defining a <code>CanonicallyOrderedCancelAddCommMonoid</code>. It seems to be a really neat algebra.</p>",
        "id": 410189337,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703702780
    },
    {
        "content": "<p>Yeah sure</p>",
        "id": 410189359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703702799
    },
    {
        "content": "<p>Have I just gotten ((Yaël Dillies)™)'s preäpproval?</p>",
        "id": 410189438,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703702857
    },
    {
        "content": "<p>Would <code>CanonicallyOrderedCancelCommMonoid</code> (i.e., the multiplicative version) be useful?</p>",
        "id": 410189634,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703702985
    },
    {
        "content": "<p>I think it's fine having if only for symmetry of the API</p>",
        "id": 410189706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703703018
    },
    {
        "content": "<p>You've heard of the lovely small old round red Italian wooden decorative box?<br>\nNow get ready for canonically ordered additive cancellative commutative monoid!<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9307\">#9307</a></p>",
        "id": 410195692,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703706944
    },
    {
        "content": "<p>Why is it called <code>CanonicallyOrderedAddCancelCommMonoid</code> specifically? Why is \"Add\" in the middle of the identifier instead of \"AddMonoid\" at the end? I chose the name that <code>@[to_additive]</code> allowed.</p>",
        "id": 410348152,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703802083
    }
]