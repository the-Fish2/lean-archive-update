[
    {
        "content": "<p>I'm trying to show how some properties of finite sequences are preserved in their prefixes. I'm representing it using <code>Fin n -&gt; a</code> because that is what I'm personally used to. I haven't tried using <code>Vector n a</code>, perhaps that would help here. Either way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- a prefix of a sequence of length n of length k &lt; n</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fin.init'</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"o\">⟨</span><span class=\"n\">i.val</span><span class=\"o\">,</span> <span class=\"n\">i.prop.trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- all numbers in this sequence are either 1 or sums of two previous numbers.</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">k</span>\n\n<span class=\"c1\">-- if a sequence is `is_sum`, then so is its prefix</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">init'_is_sum</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_sum</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_sum</span> <span class=\"o\">(</span><span class=\"n\">Fin.init'</span> <span class=\"n\">s</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_sum</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">⟨</span><span class=\"n\">k.val</span><span class=\"o\">,</span> <span class=\"n\">k.prop.trans</span> <span class=\"n\">hn</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this fact is intuitively correct, but I'm having a pretty annoying time casting between the different <code>Fin n</code> and <code>Fin n'</code> types, especially in the direction of <code>Fin n</code> to <code>Fin n'</code>, since <code>n' &lt; n</code>.</p>\n<p>Is there a simpler way to go about something like this?</p>",
        "id": 430396417,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711810579
    },
    {
        "content": "<p>Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.castLe#doc\">docs#Fin.castLe</a> might be slightly nicer, since there's a small amount of API for it</p>",
        "id": 430400401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711814157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finite.20sequence.20.28Fin.20n.20-.3E.20N.29.20prefix.20proprety/near/430400401\">said</a>:</p>\n<blockquote>\n<p>Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.castLe#doc\">docs#Fin.castLe</a> might be slightly nicer, since there's a small amount of API for it</p>\n</blockquote>\n<p>Hmm I wonder why this link 404s. I saw <code>Fin.castLE</code>, but I wasn't sure if it would apply in my strictly less than situation. I need it to be <code>&lt;</code> for later uses of <code>termination_by</code>.</p>",
        "id": 430426682,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711839972
    },
    {
        "content": "<p>Wait this might be useful <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderEmbedding.lt_iff_lt#doc\">docs#OrderEmbedding.lt_iff_lt</a></p>",
        "id": 430427346,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711840747
    },
    {
        "content": "<p>From a mathematics standpoint I'm surprised this is possible (that order embedding implies <code>lt_iff_lt</code>)</p>",
        "id": 430427403,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711840808
    },
    {
        "content": "<blockquote>\n<p>I wasn't sure if it would apply in my strictly less than situation</p>\n</blockquote>\n<p>\"strictly less than\" implies \"less than or equals\", so if you have a hypothesis <code>a_lt_b : a &lt; b</code> you can use <code>a_lt_b.le</code> with <code>castLE</code></p>",
        "id": 430427714,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711841197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finite.20sequence.20.28Fin.20n.20-.3E.20N.29.20prefix.20proprety/near/430427714\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I wasn't sure if it would apply in my strictly less than situation</p>\n</blockquote>\n<p>\"strictly less than\" implies \"less than or equals\", so if you have a hypothesis <code>a_lt_b : a &lt; b</code> you can use <code>a_lt_b.le</code> with <code>castLE</code></p>\n</blockquote>\n<p>I meant that it sounds like (based on the <code>OrderEmbedding</code> API): an embedding <code>f : α ↪ β</code> such that <code>a ≤ b ↔ (f a) ≤ (f b)</code> implies that <code>a &lt; b ↔ (f a) &lt; (f b)</code></p>",
        "id": 430430187,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711843766
    },
    {
        "content": "<p>After typing that out it makes  sense since <code>≠</code> maps to <code>≠</code></p>",
        "id": 430430212,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711843798
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 430460637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711874735
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.castLT#doc\">docs#Fin.castLT</a> helped:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- a prefix of a sequence of length n of length k &lt; n</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fin.init'</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"o\">⟨</span><span class=\"n\">i.val</span><span class=\"o\">,</span> <span class=\"n\">i.prop.trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- all numbers in this sequence are either 1 or sums of two previous numbers.</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">k</span>\n\n<span class=\"c1\">-- if a sequence is `is_sum`, then so is its prefix</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">init'_is_sum</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_sum</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_sum</span> <span class=\"o\">(</span><span class=\"n\">Fin.init'</span> <span class=\"n\">s</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_sum</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">⟨</span><span class=\"n\">k.val</span><span class=\"o\">,</span> <span class=\"n\">k.prop.trans</span> <span class=\"n\">hn</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hi₁</span> <span class=\"o\">:</span> <span class=\"n\">i.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fin.lt_iff_val_lt_val.mp</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k.prop</span>\n    <span class=\"k\">have</span> <span class=\"n\">hi₂</span> <span class=\"o\">:</span> <span class=\"n\">i.castLT</span> <span class=\"n\">hi₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.lt_iff_val_lt_val.mp</span> <span class=\"n\">hi</span>\n    <span class=\"k\">have</span> <span class=\"n\">hj₁</span> <span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fin.lt_iff_val_lt_val.mp</span> <span class=\"n\">hj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k.prop</span>\n    <span class=\"k\">have</span> <span class=\"n\">hj₂</span> <span class=\"o\">:</span> <span class=\"n\">j.castLT</span> <span class=\"n\">hj₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.lt_iff_val_lt_val.mp</span> <span class=\"n\">hj</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i.castLT</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">,</span> <span class=\"n\">j.castLT</span> <span class=\"n\">hj₁</span><span class=\"o\">,</span> <span class=\"n\">hj₂</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 430496226,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711908695
    },
    {
        "content": "<p>I'm surprised castLT even exists, since it's just a weaker version of castLE</p>",
        "id": 430496992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711909394
    }
]