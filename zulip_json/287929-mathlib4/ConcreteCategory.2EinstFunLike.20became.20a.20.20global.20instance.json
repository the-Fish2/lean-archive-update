[
    {
        "content": "<p>During the port we accidentally made <code>ConcreteCategory.instFunLike</code> a global instance in <code>Mathlib/Topology/Category/TopCat/Basic.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- Porting note: cannot find a coercion to function otherwise</span>\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">ConcreteCategory</span><span class=\"bp\">.</span><span class=\"n\">instFunLike</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TopCat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n</code></pre></div>\n<p>Despite the <code>in</code>, this makes it a global instance (we desperately need a linter for this!!!).</p>",
        "id": 440323689,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716471156
    },
    {
        "content": "<p>I've started to try to fix this on <a href=\"https://github.com/leanprover-community/mathlib4/tree/TopCat_cleanup2\">branch#TopCat_cleanup2</a>, but there's still a lot that is broken.</p>",
        "id": 440323817,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716471192
    },
    {
        "content": "<p>Advice welcome. :-)</p>",
        "id": 440323856,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716471200
    },
    {
        "content": "<p>(There appears to be only one other such case, in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.GradedAlgebra#src\">src#ExteriorAlgebra.GradedAlgebra</a>.ι_sq_zero, which is trivially fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13144\">#13144</a>.)</p>",
        "id": 440324144,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716471266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> I just filled in the sorry in TopCat/Limits/Products and pushed it to your branch</p>",
        "id": 440474334,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716543328
    },
    {
        "content": "<p>Looking at the pullback file now</p>",
        "id": 440474516,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716543397
    },
    {
        "content": "<p>Thanks! I was wondering about asking you, as you are very much working downstream of this problem!</p>",
        "id": 440475553,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716543819
    },
    {
        "content": "<p>Pullback file is error-free now as well. The problem seems to be that there are some lemmas that simp isn't seeing, such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.comp_apply#doc\">docs#CategoryTheory.comp_apply</a>, and I had to use <code>erw</code> instead</p>",
        "id": 440478135,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716544880
    },
    {
        "content": "<p>In many of the <code>CompHaus</code>-related files, you've added the line </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">ConcreteCategory</span><span class=\"bp\">.</span><span class=\"n\">instFunLike</span><span class=\"w\"> </span><span class=\"c1\">-- TODO remove this?</span>\n</code></pre></div>\n<p>and everything works. Is this bad? I mean, would it be better to refactor the files to not use this instance?</p>",
        "id": 440478649,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716545086
    },
    {
        "content": "<p>Yes, it would be better.</p>",
        "id": 440482691,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716546944
    },
    {
        "content": "<p>But it's better than the current situation where we accidentally made it global.</p>",
        "id": 440482720,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716546958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ConcreteCategory.2EinstFunLike.20became.20a.20.20global.20instance/near/440482691\">said</a>:</p>\n<blockquote>\n<p>Yes, it would be better.</p>\n</blockquote>\n<p>Why is that better?</p>",
        "id": 440482833,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716546987
    },
    {
        "content": "<p>Hmm... Let me think on that one. I agree it is not obvious that wanting to turn off the global instance implies we should not want to use it locally either.</p>",
        "id": 440482945,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716547051
    },
    {
        "content": "<p>Is this branch building now? If so I think we should PR it. We can either just remove the <code>-- TODO remove this?</code> comments,</p>",
        "id": 440483000,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716547080
    },
    {
        "content": "<p>or change the comment too <code>-- Previously, this had accidentally been made a global instance, and we now turn it on locally as convenient.</code></p>",
        "id": 440483079,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716547106
    },
    {
        "content": "<p>No there are still lots of new files with errors appearing in CI after every fix. There are some in Topology/Gluing which aren't fixed by adding the local instance. I'm not very familiar with the API so I'm having trouble fixing that one.</p>",
        "id": 440483298,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716547207
    },
    {
        "content": "<p>I wonder if we can tempt <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> into having a look. I think cleaning up the basic setup of TopCat is going to be key to resolving the suffering in AG at present.</p>",
        "id": 440483772,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716547388
    },
    {
        "content": "<p><code>TopCat.pullbackIsoProdSubtype_inv_fst_apply</code> and the <code>snd</code> version are simp lemmas that are frequently failing and I have to use <code>erw</code> instead. Any idea why this might be?</p>",
        "id": 440486028,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716548355
    },
    {
        "content": "<p>Can you see if they work with <code>simp (config := {index := false})</code>?</p>",
        "id": 440489623,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716549763
    },
    {
        "content": "<p>Oh, hrm, that is only available on nightly-testing.</p>",
        "id": 440489643,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716549772
    },
    {
        "content": "<p>The problem is going to be that some implicit argument (e.g. of <code>TopCat.of (X : TopCat)</code>) has dsimp'd \"the wrong amount\". It may be that going into those lemmas that aren't firing and putting <code>no_index</code> in front of some of the implicit arguments will help. But it's a pretty manual/painful process to discover if anything helps.</p>",
        "id": 440489887,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716549867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519559\">Dagur Asgeirsson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ConcreteCategory.2EinstFunLike.20became.20a.20.20global.20instance/near/440483298\">said</a>:</p>\n<blockquote>\n<p>No there are still lots of new files with errors appearing in CI after every fix. There are some in Topology/Gluing which aren't fixed by adding the local instance. I'm not very familiar with the API so I'm having trouble fixing that one.</p>\n</blockquote>\n<p>I managed to fix the gluing file after all</p>",
        "id": 440492611,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716550935
    },
    {
        "content": "<p>I just got home. Is there anything (maybe a problematic file?) I could help?</p>",
        "id": 440493734,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716551411
    },
    {
        "content": "<p>I just pushed a commit fixing the last two files with errors in CI. You can see if there are other files with errors after CI runs on the latest commit, I'm taking a break now</p>",
        "id": 440495711,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716552222
    },
    {
        "content": "<p>Some <code>rw</code> errors come from the fact that there are two funlike instances on homs in <code>TopCat</code>. <br>\nI think making <code>ConcreteCategory.hasCoeToSort</code> and <code>ConcreteCategory.instFunLike</code> fields of <code>ConcreteCategory</code> might solve some of the problems we are facing?</p>",
        "id": 440503876,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716555407
    },
    {
        "content": "<p>Can't you get rid of one?</p>",
        "id": 440504368,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716555580
    },
    {
        "content": "<p>One is precisely <code>ConcreteCategory.instFunLike</code>, which is the reason why it cannot be a global instance.</p>",
        "id": 440504595,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716555646
    },
    {
        "content": "<p>But even if it is not a global instance, it makes applying general lemmas about concrete categories (where this instance is on) difficult.</p>",
        "id": 440504727,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716555692
    },
    {
        "content": "<p>Yes, it was while trying to get rid of this duplication that I noticed we had accidentally made <code>ConcreteCategory.instFunLike</code> a global instance.</p>",
        "id": 440504796,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716555715
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">ConcreteCategory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">hasCoeSort</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeSort</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">funLike</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">FunLike</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span>\n<span class=\"w\">  </span><span class=\"n\">map_id</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">  </span><span class=\"n\">map_comp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">≫</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">∘</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">map_injective</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n</code></pre></div>",
        "id": 440505338,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716555914
    },
    {
        "content": "<p>I think this is going to be a pretty radical change. I'm not saying I'm against it, but I think life we be easier if we make the existing concrete categories more uniform first, and than try changes like this.</p>",
        "id": 440505756,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716556067
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConcreteCategory.hasCoeToSort#doc\">docs#ConcreteCategory.hasCoeToSort</a> should be reducible?</p>",
        "id": 440508754,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716557067
    },
    {
        "content": "<p>Not sure but worth a shot.</p>",
        "id": 440509249,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716557229
    },
    {
        "content": "<p>Kim's branch is now PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13170\">#13170</a>. I'm expecting everything to build now, but I don't know if we want to merge this and then do some more radical refactor of concrete categories, or the other way around</p>",
        "id": 440511779,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716558037
    },
    {
        "content": "<p>We should at least mark the <code>erw</code> regressions with an identifier (eg issue) so we can rip them all out with a fix</p>",
        "id": 440511976,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716558106
    },
    {
        "content": "<p>Ok that makes sense. At least all the errors are gone now</p>",
        "id": 440512284,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716558195
    },
    {
        "content": "<p>I don't have more time for this today unfortunately</p>",
        "id": 440512392,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716558227
    },
    {
        "content": "<p>Thanks very much for the help on this. I was starting to get intimidated by the problems in ConcreteCategory land, so I'm excited to see everyone is interested! I think we should merge this, and then start experimenting with deeper fixes.</p>",
        "id": 440515283,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716559134
    },
    {
        "content": "<p>It builds now. The PR number is attached as tracker. Benchmarking is in progress. </p>\n<p>My choice of linting was to delete a few <code>simp</code>'s so I cannot call <code>bors</code></p>",
        "id": 440546193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716570280
    },
    {
        "content": "<p>-162B</p>",
        "id": 440546440,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716570378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ConcreteCategory.2EinstFunLike.20became.20a.20.20global.20instance/near/440505338\">said</a>:</p>\n<blockquote>\n<p>Something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">ConcreteCategory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">hasCoeSort</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeSort</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">funLike</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">FunLike</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span>\n<span class=\"w\">  </span><span class=\"n\">map_id</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">  </span><span class=\"n\">map_comp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">≫</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">∘</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">map_injective</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For the record, this does not work. If we have <code>instance : CoeSort (Bundled c) (Type w) = ⟨Bundled.α⟩</code>, then for <code>X : Bundled c</code>, <code>X : Type w</code> will (reducibly) become <code>Bundled.α X</code>, but via the instance in <code>ConcreteCategory</code> it is <code>CoeSort.coe X</code>, and they are not reducibly equal.</p>",
        "id": 440556550,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716574482
    },
    {
        "content": "<p>I wrote a syntax linter for this, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13190\">#13190</a>. Careful review by something whose meta skills are less cargo-culted than mine welcome.</p>",
        "id": 440592283,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716594746
    },
    {
        "content": "<p>Okay, shall we merge this? Obviously the additional <code>erw</code>s are sad, but I think this is a case where we have to go backwards in order to go forwards.</p>",
        "id": 440715555,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716732212
    },
    {
        "content": "<p>I merged master to get rid of a merge conflict -- should be good to go (it builds, but CI is still linting)</p>",
        "id": 440806458,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716799803
    },
    {
        "content": "<p>We should probably try to merge this pretty quickly, I've just fixed another merge conflict (awaiting CI)</p>",
        "id": 440867965,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716820496
    },
    {
        "content": "<p>I made a bunch of pernickety comments but I agree that if we're merging this then it should be merged quickly!</p>",
        "id": 440895962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716831511
    }
]