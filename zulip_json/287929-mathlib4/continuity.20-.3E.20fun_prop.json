[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12661\">#12661</a> I'm trying to migrate from <code>continuity</code> to <code>fun_prop</code>. <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Could you please have a look at some failures, e.g., in <code>Topology/ContinuousFunction/Basic</code>?</p>",
        "id": 437035653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714842392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is the <code>fun_prop</code> update PR ready / merged yet? If not, I think we should focus on that. I'm on mobile, so finding the PR now is a bit hard.</p>",
        "id": 437049034,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714853848
    },
    {
        "content": "<p>I guess, I missed this PR.</p>",
        "id": 437049076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714853883
    },
    {
        "content": "<p>Is it <a href=\"https://github.com/leanprover-community/mathlib4/pull/11092\">#11092</a>?</p>",
        "id": 437049152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714853956
    },
    {
        "content": "<p>More than likely some of the failures will be fixed by that PR (especially regarding eta-expansion)</p>",
        "id": 437049256,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714854054
    },
    {
        "content": "<p>You could merge that and see if it resolves your issues here.</p>",
        "id": 437049276,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714854074
    },
    {
        "content": "<p>I'll do it later today.</p>",
        "id": 437049334,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714854130
    },
    {
        "content": "<p>Still fails to prove <code>Continuous fun b ↦ Function.const α b</code>, <code>Continuous fun ig ↦ (f ig.fst) ig.snd</code> etc</p>",
        "id": 437050873,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714855721
    },
    {
        "content": "<p>If you look at the error message of <code>fun_prop</code> it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">No</span> <span class=\"n\">theorems</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">Function.const</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">order</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">Function.const</span> <span class=\"n\">α</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">No</span> <span class=\"n\">theorems</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">Function.eval</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">order</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">Function.eval</span> <span class=\"n\">i</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Adding a continuity theorems for <code>Function.const</code> and <code>Function.eval</code> would fix the issues. However <a href=\"https://github.com/leanprover-community/mathlib4/blob/5bd44fb33d90cbf9a840ec0b609a74b0f377d8c9/Mathlib/Tactic/FunProp/Types.lean#L74\"><code>fun_prop</code> unfolds</a> <code>id</code>, <code>Function.comp</code>, <code>Function.HasUncurry.uncurry</code> and <code>Function.uncurry</code> by default even though they are not marked as reducible. </p>\n<p>Should I add <code>Function.const</code> and <code>Function.eval</code> to this list? Or should we add continuity theorems for them? I'm not sure what is the mathlib convention on this.</p>\n<p>I have to think a bit more about the third problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">ig</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ig.fst</span><span class=\"o\">)</span> <span class=\"n\">ig.snd</span>\n</code></pre></div>",
        "id": 437254168,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714999162
    },
    {
        "content": "<p>Actually, what is the manual proof of <code>(f : ∀ i, C(X i, A)) →  Continuous fun ig ↦ (f ig.fst) ig.snd</code> ?</p>",
        "id": 437254432,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714999263
    },
    {
        "content": "<p>Uff I do not work with sigma types very often so I'm surprised by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">×</span><span class=\"n\">A</span><span class=\"o\">)</span>     <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">((</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">×</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I'm afraid that this might require some major changes to <code>fun_prop</code> as I have never considered the case when you have a generic type <code>I</code> and object(in categorical sense e.g. topological space in this case) <code>A</code> then <code>I×A</code> or <code>(_:I)×A</code> is an object again.</p>",
        "id": 437256829,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715000141
    },
    {
        "content": "<p>I would recommend providing the continuity proof in <code>ContinuousMap.sigma</code> by hand for now and send me any other examples every time you encounter something similar.</p>",
        "id": 437257170,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715000265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/continuity.20-.3E.20fun_prop/near/437254432\">said</a>:</p>\n<blockquote>\n<p>Actually, what is the manual proof of <code>(f : ∀ i, C(X i, A)) →  Continuous fun ig ↦ (f ig.fst) ig.snd</code> ?</p>\n</blockquote>\n<p>The manual proof is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=continuous_sigma#doc\">docs#continuous_sigma</a>.</p>\n<p>Also, the most obvious topology on <code>I × A</code> is the product topology. That's why you need <code>TopologicalSpace I</code> in order to synthesize <code>TopologicalSpace (I × A)</code>. If you want to think of <code>I × A</code> as a disjoint union of <code>I</code> copies of <code>A</code>, then you need to put the discrete topology on <code>I</code>.</p>",
        "id": 437368453,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1715049756
    },
    {
        "content": "<p>Note that <code>fun_prop</code> tries to apply <code>continuous_sigma</code>, then fails, possibly because it fails to simplify <code>Sigma.fst (Sigma.mk i x)</code> to <code>i</code> to  unify the goal with <code>map_continuous</code></p>",
        "id": 437564892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715135989
    },
    {
        "content": "<p>Yes something odd is happening when applying <code>continuous_sigma</code> but I didn't manage to resolve it yet.</p>",
        "id": 437611194,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715160087
    },
    {
        "content": "<p>Can it run <code>dsimp</code> so that it unfolds all definitions with <code>@[simp] theorem myFun_apply</code>?</p>",
        "id": 437748439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715212558
    },
    {
        "content": "<p>I can try it but I'm a bit worried that would make the tactic slower.</p>\n<p>Anyway, you can always set that the default tactic proving continuity in <code>ContinuousMap</code> to <code>dsimp; fun_prop</code> instead of just <code>fun_prop</code>.</p>",
        "id": 437767922,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715229728
    },
    {
        "content": "<p>The issue is that sometimes it has to run <code>dsimp</code> after applying a rule. Can it be an option? Or a backup option if the main route fails?</p>",
        "id": 437770332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715231789
    },
    {
        "content": "<p>Can you give me a concrete example where it is really the case? I think the example with <code>Sigma</code> breaks earlier and sends the tactic on the wrong path. If I fix the earlier issue then normalisation is not necessary.</p>\n<p>Anyhow, I can add an optional normalization tactic but I'm afraid that people would use it to fix issues that should be fixed differently and then run into performance issues.</p>\n<p>I'm using the tactic a lot and so far I never needed normalization.</p>",
        "id": 437775710,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715236465
    },
    {
        "content": "<p>I'll test it tomorrow with more lemmas instead of normalization.</p>",
        "id": 437775764,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715236516
    },
    {
        "content": "<p>I got distracted by day job etc. One more question: Is it possible to make fun_prop use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsProperMap.continuous#doc\">docs#IsProperMap.continuous</a>, or it's out of scope?</p>",
        "id": 439732828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716268146
    },
    {
        "content": "<p><code>continuity</code> can use it because it uses aesop.</p>",
        "id": 439732834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716268159
    },
    {
        "content": "<p>Yes you can already mark that theorem with <code>fun_prop</code>. I call these theorems \"transition\", if you turn on <code>trace.Meta.Tactic.fun_prop.attr</code> you should see a message saying that. Similarly you can mark theorem implying continuity from differentiability etc. However, it is the user's responsibility to not introduce a cycle.</p>",
        "id": 439759173,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716280068
    },
    {
        "content": "<p>Some care needs to be taken with transition theorems. Once I added all the theorems saying that a linear map between finite dimensional vector spaces is a nice(continuous, differentiable,...) and it caused noticeable slowdown.</p>",
        "id": 439761207,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716280705
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-continuity\">branch#YK-continuity</a>, <code>fun_prop</code> breaks on <code>Mathlib/Topology/ProperMap</code>.</p>\n<blockquote>\n<p>Failed to prove necessary assumption IsProperMap fun a0 ↦ g a0 when applying theorem IsProperMap.continuous.</p>\n</blockquote>\n<p>while <code>IsProperMap g</code> is one of the assumption.</p>",
        "id": 439840273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716304375
    },
    {
        "content": "<p>You should mark <code>IsProperMap</code> with <code>fun_prop</code> attribute too.</p>\n<p>Alternatively you can run <code>fun_prop</code> with a discharger, <code>fun_prop (disch:=assumption)</code></p>",
        "id": 439842584,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716305059
    },
    {
        "content": "<p>I also ran against <code>fun_prop</code> not finding local hypothesis in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Analysis</span><span class=\"bp\">.</span><span class=\"n\">SpecialFunctions</span><span class=\"bp\">.</span><span class=\"n\">Pow</span><span class=\"bp\">.</span><span class=\"n\">Continuity</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">fun_prop</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">continuous_rpow_const</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Continuous</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">continuous_iff_continuousAt</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">continuousAt_rpow_const</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Continuous</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">fail_if_success</span><span class=\"w\"> </span><span class=\"n\">fun_prop</span><span class=\"w\"> </span><span class=\"c1\">-- I expected this to work</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">continuous_rpow_const</span><span class=\"w\"> </span><span class=\"n\">hp</span>\n<span class=\"w\">  </span><span class=\"n\">fun_prop</span>\n</code></pre></div>\n<p>Can we have <code>with_reducible assumption</code> as the default decharger for <code>fun_prop</code>? It is quite common in Lean that tactics freely use local hypotheses (e.g. the default <code>termination_by</code> discharger uses local hypotheses).</p>",
        "id": 442764445,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717588140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/continuity.20-.3E.20fun_prop/near/439842584\">said</a>:</p>\n<blockquote>\n<p>You should mark <code>IsProperMap</code> with <code>fun_prop</code> attribute too.</p>\n<p>Alternatively you can run <code>fun_prop</code> with a discharger, <code>fun_prop (disch:=assumption)</code></p>\n</blockquote>\n<p>Ha! I didn't see this discussion until just now, but I ran into the problem that <code>IsProperMap</code> wasn't marked as <code>fun_prop</code> and fixed this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13538\">#13538</a>, which is on the queue now <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 442857437,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717610737
    },
    {
        "content": "<p>What's the right <code>fun_prop</code>-based tactic that could replace <code>continuity</code> in \"auto\" fields? I tried <code>dsimp; fun_prop</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/14040\">#14040</a> but it looks like the increase in <code>dsimp</code> time is greater than the decrease in <code>aesop</code> time (both are small).</p>",
        "id": 446349813,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719104532
    },
    {
        "content": "<p>I don't know how to get a better benchmark here.</p>",
        "id": 446349850,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719104547
    },
    {
        "content": "<p>Do you have examples where the normalization with <code>dsimp</code> is necessary?</p>",
        "id": 446350085,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719104633
    },
    {
        "content": "<p>Maybe running <code>dsimp (config:={singlePass:=true}) only</code> could be enough?</p>",
        "id": 446350469,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719104749
    },
    {
        "content": "<p>I'll try that.</p>",
        "id": 446350977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719104889
    },
    {
        "content": "<p>There is no <code>singlePass</code> config option for <code>dsimp</code>.</p>",
        "id": 446351131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719104977
    },
    {
        "content": "<p>But I'm really curious to see cases where you need normalization.</p>",
        "id": 446351205,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719105034
    },
    {
        "content": "<p>Without any <code>dsimp</code> it gets goals like <code>Continuous (Equiv.invFun {toFun := .., invFun := .., ..})</code> and tries to look for a lemma about <code>Equiv.invFun</code>.</p>",
        "id": 446351234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719105091
    },
    {
        "content": "<p>Oh I see, maybe I should modify the algorithm for functions like <code>invFun</code>.  Giving me all the examples where it fails would be really useful!</p>",
        "id": 446351992,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719105784
    },
    {
        "content": "<p>I removed <code>dsimp; </code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/14040\">#14040</a>, now it's going to give you all the errors.</p>",
        "id": 446352177,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719105906
    },
    {
        "content": "<p>Do you prefer to change <code>fun_prop</code>, or try use <code>by dsimp only; fun_prop</code> first? Anyway, feel free to push to this branch.</p>",
        "id": 446352415,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719105986
    },
    {
        "content": "<p>I'm curious about the cases that require normalization as I'm still not convinced that it is really required if the tactic is tweaked properly. But of course just using <code>dsimp only; fun_prop</code> would be easier if it works and is fast enough.</p>",
        "id": 446352883,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719106156
    },
    {
        "content": "<p>Let's wait for the failures of the current commit (without <code>dsimp only</code>) first, then I'll test if <code>dsimp only</code> fixes compile.</p>",
        "id": 446353280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719106385
    },
    {
        "content": "<p>It compiles with <code>dsimp only</code>. I called <code>!bench</code> but I'm not very good at reading the report.</p>",
        "id": 446362265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719113593
    },
    {
        "content": "<p>My guess: this adds only several calls to <code>dsimp only; fun_prop</code>, so any change in performance is of the order of a random noise in the rest of Mathlib.</p>",
        "id": 446367543,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719117410
    },
    {
        "content": "<p>By the way: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13959\">#13959</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/14009\">#14009</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13994\">#13994</a> perform some \"easy\" continuity -&gt; fun_prop replacements; review is welcome. (The last one has some changes worth discussing, around changing default proof fields from <code>by continuity</code> to <code>by fun_prop</code>, which doesn't always work.)</p>",
        "id": 446553386,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719219019
    },
    {
        "content": "<p>For replacing default proof fields, I think we should wait until <a href=\"https://github.com/leanprover-community/mathlib4/pull/11092\">#11092</a> is finished.</p>",
        "id": 446691929,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719255508
    },
    {
        "content": "<p>currently there are a few nasty behaviors in <code>fun_prop</code> which can cause it to loop (basically, metavariables it can work around), and crash the server. We wouldn't want this happening in default fields. That would be a recipe for tremendous pain.</p>",
        "id": 446692198,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719255608
    }
]