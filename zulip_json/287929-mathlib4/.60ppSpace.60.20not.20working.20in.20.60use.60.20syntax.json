[
    {
        "content": "<p>Something fishy is going on with dot notation and the <code>use</code> syntax here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Use</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This prints <code>use.succ 0</code> which is a syntax error.</p>",
        "id": 446962423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719339764
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"use1\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"use2\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use1</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- use1.succ✝ 0</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use2</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- use2 .succ✝ 0</span>\n</code></pre></div>",
        "id": 446963472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719340061
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/4561\">lean4#4561</a>, this isn't mathlib's fault it seems</p>",
        "id": 446963477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719340062
    },
    {
        "content": "<p>The macro argument parser used by <code>elab</code>/<code>macro</code> must be throwing away <code>ppSpace</code> for some reason?</p>",
        "id": 446963686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719340122
    },
    {
        "content": "<p>(the discharger is a distraction there)</p>",
        "id": 446963694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719340125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60ppSpace.60.20not.20working.20in.20.60use.60.20syntax/near/446963686\">said</a>:</p>\n<blockquote>\n<p>The macro argument parser used by <code>elab</code>/<code>macro</code> must be throwing away <code>ppSpace</code> for some reason?</p>\n</blockquote>\n<p>But only sometimes? It seems to work fine for <code>use 1</code></p>",
        "id": 446963749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719340141
    },
    {
        "content": "<p>Switching to <code>elab \"use1 \" term,+ : tactic =&gt; failure</code>, you do get the space at least</p>",
        "id": 446964076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719340232
    },
    {
        "content": "<p>Naming the <code>ppSpace</code> argument fixes it too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"use1\"</span><span class=\"w\"> </span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"use2\"</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use1</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- use1.succ✝ 0</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use2</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- use2 .succ✝ 0</span>\n</code></pre></div>",
        "id": 446964296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719340295
    },
    {
        "content": "<p>Without the variable, I guess it places a <code>group</code> around the <code>ppSpace</code>, which apparently inhibits it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Parser</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"test_macroArg \"</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">macroArg</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stxParts</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">patArgs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"bp\">.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"n\">expandMacroArg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unzip</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{stxParts}\"</span>\n\n<span class=\"n\">test_macroArg</span><span class=\"w\"> </span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span>\n<span class=\"c1\">-- [group✝(ppSpace), sepBy1(term, \",\", \", \")]</span>\n<span class=\"n\">test_macroArg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span>\n<span class=\"c1\">-- [ppSpace, sepBy1(term, \",\", \", \")]</span>\n</code></pre></div>",
        "id": 446965192,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719340535
    },
    {
        "content": "<p>Thanks for tracking this down!</p>",
        "id": 446969591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719341943
    },
    {
        "content": "<p>Turns out that naming the <code>ppSpace</code> argument causes the <code>term,+</code> that follows to not be parsed at all</p>",
        "id": 447147494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719387894
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"use\"</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ppSpace</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"args: {args.getElems}\"</span>\n\n<span class=\"sd\">/-- info: use .inl✝ x✝ -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- info: args: [] -/</span><span class=\"w\"> </span><span class=\"c1\">-- should be `[True]`</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">info</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 447151089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719389164
    },
    {
        "content": "<p>Beware the meta footguns: <a href=\"https://github.com/leanprover/lean4/blob/141856d6e6d808a85b9147a530294fee8e48e15f/src/Lean/Elab/MacroArgUtil.lean#L40\">https://github.com/leanprover/lean4/blob/141856d6e6d808a85b9147a530294fee8e48e15f/src/Lean/Elab/MacroArgUtil.lean#L40</a></p>",
        "id": 447151330,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719389265
    },
    {
        "content": "<p>In other words, if there is a binding, we currently rely on the user to have made sure the bound parser does in fact return exactly one syntax tree</p>",
        "id": 447151450,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719389303
    },
    {
        "content": "<p>Ah, so the issue with naming <code>ppSpace</code> is that it returns no syntax trees?</p>",
        "id": 447151626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719389377
    },
    {
        "content": "<p>yes. There is nothing to bind to</p>",
        "id": 447151651,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719389390
    },
    {
        "content": "<p>In the end, <code>macro</code> tries its best to be a convenient shorthand for simple <code>syntax</code>+<code>macro_rules</code> combinations but at some point using the latter two is just easier, and perhaps more predictable</p>",
        "id": 447151887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719389464
    },
    {
        "content": "<p>(feel free to log issues on both <code>ppSpace</code> being put in a group and <code>macro</code> not complaining about the broken binding)</p>",
        "id": 447152246,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719389570
    },
    {
        "content": "<p>Is it expected <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> that <code>group(ppSpace)</code> doesn't emit a space? I tried going through the formatting code yesterday and I didn't see anything that should prevent it.</p>",
        "id": 447252763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719416960
    },
    {
        "content": "<p>I can't say off the top of my head</p>",
        "id": 447333136,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719434994
    }
]