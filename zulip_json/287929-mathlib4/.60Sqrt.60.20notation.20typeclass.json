[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt#doc\">docs#Real.sqrt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNReal.sqrt#doc\">docs#NNReal.sqrt</a> (and also weird ones for <code>Nat</code> etc). What do people think about creating a notation typeclass for these functions? I think it will improve readability of various statements. And I could imagine another typeclass like <code>SqrtMonoid</code> with a bunch of lemmas about \"lawful\" square roots, that abstracts away some common lemmas that we have now. (Probably NNReal is the only example of a SqrtMonoid that currently exists in mathlib...)</p>",
        "id": 400086502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699000390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> asked this in another thread recently</p>",
        "id": 400087848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699001020
    },
    {
        "content": "<p>Do you want a typeclass for n'th roots more generally? What's the obsession with 2?</p>",
        "id": 400090151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699002039
    },
    {
        "content": "<p>But isn't something like <code>SMul Rat</code>?</p>",
        "id": 400090635,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699002205
    },
    {
        "content": "<p>Or <code>HPow _</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[1/2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\">1/2</span><span class=\"mclose\">]</span></span></span></span> if you just want square roots :-)</p>",
        "id": 400090965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699002331
    },
    {
        "content": "<p>At any rate, it seems to me that it is already there.</p>",
        "id": 400091072,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699002372
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/7907\">#7907</a> for a work in progress. Help is welcome.</p>",
        "id": 400184242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699035026
    },
    {
        "content": "<p>I've factored off <a href=\"https://github.com/leanprover-community/mathlib4/pull/12056\">#12056</a>; a notation typeclass would be great, but for now we can get &gt;50% of the value by just adding direct notation for <code>Real.sqrt</code>, and this greatly reduces the diff due to introducing a future notation class.</p>",
        "id": 432655345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712825048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I sent it to <code>bors</code> but it failed because of that <code>0</code> vs. <code>zero</code> deprecation. So it's now <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span></p>",
        "id": 432732854,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712849422
    },
    {
        "content": "<p>I prefer scoped notation for definitions like this that can have many different meanings. Overloading is far from optimal.</p>",
        "id": 432756055,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712856928
    },
    {
        "content": "<p>Overloading only works for non-scoped notation though</p>",
        "id": 432759905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712858488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, should I take your comment above a request for me to not merge the PR in its current form without further discussion?</p>",
        "id": 432780873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712866717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Sqrt.60.20notation.20typeclass/near/432732854\">said</a>:</p>\n<blockquote>\n<p>it failed because of that <code>0</code> vs. <code>zero</code> deprecation.</p>\n</blockquote>\n<p>this was a bad rebase, now fixed</p>",
        "id": 432781953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712867175
    },
    {
        "content": "<p>If you think that scoped notation is worse than global notation, feel free to merge it as-is.</p>\n<p>In my experience it is good to avoid overloading, because overloading necessitates many type ascriptions that \"should\" not be needed. That said, much of this experience is from Lean 2, and the situation might not be so bad nowadays.</p>\n<p>But so overloading doesn't work at all when opening different meanings of the same notation from two namespaces? That is a little sad.</p>",
        "id": 432799771,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712875727
    },
    {
        "content": "<p>Maybe this was only a problem in Lean 3, I can no longer reproduce it</p>",
        "id": 432801214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712876613
    },
    {
        "content": "<p>I think the overloading problem is going to appear once we switch to a notation typeclass anyway, unless we get the elaborator just right</p>",
        "id": 432801250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712876640
    },
    {
        "content": "<p>I've rebased <a href=\"https://github.com/leanprover-community/mathlib4/pull/7907\">#7907</a> now that <a href=\"https://github.com/leanprover-community/mathlib4/pull/12056\">#12056</a> is merged; it would be nice to work out a clever elaborator such that the default type of a square root is <code>Real</code>.</p>",
        "id": 433040504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713008572
    }
]