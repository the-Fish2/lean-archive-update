[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib4/pull/10029\">#10029</a>, commit acf36f6, \"build mathlib\" fails at the \"get cache\" stage with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Attempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">285</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">1</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">48</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">16</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">100</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">35</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">147</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">51</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">151</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">52</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">199</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">69</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">202</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">70</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">246</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">86</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">280</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">98</span>%<span class=\"o\">]</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">285</span>/285<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"w\"> </span>success<span class=\"o\">)</span>\nWarning:<span class=\"w\"> </span>some<span class=\"w\"> </span>files<span class=\"w\"> </span>were<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>cache.\nThis<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>your<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>checkout<span class=\"w\"> </span>of<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>has<span class=\"w\"> </span>diverged<span class=\"w\"> </span>from<span class=\"w\"> </span>upstream.\nIf<span class=\"w\"> </span>you<span class=\"w\"> </span>push<span class=\"w\"> </span>your<span class=\"w\"> </span>commits<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>branch<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>repository,<span class=\"w\"> </span>CI<span class=\"w\"> </span>will<span class=\"w\"> </span>build<span class=\"w\"> </span>the<span class=\"w\"> </span>oleans<span class=\"w\"> </span>and<span class=\"w\"> </span>they<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>available<span class=\"w\"> </span>later.\n/home/lean/.cache/mathlib/f97fb2ce8d3ecb1e.ltar:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>fill<span class=\"w\"> </span>whole<span class=\"w\"> </span>buffer\nuncaught<span class=\"w\"> </span>exception:<span class=\"w\"> </span>leantar<span class=\"w\"> </span>failed<span class=\"w\"> </span>with<span class=\"w\"> </span>error<span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">1</span>\nDecompressing<span class=\"w\"> </span><span class=\"m\">3875</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nError:<span class=\"w\"> </span>Process<span class=\"w\"> </span>completed<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"nb\">exit</span><span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">1</span>.\n</code></pre></div>\n<p>Restarting the build had the same result. Can I do anything about that?</p>",
        "id": 418290193,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706280602
    },
    {
        "content": "<p>Add white space to <code>lake-manifest.json</code> for a workaround</p>",
        "id": 418290680,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706280780
    },
    {
        "content": "<p>Anywhere?</p>",
        "id": 418290740,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706280798
    },
    {
        "content": "<p>See also <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Why.20does.20CI.20fail.20on.20my.20branch.3F\">#mathlib4 &gt; Why does CI fail on my branch?</a></p>",
        "id": 418291227,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706280977
    },
    {
        "content": "<p>I added an empty line somewhere. Now it tries to download 4160 files, but unsuccessfully...</p>",
        "id": 418291271,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706280993
    },
    {
        "content": "<p>Oh maybe not an empty line but just some space between existing characters</p>",
        "id": 418291348,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706281018
    },
    {
        "content": "<p>Can you be more precise? This time I added a blank between \"packages\" and \"Dir\", and the build fails immediately :</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>./lake-manifest.json:<span class=\"w\"> </span>improperly<span class=\"w\"> </span>formatted<span class=\"w\"> </span>manifest:<span class=\"w\"> </span>manifest<span class=\"w\"> </span>missing<span class=\"w\"> </span>required<span class=\"w\"> </span>property<span class=\"w\"> </span><span class=\"s1\">'packagesDir'</span>\n</code></pre></div>\n<p>(This is on a Mathlib PR; the one before (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10028\">#10028</a>), which CI was working on shortly before, did not have this problem.)</p>",
        "id": 418292356,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706281311
    },
    {
        "content": "<p>I think Matthew means you should commit this whitespace change to lake-manifest.json and wait for CI to rebuild everything</p>",
        "id": 418292786,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706281439
    },
    {
        "content": "<p>That's what I did (commit and push, then wait to see what CI is doing).</p>",
        "id": 418292923,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706281473
    },
    {
        "content": "<p>Ah, sorrt: the whitespace change shouldn't be inside one of the strings in the json file</p>",
        "id": 418293038,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706281506
    },
    {
        "content": "<p>Add a whitespace at the end of a line, for example</p>",
        "id": 418293089,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706281520
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 418293132,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706281533
    },
    {
        "content": "<p>I did it after a colon for example</p>",
        "id": 418293476,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706281626
    },
    {
        "content": "<p>It would be good if someone with Azure access could <code>lake exe cache put!</code> to fix the cache</p>",
        "id": 418293535,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706281649
    },
    {
        "content": "<p>OK; merging master seems to have worked.<br>\nDo we know what the root cause for this (apparently recurring) problem is?</p>",
        "id": 418293798,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706281728
    },
    {
        "content": "<p><a href=\"#narrow/stream/144837-PR-reviews/topic/.239933.20actually.20check.20cache.20works\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.239933.20actually.20check.20cache.20works</a> it'd be nice if we actually fixed the \"check cache\" step so that we don't have random cache failures</p>",
        "id": 418294322,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706281915
    },
    {
        "content": "<p>Also, a corrupted file should just be skipped, no need to interrupt the whole decompression process</p>",
        "id": 418299039,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706283266
    },
    {
        "content": "<p>Actually it doesn't interrupt the decompression process</p>",
        "id": 418481231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706427702
    },
    {
        "content": "<p>but it does return a nonzero error code, which causes <code>lake exe cache get</code> to fail</p>",
        "id": 418481282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706427727
    },
    {
        "content": "<p>although it is on the last step, so nothing is skipped</p>",
        "id": 418481289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706427735
    },
    {
        "content": "<p>Ah, good to know! Sorry for not checking.</p>",
        "id": 418481647,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706428202
    },
    {
        "content": "<p>This is now fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10063\">#10063</a>, leantar will now remove corrupted files on its own (and you can either run <code>lake build</code> to rebuild the missing files like you would for a partial <code>cache get</code>, or run <code>lake exe cache get</code> again if it was a network issue)</p>",
        "id": 418481735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706428313
    },
    {
        "content": "<p>How do they even get corrupted in the first place? Are we insufficiently handling error output from curl?</p>",
        "id": 418482633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1706429362
    },
    {
        "content": "<p>Not sure if this still happens, but hitting Ctrl-C during the download (after a network stall, for example) used to leave corrupted files</p>",
        "id": 418482743,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706429507
    },
    {
        "content": "<p>Right, but we have IO.FS.rename now. This is solvable.</p>",
        "id": 418482944,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1706429727
    },
    {
        "content": "<p>unknown. We are using <code>IO.FS.rename</code> in the download process already</p>",
        "id": 418484092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706430942
    },
    {
        "content": "<p>What happens if the 4.5 gig download size catches an unsuspecting student out, the original attempt fails, the student deletes 10 gigs of mp3s and tries again?</p>",
        "id": 418486059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706432961
    },
    {
        "content": "<p>I'm not sure I understand the question</p>",
        "id": 418487055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706433949
    },
    {
        "content": "<p>The current architecture is already supposed to be immune to torn files, but <a href=\"https://github.com/leanprover-community/mathlib4/pull/10063\">#10063</a> adds yet another defense layer against bad files</p>",
        "id": 418487126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706433999
    },
    {
        "content": "<p>If you interrupt <code>lake exe cache get</code> halfway through the process, you will get half the files, and all the files you get will be valid. The second attempt will not try to redownload those files, but if somehow you still managed to corrupt some files those files will be deleted and you can rerun <code>lake exe cache get</code> to download better ones</p>",
        "id": 418487243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706434104
    },
    {
        "content": "<p>There is one scenario where I think corrupt files can get through, which is where <code>lake exe cache put</code> is interrupted or is partially successful and uploads torn files to the cloud. In that case every <code>lake exe cache get</code> will download those files, and prior to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10063\">#10063</a> you will get a message like <code>failed to fill whole buffer</code> when unpacking it (but this message is otherwise harmless, except that you didn't get the file and something may need to be recompiled). After <a href=\"https://github.com/leanprover-community/mathlib4/pull/10063\">#10063</a> you will instead get the message <code>removing corrupted file</code> and you will still have to rebuild it; if you use <code>lake exe cache get</code> it will download the bad file again, notice it is corrupted and delete it again</p>",
        "id": 418487471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706434342
    },
    {
        "content": "<p>The \"add whitespace to <code>lake-manifest.json</code>\" trick is a way to work around bad files in the cloud</p>",
        "id": 418487507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706434397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/build.20failing/near/418487055\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I understand the question</p>\n</blockquote>\n<p>I think you answered it anyway. Maybe \"I got interrupted because my drive filled up\" is no different to \"I pressed Ctrl-C\"</p>",
        "id": 418487891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706434795
    },
    {
        "content": "<p>It is slightly different since different parts of the code are likely to fail in that case. The <code>failed to fill whole buffer</code> error is mainly associated with <code>.ltar</code> files which are truncated due to network or curl issues, while if you run out of space during unpacking it is the <code>.olean</code> writing that will fail. <a href=\"https://github.com/leanprover-community/mathlib4/pull/10063\">#10063</a> adds an additional protection against issues in the <code>.olean</code> writing stage, namely that it rolls back (deletes) any files it produced in the course of an unpacking operation that is aborted halfway through due to an IO error (such as running out of disk space).</p>\n<p>So this avoids the situation where <code>lake exe cache get</code> runs, <code>leantar</code> gives an error about the disk being full (and the user ignores this for some reason), and then running vscode results in lean segfaulting because the olean files are corrupt. (Although I think this wouldn't happen anyway because lake would notice the hash doesn't match and rebuild it.) Now <code>leantar</code> will avoid creating half a file and lake will try to rebuild anything that wasn't unpacked.</p>",
        "id": 418488337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706435222
    }
]