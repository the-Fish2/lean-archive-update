[
    {
        "content": "<p>Recently, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> generalized many theorems from <code>[NormedField K] [NormedSpace K E]</code> to <code>[*NormedRing R] [NormedAddCommGroup E] [Module R E] [BoundedSMul R E]</code>. While the latter spelling is more flexible (e.g., it allows using <code>*SMul</code> classes instead of <code>Module</code>), it is longer and a less readable, at least for a new user. What should we do?</p>\n<ul>\n<li>continue migration to <code>BoundedSMul</code>?</li>\n<li>relax TC assumptions on <code>K</code> in <code>NormedSpace K E</code> to <code>NormedRing</code> and use <code>[NormedSpace K E]</code> (or rename it to <code>NormedModule K E</code>)?</li>\n</ul>",
        "id": 421053315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707749911
    },
    {
        "content": "<p>Eric, are there situations when we should care about <code>BoundedSMul R E</code> without <code>Module R E</code> assumption?</p>",
        "id": 421053565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707749979
    },
    {
        "content": "<p>In practice right now, probably not; but in future, we might want it for <code>DistribMulAction G E</code>, for instance with <code>G := Units R</code></p>",
        "id": 421056829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707750728
    },
    {
        "content": "<p>Note that <code>[BoundedSMul R E]</code> needs <code>[Zero R]</code> and <code>[Zero E]</code></p>",
        "id": 421057091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707750787
    },
    {
        "content": "<p>Then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonUnitalSeminormedRing.to_boundedSMul#doc\">docs#NonUnitalSeminormedRing.to_boundedSMul</a> is the answer I should have given</p>",
        "id": 421057694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707750922
    },
    {
        "content": "<p>What do you think about a mixed approach?</p>\n<ul>\n<li>Allow <code>SeminormedRing</code> in <code>NormedSpace</code>, still assume <code>norm_smul_le</code>;</li>\n<li>Assume <code>[NormedSpace R M]</code> instead of <code>[Module R M] [BoundedSMul R M]</code>;</li>\n<li>Use <code>BoundedSMul</code> if a lemma works for a typeclass weaker than <code>Module</code>?</li>\n</ul>",
        "id": 421074840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707755080
    },
    {
        "content": "<p>Originally, I had intended to refactor <code>NormedSpace K V</code> to a be a <code>K</code>-bimodule, along the same lines as <a href=\"https://github.com/leanprover-community/mathlib4/pull/7152\">#7152</a> (in fact, I did this already in Lean3 but it never landed)</p>",
        "id": 421075964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707755381
    },
    {
        "content": "<p>So my preference would be to leave <code>NormedSpace</code> alone for now, to avoid that refactor becoming harder</p>",
        "id": 421076184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707755426
    },
    {
        "content": "<p>I see, thanks for the explanation.</p>",
        "id": 421076936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707755611
    },
    {
        "content": "<p>Then I'll review your <code>Asymptotics</code> PR today.</p>",
        "id": 421077115,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707755652
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10519\">#10519</a> adds another generalization in this direction</p>",
        "id": 423189433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708794990
    }
]