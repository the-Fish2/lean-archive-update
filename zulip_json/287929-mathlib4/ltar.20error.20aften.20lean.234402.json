[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, calling your attention to the build failure at <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9493155801/job/26161439009\">https://github.com/leanprover-community/mathlib4/actions/runs/9493155801/job/26161439009</a>, which is my attempt to test Mathlib on <a href=\"https://github.com/leanprover/lean4/pull/4402\">lean#4402</a>.</p>\n<p>Unfortunately, the <code>.trace</code> file has changed format, and <code>ltar</code> no longer accepts it.</p>",
        "id": 444379353,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718252673
    },
    {
        "content": "<p>Can I leave it to the two of you to sort this out? Unfortunately there is some time pressure, as we would like to have <a href=\"https://github.com/leanprover/lean4/pull/4402\">lean#4402</a> in <code>v4.9.0-rc2</code>, which I am otherwise ready to release.</p>\n<p>If initial triage suggests this will not be easy to fix, or there isn't availability to fix it soon, that would be helpful to hear, so I can proceed with <code>v4.9.0-rc2</code> without including <a href=\"https://github.com/leanprover/lean4/pull/4402\">lean#4402</a>.</p>",
        "id": 444379441,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718252757
    },
    {
        "content": "<p>(Also just pinging <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> as they have moving pieces in the <code>rc2</code> release!)</p>",
        "id": 444379506,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718252776
    },
    {
        "content": "<p>I'll try to get to this today or tomorrow</p>",
        "id": 444379555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718252807
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 444379566,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718252820
    },
    {
        "content": "<p>it will be helpful in the meanwhile if <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> summarizes the content of the change</p>",
        "id": 444379598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718252846
    },
    {
        "content": "<p>Sorry about springing this on short notice: unfortunately Mathlib CI disables the \"check cache\" step on <code>lean-pr-testing-NNNN</code> branches, so I didn't notice this until a manual check at the last moment. I've modified <code>cache</code> already so it doesn't expect a <code>.log.json</code> file (which are no longer used).</p>",
        "id": 444379747,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718252943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/444379598\">said</a>:</p>\n<blockquote>\n<p>it will be helpful in the meanwhile if <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> summarizes the content of the change</p>\n</blockquote>\n<p><code>.trace</code> and <code>.log.json</code> have been merged, so now <code>.trace</code> is a JSON file with <code>depHash</code> and <code>log</code> fields.  </p>\n<p>Also, module <code>.hash</code> files are now reliably regenerated on rebuild (and on <code>--rehash</code>) addressing <a href=\"https://github.com/leanprover/lean4/pull/2751\">lean4#2751</a>. I don't think that shoud require any cache changes, though.</p>",
        "id": 444379984,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718253120
    },
    {
        "content": "<p>I get the following error when trying to run builds including <a href=\"https://github.com/leanprover/lean4/pull/4402\">lean#4402</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"n\">lean4</span><span class=\"w\"> </span><span class=\"n\">build</span>\n<span class=\"bp\">✖</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">113</span><span class=\"bp\">/</span><span class=\"mi\">172</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Building</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Char</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"bp\">.</span><span class=\"n\">BuildMetadata</span><span class=\"bp\">.</span><span class=\"n\">depHash</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.&gt;</span><span class=\"w\"> </span><span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">Dlinter</span><span class=\"bp\">.</span><span class=\"n\">missingDocs</span><span class=\"bp\">=</span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">./././.</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">olean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ilean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"c1\">--json</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">utf8Size_le_four'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"bp\">⣾</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">165</span><span class=\"bp\">/</span><span class=\"mi\">172</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">HashMap</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error itself is about a missing constant, this is just usual migration stuff. The point I want to highlight is the first line, which is a failure of lake to parse its own hash files</p>",
        "id": 444450028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718280367
    },
    {
        "content": "<p>The resulting trace files are also problematic from a caching perspective:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Batteries</span><span class=\"bp\">/</span><span class=\"n\">CodeAction</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n<span class=\"o\">{</span><span class=\"s2\">\"log\"</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"o\">[{</span><span class=\"s2\">\"message\"</span><span class=\"o\">:</span>\n<span class=\"w\">   </span><span class=\"s2\">\".&gt; LEAN_PATH=././.lake/build/lib LD_LIBRARY_PATH=././.lake/build/lib /home/mario/Documents/lean/lean4/build/release/stage1/bin/lean -Dlinter.missingDocs=true ././././Batteries/CodeAction.lean -R ./././. -o ././.lake/build/lib/Batteries/CodeAction.olean -i ././.lake/build/lib/Batteries/CodeAction.ilean -c ././.lake/build/ir/Batteries/CodeAction.c --json\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"level\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"trace\"</span><span class=\"o\">}],</span>\n<span class=\"w\"> </span><span class=\"s2\">\"depHash\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"17092602937924886406\"</span><span class=\"o\">}</span><span class=\"bp\">⏎</span>\n</code></pre></div>\n<p>I would <em>really</em> like it if a clean build produced no log messages, especially not one containing <code>/home/mario/Documents/</code></p>",
        "id": 444450488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718280527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 444450591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718280564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/444450488\">said</a>:</p>\n<blockquote>\n<p>I would <em>really</em> like it if a clean build produced no log messages, especially not one containing <code>/home/mario/Documents/</code></p>\n</blockquote>\n<p>The contents of the log have not changed with this PR. The old <code>log.json</code> also had this (and it was previously cached). Recall that the point of the cached log is precisely to retain the log of a clean build (so that it can potentially fail if a a future build sues a more restrictive log level (e.g., <code>--wfail</code> or <code>--iofail</code>).</p>",
        "id": 444486457,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718290887
    },
    {
        "content": "<p>However, I do agree that, for caching, you probably do not want to include the log.</p>",
        "id": 444486867,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718290977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/444450028\">said</a>:</p>\n<blockquote>\n<p>The point I want to highlight is the first line, which is a failure of lake to parse its own hash files</p>\n</blockquote>\n<p>What was the contents of <code>Batteries/Data/Char.trace</code>? If it was the old numeric trace, that would be why.</p>",
        "id": 444493329,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718292455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/444486867\">said</a>:</p>\n<blockquote>\n<p>However, I do agree that, for caching, you probably do not want to include the log.</p>\n</blockquote>\n<p>Actually my plan is not to completely remove the log, but rather to remove only the verbose messages. The mathlib cache actually does include failing files, e.g. when someone pushes a file with errors, and it is still useful to get replayed error messages after downloading the run results. But it is surprising that these messages are logged even when verbosity level is set low. I spoke with <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> about this, and we agreed that the most sensible behavior would be to only store the messages that were actually printed at the selected verbosity level, and possibly also the verbosity level setting itself so that you know not to replay if the verbosity level is changed. Logging all messages seems like a dangerous thing, since people could unknowingly be printing quite a lot at higher verbosity levels, not realizing that these are effectively always logged \"just in case\" they are replayed at higher verbosity later.</p>",
        "id": 444536203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718304376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> leantar v0.1.12 is pushed and compiled releases are ready. It is fully backward compatible as usual, so all you need to do is update <code>LEANTARVERSION</code> in Cache.IO on nightly-testing, and it can be PR'd to master in advance of <a href=\"https://github.com/leanprover/lean4/pull/4402\">lean4#4402</a> landing.</p>",
        "id": 444542926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718306409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13808\">#13808</a></p>",
        "id": 444567122,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718314397
    },
    {
        "content": "<p>actually maybe don't auto merge, make sure the cache works first</p>",
        "id": 444567220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718314445
    },
    {
        "content": "<p>There's a cache check step in CI: it clears the oleans, and checks that <code>lake exe cache get; lake build --no-build</code> works.</p>",
        "id": 444567264,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718314479
    },
    {
        "content": "<p>But yes, I'll also manually verify!</p>",
        "id": 444567275,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718314487
    },
    {
        "content": "<p>(Unfortunately we disable this step on <code>lean-pr-testing-NNNN</code> branches, which is why we didn't catch this problem in the first place!)</p>",
        "id": 444567355,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718314539
    },
    {
        "content": "<p>it also needs testing on the 4402 branch itself</p>",
        "id": 444567364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718314545
    },
    {
        "content": "<p>I did some local testing that ltar files are modified in the expected way with both versions of lean, but I did not test on mathlib</p>",
        "id": 444567472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718314597
    },
    {
        "content": "<p>Ah, good point. I'll cherry-pick now.</p>",
        "id": 444567508,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718314623
    },
    {
        "content": "<p>Has anyone else been getting errors like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"n\">get</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">815</span><span class=\"n\">b0d854b744bbf</span><span class=\"bp\">.</span><span class=\"n\">ltar</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">file</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">13</span><span class=\"n\">cb55e27cd34313</span><span class=\"bp\">.</span><span class=\"n\">ltar</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">file</span>\n<span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">leantar</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>since rc2? I'm worried that I broke something in leantar 0.1.12, but I'm still isolating the problem.</p>",
        "id": 444802275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718405568
    },
    {
        "content": "<p>Aha, I think I know the source of the issue: this is on a mathlib branch prior to <a href=\"https://github.com/leanprover-community/mathlib4/pull/13808\">#13808</a>, meaning it uses leantar 0.1.11 which does not understand the new ltar or trace file format. There is no problem with the ltar file, it is using the old format, but the .trace file inside the .lake directory is using the new json format, which neither old leantar nor old lake can interpret. To summarize:</p>\n<ul>\n<li>If you have old .trace files after bumping lean to rc2 or switching to an rc2 branch (backward compatibility), leantar will work and lake will fail</li>\n<li>If you have new (rc2) .trace files after downgrading to rc1 or switching to an rc1 branch (forward compatibility), both leantar and lake will fail</li>\n</ul>\n<p>The solution in both cases is to <code>rm -rf .lake</code> when switching between versions.</p>",
        "id": 444803915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718406657
    },
    {
        "content": "<p>I'm going to build in some forward compatibility for the next leantar version, so this doesn't happen in the future</p>",
        "id": 444804066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718406794
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13843\">#13843</a></p>",
        "id": 444814214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718413793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this compatibility a common problem? My working assumption was that Lake traces were only ever used by the same Lean/Lake version as otherwise the module needs rebuilding anyway (as the Lean version changed). Or are you saying the Lake errors rather than simply rebuilding the module?</p>",
        "id": 445138213,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718632529
    },
    {
        "content": "<p>Lake seems to fail. Upgrade scenario:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>.lake\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>co<span class=\"w\"> </span>14f25859<span class=\"w\">  </span><span class=\"c1\"># this is 4.8.0-rc1</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Batteries.CodeAction.Misc\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>co<span class=\"w\"> </span>47e4cc5c<span class=\"w\">  </span><span class=\"c1\"># this is 4.9.0-rc2</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Batteries.CodeAction.Misc\n<span class=\"go\">✖ [4/4] Building Batteries.CodeAction.Misc</span>\n<span class=\"go\">trace: ././.lake/build/lib/Batteries/CodeAction/Misc.trace: invalid trace file: Lake.BuildMetadata.depHash: String expected</span>\n<span class=\"go\">trace: .&gt; LEAN_PATH=././.lake/build/lib LD_LIBRARY_PATH=././.lake/build/lib /home/mario/.elan/toolchains/leanprover--lean4---v4.9.0-rc2/bin/lean -Dlinter.missingDocs=true ././././Batteries/CodeAction/Misc.lean -R ./././. -o ././.lake/build/lib/Batteries/CodeAction/Misc.olean -i ././.lake/build/lib/Batteries/CodeAction/Misc.ilean -c ././.lake/build/ir/Batteries/CodeAction/Misc.c --json</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:6:0: failed to read file '././.lake/build/lib/Batteries/Lean/Position.olean', invalid header</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:21:5: unknown namespace 'Lean'</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:27:24: expected token</span>\n<span class=\"go\">...</span>\n</code></pre></div>",
        "id": 445223314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718657660
    },
    {
        "content": "<p>Downgrade scenario fails in the same way:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>.lake\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>co<span class=\"w\"> </span>47e4cc5c<span class=\"w\">  </span><span class=\"c1\"># this is 4.9.0-rc2</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Batteries.CodeAction.Misc\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>co<span class=\"w\"> </span>14f25859<span class=\"w\">  </span><span class=\"c1\"># this is 4.8.0-rc1</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Batteries.CodeAction.Misc\n<span class=\"go\">[4/4] Building Batteries.CodeAction.Misc</span>\n<span class=\"go\">trace: .&gt; LEAN_PATH=././.lake/build/lib LD_LIBRARY_PATH=././.lake/build/lib /home/mario/.elan/toolchains/leanprover--lean4---v4.8.0-rc1/bin/lean -Dlinter.missingDocs=true ././././Batteries/CodeAction/Misc.lean -R ./././. -o ././.lake/build/lib/Batteries/CodeAction/Misc.olean -i ././.lake/build/lib/Batteries/CodeAction/Misc.ilean -c ././.lake/build/ir/Batteries/CodeAction/Misc.c --json</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:6:0: failed to read file '././.lake/build/lib/Batteries/Lean/Position.olean', invalid header</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:21:5-21:9: unknown namespace 'Lean'</span>\n<span class=\"go\">error: ././././Batteries/CodeAction/Misc.lean:27:24: expected token</span>\n<span class=\"go\">...</span>\n</code></pre></div>",
        "id": 445223585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718657772
    },
    {
        "content": "<p>This issue seems likely to hit everyone whenever bumping a project across the 4.8.0 -&gt; 4.9.0 boundary or jumping between branches on opposite sides of that boundary. The fix is simple but not particularly well suggested by the error message (unless you happen to be aware that nuking the lake folder is a panacea for lake state issues)</p>",
        "id": 445224239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718658035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 445224467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718658110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> The problem there appears to be that Lake is assuming the olean is up-to-date because the trace file is missing/invalid and (presumably) the modification time of the olean is greater than that of its inputs. However, since this is crossing a toolchain boundary, Lean gets mad.</p>",
        "id": 445225495,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718658512
    },
    {
        "content": "<p>(The same thing would also happen if the trace file was removed.)</p>",
        "id": 445226107,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718658672
    },
    {
        "content": "<p>Part of this is a question of what Lake should do without a trace file. Currently, it falls back to modification time. With that in mind, though, I probably should have made the tracing backwards-compatible.</p>",
        "id": 445226789,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718658915
    },
    {
        "content": "<p>I think the damage is already done. The best we can do at this point is publicize the fix for people running into this issue this month. Best to focus on making sure that it doesn't happen in the future, and probably switching to json gives you the needed forward compatibility already.</p>",
        "id": 445226987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718659020
    },
    {
        "content": "<p>Actually that's not quite true, there is still time to slip in a backward compatibility fix before 4.9.0 stable goes out. That won't fix the pre-existing forward compatibility issue in 4.8.0, but downgrades are relatively less common anyway.</p>",
        "id": 445227132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718659083
    },
    {
        "content": "<p>the simplest backward compatibility fix here is not even to read the old format and just treat a \"malformed .trace file\" as out of date</p>",
        "id": 445227510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718659216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/445224239\">said</a>:</p>\n<blockquote>\n<p>[...] unless you happen to be aware that nuking the lake folder is a panacea for lake state issues</p>\n</blockquote>\n<p>When all you have is a nuke, everything looks like a state issue, they say?</p>",
        "id": 445230893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718660759
    },
    {
        "content": "<p>I think it would help a lot to encourage everyone to update their PRs to v4.9.0, <strong>and</strong> to take that opportunity to publicise the fix</p>",
        "id": 445231013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718660819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/445227510\">said</a>:</p>\n<blockquote>\n<p>the simplest backward compatibility fix here is not even to read the old format and just treat a \"malformed .trace file\" as out of date</p>\n</blockquote>\n<p>To clairfy, are you suggesting I should treat missing and invalid traces differently?</p>",
        "id": 445238188,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718663674
    },
    {
        "content": "<p>I guess if the trace is missing then it's also out of date?</p>",
        "id": 445238277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718663736
    },
    {
        "content": "<p>This is what I implemented in leantar in any case, there is no date matching</p>",
        "id": 445238377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718663785
    },
    {
        "content": "<p>The date matching is valuable when other systems may also provide the file (For example, this is what prevents Lake from rebuilding core if Make has already built it.)</p>",
        "id": 445238478,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718663863
    },
    {
        "content": "<p>that sounds like a specialized option, possibly core-only</p>",
        "id": 445238569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718663901
    },
    {
        "content": "<p>(Theoretically this would also have worked with cache were it not to also cache traces.)</p>",
        "id": 445238616,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718663935
    },
    {
        "content": "<p>I think it is reasonable that alternative build systems (like <code>cache</code> to some extent) should also be responsible for producing valid .trace files</p>",
        "id": 445238620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718663939
    },
    {
        "content": "<p>a project that works with build systems not satisfying this invariant should be signaled in some way</p>",
        "id": 445238725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718663998
    },
    {
        "content": "<p>Given only the .olean files / everything except .trace files, I don't see any obvious correct method for validating that these files are not out of date and rebuilding the ones that are</p>",
        "id": 445239049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718664152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/445238620\">said</a>:</p>\n<blockquote>\n<p>I think it is reasonable that alternative build systems (like <code>cache</code> to some extent) should also be responsible for producing valid .trace files</p>\n</blockquote>\n<p>Is there a speciifcation for <code>.trace</code> files? I don't see how any alternative build system (eg <code>nix</code> or <code>bazel</code>) can reasonably assemble them today, short of invoking <code>lake</code> and hoping for it not to build any targets but the specified one</p>",
        "id": 445245127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718667967
    },
    {
        "content": "<p>the structure is specified, but not the hash itself inside <code>depHash</code> (although I did write an external implementation of the hash algorithm for <a href=\"https://github.com/digama0/lean-cache\">lean-cache</a> once)</p>",
        "id": 445245228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718668074
    },
    {
        "content": "<p>But <code>lake</code> could offer a mode where it only computes hashes and assumes everything else is up to date</p>",
        "id": 445245315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718668120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ltar.20error.20aften.20lean.234402/near/445245228\">said</a>:</p>\n<blockquote>\n<p>although I did write an external implementation of the hash algorithm for <a href=\"https://github.com/digama0/lean-cache\">lean-cache</a> once</p>\n</blockquote>\n<p>Presumably the format has changed since then; if the hash isn't specified, I assume it has also changed?</p>",
        "id": 445246595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718668912
    }
]