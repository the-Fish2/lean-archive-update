[
    {
        "content": "<p>I just came across a <code>have</code> statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasFDerivAt</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>in <code>Mathlib.Geometry.Euclidean.Inversion.Calculus</code> where the <code>_</code> is determined by the proof. When the proof inevitably breaks, e.g. on <code>nightly-testing</code> right now, there's no easy way to even sorry the proof, without changing back to master, working out what term goes there, and filling it in manually.</p>\n<p>Request 1: would someone mind fixing this instance on <code>master</code>?</p>\n<p>Request 2: could we be more skeptical about allowing such placeholders in proofs, and resisting them during review?</p>\n<p>I know they are sometimes convenient, but they add up to a maintenance burden that I doubt we can afford.</p>",
        "id": 427014286,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710653178
    },
    {
        "content": "<p>I am dubious of the feasibility of applying this principle in general, because far more common than partially specified have statements are completely unspecified have statements <code>have := ...</code>, which suffer from exactly the same issue</p>",
        "id": 427015698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710653557
    },
    {
        "content": "<p>I also want to remark that having a working mathlib open in a <em>separate folder / vscode instance</em> is indispensable for debugging nightly-testing breakage and you should absolutely be doing this if you aren't already</p>",
        "id": 427015938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710653631
    },
    {
        "content": "<p>(Yes, I have this. It's still annoying to have to go find the file in the other instance.)</p>",
        "id": 427016777,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710653857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427014286\">said</a>:</p>\n<blockquote>\n<p>Request 1: would someone mind fixing this instance on <code>master</code>?</p>\n<p>Request 2: could we be more skeptical about allowing such placeholders in proofs, and resisting them during review?</p>\n<p>I know they are sometimes convenient, but they add up to a maintenance burden that I doubt we can afford.</p>\n</blockquote>\n<p>Actually I don't think we should do either of these. <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> and I were talking about writing a tactic to automatically compute the derivative of a function using <code>fun_prop</code>. So to me the solution is to write that tactic (shouldn't be so hard but I haven't had time to tinker) and use it.</p>",
        "id": 427067720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710668218
    },
    {
        "content": "<p>I think Scott's issue here is that the proof <em>outside</em> the have is more fragile and harder to fix, as it is now less clear what particular normal form was chosen for the derivative</p>",
        "id": 427068047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710668304
    },
    {
        "content": "<p>I think we need some guidelines for tactics generating data. They share similarities to non terminal simp which is discouraged as the resulting goal is highly unstable and that has a very high chance of breaking the rest of the proof.</p>\n<p>What about having <code>have? := by &lt;tactic&gt;</code> with code action replacing it with <code>have : X := by &lt;tactic&gt;</code>.</p>",
        "id": 427073188,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710669726
    },
    {
        "content": "<p>I don't think they \"have a very high chance of breaking the rest of the proof\", eg in that case a <code>compute_deriv</code> tactic would produce data corresponding to the shape of the input, so its output is basically unique</p>",
        "id": 427074287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710670019
    },
    {
        "content": "<p>The tactic I have can very easily compute the derivative of <code>fun x=&gt; c + x</code> either as <code>fun x dx=&gt; dx</code> or <code>fun x dx =&gt; 0 + dx</code>. And by adding a theorem theorem to the environment you can switch from one to another.</p>",
        "id": 427074840,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710670170
    },
    {
        "content": "<p>Please note that this particular case is an actual broken proof. :-)</p>",
        "id": 427075321,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710670295
    },
    {
        "content": "<p>Yes that is why I'm suggesting having <code>have?</code> that would put the fully elaborated type in the code allowing you to use <code>sorry</code> if the proof breaks.</p>",
        "id": 427076812,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710670696
    },
    {
        "content": "<p>(My response was mostly directed at Yaël. :-)</p>",
        "id": 427078354,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710671136
    },
    {
        "content": "<p>Well, you don't know how robust the tactic I'm thinking of is, since it doesn't exist yet <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 427078673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710671220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427075321\">said</a>:</p>\n<blockquote>\n<p>Please note that this particular case is an actual broken proof. :-)</p>\n</blockquote>\n<p>Is it broken because the inferred type of the <code>have</code> is wrong though?</p>",
        "id": 427079253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710671370
    },
    {
        "content": "<p>My impression is that this is just a debugging technique and actually once all is said and done it will turn out that the original proof was fine and the actual breakage is unrelated to changes in this <code>have</code></p>",
        "id": 427079439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710671418
    },
    {
        "content": "<p>No, it's just more annoying to debug.</p>",
        "id": 427080044,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710671574
    },
    {
        "content": "<p>Maybe what you would rather have is some kind of <code>robustify</code> code action or other syntax transformer which inserts lots of intermediate goals and re-asserts the result of every step so that errors are more localized. I realize that this is why we have rules against non-terminal simp, but I think it may be a \"why not both?\" situation, we definitely want better tools for fixing breakage regardless</p>",
        "id": 427080268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710671637
    },
    {
        "content": "<p>Another great code action might be <code>sorryify</code>, which e.g. replaces <code>have h : P := by expensive_tactic</code> with <code>have h : P := by sorry_wrapper expensive_tactic</code>.</p>\n<p>(The idea of using the wrapper is that there would be in inverse code action to restore the proof, of course.)</p>",
        "id": 427081412,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710671940
    },
    {
        "content": "<p>(Presumably there are other things that could be <code>sorrifyied</code> beyond just the RHS of have.)</p>",
        "id": 427081459,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710671962
    },
    {
        "content": "<p>The intent here is working with longer proofs. Although of course proof incrementality, hopefully landing in the next release or two, will make this much less important.</p>",
        "id": 427081605,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710672001
    },
    {
        "content": "<p>(Regarding <code>sorry_wrapper</code>, there was discussion about sorrying out tactics and tactic blocks that has moved to <a href=\"#narrow/stream/287929-mathlib4/topic/sorry.20a.20tactic.20block/near/427193728\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/sorry.20a.20tactic.20block/near/427193728</a>)</p>",
        "id": 427206816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710705623
    }
]