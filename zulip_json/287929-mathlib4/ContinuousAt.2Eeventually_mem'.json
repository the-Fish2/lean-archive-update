[
    {
        "content": "<p>Is this lemma reasonable to add?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ContinuousAt.eventually_mem'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fc</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fc</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>It almost exists now, as <code>Filter.Tendsto.eventually_mem</code>.  However, that lemma has no connection between the <code>x</code>s occuring in the two locations.  I turn out to use <code>apply ContinuousAt.eventually_mem'</code> a lot, and a lot of those applies no longer infer if replaced by <code>Filter.Tendsto.eventually_mem</code>.</p>",
        "id": 422664457,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708534723
    },
    {
        "content": "<p>Hmm, actually I don't think I understand why it doesn't infer.  I should produce a MWE, but unfortunately I have to head off now.</p>",
        "id": 422665073,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708534904
    },
    {
        "content": "<p>Why the prime? Is there an unprimed version?</p>",
        "id": 422665874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708535123
    },
    {
        "content": "<p>The unprimed version is <code>Filter.Tendsto.eventually_mem</code>, but maybe that‚Äôs fine.</p>",
        "id": 422666181,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708535207
    },
    {
        "content": "<p>That is, the goal was not to shadow when using dot notation, but I suppose the new one should match when the old one did.</p>",
        "id": 422675184,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708538078
    },
    {
        "content": "<p>(Since ContinuousAt is a Filter.Tendsto)</p>",
        "id": 422675240,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708538101
    },
    {
        "content": "<p>I don‚Äôt think there would be any shadowing.</p>",
        "id": 422675517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708538170
    },
    {
        "content": "<p>There‚Äôs definitely shadowing: currently if you have a <code>c : ContinuousAt</code> and you do <code>c.eventually_mem</code> you get <code>Filter.Tendsto.eventually_mem</code>.</p>",
        "id": 422677622,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708538984
    },
    {
        "content": "<p>So my guess on reflection is that adding this is a clean (small) win, as all/nearly all shadowing examples will still work, and the new one is better for inference.  If that seems reasonable I can make a PR to check the ‚Äústill work‚Äù part.</p>",
        "id": 422706254,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708550181
    },
    {
        "content": "<p>Yes, I think your proposed new lemma is precisely what you already get by doing <code>c.eventually_mem</code> but with better inference properties, so I think it is a good idea.</p>",
        "id": 422707152,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708550636
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10838\">https://github.com/leanprover-community/mathlib4/pull/10838</a></p>",
        "id": 422708535,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708551323
    },
    {
        "content": "<p>Indeed, all of Mathlib built without complaint.</p>",
        "id": 422714657,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708554360
    },
    {
        "content": "<p>(And I can reconfirm that this one is way better for use with <code>apply</code>.)</p>",
        "id": 422714731,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708554378
    }
]