[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOpen_Ioi#doc\">docs#isOpen_Ioi</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOpen_lt%27#doc\">docs#isOpen_lt'</a> with different assumptions:</p>\n<ul>\n<li><code>isOpen_Ioi</code> assumes <code>[LinearOrder α] [OrderClosedTopology α]</code></li>\n<li><code>isOpen_lt'</code> assumes <code>[Preorder α] [OrderTopology α]</code></li>\n</ul>\n<p>then we have lemmas randomly choosing between these two assumptions, sometimes duplicating API. How should we deal with this?</p>",
        "id": 419640633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706993659
    },
    {
        "content": "<p>/poll What should we do with isOpen_Ioi etc?<br>\nadd typeclasses <code>OpenIoiTopology</code> and <code>OpenIioTopology</code> with instances for LinearOrder+ClosedI**Topology and OrderTopology<br>\ndecide that we don't care about OrderTopology unless it's a LinearOrder, migrate to ClosedI**Topology everywhere</p>",
        "id": 419640767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706993770
    },
    {
        "content": "<p><code>Ioi (0 : Real x Real)</code> is not open, which I take as a strong argument towards the second option</p>",
        "id": 419644528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706996964
    },
    {
        "content": "<p>I don't know if it's possible to describe the topology in terms of a preorder so that it gives the correct answer for (indexed) products of linear orders.</p>",
        "id": 419650382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707002165
    },
    {
        "content": "<p>I have an answer in case of finite products:</p>\n<ul>\n<li>introduce a distance between points so that <code>x</code> and <code>y</code> are at distance <code>1</code> if <code>x ≤ y</code> and <code>Icc x y</code> is a chain;</li>\n<li>let <code>n</code> be the maximal distance between points;</li>\n<li>for each <code>x</code>, the set of points <code>y</code> such that <code>x &lt; y</code> and they're at distance <code>n</code> is open, same with reversed roles;</li>\n<li>the topology is generated by sets like <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> this</li>\n</ul>",
        "id": 419662832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707015187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> related question: am I right that a <code>SuccOrder</code> is a disjoint union of linear orders? Is there a reason to care about non linearly ordered <code>SuccOrder</code>s?</p>",
        "id": 419663016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707015340
    },
    {
        "content": "<p>No, that's incorrect. <code>SuccOrder</code> only tells you local information. As soon as there are infinitely many elements between <code>x</code> and <code>y</code>, <code>SuccOrder</code> doesn't tell you anything about how they're related.</p>",
        "id": 419681119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707035886
    },
    {
        "content": "<p>Eg take <code>N x_lex (N x N)</code></p>",
        "id": 419681145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707035926
    },
    {
        "content": "<p>This is a bunch of copies of <code>N</code> (hence a <code>SuccOrder</code>) ordered non-linearly (hence not a disjoint union of linear orders)</p>",
        "id": 419681181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707035976
    },
    {
        "content": "<p>So, it makes sense to prove, e.g., <code>[Preorder α] [SuccOrder α] [PredOrder α] : DiscreteTopology α</code> without <code>LinearOrder α</code> assumption. Then we're back to my original question.</p>",
        "id": 419681244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707036021
    },
    {
        "content": "<p>I'm not claiming we care about those examples in practice, however. They just happen to naturally fit my definition.</p>",
        "id": 419681246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707036024
    },
    {
        "content": "<p>Yeah no, I wouldn't worry too much about trying to include those examples</p>",
        "id": 419681284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707036084
    },
    {
        "content": "<p>Then I'm going to rewrite <code>Topology/Order/Basic</code> so that we assume <code>ClosedIxxTopology</code> for lemmas like this.</p>",
        "id": 419681362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707036156
    },
    {
        "content": "<p>(and probably split it into <code>OrderClosedTopology</code> and <code>OrderTopology</code>)</p>",
        "id": 419681373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707036174
    },
    {
        "content": "<p>Yeah that makes sense. Btw I think we need to signal more clearly what typeclasses are of the form \"Your topology is exactly blah\" vs \"Your topology has property blah\".</p>",
        "id": 419681480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707036300
    },
    {
        "content": "<p>I suggest that \"move things around\" and \"rename typeclasses\" are different PRs.</p>",
        "id": 419681519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707036341
    },
    {
        "content": "<p>Yes of course, although I was more thinking of rewriting the typeclasses docstrings rather than renaming them in my previous message</p>",
        "id": 419681694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707036497
    },
    {
        "content": "<p>That's even easier. I didn't check the docstrings for a while.</p>",
        "id": 419681707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707036523
    }
]