[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">ℕ</span> <span class=\"c1\">-- ExteriorAlgebra.instZero ℕ</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n<span class=\"c1\">-- import Mathlib.LinearAlgebra.ExteriorAlgebra.Grading</span>\n</code></pre></div>\n<p>Why do we need exterior algebras to know that the natural numbers have a zero?</p>",
        "id": 409942700,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703541612
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.instZero#doc\">docs#ExteriorAlgebra.instZero</a></p>",
        "id": 409943126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703541956
    },
    {
        "content": "<p>Why do we have this instance and why is it in that file?</p>",
        "id": 409943176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703541987
    },
    {
        "content": "<p>From the source:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">MulZeroClass.toZero</span>\n</code></pre></div>",
        "id": 409943179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703541997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Exterior.20algebras.20everywhere.2E.2E.2E/near/409943176\">said</a>:</p>\n<blockquote>\n<p>Why do we have this instance and why is it in that file?</p>\n</blockquote>\n<p>Because during the port, review often didn't care about this kind of thing</p>",
        "id": 409943194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703542023
    },
    {
        "content": "<p>I'll test whether we can delete it now.</p>",
        "id": 409943214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703542057
    },
    {
        "content": "<p>Another answer would be \"I don't know, you tell me!\"; you're the author of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5459\">#5459</a>, though perhaps not the author of that line</p>",
        "id": 409943280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703542134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> is the author of these lines.</p>",
        "id": 409943368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703542231
    },
    {
        "content": "<p>I'm testing a fix with less side-effects (locally change the priority)</p>",
        "id": 409943476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703542363
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9274\">#9274</a></p>",
        "id": 409943570,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703542503
    },
    {
        "content": "<p>What goes wrong without that instance?</p>",
        "id": 409943722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703542690
    },
    {
        "content": "<p>Elaboration timeout. I don't know why.</p>",
        "id": 409943927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703542947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Exterior.20algebras.20everywhere.2E.2E.2E/near/409943368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> is the author of these lines.</p>\n</blockquote>\n<p>Indeed, although I do not remember all the details, it seemed a good idea at the time <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409986070,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1703575525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">ℕ</span> <span class=\"c1\">-- LinearOrderedCommMonoidWithZero.toZero</span>\n</code></pre></div>\n<p>which looks a bit more convincing.</p>\n<p>What I find strange is that there seems to be no explicit <code>Zero Nat</code> instance. Replacing the import by <code>Mathlib.Data.Nat.Basic</code> gives \"CommMonoidWithZero.toZero\".</p>",
        "id": 410001036,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703583726
    },
    {
        "content": "<p>Part of the problem here is that all the <code>Foo.toBar</code> instances have the default priority, and also <a href=\"https://github.com/leanprover/lean4/pull/2905\">lean4#2905</a></p>",
        "id": 410005464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703585852
    },
    {
        "content": "<p>I also often get \"import Mathlib.RingTheory.DedekindDomain.Basic\" as a suggestion from <code>#minimize_imports</code> when that is not actually necessary. I haven't tried to figure out where it is actually used, though.</p>",
        "id": 410005471,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703585854
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_at_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">logTaylor_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n<span class=\"c1\">-- import Mathlib.RingTheory.DedekindDomain.Basic</span>\n</code></pre></div>",
        "id": 410007829,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703587091
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_at_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">logTaylor_succ</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">div_eq_zero_iff</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_at_zero'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">logTaylor_succ</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">div_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n<span class=\"c1\">-- import Mathlib.RingTheory.DedekindDomain.Basic</span>\n</code></pre></div>",
        "id": 410019265,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703593852
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">@</span><span class=\"n\">IsDomain.to_noZeroDivisors.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span> <span class=\"n\">Complex.instRingComplex</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">IsDedekindDomain.toIsDomain.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span> <span class=\"n\">Complex.commRing</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">IsPrincipalIdealRing.isDedekindDomain.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span> <span class=\"n\">Complex.commRing</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.isDomain.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span> <span class=\"n\">Complex.instField</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.to_principal_ideal_domain.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Complex</span> <span class=\"n\">Complex.instField</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 410020524,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703594700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_at_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">logTaylor_succ</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">div_eq_zero_iff</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">Field.isDomain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">logTaylor_at_zero'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">logTaylor</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">logTaylor_succ</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">div_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">minimize_imports</span>\n<span class=\"c1\">-- import Mathlib.Analysis.Complex.Basic</span>\n</code></pre></div>",
        "id": 410020679,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703594820
    },
    {
        "content": "<p>Yeah, these weird dependencies are because <code>extends</code> on instances doesn't mean \"set priority 100\" in Lean 4</p>",
        "id": 410020737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703594863
    },
    {
        "content": "<p>So the newer instance (ie, the one in a weird downstream file) always wins</p>",
        "id": 410020750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703594875
    },
    {
        "content": "<p>Someone should make a patch to lean4 that restores the lean3 behavior, to see if it improves performance</p>",
        "id": 410020805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703594896
    },
    {
        "content": "<p>^: the lean3 community edition behavior</p>",
        "id": 410032150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703600976
    }
]