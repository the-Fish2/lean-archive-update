[
    {
        "content": "<p>I'd like to prove a \"trivial lemma\" about a new definition I've made; this ought to be a proof by <code>rfl</code>, but fails. I don't understand why; I've narrowed it down to an <code>rcases</code> call on the result of a <code>choose</code> tactic. Any pointers appreciated.<br>\n(Broader context is my in-progress PR #8738xx.)</p>\n<p>Somewhat minimal example; I suspect this is not related to my new definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"bp\">‚àû</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PartialDiffeomorph</span> <span class=\"kd\">extends</span> <span class=\"n\">PartialEquiv</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">open_source</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">source</span>\n  <span class=\"n\">open_target</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">target</span>\n  <span class=\"n\">contMDiffOn_toFun</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffOn</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">n</span> <span class=\"n\">toFun</span> <span class=\"n\">source</span>\n  <span class=\"n\">contMDiffOn_invFun</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffOn</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"n\">n</span> <span class=\"n\">invFun</span> <span class=\"n\">target</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">PartialDiffeomorph</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Œ¶.</span><span class=\"n\">toFun</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsLocalDiffeomorphAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">PartialDiffeomorph</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">Œ¶.</span><span class=\"n\">source</span> <span class=\"bp\">‚àß</span> <span class=\"n\">Set.EqOn</span> <span class=\"n\">f</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ¶.</span><span class=\"n\">source</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">IsLocalDiffeomorphAt.mydef</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">IsLocalDiffeomorphAt</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContinuousLinearEquiv</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">hyp</span> <span class=\"n\">using</span> <span class=\"n\">hf</span>\n  <span class=\"c1\">--rcases hyp with ‚ü®hxU, heq‚ü© -- uncommenting this line breaks the proof below!</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">mfderiv</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">continuous_invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">IsLocalDiffeomorphAt</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hf.mydef</span> <span class=\"bp\">=</span> <span class=\"n\">mfderiv</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 409230483,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1703092978
    },
    {
        "content": "<p>I'm not sure if this is best posted in #new members, #mathlib4 or #lean4; feel free to move accordingly.</p>",
        "id": 409230532,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1703093000
    },
    {
        "content": "<p>This is because eta reduction does not work on <code>And</code>, cf <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398483665\">https://leanprover.zulipchat.com/#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398483665</a></p>",
        "id": 409243898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703098920
    },
    {
        "content": "<p>But also, using tactic blocks for anything non-trivial (ie, anything more than <code>refine</code>, <code>intro</code>, <code>convert</code>) when constructing data is usually ill-advised</p>",
        "id": 409244079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703098961
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearEquiv.ofBijective#doc\">docs#ContinuousLinearEquiv.ofBijective</a> helpful to you?</p>",
        "id": 409244364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703099071
    },
    {
        "content": "<p>Thanks for the prompt response, this is really helpful!</p>",
        "id": 409567975,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1703245064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Proof.20by.20rfl.20fails.20after.20adding.20rcases.20on.20choose/near/409244364\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearEquiv.ofBijective#doc\">docs#ContinuousLinearEquiv.ofBijective</a> helpful to you?</p>\n</blockquote>\n<p>It solves my problem - at the price of having to impose a completeness assumption. (This means my result will only apply to <em>Banach</em> manifolds, as opposed to ones modelled on general normed space. I guess that's fine in practice.)</p>",
        "id": 409568104,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1703245113
    },
    {
        "content": "<p>I think it's good practice to try and make everything work in as much generality as possible; future generations will thank you!</p>",
        "id": 409568642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703245402
    }
]