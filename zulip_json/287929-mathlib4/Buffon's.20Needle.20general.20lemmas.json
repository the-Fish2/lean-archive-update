[
    {
        "content": "<p>As part of getting my <a href=\"https://github.com/enricozb/buffon-lean/blob/main/Buffon/Rewrite.lean\">formalization of Buffon's needle</a> into the mathlib archive, I wanted to get opinions on what I think is the only lemma general enough to be a candidate for addition into mathlib: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set_integral_toReal_ofReal_nonneg_ae</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᵐ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.toReal</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">toReal_ofReal_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">ENNReal.toReal</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ENNReal.toReal_nonneg</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_ofReal</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᵐ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ENNReal.toReal</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">toReal_ofReal_eq_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.set_integral_congr_ae</span> <span class=\"n\">hs</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Thoughts on 1) whether it should be added at all 2) naming?</p>",
        "id": 419463781,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706882698
    },
    {
        "content": "<p>The subclaim</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toReal_ofReal_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal.toReal</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ENNReal.toReal_nonneg</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_ofReal</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>seems like a good addition, if it isn't there yet.</p>",
        "id": 419464483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706882926
    },
    {
        "content": "<p>(I swapped the two sides of the <code>=</code> in the statement, but didn't adjust the proof.)</p>",
        "id": 419464609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706882970
    },
    {
        "content": "<p>Yeah it's in that order b/c of what <code>set_integral_congr_ae</code> expects. That's a good suggestion for addition.</p>",
        "id": 419464735,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706883005
    },
    {
        "content": "<p>Ok, I'll make a PR for that one at least :)</p>",
        "id": 419465186,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706883168
    },
    {
        "content": "<p>The first one looks to me a little too specific, and the proof is very short, I don't think it is worth having it. Unless of course you use it very often.</p>",
        "id": 419465574,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706883300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256383\">@Enrico Borba</span> Please let me know your github username. Then I'll give you the required write access to mathlib non-master branches.</p>",
        "id": 419465605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706883308
    },
    {
        "content": "<p>I think I have permission? I made a small PR a little earlier, it's <code>enricozb</code> if could confirm that though :)</p>",
        "id": 419465840,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706883384
    },
    {
        "content": "<p>Ok, that's good</p>",
        "id": 419465948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706883423
    },
    {
        "content": "<p>Whoops look like it already exists haha (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.toReal_ofReal_eq_iff#doc\">docs#ENNReal.toReal_ofReal_eq_iff</a>). I guess I don't have anything to add then. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> with respect to adding my formalization to the archive, is there anything I need to do other than 1) styling, 2) ensure it builds with the latest mathlib?</p>",
        "id": 419467992,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706884036
    },
    {
        "content": "<p>That's about it. Just create a PR that adds <code>Buffon.lean</code> to the <code>Archive/</code> folder.</p>",
        "id": 419468102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706884083
    },
    {
        "content": "<p>Sweet</p>",
        "id": 419468218,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706884116
    },
    {
        "content": "<p>You might add a module docstring with a short overview of the statement and the proof</p>",
        "id": 419468264,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706884132
    },
    {
        "content": "<p>Yeah, I was about to say that. As part of the \"1) styling\" please add a bunch of docs and explanations.</p>",
        "id": 419468364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706884165
    },
    {
        "content": "<p>Ah good idea, I'll look at some of the other Archive ones for inspiration</p>",
        "id": 419468688,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706884256
    },
    {
        "content": "<p>Do I need to reference my file under <code>Archive/Wiedijk100Theorems</code> to make sure it's checked?</p>",
        "id": 419476185,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706886600
    },
    {
        "content": "<p>It doesn't influence checking. But you should still fill in the entry there.</p>",
        "id": 419476640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706886718
    },
    {
        "content": "<p>It needs to be in <code>Archive.lean</code>, though</p>",
        "id": 419476700,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706886725
    },
    {
        "content": "<p>And <code>./docs/100.yaml</code></p>",
        "id": 419476755,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706886746
    },
    {
        "content": "<p>(Not for checking, but for the website)</p>",
        "id": 419476792,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706886759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Buffon's.20Needle.20general.20lemmas/near/419476700\">said</a>:</p>\n<blockquote>\n<p>It needs to be in <code>Archive.lean</code>, though</p>\n</blockquote>\n<p>Ah that's what I was looking for, thanks</p>",
        "id": 419476856,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706886779
    }
]