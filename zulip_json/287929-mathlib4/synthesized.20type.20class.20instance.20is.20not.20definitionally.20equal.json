[
    {
        "content": "<p>I'm getting<br>\n<code>synthesized type class instance is not definitionally equal to expression inferred by typing rules</code></p>\n<p>in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"k\">have</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">OmegaArith</span> <span class=\"n\">NatWithFiniteOmega</span> <span class=\"o\">:=</span> <span class=\"n\">FinStruct</span> <span class=\"n\">T</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Formula.realize_rel</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>more precisely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">inst</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">FinStruct</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>My guess is that the <code>have inst := ...</code> is too opaque.</p>\n<ol>\n<li>Is there an easy fix for this?</li>\n<li>Am I probably doing things wrong that I have to manually create an instance?</li>\n</ol>\n<p>For the latter the issue is that <code>T</code> is a local variable, and the class inference does not seem to want to apply <code>FinStruct</code> automatically.</p>\n<p>I ask this in the Mathlib stream because I'm heavily relying on <code>FirstOrder.Language</code>, but please tell me if I should take this to the general chat.</p>",
        "id": 421778276,
        "sender_full_name": "Cody Roux",
        "timestamp": 1708052368
    },
    {
        "content": "<p>I don't know how to reproduce your problem. You'd better provide the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 421780000,
        "sender_full_name": "Wen Yang",
        "timestamp": 1708053547
    },
    {
        "content": "<p>Try changing <code>have</code> to <code>let</code>. <code>have</code> is extremely opaque -- it forgets the definition completely, it's only used for proofs not data.</p>",
        "id": 421803085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708067901
    },
    {
        "content": "<p>Ok that did it, thanks all.</p>",
        "id": 422046287,
        "sender_full_name": "Cody Roux",
        "timestamp": 1708207713
    }
]