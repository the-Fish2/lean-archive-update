[
    {
        "content": "<p>In natural language, it is easy to see that any vectors in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is equivalent to a matrix of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>n</mi><mo>×</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{n \\times 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">×</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. However, things seem to be harder for me in mathlib4. If we have a vector <code>v : EuclideanSpace ℝ (Fin n)</code>, how to tranform the type to a matrix with <code>Matrix (Fin n) (Fin 1) ℝ</code>. Is there any theorem in mathlib4 correlated to this problem? Thanks very much for your help!</p>",
        "id": 431774988,
        "sender_full_name": "Chenyi Li",
        "timestamp": 1712498704
    },
    {
        "content": "<p>You could uncurry and use an equiv on the indexing type, for example, but this is probably an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 431775981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712499606
    },
    {
        "content": "<p>I am not sure this is what you are looking for, but you could have a look at <code>Matrix.col</code>.</p>\n<blockquote>\n<p>Matrix.col u is the column matrix whose entries are given by u.</p>\n</blockquote>",
        "id": 431875515,
        "sender_full_name": "Fabrizio Barroero",
        "timestamp": 1712560709
    }
]