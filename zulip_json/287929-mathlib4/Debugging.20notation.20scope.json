[
    {
        "content": "<p>I made a change somewhere that breaks Mathlib.CategoryTheory.Bicategory.Adjunction, specifically it errors at the definition of the identity adjunction between identities with the message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"mi\">ùüô</span> <span class=\"n\">a</span> <span class=\"bp\">‚ä£</span> <span class=\"mi\">ùüô</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n\n  <span class=\"bp\">?</span><span class=\"n\">m.185637</span> <span class=\"bp\">‚ä£</span> <span class=\"bp\">?</span><span class=\"n\">m.185790</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.185368</span> <span class=\"bp\">?</span><span class=\"n\">u.185367</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.185370</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.185369</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My interpretation of this error message is that the second <code>‚ä£</code> is <code>CategoryTheory.Adjunction</code>, and so a change I made in some ancestor file caused that notation come into scope here. What tools are there for debugging this? Is there some way to trace when in the history of my imports the notation first comes into scope?</p>",
        "id": 422308873,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708378030
    },
    {
        "content": "<p>What's the notation you're using that's expanding into these?</p>",
        "id": 422309540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378429
    },
    {
        "content": "<p>It would be nice if this error message would tell you what syntax you started with that got you here, but it only reports the expansions, which isn't so useful for the first step of debugging.</p>",
        "id": 422309664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378503
    },
    {
        "content": "<p>Oh, never mind, it does give you the syntax. It all depends on how the notation works, and whether it generated a delaborator...</p>",
        "id": 422309781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378569
    },
    {
        "content": "<p>The tool I know is to do a global search for <code>\" ‚ä£ \"</code></p>",
        "id": 422309833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378608
    },
    {
        "content": "<p>(That's with the quotes by the way)</p>",
        "id": 422309887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378653
    },
    {
        "content": "<p>Hm I guess I don't actually want the first place it comes into scope since that's just going to be the definition site (and I know where that is). Now I'm not sure what exactly I'd like to search for</p>",
        "id": 422310094,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708378800
    },
    {
        "content": "<p>At least you can figure out that the bicategory version only comes into scope if you're in or opened the <code>CategoryTheory.Bicategory</code> namespace.</p>",
        "id": 422310290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378918
    },
    {
        "content": "<p>It's ok having ambiguous notation by the way -- you just need to give enough type information so that the elaborator can disambiguate.</p>",
        "id": 422310395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708378959
    },
    {
        "content": "<p>Well that's not really a concern at the moment, the bicategory version is defined 9 lines prior to this error message</p>",
        "id": 422310407,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708378963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Debugging.20notation.20scope/near/422310395\">said</a>:</p>\n<blockquote>\n<p>It's ok having ambiguous notation by the way -- you just need to give enough type information so that the elaborator can disambiguate.</p>\n</blockquote>\n<p>Right, I'm just not sure what change I made that turned this instance ambiguous</p>",
        "id": 422310473,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708379007
    },
    {
        "content": "<p>I haven't touched any of the bicategory files, just monoidal category stuff</p>",
        "id": 422310489,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708379021
    },
    {
        "content": "<p>Huh, the issue was a stack of coercions from monoidal functors to lax monoidal functors to functors. Not sure how that broke things</p>",
        "id": 422319981,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708384764
    }
]