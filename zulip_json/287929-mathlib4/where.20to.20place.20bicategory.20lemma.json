[
    {
        "content": "<p>I need the following lemma (about Oplax functors) in an upcoming PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">map₂_eqToHom</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">F.map₂</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eqToHom</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">eqToHom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F.congr_map</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">eqToHom_refl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OplaxFunctor.map₂_id</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm not sure where to place it, as <code>Bicategory/Functor</code> currently does not import <code>eqToHom</code> and I'm worried this will add a lot of imports that are not really needed there. It also feels weird to add a new file <code>Bicategory/eqToHom</code> just for this one lemma. Does anyone have any recommendations?</p>",
        "id": 443618419,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1717955706
    },
    {
        "content": "<p>I think the community is moving on from the weird feelings and is now rather disposed to having lots of small files.</p>",
        "id": 443624620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717959296
    },
    {
        "content": "<p>I think a natural place might be the file about locally discrete bicats</p>",
        "id": 443638289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717965656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/where.20to.20place.20bicategory.20lemma/near/443638289\">said</a>:</p>\n<blockquote>\n<p>I think a natural place might be the file about locally discrete bicats</p>\n</blockquote>\n<p>Okay that sound reasonable</p>",
        "id": 443724625,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1718012140
    }
]