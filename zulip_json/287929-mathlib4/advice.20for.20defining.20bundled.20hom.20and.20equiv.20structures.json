[
    {
        "content": "<p>i'd like to define bundled hom and equiv structures for Codes (which i have defined in my personal branch), and i'd like to know how i should go about extending existing structs, like <code>Equiv</code> and such...<br>\nlooking through how this was done for other structures, i have some specific questions i'd like to know the answer to, but general advice is also welcome.</p>\n<ol>\n<li>\n<p>Looking at <code>LinearEquiv</code>, it doesn't seem to explicitly require <code>σ</code> or <code>σ'</code> to be a ring-isomorphism, rather requiring them to be of type <code>R →+* S</code> and <code>S →+* R</code> respectively, and having parameters <code>RingHomInvPair σ σ'</code> and <code>RingHomInvPair σ' σ</code>, both of which contain fields stating that composing them either way gives <code>id</code> on either ring. why is this defined like this?</p>\n</li>\n<li>\n<p>Looking at the same, i noticed that in the code, it extends <code>M ≃+ M₂</code>, while the snippet in the documentation doesn't... why is this?</p>\n</li>\n<li>\n<p>It extends both <code>LinearMap σ M M₂</code> and <code>M ≃+ M₂</code>. The left inheritance reveals a structure <code>AddHom</code>, and so does the right. there doesn't appear to be any field stating  the values of these structures are the same... It is my understanding that if this were a <code>class</code>, this would lead to diamond issues, but because this is a structure, it doesn't. However, there is no field stating these fields are the same either. Does lean know these need to be the same by itself, or is this specified somewhere I overlooked?</p>\n</li>\n<li>\n<p>Similarly, <code>RingEquiv</code> extends <code>R ≃ S</code>,<code>R ≃* S</code> and <code>R ≃+ S</code> (but only the first is mentioned in the documentation)... If lean knows to unify the <code>R ≃ S</code> field, why is it needed to explicitly state it as an extension in the code? Why doesn't it only extend <code>R ≃* S</code> and <code>R ≃+ S</code>?</p>\n</li>\n<li>\n<p>If lean knows to <code>unify</code> these fields, why can't the same be done with classes? Why doesn't lean solve diamond issues by itself?</p>\n</li>\n</ol>",
        "id": 423657818,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709053887
    },
    {
        "content": "<ol>\n<li>I believe this is so that turning a linear equivalence (not semilinear equivalence) into a semilinear map gives an actual linear map: <code>RingHom.id</code> instead of <code>(RingEquiv.refl _).toRingHom</code>. We are having similar issues in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> where Lean expects <code>MonoidHom.id</code> but gets <code>(RingHom.id _).toMonoidHom</code>.</li>\n<li>You mean in the autogenerated declaration at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv#doc\">docs#LinearEquiv</a> it doesn't mention <code>extends AddEquiv</code>? I'm not sure why that happens, maybe the diamond inheritance that you mention? In most cases, it is much better to follow the actual code than the autogenerated documentation.</li>\n<li>There is in fact diamond inheritance, but for both <code>structure</code>s and <code>class</code>es this is not an issue. What happens under the hood is that a structure like <code>LinearEquiv</code> will look like a field <code>toLinearMap</code> containing everything from <code>LinearMap</code> and then separately all the fields that are in <code>AddEquiv</code> but not in <code>LinearMap</code>: <code>invFun</code>, <code>left_inv</code> and <code>right_inv</code>. When you want to apply <code>LinearEquiv.toAddEquiv</code>, under the hood it unpacks the required fields from <code>toLinearMap</code> and adds the remaining separate fields.</li>\n<li>This is probably done to remain neutral between additive and multiplicative structure: under the hood a <code>RingEquiv</code> will have three fields: <code>toEquiv</code>, <code>map_add'</code> and <code>map_mul'</code>. If we wrote <code>RingHom extends MulEquiv, AddEquiv</code> then we get two asymmetrical fields: <code>toMulEquiv</code> and <code>map_add'</code>. It seems neater this way, although I don't have any technical reason that we need do this or something will break.</li>\n<li>It does! To be technical, as long as your diamond inheritance is <a href=\"https://github.com/leanprover-community/mathlib4/blob/f5e8fa18d5a94db4a55b0ff392e1041baf731c4f/Mathlib/Algebra/Group/Defs.lean#L511\">forgetful</a> there will be no problems. When you use <code>extends</code>, Lean ensures this is the case. A diamond in the typeclass hierachy becomes a problem once you create data out of existing fields. The big example is scalar multiplication by a natural number: in any additive monoid <code>A</code>, we could define <code>n • a := a + a + ... + a</code>, <code>n</code> times. In any multiplicative monoid <code>M</code>, we could define <code>a • b := a * b</code>. So what if <code>A = M = ℕ</code>? Then we have to arrange these multiplications to coincide, which we do in Mathlib by not fixing the definition <code>n • a = a + a + ... + a</code> but instead adding this as an extra axiom.</li>\n</ol>",
        "id": 423794948,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709118264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 423823633,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709128698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as unresolved.</p>",
        "id": 424528573,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709487810
    },
    {
        "content": "<p>is there somewhere i could find a list of definitions/theorems i should implement for bundled Homs/ Equivs (and their respective classes)? i'm thinking of things like <code>.id</code>, <code>.rfl</code>, <code>.trans</code>, etc?</p>",
        "id": 424528697,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709487911
    },
    {
        "content": "<p>i am tempted to declare classes <code>HomClass</code> and <code>EquivClass</code>, because i think that is basically the pattern that we're implementing each time...<br>\nis it possibly the case that i want to use that objects and their Homs form a category?</p>",
        "id": 424835451,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709633621
    },
    {
        "content": "<p>and something similar for Equiv types?</p>",
        "id": 424835565,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709633654
    },
    {
        "content": "<p>(i tried declaring the classes and ran into universe errors which i have no experience with solving, which tipped me off to this being some kind of category theory concept)</p>",
        "id": 424836192,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709633874
    },
    {
        "content": "<p>Yup, those universe problems are known, and they can't really be solved.</p>",
        "id": 424841260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709635563
    },
    {
        "content": "<p>One solution would be to have some meta-code that can generate all these <code>id</code>, <code>rfl</code>, <code>trans</code>, etc... declarations.</p>",
        "id": 424841323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709635591
    },
    {
        "content": "<p>But that's a substantial project</p>",
        "id": 424841334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709635598
    },
    {
        "content": "<p>a nice start would be to have a list of declarations and proofs, to at least make the convention documented somewhere</p>",
        "id": 424841675,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709635728
    },
    {
        "content": "<p>i made a start with extracting the general API...<br>\ni have created a generic <code>structure MyHom</code> which extends structures <code>XHom</code> and <code>YHom</code>, where <code>YHom</code> has the same parameters as <code>MyHom</code>, while <code>XHom</code> has one less.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>definitions and lemmas for XHom and YHom</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">PX</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">structure</span> <span class=\"n\">XHom</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:</span> <span class=\"n\">PX</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">):</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">XHom.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">XHom.ext</span> <span class=\"o\">⦃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">XHomClass</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">xProp'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">PX</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">XHom.instXHomClass</span><span class=\"o\">:</span> <span class=\"n\">XHomClass</span> <span class=\"o\">(</span><span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">xProp'</span> <span class=\"o\">:=</span> <span class=\"n\">XHom.xProp</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">XHom.copy</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.xProp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.coe_copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">XHom.id</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">XHom.comp</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">hnp</span> <span class=\"bp\">∘</span> <span class=\"n\">hmn</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.coe_comp</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.comp_apply</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.comp_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">h.comp</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.cancel_right</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g₁.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.comp</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">XHom.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hf.forall.2</span> <span class=\"o\">(</span><span class=\"n\">DFunLike.ext_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.cancel_left</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₂</span> <span class=\"bp\">↔</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">XHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hg</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">XHom.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">XHom.comp_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.comp_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">XHom.id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">XHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">XHom.id_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">XHom.id</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">XHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PY</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c1\">-- some statement about foo and s</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">YHom</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:</span> <span class=\"n\">PY</span> <span class=\"n\">toFun</span> <span class=\"n\">s</span> <span class=\"c1\">-- a proof that P holds for toFun and s</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">YHomClass</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">yProp'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">PY</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">YHom.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">YHom.ext</span> <span class=\"o\">⦃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">YHom.instYHomClass</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">YHomClass</span> <span class=\"o\">(</span><span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">yProp'</span> <span class=\"o\">:=</span> <span class=\"n\">yProp</span>\n\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">YHom.copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.yProp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.coe_copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">YHom.id</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">YHom.comp</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">hnp</span> <span class=\"bp\">∘</span> <span class=\"n\">hmn</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.coe_comp</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.comp_apply</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.comp_assoc</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₃</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₃</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">h.comp</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.cancel_right</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g₁.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.comp</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">YHom.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hf.forall.2</span> <span class=\"o\">(</span><span class=\"n\">DFunLike.ext_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.cancel_left</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₂</span> <span class=\"bp\">↔</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">YHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hg</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">YHom.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">YHom.comp_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.comp_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">YHom.id</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">YHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">YHom.id_comp</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">YHom.id</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">YHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>definitions and lemmas for MyHom</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">the</span> <span class=\"n\">file</span> <span class=\"k\">with</span> <span class=\"n\">definitions</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">XHom</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">YHom</span><span class=\"bp\">`</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyProp</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyHom</span> <span class=\"kd\">extends</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">YHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:</span> <span class=\"n\">MyProp</span> <span class=\"n\">toFun</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- DFunLike where applicable/necessary</span>\n<span class=\"kd\">instance</span> <span class=\"n\">MyHom.instFunLike</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n    <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toYHom</span>\n    <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"c1\">-- this proof is typically a tad annoying to do</span>\n      <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- weird brackets to later allow for magicks at cancel_right</span>\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">MyHom.ext</span> <span class=\"o\">⦃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- take [XHomClass T a b] as a parameter.</span>\n<span class=\"c1\">-- this is because when lean tries to infer [XHomClass T a b],</span>\n<span class=\"c1\">-- it will try to look for [MyHomClass T s b] and not know what s to use.</span>\n<span class=\"c1\">-- [YHomClass T s b] is ok tho</span>\n<span class=\"kd\">class</span> <span class=\"n\">MyHomClass</span>\n    <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">XHomClass</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"kd\">extends</span> <span class=\"n\">YHomClass</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">myProp'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">MyProp</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- declare instances for classes when it is a parameter to MyHomClass</span>\n<span class=\"kd\">instance</span> <span class=\"n\">MyHom.instXHomClass</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">XHomClass</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">xProp'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.xProp</span>\n\n<span class=\"c1\">-- in declaring this, you also declare immediately `YHomClass s b`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">MyHom.instMyHomClass</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyHomClass</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">yProp'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.yProp</span>\n  <span class=\"n\">myProp'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.myProp</span>\n\n<span class=\"kd\">variable</span><span class=\"c1\">--? [MyHomClass T s b] =&gt;</span>\n  <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">XHomClass</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyHomClass.toMyHom</span> <span class=\"o\">[</span><span class=\"n\">MyHomClass</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:=</span> <span class=\"n\">XHomClass.xProp'</span> <span class=\"n\">f</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:=</span> <span class=\"n\">YHomClass.yProp'</span> <span class=\"n\">f</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:=</span> <span class=\"n\">MyHomClass.myProp'</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MyHomClass</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">MyHomClass.toMyHom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.coe_coe</span> <span class=\"o\">[</span><span class=\"n\">MyHomClass</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.coe_mk</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XHom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yProp</span><span class=\"o\">:</span> <span class=\"n\">PY</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myProp</span> <span class=\"o\">:</span><span class=\"n\">MyProp</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">MyHom.mk</span> <span class=\"n\">f</span> <span class=\"n\">yProp</span> <span class=\"n\">myProp</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">MyHom.copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span>\n  <span class=\"n\">xProp</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.xProp</span>\n  <span class=\"n\">yProp</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.yProp</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.myProp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.coe_copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- alternatively, if you want to focus only on added fields:</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">MyHom.copy'</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">):</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">f.toXHom.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.toYHom.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">XHom.copy</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.myProp</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.coe_copy_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span><span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.copy</span> <span class=\"n\">f'</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFunLike.ext'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyHom.id</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">XHom.id</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">YHom.id</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">XHom.id</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyHom.comp</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hnp.toXHom.comp</span> <span class=\"n\">hmn.toXHom</span><span class=\"o\">,</span> <span class=\"n\">hnp.toYHom.comp</span> <span class=\"n\">hmn.toYHom</span> <span class=\"k\">with</span>\n  <span class=\"n\">myProp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">XHom.comp</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.coe_comp</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.comp_apply</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.comp_assoc</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₃</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₃</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">h.comp</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.cancel_right</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g₁.comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.comp</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyHom.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hf.forall.2</span> <span class=\"o\">(</span><span class=\"n\">DFunLike.ext_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.cancel_left</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s₂</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f₂</span> <span class=\"bp\">↔</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hg</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MyHom.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">MyHom.comp_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.comp_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">MyHom.id</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MyHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MyHom.id_comp</span> <span class=\"o\">{</span><span class=\"n\">s₂</span><span class=\"o\">:</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyHom</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyHom.id</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MyHom.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>",
        "id": 425162695,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709753343
    },
    {
        "content": "<p>there is also <code>MyHomClass</code> in there.<br>\nif anyone is missing some lemmas/definitions, please say so</p>",
        "id": 425163511,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709753629
    },
    {
        "content": "<p>i ported all of these from <code>Mathlib.Algebra.Group.Hom\n.Defs</code>, if anyone wants to know</p>",
        "id": 425163688,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709753679
    },
    {
        "content": "<p>i'll see if i can expand this to also include Equiv versions and the like</p>",
        "id": 425163815,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709753721
    },
    {
        "content": "<p>some of these lemmas are proven using the fact that <code>MyHom</code> only adds Prop-valued fields. other than that, there are still some other lemmas using sorry.<br>\nthose are:</p>\n<ul>\n<li><code>MyHom.id</code>, where you need to provide values for all extra fields of <code>MyHom</code> compared to its parents, such as proofs that <code>id</code> has the properties that <code>MyHom</code> describes</li>\n<li><code>MyHom.comp</code>, where you need to provide those values too, such as proofs that composition preserves the properties that <code>MyHom</code> describes</li>\n</ul>",
        "id": 425165171,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709754208
    },
    {
        "content": "<p>if you are adding other non-prop fields, however, that will make it all a tad bit more complicated... for instance, the proof of <code>cancel_left</code> depends on the <code>FunLike.coe_injective'</code> field, while <code>comp_assoc</code> is currently proven <code>rfl</code></p>",
        "id": 425166476,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709754615
    },
    {
        "content": "<p>although honestly i have yet to think of an example where that is relevant</p>",
        "id": 425166893,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709754760
    },
    {
        "content": "<p>I'm implementing my own Isometry structure, and i ran into the following:<br>\nThe docs in <code>Mathlib.Data.FunLike.Equiv</code> say i should implement <code>.copy</code> for my Equiv as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyIso</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyIso</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.left_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.right_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">map_op'</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.map_op'</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>However, the example provided doesn't work, as you also need <code>f_inv = f.invFun</code>, or leave <code>f.invFun</code> the same between the instances...<br>\nI looked for examples in mathlib where this pattern is implemented, but a quick search didn't result in anything much. <br>\nCould someone tell me if this pattern is actually wanted, and if so, where i can find a working example of this API for any isometry-like structure?</p>",
        "id": 425364789,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709834606
    },
    {
        "content": "<p><del>You don't need them to be equal because they are provably equal.</del></p>",
        "id": 425365900,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709834954
    },
    {
        "content": "<p>are they? <code>f_inv</code> is a generic function <code>B -&gt; A</code> though?</p>",
        "id": 425365950,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709834984
    },
    {
        "content": "<p>completely independent from <code>f'</code></p>",
        "id": 425366035,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709835015
    },
    {
        "content": "<p>oh, sorry, you haven't proved <code>copy</code>, I misunderstood. Yes, you need that hypothesis in order to prove <code>left_inv</code> and <code>right_inv</code>.</p>",
        "id": 425366424,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835146
    },
    {
        "content": "<p>And you should definitely allow the user to replace the <code>invFun</code> too, because the whole purpose is for providing better definitional properties.</p>",
        "id": 425366536,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835201
    },
    {
        "content": "<p>ok... is there some implementation in mathlib i could look at for inspiration?</p>",
        "id": 425366851,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709835307
    },
    {
        "content": "<p>A PR updating the text in <code>Mathlib.Data.FunLike.Equiv</code> would be appreciated.</p>",
        "id": 425367542,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835560
    },
    {
        "content": "<p>Without the morphism properties, it just looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Equiv.copy</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf_inv</span> <span class=\"o\">:</span> <span class=\"n\">f_inv</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">e.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">f_inv</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">hf_inv.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hf.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">e.left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">hf_inv.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hf.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">e.right_inv</span>\n</code></pre></div>",
        "id": 425367588,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835582
    },
    {
        "content": "<p>Does that answer your question? I'm not sure we have very many (any?) of these <code>.copy</code> defs for <code>EquivLike</code> types.</p>",
        "id": 425367756,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835634
    },
    {
        "content": "<p>(Although it would be convenient if we did)</p>",
        "id": 425367789,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709835651
    },
    {
        "content": "<p>yes, thanks! indeed, i haven't found any EquivLike types implementing this.</p>",
        "id": 425368016,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709835718
    },
    {
        "content": "<p>it turns out it is a tad trickier when extending other copy lemmas, as apparently lean is unable to rewrite with <code>hf</code> and <code>hf_inv</code> at the inverse lemmas of <code>e</code>. what does consistently work, however, is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Equiv.copy</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf_inv</span> <span class=\"o\">:</span> <span class=\"n\">f_inv</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">e.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">f_inv</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hf_inv</span><span class=\"o\">,</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f.left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hf_inv</span><span class=\"o\">,</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f.right_inv</span>\n</code></pre></div>",
        "id": 425370212,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709836584
    },
    {
        "content": "<p>i also ran into some trouble with the suggested way to define <code>MyIsoClass</code>..<br>\ndefining <code>MyIso.instMyIsoClass</code> as suggested (see section <code>A</code> in MWE) gives an error. my current solution to this is section <code>B</code>, although i do think that's hacky and somewhat ugly...<br>\n<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MyHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MyHomClass</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">T</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">MyHom</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instFunLike</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">MyHom.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMyHomClass</span> <span class=\"o\">:</span> <span class=\"n\">MyHomClass</span> <span class=\"o\">(</span><span class=\"n\">MyHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n<span class=\"kd\">end</span> <span class=\"n\">MyHom</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MyEquiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">MyHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MyEquivClass</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">EquivLike</span> <span class=\"n\">T</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">MyHomClass</span> <span class=\"n\">T</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyEquiv</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">A</span>\n<span class=\"c1\">-- /-</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instMyEquivClass</span> <span class=\"o\">:</span> <span class=\"n\">MyEquivClass</span> <span class=\"o\">(</span><span class=\"n\">MyEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"c1\">-- failed to synthesize instance FunLike (MyEquiv α β) α β</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.invFun</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.right_inv</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- -/</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">B</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def instEquivLike : EquivLike (MyEquiv α β) α β := {</span>\n<span class=\"cm\">  coe := fun f =&gt; f.toFun</span>\n<span class=\"cm\">  inv := fun f =&gt; f.invFun</span>\n<span class=\"cm\">  left_inv := fun f =&gt; f.left_inv</span>\n<span class=\"cm\">  right_inv := fun f =&gt; f.right_inv</span>\n<span class=\"cm\">  coe_injective' := fun f g h =&gt; by cases f; cases g; congr; simp_all</span>\n<span class=\"cm\">}</span>\n\n<span class=\"cm\">def instMyHomClass :</span>\n<span class=\"cm\">  @MyHomClass (MyEquiv α β) α β (@EquivLike.toFunLike</span>\n<span class=\"cm\">      (MyEquiv α β) α β MyEquiv.instEquivLike) :=</span>\n<span class=\"cm\">  (@MyHomClass.mk (MyEquiv α β) α β (@EquivLike.toFunLike</span>\n<span class=\"cm\">    (MyEquiv α β) α β MyEquiv.instEquivLike))</span>\n\n\n<span class=\"cm\">instance instMyEquivClass : MyEquivClass (MyEquiv α β) α β :=</span>\n<span class=\"cm\">  @MyEquivClass.mk (MyEquiv α β) α β MyEquiv.instEquivLike MyEquiv.instMyHomClass</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span> <span class=\"n\">MyEquiv</span>\n</code></pre></div>",
        "id": 425896803,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710159609
    },
    {
        "content": "<p>basically, my current solution is using <code>MyIsoClass.mk</code> with explicit arguments.</p>",
        "id": 425897303,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710159798
    },
    {
        "content": "<p>i honestly expected lean to be able to handle version <code>A</code>, but apparently not...</p>",
        "id": 425897611,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710159891
    },
    {
        "content": "<p>i found a shorter solution, but i'm still not really happy...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instMyEquivClass</span> <span class=\"o\">:</span> <span class=\"n\">MyEquivClass</span> <span class=\"o\">(</span><span class=\"n\">MyEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{({</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.invFun</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.right_inv</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">EquivLike</span> <span class=\"o\">(</span><span class=\"n\">MyEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 425898657,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710160240
    }
]