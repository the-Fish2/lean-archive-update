[
    {
        "content": "<p>I am writing a non-terminal <code>simp</code> linter.  In its first iteration, it had no awareness of what tactic followed <code>simp</code> and hence it flagged situations such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- the `simp` below are all *not* `only`, but could by `at h`</span>\n<span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span>\n<span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>  <span class=\"c1\">-- &lt;-- not always these can be changed to `simpa`, in case you are wondering</span>\n<span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>  <span class=\"c1\">-- &lt;-- not always these can be changed to `simpa using`, in case you are wondering</span>\n</code></pre></div>\n<p>Now, I have added a \"next tactic awareness\" to the linter.</p>\n<p>Which tactics should be allowed after <code>simp</code>?  I'll open a poll, so that everyone can vote/add their favourite \"<code>simp</code> follower tactic\"!</p>",
        "id": 427775144,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710868826
    },
    {
        "content": "<p>/poll What tactics should a non-terminal <code>simp</code> allow after <code>simp</code>?<br>\nrfl<br>\nsimp<br>\nsimpa<br>\nassumption<br>\nexact<br>\nring</p>",
        "id": 427775715,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710869018
    },
    {
        "content": "<p>(Maybe this should be clarified: the fact that the linter does not complain, does not necessarily mean that it is well-seen to use a tactic after <code>simp</code>.  It only means that you are not required to silence the linter if you use one!)</p>",
        "id": 427777213,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710869446
    },
    {
        "content": "<p>If you want some inspiration, these are some of the tactics that currently follow <code>simp</code> in mathlib:<br>\n(EDIT: the list contains all tactics that the linter flagged in one run on all of mathlib)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abel</span>              <span class=\"n\">dsimp</span>           <span class=\"n\">rcases</span>\n<span class=\"n\">ac_rfl</span>            <span class=\"n\">erw</span>             <span class=\"n\">refine</span>\n<span class=\"n\">aesop</span>             <span class=\"n\">exact</span>           <span class=\"n\">refine'</span>\n<span class=\"n\">any_goals</span>         <span class=\"n\">exfalso</span>         <span class=\"n\">rename_i</span>\n<span class=\"n\">apply</span>             <span class=\"n\">exists</span>          <span class=\"n\">revert</span>\n<span class=\"n\">apply_assumption</span>  <span class=\"n\">ext</span>             <span class=\"n\">right</span>\n<span class=\"n\">assumption</span>        <span class=\"n\">ext1</span>            <span class=\"n\">ring</span>\n<span class=\"n\">assumption'</span>       <span class=\"n\">field_simp</span>      <span class=\"n\">ring1</span>\n<span class=\"n\">by_cases</span>          <span class=\"n\">filter_upwards</span>  <span class=\"n\">ring_nf</span>\n<span class=\"n\">by_contra</span><span class=\"bp\">!</span>        <span class=\"n\">first</span>           <span class=\"n\">rintro</span>\n<span class=\"n\">case</span>              <span class=\"n\">fun_prop</span>        <span class=\"n\">rw</span>\n<span class=\"n\">cases</span>             <span class=\"n\">generalize</span>      <span class=\"n\">rwa</span>\n<span class=\"n\">cases'</span>            <span class=\"k\">have</span>            <span class=\"k\">show</span>\n<span class=\"n\">change</span>            <span class=\"n\">haveI</span>           <span class=\"n\">simp</span><span class=\"bp\">?</span>\n<span class=\"n\">clear_aux_decl</span>    <span class=\"n\">induction</span>       <span class=\"n\">specialize</span>\n<span class=\"n\">coherence</span>         <span class=\"n\">induction'</span>      <span class=\"n\">split</span>\n<span class=\"n\">congr</span>             <span class=\"n\">infer_instance</span>  <span class=\"n\">split_ifs</span>\n<span class=\"n\">congr</span><span class=\"bp\">!</span>            <span class=\"n\">intro</span>           <span class=\"n\">subst</span>\n<span class=\"n\">constructor</span>       <span class=\"n\">iterate</span>         <span class=\"k\">suffices</span>\n<span class=\"n\">contradiction</span>     <span class=\"n\">linarith</span>        <span class=\"n\">symm</span>\n<span class=\"n\">contrapose</span><span class=\"bp\">!</span>       <span class=\"n\">nlinarith</span>       <span class=\"n\">tauto</span>\n<span class=\"n\">convert</span>           <span class=\"n\">norm_cast</span>       <span class=\"n\">trivial</span>\n<span class=\"n\">conv_lhs</span>          <span class=\"n\">norm_num</span>        <span class=\"n\">try</span>\n<span class=\"n\">decide</span>            <span class=\"n\">obtain</span>          <span class=\"n\">unfold</span>\n<span class=\"n\">done</span>              <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 427779276,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710870083
    },
    {
        "content": "<p>(A discussion of changes to the non-terminal <code>simp</code> linter has been moved to <a href=\"#narrow/stream/287929-mathlib4/topic/flexible.20vs.20rigid.20tactics\">flexible vs rigid tactics</a>.)</p>",
        "id": 427788201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710873135
    },
    {
        "content": "<p>Does anyone have an example of where <code>simp; aesop</code> is better than just <code>aesop</code>?</p>",
        "id": 427820677,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710886769
    },
    {
        "content": "<p>Yes, I just wrote one</p>",
        "id": 427820725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710886799
    },
    {
        "content": "<p>I guess same question for <code>norm_num</code></p>",
        "id": 427820801,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710886823
    },
    {
        "content": "<p>See here: <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Mathlib/Combinatorics/Additive/Energy.lean#L32-L37\">https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Mathlib/Combinatorics/Additive/Energy.lean#L32-L37</a></p>",
        "id": 427820874,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710886861
    },
    {
        "content": "<p>I haven't looked at the trace in detail but I suspect <code>aesop</code> just tries random things unsuccessfully until it simps the goal correctly</p>",
        "id": 427820975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710886912
    },
    {
        "content": "<p>Ok performance is a tricky thing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 427821275,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710887073
    },
    {
        "content": "<p>Imo the linter should still disallow <code>simp; aesop</code>. While it is possible for this combination to make sense (e.g. when Aesop's builtin <code>simp</code> is disabled or, as Yaël says, due to weird performance reasons), it's much more likely to be a mistake.</p>",
        "id": 427824619,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1710888938
    },
    {
        "content": "<p>Even if it's most likely a mistake, does it really matter? It's still a robust proof</p>",
        "id": 427870161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710921087
    },
    {
        "content": "<p>We're trying to robustify proofs, not to teach people never to use aesop after simp</p>",
        "id": 427870204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710921117
    },
    {
        "content": "<p>Let me summarise the discussion that I moved to <a href=\"#narrow/stream/287929-mathlib4/topic/flexible.20vs.20rigid.20tactics\">flexible vs rigid</a>.</p>",
        "id": 427870480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710921257
    },
    {
        "content": "<p>There is a heuristic distinction between \"flexible\" and \"rigid\" tactics.</p>\n<p>A \"flexible\" tactic is one that takes a variety of inputs and performs several transformations.  Examples are <code>simp, ring, norm_num</code>.</p>\n<p>A \"rigid\" tactic is one that acts on a very specific kind of input.  Examples are <code>rw, refine, exact</code>.</p>\n<p>Of course, not all tactics are easy to classify.  However, the proposal was to make the linter be aware of this distinction and \"stain\" each hypothesis/goal on which a \"flexible\" tactic acted, so that any subsequent tactic applied to a stained location can only be flexible.  This would subsume the \"non-terminal <code>simp</code> linter\".</p>",
        "id": 427870899,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710921473
    },
    {
        "content": "<p>Do you think that this flexible vs rigid is a good distinction that should be linted?</p>",
        "id": 427871058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710921543
    },
    {
        "content": "<p>/poll Linting flexible vs rigid<br>\nYes, let's lint this!<br>\nNo, not really!</p>",
        "id": 427871134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710921577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.60.20followers/near/427870161\">said</a>:</p>\n<blockquote>\n<p>Even if it's most likely a mistake, does it really matter? It's still a robust proof</p>\n</blockquote>\n<p>It is robust (except in rare cases), but usually loses a bit of performance since <code>simp</code> gets called twice on the initial goal. Don't know whether this is considered lint-worthy.</p>",
        "id": 427893076,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1710929895
    },
    {
        "content": "<p>Oh then that's fine. This situation will be caught by Damiano's other linter, which tries to insert a bunch of tactics at each proof step and see whether it is faster</p>",
        "id": 427893547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710930035
    },
    {
        "content": "<p>Importantly, Damiano's linter will flag <code>simp; aesop</code> iff it's slower than <code>aesop</code> alone</p>",
        "id": 427893601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710930057
    }
]