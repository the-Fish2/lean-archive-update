[
    {
        "content": "<p>I am currently trying to prove a lemma of the form \"if you have a collection of sets with a certain property and some subset of that collection, you can 'split' each element of the subset to get a new collection that still has the desired property,\" and I'm trying to get this from a related lemma that states you can split one set at a time. The natural way to do this seems to be induction, but I'm not really sure the optimal way to actually get it working.</p>\n<p>More precisely, here's a MWE. I'm taking <code>splitting_one</code> as a black box and trying to get <code>splitting_layer</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">defs</span>\n\n<span class=\"c1\">-- Set variables:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">tα</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">pα</span> <span class=\"o\">:</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bα</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">tβ</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mβ</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">pβ</span> <span class=\"o\">:</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bβ</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span>  <span class=\"o\">(</span><span class=\"n\">fcont</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">Fdisj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">C₁</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">C₂</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">C₁</span> <span class=\"bp\">∩</span> <span class=\"n\">C₂</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Fclosed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">IsClosed</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Classical</span>\n\n<span class=\"c1\">-- Important definitions:</span>\n<span class=\"kd\">def</span> <span class=\"n\">BorelPartialSection</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MeasurableSet</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">A.InjOn</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">IDual₀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">BorelPartialSection</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"bp\">ᶜ</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">IDual</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">countableGenerate</span> <span class=\"o\">(</span><span class=\"n\">IDual₀</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">A</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">IDual</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">FBorelCover</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">BorelCover</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsNull</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">FBorelCover</span> <span class=\"n\">B</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">IsNull</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s1</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s2</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">s1</span> <span class=\"bp\">≠</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">Disjoint</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">splitting_one</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.val</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IsClosed</span> <span class=\"n\">t1</span> <span class=\"bp\">∧</span> <span class=\"n\">t1</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">EMetric.diam</span> <span class=\"n\">t1</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">IsClosed</span> <span class=\"n\">t2</span> <span class=\"bp\">∧</span> <span class=\"n\">t2</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">EMetric.diam</span> <span class=\"n\">t2</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">¬</span><span class=\"n\">IsNull</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">H.1</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">splitting_layer</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">Hs.val</span> <span class=\"bp\">⊆</span> <span class=\"n\">H.val</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">G.1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span> <span class=\"bp\">∧</span> <span class=\"n\">t1</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span> <span class=\"bp\">∧</span> <span class=\"n\">t2</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">H.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">Hs.val</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">H.val</span> <span class=\"bp\">→</span> <span class=\"n\">EMetric.diam</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any ideas as to how I can set this up? In particular, I'd like to induct on the cardinality of <code>Hs</code>, but I'm not really sure how to actually do that.</p>",
        "id": 427737214,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1710859146
    },
    {
        "content": "<p>Answering your question on how to induct on the cardinality of <code>Hs</code>, what I would do is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Hs.card</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n<span class=\"n\">clear_value</span> <span class=\"n\">n</span>\n<span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span>\n</code></pre></div>",
        "id": 427737803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710859293
    },
    {
        "content": "<p>Thank you for the suggestion! I used it to make some progress, but I'm still not quite where I need to be.</p>\n<p>I now have this (note I've changed the statement a little bit, <code>Hs</code> just needs to be <code>Finset</code>, the subtype stuff doesn't matter there).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">splitting_layer</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">Hs</span> <span class=\"bp\">⊆</span> <span class=\"n\">H.val</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">G.1</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span> <span class=\"bp\">∧</span> <span class=\"n\">t1</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span> <span class=\"bp\">∧</span> <span class=\"n\">t2</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">H.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">Hs.val</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">G.val</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">H.val</span> <span class=\"bp\">→</span> <span class=\"n\">EMetric.diam</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Hs.card</span> <span class=\"k\">with</span> <span class=\"n\">hn</span>\n    <span class=\"n\">clear_value</span> <span class=\"n\">n</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">.</span> <span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.card_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n      <span class=\"n\">use</span> <span class=\"n\">H</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n        <span class=\"n\">contradiction</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hs'</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n      <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hs'</span>\n      <span class=\"n\">exfalso</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hs'</span> <span class=\"n\">hs</span>\n    <span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Finset.card_eq_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">hnin</span><span class=\"o\">,</span> <span class=\"n\">hins</span><span class=\"o\">,</span> <span class=\"n\">hcard</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">hcard.symm</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But it's not liking the last line because <code>t</code> is not the same as <code>Hs</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ih</span> <span class=\"n\">hcard.symm</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hcard.symm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.card</span> <span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is there a way for me to get <code>ih</code> to accept <code>t</code> as an input? I recognize I'll need to prove it is a subset of <code>H.val</code> to have any chance at all, but that should be fine. Even with that, though, I'm not sure how to do that.</p>",
        "id": 427814314,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1710883556
    },
    {
        "content": "<p>I have a suspicion that changing <code>induction' n with n ih</code> to <code>induction' n with n ih generalizing Hs</code> might help</p>",
        "id": 427817634,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710885088
    },
    {
        "content": "<p>it should allow you to use <code>t</code> with <code>ih</code></p>",
        "id": 427817833,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710885183
    },
    {
        "content": "<p><code>generalizing</code> is often the answer when the inductive hypothesis is too inflexible</p>",
        "id": 427818178,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710885364
    },
    {
        "content": "<p>That did the trick, thank you!</p>",
        "id": 428037079,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1710980191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"530359\">Connor Gordon</span> has marked this topic as resolved.</p>",
        "id": 428037083,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710980197
    }
]