[
    {
        "content": "<p>I found out that <code>HasUncurry.uncurry</code> does not play well with <code>Icc</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"c1\">-- this fails</span>\n<span class=\"k\">#check</span> <span class=\"bp\">↿</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I thought that it has to do with the coercion of <code>Icc</code> to <code>Type</code> but that is not the case because this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"c1\">-- this works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">↿</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Metric.sphere</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is going wrong here?</p>",
        "id": 426417738,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710360240
    },
    {
        "content": "<p>It has to be something odd with elaboration because this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- this works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">↿</span><span class=\"n\">f</span>\n</code></pre></div>",
        "id": 426418035,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710360366
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">↿</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 426418656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710360641
    },
    {
        "content": "<p>What a hack! I'm doing this inside of some notation so I can add the <code>by exact</code> to make it work.</p>",
        "id": 426419205,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710360885
    },
    {
        "content": "<p>In that case you can probably just elaborate things in a different order</p>",
        "id": 426422552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710362239
    },
    {
        "content": "<p>Though I guess if you're in <code>MacroM</code> not <code>TermElabM</code> you can't</p>",
        "id": 426422583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710362254
    }
]