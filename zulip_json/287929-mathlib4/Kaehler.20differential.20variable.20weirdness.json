[
    {
        "content": "<p>Anne pointed out <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/440094836\">here</a> that it's really easy to see the slowest files in mathlib nowadays. I had not ever internalised this before. They go on to point out that the slowest file in mathlib right now is <code>Mathlib.RingTheory.Kaehler</code> and because I'm on a long train journey I thought I'd take a look. Everything is sluggish. It seemed hard to point a finger at anything specific because traces just indicated that everything was a bit slow.</p>\n<p>In this file, the Kaehler differentials <code>KaehlerDifferential R S</code> (with S an R-algebra) are defined at the top, with notation <code>Ω[S⁄R]</code>. One of the first things to happen is the totally innocuous instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>Profiling this line indicates that it takes 0.2 seconds! That feels to me like a big reason this file is slow -- if you can't even make 0 in less than 0.2 seconds, what are the chances that you can prove a theorem in graduate level commutative algebra in less than 5 seconds?</p>\n<p>So I looked at the trace, and it's the usual stuff, everything's a bit slow but nothing's horrible. For example nearly half of the 0.2 seconds is taken up by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.013582</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.012432</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.061313</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">IsScalarTower</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>\n<p>and...hey, wait a minute? What is <code>M</code>?</p>\n<p><code>M</code> is nothing. <code>M</code> is a variable introduced earlier on, to do something else. It has nothing to do with what is happening right now.</p>\n<p>Whatever is it doing in the trace?</p>",
        "id": 440113454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716389996
    },
    {
        "content": "<p>If <code>M</code> is not around (say because you add a <code>section</code> above), then the instance synthesis is 10 times faster...</p>",
        "id": 440115543,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716390477
    },
    {
        "content": "<p>We really need <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean#2452</a>.</p>",
        "id": 440115818,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716390542
    },
    {
        "content": "<p>Yes. But why is it faster?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">exit</span>\n</code></pre></div>\n<p>gives me a (partially unfolded) trace of</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">command</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.233924</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"w\">    </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">      </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.233810</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">        </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.015477</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.014480</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.069023</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"n\">IsScalarTower</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.013912</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">]),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">        </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>\n<p>What does <code>[step]</code> mean, and why are we taking the step towards <code> Module R M</code>? I've unfolded the traces above this (the proofs that R is a CommSemiring and S is a Semiring) and I can't see any mention of <code>M</code>.</p>",
        "id": 440116068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716390607
    },
    {
        "content": "<p>This is crazy. It doesn't have anything to do with the statement to be proven:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>(at the same place in this file) shows the same steps, and takes 0.15s on my computer.</p>",
        "id": 440117122,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716390895
    },
    {
        "content": "<p>Lol no wonder the file is slow :-)</p>\n<p>Confirmed at my end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">command</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.129403</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.010888</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">      </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.023373</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">      </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.014868</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">      </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.071719</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">      </span><span class=\"n\">IsScalarTower</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>\n<p>ha ha ha, something is really wrong here :-)</p>",
        "id": 440117581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716391010
    },
    {
        "content": "<p>More minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsScalarTower</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>takes 0.14s to elaborate, and the steps mention <code>R</code>, <code>S</code> and <code>M</code>.</p>",
        "id": 440118602,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716391290
    },
    {
        "content": "<p>Better example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- comment this line to remove the crazy steps in `foo`.</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>where the steps in the definition of <code>foo</code> mention <code>Algebra R S</code>. My understanding is the following: when you define <code>foo</code>, then the variables are around, and might be used in the definition, so Lean has to make sense of these variables even before starting to process your definition (because it might involve these variables). So it has to understand what <code>Algebra R S</code> means, which means finding some typeclasses on <code>R</code> and <code>S</code>.</p>",
        "id": 440120378,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1716391731
    },
    {
        "content": "<p>I wonder if you have found any other culprit? There are lots of files with these variables lying around but only this particular file is exceptionally painful to deal with, so I guess this is not the root cause? My vague feeling is that quotients of complex structures are costly but I don't have a good reason/example.</p>",
        "id": 440122152,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716392275
    },
    {
        "content": "<p>Maybe something like this explains why the search for <code>Module</code> instances is so high up in the list (see <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440063003\">here</a>)?</p>",
        "id": 440132175,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716395056
    },
    {
        "content": "<p>I agree that this is unlikely to be the main problem in this file.</p>",
        "id": 440132904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716395240
    },
    {
        "content": "<p>I've made a Mathlib free minimization of this at <a href=\"https://github.com/leanprover/lean4/pull/4253\">lean#4253</a>.</p>",
        "id": 440213464,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716425991
    },
    {
        "content": "<p>Kim do you think that investigating this is really worth the trouble instead of working on the crucial <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a> that will probably at least change the issue completely (and hopefully fix it)?</p>",
        "id": 440230319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716429595
    },
    {
        "content": "<p>I'm not sure. As noted on <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a>, we weren't ready to start work on that yet. Perhaps this example changes that? Or perhaps someone will think of an intermediate fix.</p>",
        "id": 440235369,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716432246
    },
    {
        "content": "<p>I’m sure that seeing beginners next week will give you one more reason to want <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a> fixed <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 440235788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716432466
    }
]