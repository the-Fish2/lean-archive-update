[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12353\">#12353</a> introduces <code>conv%</code>, along with <code>simp%</code>, <code>push_neg%</code>, and <code>norm_num%</code> as wrappers around <code>conv%</code>.</p>\n<p>It makes two syntax choices which are up for discussion:</p>\n<ol>\n<li>that the syntax should be <code>conv% e =&gt; tac</code>, for consistency with <code>conv</code> (as tactics are always called after the arrow)</li>\n<li>that <code>simp%</code> and <code>norm_num%</code> with arguments can be written using an optional <code>on</code> if the parser is struggling, e.g. <code>simp% only [lem] on e</code> (<code>on</code> isn’t needed in e.g. <code>simp% e</code>, but can help disambiguate <code>e</code> from the arguments)</li>\n</ol>\n<p>This breaks with <code>#conv</code>, <code>#simp</code>, and <code>#norm_num</code>. Note that <code>#conv</code> currently is written as <code>#conv tac =&gt; e</code>; <code>#simp</code> uses an optional <code>=&gt;</code> as a separator, e.g. <code>#simp only [lem] =&gt; e</code>; and <code>#norm_num</code> uses an optional <code>:</code> as a separator, e.g. <code>#norm_num [lem] : e</code>. So, this PR also adjusts that syntax to bring it into consistency with the new elaborator syntax (though it could be split into a separate PR if necessary).</p>\n<p>Do people think the choices in (1) and (2) are reasonable?</p>",
        "id": 434904250,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713849043
    },
    {
        "content": "<p>(I’m of course open to other ideas for the token <code>on</code>. In any case, I think <code>=&gt;</code> and <code>:</code> are a little “wrong”. While this is ok for a temporary <code>#</code>-command, it seems a bit more important to get the syntax right for term elaborators, which might(?) wind up in committed code.)</p>",
        "id": 434904279,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713849079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/conv.25.20and.20changes.20to.20.23conv.20.28and.20friends.29/near/434904250\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12353\">#12353</a> introduces <code>conv%</code>, along with <code>simp%</code>, <code>push_neg%</code>, and <code>norm_num%</code> as wrappers around <code>conv%</code>.</p>\n</blockquote>\n<p>Do you actually mean that? Isn't one of them <code>#conv</code>?</p>",
        "id": 434915311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713855413
    },
    {
        "content": "<p>Judging from the names, I would guess that <code>...%</code> is the term elaborator, while <code>#...</code> is the command, right?  I think that Thomas is introducing <code>conv%</code> and using it to redefine <code>#conv</code>.  Maybe...</p>",
        "id": 434930693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713860703
    },
    {
        "content": "<p>Should it be <code>simp only [...] on% e</code>?</p>",
        "id": 434934776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713861987
    },
    {
        "content": "<p>I worry <code>simp% [x] on y</code> is also parseable as <code>simp% ([x] on y)</code></p>",
        "id": 434934990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713862064
    },
    {
        "content": "<p>(<code>on</code> is syntactically valid there, but without some weird instances does at least fail to elaborate)</p>",
        "id": 434935198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713862117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/conv.25.20and.20changes.20to.20.23conv.20.28and.20friends.29/near/434934776\">said</a>:</p>\n<blockquote>\n<p>Should it be <code>simp only [...] on% e</code>?</p>\n</blockquote>\n<p>I considered this! I was torn on it. Or more precisely, I considered having <code>tac on% e</code> be a macro for <code>conv% e =&gt; tac</code>. I do kind of like that!</p>\n<p>However, I was also thinking that it should be possible to add arguments to <code>simp% e</code> without moving around the <code>%</code>. (This isn’t necessarily at odds with having <code>on%</code>, though.)</p>",
        "id": 434997785,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713882473
    },
    {
        "content": "<p>One argument for <code>on%</code> is that it makes more sense (and looks nicer) to simply disallow e.g. <code>simp% &lt;args&gt; (&lt;sep&gt;)? e</code>, and have <code>simp%</code>, <code>norm_num%</code> only as shortcuts for the no-argument case. Then, if someone wants arguments, the docstring instructs them to use <code>on%</code>.</p>",
        "id": 434998692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713882712
    }
]