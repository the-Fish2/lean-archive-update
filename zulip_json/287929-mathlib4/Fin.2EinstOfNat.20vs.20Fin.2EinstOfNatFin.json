[
    {
        "content": "<p>I'm trying to write a version of <code>List.get_mk_zero</code> from <a href=\"https://github.com/leanprover/std4/pull/758\">std4#758</a> that will work with <code>(0 : Fin (length l))</code> instead of <code>Fin.mk 0 _</code>. I fail to make a version that works both with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instOfNat#doc\">docs#Fin.instOfNat</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instOfNatFin#doc\">docs#Fin.instOfNatFin</a>. The issue is that usually Lean fails to generate <code>NeZero</code> instance (but can get it by unfolding some definitions and matching a list with <code>.cons _ _</code>, thus matching its length with <code>_ + 1</code>; or it can get it as an output of some <code>rw</code>/<code>simp</code>).</p>",
        "id": 435806083,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714268918
    },
    {
        "content": "<p>Moreover, this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">instOfNat</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">instOfNatFin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 435806817,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714269421
    },
    {
        "content": "<p>Can we change the instance in core to use some version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NeZero#doc\">docs#NeZero</a> (e.g., a <code>Nat</code>-only version or a version that takes <code>[OfNat α 0]</code> instead of <code>[Zero α]</code>), or it goes against some deliberate design choices?</p>",
        "id": 435814113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714275438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> , who's the right person to answer this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> question?</p>",
        "id": 435814131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714275473
    },
    {
        "content": "<p>Which instance is it that you want to change? I'm not following yet.</p>",
        "id": 435835645,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714283853
    },
    {
        "content": "<p>Separately, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instOfNatFin#doc\">docs#Fin.instOfNatFin</a> seems to crash my browser (chrome on macos). Anyone else? (EDIT: restarting has fixed it; other things were crashing too.)</p>",
        "id": 435835667,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714283877
    },
    {
        "content": "<p>works fine on FF / ubuntu, redirecting to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Basic.html#Fin.instOfNatFin\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Basic.html#Fin.instOfNatFin</a></p>",
        "id": 435835749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714283939
    },
    {
        "content": "<p>In Mathlib, we define the following instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">NeZero.pos</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435835753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714283941
    },
    {
        "content": "<p>This way we can argue about, e.g., <code>(0 : Fin (2 ^ n))</code> for a variable <code>n</code>.</p>",
        "id": 435836081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714284164
    },
    {
        "content": "<p>(BTW, this may be useful to prove some lemmas about this type, then apply to <code>UInt*</code>)</p>",
        "id": 435836134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714284199
    },
    {
        "content": "<p>But this instance conflicts with the instance <code>(n a : Nat) : OfNat (Fin (n + 1)) a</code> in core.</p>",
        "id": 435836262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714284322
    },
    {
        "content": "<p>I see, and you'd like that to not have a +1, but instead some other typeclass playing the role of NeZero.</p>",
        "id": 435836365,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714284380
    },
    {
        "content": "<p>Exactly. Either backport a generic <code>NeZero</code>, or create a <code>Nat</code>-specific version.</p>",
        "id": 435836399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714284429
    }
]