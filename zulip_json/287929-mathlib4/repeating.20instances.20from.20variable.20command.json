[
    {
        "content": "<p>I noticed some lemmas like <code>Matrix.diagonal_neg</code>, <code>Matrix.scalar_commute_iff</code>, <code>Matrix.scalar_commute</code> have an instance hypothesis that is written down explicitly, while the same instance is also available from a variable statement. Should there be a linter that warns you about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">scalar_commute_iff</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It may seem like this is only a problem of redundant text, but it can be more problematic if type class synthesis picks the instance from the <code>variable</code> command instead of the locally bound one, because then we get a duplicate hypothesis. This happened when I removed the definition <code>Matrix.instMulMatrix</code> in that file, and this caused an error further down the line.</p>",
        "id": 427828147,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710891030
    },
    {
        "content": "<p>Isn't there a linter that warns you about duplicated hypotheses already?</p>",
        "id": 427872201,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710922106
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.scalar_commute_iff#doc\">docs#Matrix.scalar_commute_iff</a>, you'll see only one of each survived into the actual theorem, so there's no actual duplication. It does make the infoview somewhat confusing within the proof, though, so you should feel free to remove the redundant ones</p>",
        "id": 427883114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710926486
    },
    {
        "content": "<p>I went ahead and removed many more of this kind of redundant instance hypotheses. <a href=\"https://github.com/leanprover-community/mathlib4/pull/11551\">https://github.com/leanprover-community/mathlib4/pull/11551</a></p>",
        "id": 428023587,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1710972626
    },
    {
        "content": "<p>Can I get permission to make a branch in Mathlib? My Github is JovanGerb</p>",
        "id": 428297380,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711101976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> Voila: <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 428299489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711102785
    },
    {
        "content": "<p>In this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">[</span><span class=\"n\">IsWellOrder</span> <span class=\"n\">Œπ</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">¬∑</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"bp\">‚àô</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_Iio.1</span> <span class=\"n\">i.2</span>\n</code></pre></div>\n<p>It is required to have the <code>[IsWellOrder Œπ (¬∑ &lt; ¬∑)]</code> argument explicitly, even if it is also given in a variable command, because the definition doesn't need the instance, but <code>decreasing_by</code> doesn't work without the instance. Is this intended?</p>",
        "id": 428313059,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711108160
    },
    {
        "content": "<p>I suppose it makes sense to require this instance explicitly, but the error message is quite confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"bp\">‚àô</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_Iio.1</span> <span class=\"n\">i.2</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  mem_Iio.mp i.property</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ‚Üëi &lt; n : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  (invImage (fun a ‚Ü¶ a) instWellFoundedRelation).1 (‚Üëi) n : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 428318552,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711110257
    },
    {
        "content": "<p>This is probably a question for <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>.</p>",
        "id": 428359032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711122340
    },
    {
        "content": "<p>Not exactly a part of the code that I touched yet, but I wouldn‚Äôt be surprised if whatever logic decides which instances to pull in from <code>variables</code> won't know much about what happens after elaborating the <code>def</code>, but before it gets compiled <code>WellFounded.fix</code>. </p>\n<p>Is it really the <code>decreasing_by</code> that doesn‚Äôt work, or is it the <code>termination_by</code>?<br>\nI wonder which well-founded relation it uses without the instance. Maybe run <code>simp_wf</code> after <code>decreasing_by</code> to see the goal better.</p>",
        "id": 428416241,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711145324
    },
    {
        "content": "<p>It is indeed <code>decreasing_by</code> that fails. The goal (with pp.explicit set to true) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">invImage</span> <span class=\"n\">Œπ</span> <span class=\"n\">Œπ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instWellFoundedRelation</span> <span class=\"n\">Œπ</span> <span class=\"o\">(</span><span class=\"n\">instSizeOf</span> <span class=\"n\">Œπ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>the <code>invImage (fun a ‚Ü¶ a)</code> doesn't do anything at all. The well-founded relation instance that it picks up is <code>@instWellFoundedRelation Œπ (instSizeOf Œπ))</code>, and this is just the trivial preorder.</p>",
        "id": 428422404,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711149271
    },
    {
        "content": "<p><code>simp_wf</code> turns the goal into <code>False</code> :)</p>",
        "id": 428422535,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711149374
    },
    {
        "content": "<p>I think there could be some clearer error message when this instance is picked up, because proving <code>False</code> is quite hard.</p>",
        "id": 428422745,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1711149542
    },
    {
        "content": "<blockquote>\n<p>because proving False is quite hard.</p>\n</blockquote>\n<p>but worth it, afterwards all your other theorems are much easier to prove!</p>",
        "id": 429069995,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711190512
    },
    {
        "content": "<p>I wonder how useful this ‚Äúevery type has a trivial sizeOf instance‚Äù is. Maybe it was needed before we inferred sensible lexicographic orders? It might be possible to catch this explicitly; I'll keep an ear open if this is something that happens often.</p>",
        "id": 429070117,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711190606
    }
]