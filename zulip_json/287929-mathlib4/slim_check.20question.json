[
    {
        "content": "<p>Should this happen? Am I misunderstanding something?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.GoldenRatio</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Found problems!</span>\n<span class=\"cm\">  q := 1</span>\n<span class=\"cm\">  issue: 8 = 6 does not hold</span>\n<span class=\"cm\">  (0 shrinks)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- test this case in the kernel</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hq</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine??</span>\n</code></pre></div>\n<p>(context: I am currently totally confused about whether the thing I'm trying to prove is true)</p>",
        "id": 412709012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705151293
    },
    {
        "content": "<p><code>set_option trace.slim_check.decoration true</code> shows that something is going wrong</p>",
        "id": 412711932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705154174
    },
    {
        "content": "<p>It replaced one of the <code>q</code>s with <code>k</code>!</p>",
        "id": 412711949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705154205
    },
    {
        "content": "<p>I would guess the bug is this raw matching on <code>forallE</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/2523a65bd2b94019a3afb291e9499abcaa0f7c0a/Mathlib/Testing/SlimCheck/Testable.lean#L514C19-L519\">https://github.com/leanprover-community/mathlib4/blob/2523a65bd2b94019a3afb291e9499abcaa0f7c0a/Mathlib/Testing/SlimCheck/Testable.lean#L514C19-L519</a></p>",
        "id": 412712059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705154315
    },
    {
        "content": "<p>Adding the data back in there in L518 is definitely wrong I would say? you're definitely supposed to recompute it after potentially changing the expression right?</p>",
        "id": 412712154,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705154411
    },
    {
        "content": "<p>FWIW here's <code>slim_check</code> finding problems with a definitely-true goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span> <span class=\"c1\">-- claims to find problem with q=1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">le_add_iff_nonneg_left</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- but there are no problems</span>\n</code></pre></div>",
        "id": 412712683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705154905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slim_check.20question/near/412712683\">said</a>:</p>\n<blockquote>\n<p>FWIW here's <code>slim_check</code> finding problems with a definitely-true goal:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span> <span class=\"c1\">-- claims to find problem with q=1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">le_add_iff_nonneg_left</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- but there are no problems</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I do btw find this rather amusing because we actually made slimcheck proof producing to stop this from happening, but I guess when we change the statement its still possible to cheat :D</p>",
        "id": 412713167,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705155426
    },
    {
        "content": "<p>I think using <code>mapForallTelescope</code> is almost the right tool here, but I can't find out how to force it to do one binder at a time</p>",
        "id": 412713368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705155637
    },
    {
        "content": "<p>Almost of the <code>forallTelescope</code> API seems to be greedy, and I can't see an easy way to move inside a single binder</p>",
        "id": 412713389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705155664
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9722\">#9722</a> is my attempt at a fix</p>",
        "id": 412714094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705156338
    },
    {
        "content": "<p>Didn't <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> run into something similar with loogle about wanting the right forall telescope?</p>",
        "id": 412718203,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705159700
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withLocalDecl#doc\">docs#Lean.Meta.withLocalDecl</a> is what I wanted here</p>",
        "id": 412718654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705160137
    },
    {
        "content": "<p>I find it always scary when other people remember better what I did, or tired, or wondered about, in the past. Sometimes my <span aria-label=\"brain\" class=\"emoji emoji-1f9e0\" role=\"img\" title=\"brain\">:brain:</span> is <span aria-label=\"cheese\" class=\"emoji emoji-1f9c0\" role=\"img\" title=\"cheese\">:cheese:</span>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 412719892,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705161047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slim_check.20question/near/412714094\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9722\">#9722</a> is my attempt at a fix</p>\n</blockquote>\n<p>(See <a href=\"#narrow/stream/113488-general/topic/noisy.20tests/near/419142386\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/noisy.20tests/near/419142386</a> for discussion about unrelated CI issues)</p>",
        "id": 419142450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706743616
    },
    {
        "content": "<p>I want to introduce some enhancements to SlimCheck, and I am looking for some benchmark to test my hypothesised enhancements. Is there any collection of incorrect claims that I could use? Any help would be very helpful.</p>",
        "id": 422656931,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708532622
    },
    {
        "content": "<p>You mean like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 422657285,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708532709
    },
    {
        "content": "<p>Yes</p>",
        "id": 422657312,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708532720
    },
    {
        "content": "<p>I do not know of any such repository, but, ideally, any result in mathlib actually uses all of its hypotheses: removing one of them should yield a false statement.  Would this count?</p>",
        "id": 422658664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708533077
    },
    {
        "content": "<p>I assume you're aware of the tests already in mathlib?</p>",
        "id": 422733573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708566971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I think that would be an interesting approach. I will try that. Also <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, no I wasn't aware but I just checked... There are a large number of tests over there. Thanks!</p>",
        "id": 422742923,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708573461
    },
    {
        "content": "<p>If you want something that is true for a long time, you can also use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">slim_check</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422810512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708606528
    },
    {
        "content": "<p>Sure, yes. However I am looking for cases where the counterexamples are hard to find using slimcheck's heuristic.</p>",
        "id": 422860217,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708620641
    },
    {
        "content": "<p>Slimcheck has a pretty fatal design flaw that means it cannot be used (nor extended) to find counter-examples for anything noncomputable</p>",
        "id": 422861599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708621068
    },
    {
        "content": "<p>One interpretation of the flaw is that it should be sampling elements from <code>Q($X)</code>, but currently samples them from <code>X</code></p>",
        "id": 422861834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708621125
    },
    {
        "content": "<p>How about something like <code>example {n : Nat} : Prime (2 ^ (n + 2) - 1)</code>?</p>",
        "id": 422901666,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708634835
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"380890\">@Emilie (Shad Amethyst)</span>,  that is a good example!</p>",
        "id": 423190887,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708796479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I see... I am still familiarising myself with Lean and although I can see what you might mean by noncomputable, I did not understand the <code>Q($X)</code> analogy. Could you please expand on that a little bit? Thanks a lot!</p>",
        "id": 423191740,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708797179
    },
    {
        "content": "<p><code>Q($X)</code> is \"lean expressions that evaluate to type <code>X</code>\"</p>",
        "id": 423191767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708797214
    },
    {
        "content": "<p>As opposed to \"terms of type <code>X</code>\"</p>",
        "id": 423191775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708797228
    },
    {
        "content": "<p>For instance, <code>(Expr.const ``Real.sqrt []).app r : Expr</code> is \"the same\" as <code>q(Real.sqrt r) : Q(Real)</code> and both are computable, but <code>Real.sqrt r</code> is not.</p>",
        "id": 423191861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708797317
    },
    {
        "content": "<p>Okay, I understand more now.</p>",
        "id": 423192485,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708797951
    },
    {
        "content": "<p>I have previously worked on benchmarking Python code generated by LLMs, during which I realised that the \"thoroughness\" that property-based testing (like through SlimCheck) can achieve in finding counterexamples is matched by some generative-AI assisted techniques like type-aware mutations. I want to see if this can be extended to SlimCheck, but I now wonder if it is possible to \"extend\" SlimCheck at all.</p>",
        "id": 423192696,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708798087
    },
    {
        "content": "<p>Calling out to an AI is currently impossible in <code>slim_check</code>, because the extensions have access to no state other than a random number generator; so no IO</p>",
        "id": 423192759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708798162
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3838\">#3838</a> was an attempt to change that (I think for unrelated reasons), though it makes the <code>x : X</code> vs <code>e : Q($X)</code> problem worse</p>",
        "id": 423192840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708798219
    },
    {
        "content": "<p>Ohh, okay. Yes, I see that calling an AI may not be possible from within SlimCheck. One could take this process out of the lean project itself and instead make something like a VSCode extension.</p>",
        "id": 423193256,
        "sender_full_name": "Mrigank Pawagi",
        "timestamp": 1708798604
    }
]