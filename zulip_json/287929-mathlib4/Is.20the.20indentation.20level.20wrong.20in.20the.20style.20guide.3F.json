[
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/contribute/style.html\">style guide</a> says</p>\n<blockquote>\n<p>After stating the theorem, we indent the lines in the subsequent proof by 2 spaces.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_case</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.recOn</span> <span class=\"n\">n</span> <span class=\"n\">H1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">IH</span> <span class=\"bp\">↦</span> <span class=\"n\">H2</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and later it gives this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_right_inj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.recOn</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"k\">calc</span>\n    <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>     <span class=\"o\">:=</span> <span class=\"n\">zero_add</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>   <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">succ_add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span>            <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span>   <span class=\"o\">:=</span> <span class=\"n\">H</span>\n      <span class=\"n\">_</span>            <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_add</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">succ.inj</span> <span class=\"n\">H2</span>\n    <span class=\"n\">IH</span> <span class=\"n\">H3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Should that <code>Nat.recOn n</code> be indented?</p>",
        "id": 422128436,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708289692
    },
    {
        "content": "<p>Yes</p>",
        "id": 422128570,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708289801
    },
    {
        "content": "<p>I'll send a PR.</p>",
        "id": 422129315,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708290407
    },
    {
        "content": "<p>Yeah, everything there should be indented an extra two spaces.</p>",
        "id": 422129369,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708290455
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/442\">https://github.com/leanprover-community/leanprover-community.github.io/pull/442</a></p>",
        "id": 422129536,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708290592
    }
]