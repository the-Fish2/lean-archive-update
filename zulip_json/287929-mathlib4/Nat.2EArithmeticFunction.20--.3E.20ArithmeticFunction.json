[
    {
        "content": "<p>It seems to me that the <code>Nat.</code> part in the namespace <code>Nat.ArithmeticFunction</code> is unnecessary, as I would not expect the need for \"arithmetic functions\" defined on something else than <code>Nat</code> to arise.<br>\nWould there be any objections to removing it?</p>",
        "id": 420713063,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707505208
    },
    {
        "content": "<p>You should change it to <code>PNat</code> ;-)</p>",
        "id": 420716123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707506402
    },
    {
        "content": "<p>I agree you can remove it</p>",
        "id": 420721393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707508597
    },
    {
        "content": "<p>I'll do that once <a href=\"https://github.com/leanprover-community/mathlib4/pull/10385\">#10385</a> is merged (and I had some sleep...).</p>",
        "id": 420726055,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707510551
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10399\">#10399</a></p>",
        "id": 420790892,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707562796
    },
    {
        "content": "<p>As a next step here. I would like to put the various notations introduced in <code>NumberTheory.AithmeticFunction</code> into separate scopes (like <code>ArithmeticFunction.vonMangoldt</code> for <code>Λ</code>), so that it will be possible to make them available more selectively. For example, in some context I would like to use <code>Λ</code> for the von Mangoldt function but at the same time <code>ζ</code> as a (local) notation for the Riemann zeta function.<br>\nObjections?</p>",
        "id": 420800408,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707571964
    },
    {
        "content": "<p>Objection: Make it possible to get all notations by opening a single locale</p>",
        "id": 420800436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572001
    },
    {
        "content": "<p>How does one do that?</p>",
        "id": 420800452,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572025
    },
    {
        "content": "<p>Can locales be hierarchised?</p>",
        "id": 420800454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572025
    },
    {
        "content": "<p>No idea.</p>",
        "id": 420800507,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572053
    },
    {
        "content": "<p>Is there documentation on locales somewhere?</p>",
        "id": 420800515,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572066
    },
    {
        "content": "<p>At worse you can define the notations in two locales</p>",
        "id": 420800530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572083
    },
    {
        "content": "<p>So just add separate locales for the various definitions in addition to what exists, I guess?</p>",
        "id": 420800571,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572122
    },
    {
        "content": "<p>I think that's good, yes</p>",
        "id": 420800597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707572152
    },
    {
        "content": "<p>OK; I'll try that.</p>",
        "id": 420800654,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572170
    },
    {
        "content": "<p>This approach seems to work in a simple test file, so it looks good.</p>",
        "id": 420801140,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707572586
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10403\">#10403</a></p>",
        "id": 420802631,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707573894
    },
    {
        "content": "<p>I wonder whether the locale shouldn't be named <code>RiemannZeta</code> and <code>RiemannSigma</code>, for example if one wishes to have <code>DedekindZeta</code> or <code>WeierstrassSigma</code> …</p>",
        "id": 420814727,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707583795
    },
    {
        "content": "<p>Note that this zeta is not the Riemann zeta function, but the arithmetic function giving its coefficients (i.e., it is the constant function 1 except that zero is mapped to zero). So I don't think <code>RiemannZeta</code> is a good name here.<br>\n(We can of course introduce notation <code>ζ</code> for the Riemann zeta function in a locale <code>RiemannZeta</code> in addition.)</p>",
        "id": 420822283,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707589743
    },
    {
        "content": "<p>Well, then zeta is a rather confusing name, is it? <br>\n(Stupid remark that shows I must have missed some episodes: the ring of arithmetic functions is just the large monoid algebra of the strictly positive integers. Thinking of it in this way would have a lot of the lemmas be general instances of what exists, say, for power series, etc.)</p>",
        "id": 420838524,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707605066
    },
    {
        "content": "<p><code>HahnSeries (Additive ℕ+) R</code> probably works :)<br>\n(Edit: maybe only <code>Additive (Associates ℕ+)</code> has the correct order + algebra structure.)</p>",
        "id": 420843023,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707609713
    },
    {
        "content": "<p>It would, I think, but is perhaps a bit overkill and likely painful to use in concrete cases.</p>",
        "id": 420877919,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707646235
    },
    {
        "content": "<p>(Historically, arithmetic functions in Mathlib seem to predate Hahn series.)</p>",
        "id": 420877962,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707646303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2EArithmeticFunction.20--.3E.20ArithmeticFunction/near/420838524\">said</a>:</p>\n<blockquote>\n<p>Well, then zeta is a rather confusing name, is it? </p>\n</blockquote>\n<p>I assume it is fairly standard in the context of arithmetic functions. The goal of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10403\">#10403</a> is to mitigate the confusion by enabling you to just import notation for the Möbius and von Mangoldt functions (say).</p>",
        "id": 420878166,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707646494
    },
    {
        "content": "<p>(It is called <code>z</code> in the book where I learnt this, D. P. Parent, <em>Exercises in Number Theory</em>, and I have to admit that <code>z</code> is not really better than <code>ζ</code>.)</p>",
        "id": 420881206,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707649432
    },
    {
        "content": "<p>Serious question : can you define the Riemann zeta function using the notation, and have the notation <code>ζ</code> for both of them?</p>",
        "id": 420881287,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707649491
    },
    {
        "content": "<p>I think yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.LSeries.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.ZetaFunction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ArithmeticFunction</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"c1\">-- defines `ζ` as an arith. function</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ζ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">riemannZeta</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">LSeries</span> <span class=\"n\">ζ</span>  <span class=\"c1\">-- error without type ascription</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">ζ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">LSeries</span> <span class=\"n\">ζ</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 420883518,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707651741
    }
]