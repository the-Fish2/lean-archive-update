[
    {
        "content": "<p>Finite adeles need some love. Along the way to proving that the finite adeles of K are a K-algebra (K the field of fractions of a DVR), I was faced with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span><span class=\"c1\">--.RingTheory.Valuation.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℤₘ₀</span> <span class=\"c1\">-- Notation for WithZero (Multiplicative ℤ)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This turned out to be trickier than I'd expected. Here's my current solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span><span class=\"c1\">--.RingTheory.Valuation.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℤₘ₀</span> <span class=\"c1\">-- Notation for WithZero (Multiplicative ℤ)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Multiplicative</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ofAdd</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Multiplicative</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ofAdd</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"c1\">-- this makes `mul_lt_mul_left`, `mul_pos` etc work on `ℤₘ₀`</span>\n<span class=\"kn\">open</span> <span class=\"n\">Multiplicative</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PosMulStrictMono</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">elim</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">bar</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">bar</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">exact</span> <span class=\"n\">WithZero.zero_lt_coe</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hoo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"n\">WithZero.zero_lt_coe</span> <span class=\"o\">(</span><span class=\"n\">ofAdd</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">bar</span> <span class=\"n\">hoo</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n      <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">eq_bot_or_bot_lt</span> <span class=\"n\">d</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">zero_lt_one</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"k\">calc</span>\n    <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">h3</span>\n</code></pre></div>\n<p>Do we want some of this in mathlib? What should foo and bar be called?</p>",
        "id": 439617149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716225334
    },
    {
        "content": "<p>I was also wondering whether it would be possible to make some kind of tactic for working with <code>ℤₘ₀</code> of the form \"I will turn one question about this into a finite number of questions about integers, obtained by doing a case split</p>",
        "id": 439617641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716225510
    },
    {
        "content": "<p>In the past I implemented a tactic very much like this (for very much the same application), the value group/monoid of a valuation is something that is mostly like the linear theory of integers / naturals (hence decidable) together with infinity (zero in the multiplicative case). This theory is also decidable. A decision procedure for the universally quantified problems is basically just \"do cases then linarith\" though by now you could probably use <code>omega</code> to get much further: <a href=\"https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean\">https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean</a> . In your case you'l have to throw in some simp lemmas that converts multiplicative to additive I guess</p>",
        "id": 439800064,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1716292449
    },
    {
        "content": "<p>Yeah my proof is supposed to be \"cases for 0 and then reduce to a question about integers otherwise\"</p>",
        "id": 439803344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716293611
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13090\">#13090</a> seems to help (there's some hideous defeq abuse happening behind the scenes but I figured people probably wouldn't notice)</p>",
        "id": 439908579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716326822
    }
]