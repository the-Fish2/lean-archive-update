[
    {
        "content": "<p>I'm trying to understand how to write custom <code>notation</code>. Here is my attempt so far at trying to do this for the kernel of multiplication by an integer <code>n</code> on an <code>AddCommGroup</code> (there seems to be at least three different ways of expressing the same map that are currently unrelated to one another by any lemma --- <code>zsmulAddGroupHom</code>, <code>DistribMulAction.toAddMonoidHom</code>, <code>AddMonoidHom.smul</code> --- but that's a story for another day):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"n\">notation3</span> <span class=\"n\">G</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]1\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">DistribMulAction.toAddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">G</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]2\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">DistribMulAction.toAddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">G</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]3\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">notation3</span> <span class=\"n\">G</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]4\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"mi\">1</span> <span class=\"c1\">-- prints G[n]1</span>\n<span class=\"k\">#check</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"mi\">2</span> <span class=\"c1\">-- prints G[n]1</span>\n<span class=\"k\">#check</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"mi\">3</span> <span class=\"c1\">-- prints AddMonoidHom.ker (zsmulAddGroupHom n)</span>\n<span class=\"k\">#check</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"mi\">4</span> <span class=\"c1\">-- prints AddMonoidHom.ker (zsmulAddGroupHom n)</span>\n</code></pre></div>\n<p>The numbering at the end is just to see what's going on more clearly. I was told that <code>notation3</code> sometimes works when <code>notation</code> doesn't (e.g. <code>G[n]2</code> doesn't work), but I can't figure out how to make it work in general (e.g. <code>G[n]3</code>), and <code>set_option trace.notation3 true</code> for the last one gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">elaborate</span> <span class=\"n\">pattern</span>\n  <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">zsmulAddGroupHom</span> <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">AddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SubNegMonoid.toAddMonoid</span> <span class=\"n\">G</span> <span class=\"n\">SubtractionMonoid.toSubNegMonoid</span><span class=\"o\">))</span>\n    <span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.13541</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">AddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SubNegMonoid.toAddMonoid</span> <span class=\"n\">G</span> <span class=\"n\">AddGroup.toSubNegMonoid</span><span class=\"o\">))</span>\n    <span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.13541</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> any ideas what's going on and how to make the last one work? I have to use <code>zsmulAddGroupHom</code> because I think there's no analogue of <code>DistribMulAction.toAddMonoidHom</code> for <code>Monoid</code> currently.</p>",
        "id": 418303207,
        "sender_full_name": "David Ang",
        "timestamp": 1706284483
    },
    {
        "content": "<p>In example 4 I'm seeing an error on the notation3 command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">zsmulAddGroupHom</span> <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">AddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SubNegMonoid.toAddMonoid</span> <span class=\"n\">G</span> <span class=\"n\">SubtractionMonoid.toSubNegMonoid</span><span class=\"o\">))</span>\n    <span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.13462</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">AddMonoidHom</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SubNegMonoid.toAddMonoid</span> <span class=\"n\">G</span> <span class=\"n\">AddGroup.toSubNegMonoid</span><span class=\"o\">))</span>\n    <span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.13462</span>\n</code></pre></div>",
        "id": 418304385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706284827
    },
    {
        "content": "<p>Yes I included the error message in my first post too :)</p>",
        "id": 418304614,
        "sender_full_name": "David Ang",
        "timestamp": 1706284908
    },
    {
        "content": "<p>Right, so you did <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>One solution here is to give up on a notation that works for all <code>G</code> and focus on the local variable <code>G</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"G[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]4\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">zsmulAddGroupHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 418304851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706284981
    },
    {
        "content": "<p>The issue appears to be that when it's trying to build the pattern, it needs an <code>AddCommGroup</code> instance available to the <code>G</code> variable in the notation, but there isn't a way to tell <code>notation3</code> that there is one.</p>",
        "id": 418305110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285054
    },
    {
        "content": "<p>Usually notation3 can handle missing instances, but in this case the missing instance leads to a type error, because, presumably, it needs some definitional property that comes with an actual AddCommGroup instance</p>",
        "id": 418305297,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285116
    },
    {
        "content": "<p>Another solution is to use <code>notation</code> and then write a custom pretty printer.</p>",
        "id": 418305610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20notation.20and.20notation3/near/418305610\">said</a>:</p>\n<blockquote>\n<p>Another solution is to use <code>notation</code> and then write a custom pretty printer.</p>\n</blockquote>\n<p>I can't use the local notation because <code>G</code> could be anything - how would one do this?</p>",
        "id": 418305775,
        "sender_full_name": "David Ang",
        "timestamp": 1706285249
    },
    {
        "content": "<p>Is there no way to supply the necessary instances in the <code>notation</code> manually?</p>",
        "id": 418305835,
        "sender_full_name": "David Ang",
        "timestamp": 1706285270
    },
    {
        "content": "<p>Just to be clear about <code>notation</code>/<code>notation3</code> and variables, the the commands don't look at anything defined by <code>variable</code>s, except for <code>local notation3</code>, so in your examples the <code>variable</code> command can come after all of them without any change to the meaning.</p>\n<p>There's no feature right now for letting <code>notation3</code> know that some variable must have some instance in scope. It might be a good improvement.</p>",
        "id": 418306621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285502
    },
    {
        "content": "<p>In the meantime, maybe you can find another way to express this map that it's able to elaborate?</p>",
        "id": 418306769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285545
    },
    {
        "content": "<p>The fundamental issue here as I understand it is that it's trying to elaborate the term on the right-hand side of the <code>=&gt;</code>, and without extra information that we're not really able to provide it's failing.</p>",
        "id": 418306935,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285594
    },
    {
        "content": "<p>I might just have to cope with no pretty-printed notation...</p>",
        "id": 418307772,
        "sender_full_name": "David Ang",
        "timestamp": 1706285871
    },
    {
        "content": "<p>It's possible to write a pretty printer for it, but you'd have to study the few <code>@[delab ...]</code> examples that are in mathlib, std, and lean</p>",
        "id": 418308053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706285962
    },
    {
        "content": "<p>The <code>notation3</code> command tries to generate one of these automatically, and a limitation is that it only works if it can elaborate the pattern, and a further limitation is that even if that works it might be too conservative and not apply in practice</p>",
        "id": 418308253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706286022
    }
]