[
    {
        "content": "<p>How do I prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">asdf</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In particular I don't understand why <code>rfl</code> doesn't work.</p>",
        "id": 425679223,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709983981
    },
    {
        "content": "<p>Update: Replacing <code>theorem</code> with <code>def</code> works, but I don't really understand why.</p>",
        "id": 425679508,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709984264
    },
    {
        "content": "<p>Because theorem forgets the definition. You should never use theorem with a type</p>",
        "id": 425681162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709985923
    },
    {
        "content": "<p>Ah I guess it’s because normally one uses theorem for Props, so the definition/proof can be dropped?</p>",
        "id": 425681348,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709986080
    },
    {
        "content": "<p>But then how does #print asdf still show the toFun and invFun fields (not the other two)?</p>",
        "id": 425681405,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709986108
    },
    {
        "content": "<p>This works, but you really should not use <code>theorem</code> there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">asdf</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">asdf</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 425681818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709986551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"689727\">Jame GA</span> has marked this topic as resolved.</p>",
        "id": 425753090,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710056734
    }
]