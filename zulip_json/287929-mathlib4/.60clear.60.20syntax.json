[
    {
        "content": "<p>I find that <code>clear</code> has really weird syntax: the only <code>clear</code> call I can ever get working is something like <code>clear * -b</code>, where <code>t</code> is something in the context. If I just write <code>clear *</code>, I get <code>unexpected identifier; expected '-'</code>; if I write <code>clear * -b -a</code>, I get <code>function expected at a...</code>. If I try putting things before, I get <code>unexpected token at this precedence level</code>... is there a recorded syntax for <code>clear</code> down? I think there is some clash between <code>mathlib</code> and core here going on...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">clear_playground</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">clear</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 410547331,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703944663
    },
    {
        "content": "<p>After a suggestion from Kyle, I'm thinking of updating <code>prune</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5062\">#5062</a>) to be a front for <code>clear</code>.  I wonder whether maybe the two discussions can happen simultaneously.</p>",
        "id": 410547557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703944846
    },
    {
        "content": "<p>In particular, I'm thinking about a good syntax for cases where you want to clear a non-minimal/maximal set of hypotheses.</p>",
        "id": 410547659,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703944903
    },
    {
        "content": "<p><code>prune</code> seems really useful, and I don't agree that it is a band-aid! sometimes after doing induction-y sort of things, I find that you have a goal state cluttered with things that you don't need; the <code>induction</code> tactic does clear these sometimes, but sometimes you have to do the induction manually, and sometimes it fails. new <code>wlog</code> too</p>",
        "id": 410547832,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703944982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">clear_playground</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">clear</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>is the syntax, I also find it quite odd tbh</p>",
        "id": 410548281,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703945430
    },
    {
        "content": "<p>I wonder whether having two choices <code>clear &lt;comma-separated identifiers&gt;</code> and <code>clear keeping &lt;cs identifiers&gt;</code> would be a good choice.  Implicitly clearing every hypothesis that depends on the ones to be cleared.</p>",
        "id": 410548569,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703945718
    },
    {
        "content": "<p>Oh btw <code> clear * -</code> is how you clear everything too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 410549371,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703946490
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.clearExcept#doc\">docs#Lean.Elab.Tactic.clearExcept</a> is the <code>clear * - ids*</code> syntax</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Tactic.clear#doc\">docs#Lean.Parser.Tactic.clear</a> is the <code>clear ids*</code> syntax</p>",
        "id": 410558565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703955345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60clear.60.20syntax/near/410547557\">said</a>:</p>\n<blockquote>\n<p>After a suggestion from Kyle, I'm thinking of updating <code>prune</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5062\">#5062</a>) to be a front for <code>clear</code>.  I wonder whether maybe the two discussions can happen simultaneously.</p>\n</blockquote>\n<p>Have you decided against it being a frontend for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.cleanup#doc\">docs#Lean.MVarId.cleanup</a> ? Or maybe are you thinking about having <code>prune</code> be able to (transitively?) clear variables before running cleanup with which variables to keep?</p>",
        "id": 410559794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703956398
    },
    {
        "content": "<p>Kyle, I have not really looked at the implementation, I was still playing around with figuring out what I would expect it to do.  I think that <code>cleanup</code> should be the core algorithm, and it probably is a good default.  I was more trying to fix ideas on how to populate the <code>toPreserve</code> array with the extended syntax.</p>",
        "id": 410560856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703957636
    },
    {
        "content": "<p>My intuition here is just that I know there are a few places that use <code>cleanup</code> so it could be nice to expose it, but it's possible there's a better algorithm. I hope though that finding a good way to populate the <code>toPreserve</code> array is all you need!</p>\n<p>The thing I'm mostly interested in is being able to handle the sorts of local variables you'd tend to want to keep when pruning (such as propositions that reference kept variables) using a simple and easy-to-predict UI. I know that <code>congr</code> and <code>convert</code> take a numeric depth argument, but at least <code>congr n+1</code> is roughly equivalent to <code>congr 1 &lt;;&gt; congr n</code>, so it's semipredictable.</p>",
        "id": 410561911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703958794
    }
]