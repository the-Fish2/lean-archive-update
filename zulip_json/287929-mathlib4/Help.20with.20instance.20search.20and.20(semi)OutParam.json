[
    {
        "content": "<p>Consider the class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Quot</span>\n\n<span class=\"sd\">/--A class representing antisymmetry \"up to\" some equivalence relation</span>\n<span class=\"sd\">  `eqv`. That is, if `rel x y` and `rel y x`, then `eqv x y`.</span>\n\n<span class=\"sd\">  As with `Quot`, `eqv` need not actually be an equivalence relation, in which</span>\n<span class=\"sd\">case `AntiSymmUpTo eqv r` is equivalent to `AntisymmUpTo (EqvGen eqv) r`-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">AntisymmUpTo</span> <span class=\"o\">(</span><span class=\"n\">eqv</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">semiOutParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>  <span class=\"n\">where</span>\n  <span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Clearly, as multiple relations <code>r</code> might 'close into' a given <code>eqv</code>, it would be inappropriate to mark <code>r</code> as an <code>outParam</code>. But with only a <code>semiOutParam</code>, <code>simp_all</code> and <code>aesop</code> can't seem to find the right instance even when there's one right there in the declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"c1\">-- or @[aesop safe apply]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">antisymm_upto_eqv</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AntisymmUpTo</span> <span class=\"n\">ε</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqvGen</span> <span class=\"n\">ε</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"n\">AntisymmUpTo.antisymm</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AntisymmUpTo</span> <span class=\"n\">ε</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqvGen</span> <span class=\"n\">ε</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- At this point, the infoview includes the line</span>\n    <span class=\"c1\">--`inst✝ : AntisymmUpTo ε r`.</span>\n    <span class=\"n\">aesop</span> <span class=\"c1\">-- makes no progress</span>\n</code></pre></div>",
        "id": 432126145,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712640701
    },
    {
        "content": "<p>Changing it to an <code>outParam</code> \"fixes\" the issue, but from what I understand that is not the correct use of <code>outParam</code>s here. What else can I do to fix this?</p>",
        "id": 432126304,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712640758
    }
]