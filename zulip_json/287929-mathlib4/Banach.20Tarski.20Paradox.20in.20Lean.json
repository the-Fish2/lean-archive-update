[
    {
        "content": "<p>Hello there, I'm a high school student from germany and I'm working together with another student to formalize the Banach-Tarski Paradox in lean.(A ball is equidecomposable with two copies of itself). (I already made a post in  <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Introduction\">#new members &gt; Introduction</a> some time ago). We've realized that the Formalization of the Banach-Tarski Paradox is a quite substantial task (especially for beginners). So, if you are interested (and perhaps even want to contribute), this thread can be used for discussion. The blueprint and a link to the github repo can be found at  <a href=\"https://bergschaf.github.io/banach-tarski/\">https://bergschaf.github.io/banach-tarski/</a> (PRs are very welcome :) )</p>",
        "id": 429228420,
        "sender_full_name": "Christian K",
        "timestamp": 1711300452
    },
    {
        "content": "<p>We've already completed a definition of equidecomposability and we've proven that a circle is equidecomposable with a copy of itself without a certain point. Where would this fit in the mathlib?</p>",
        "id": 429246955,
        "sender_full_name": "Christian K",
        "timestamp": 1711313713
    },
    {
        "content": "<p>(<a href=\"https://github.com/Bergschaf/banach-tarski/blob/master/banach_tarski/Equidecomposable/Def.lean#L151\">https://github.com/Bergschaf/banach-tarski/blob/master/banach_tarski/Equidecomposable/Def.lean#L151</a> for reference.)</p>",
        "id": 429249303,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711315293
    },
    {
        "content": "<p>I think this would need to be rewritten and made quite a bit more general to go in Mathlib. (i.e. neither R^3, or even GL, should be baked into the definition; can you just use Mathlib's affine <del>maps</del> isometries, if such exist?) It looks like you're also developing a lot of non-canonical List api that it would be good to unify first.</p>",
        "id": 429249483,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711315434
    },
    {
        "content": "<p>Looking at the blueprint, it seems there are a few things you use that could fit into mathlib on their own.</p>\n<p><del>For example, I searched around the docs and I don't think the orbits of a monoid action (or group action) appear in mathlib.</del></p>\n<p>You also use the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is irrational (although I don't actually believe this is really necessary), which, as far as I can tell, doesn't appear in mathlib either. In fact, even the irrationality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> doesn't appear.</p>\n<p>Finally, you of course use the multiplicative action of the linear group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">GL_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on Euclidean space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>. You also use the multiplicative action of the affine group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><mo>⋊</mo><mi>G</mi><msub><mi>L</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3 \\rtimes GL_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8958em;vertical-align:-0.0817em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin amsrm\">⋊</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>. These aren't defined in mathlib (at least not as <code>MulAction</code>s, although there is the <code>vecMul</code> notation <code>ᵥ*</code>). In fact, the affine group isn't even defined in mathlib as far as I can see.</p>\n<p>I wonder if someone could weigh in on whether it might be better to try to get these individual pieces into mathlib first.</p>",
        "id": 429249572,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711315476
    },
    {
        "content": "<p>There are lots of subsidiary definitions for equidecomposable which you're not using (e.g. just API for writing a set as a disjoint union, which I don't think should be in terms of <code>List</code>).</p>",
        "id": 429249639,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711315535
    },
    {
        "content": "<p>Also, I might be wrong, but shouldn't you be using the special orthogonal group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">SO_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/UnitaryGroup.html#Matrix.orthogonalGroup\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/UnitaryGroup.html#Matrix.orthogonalGroup</a>) instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">GL_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 429249656,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711315545
    },
    {
        "content": "<blockquote>\n<p>In fact, the affine group isn't even defined in mathlib as far as I can see.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AffineEquiv.group#doc\">docs#AffineEquiv.group</a> ? (found with loogle by searching for <code>\"affine\", Group</code>)</p>",
        "id": 429250208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711315840
    },
    {
        "content": "<p>Transcendentality of pi is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6718\">#6718</a></p>",
        "id": 429250216,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711315844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695266\">Mitchell Lee</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean/near/429249572\">said</a>:</p>\n<blockquote>\n<p>You also use the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is irrational (although I don't actually believe this is really necessary), which, as far as I can tell, doesn't appear in mathlib either. In fact, even the irrationality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> doesn't appear.</p>\n</blockquote>\n<p>Yeah, but I think there is a PR that contains the irrationality of PI (ohh, Ruben van de velde was already faster ;) ). For my proof, <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Real.2Ecos.20N.20cannot.20be.201/near/424531596\">someone on zulip</a> suggested that I use the irrationality of sqrt 2 . (But I haven't prooved this lemma yet). I think it might be a good idea to wait for the irrationality of PI before putting the equidecomposability of the circle in the Mathlib.</p>",
        "id": 429250329,
        "sender_full_name": "Christian K",
        "timestamp": 1711315904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean/near/429249639\">said</a>:</p>\n<blockquote>\n<p>There are lots of subsidiary definitions for equidecomposable which you're not using (e.g. just API for writing a set as a disjoint union, which I don't think should be in terms of <code>List</code>).</p>\n</blockquote>\n<p>What do you mean by this, should the parts and the rotations not be represented by lists?</p>",
        "id": 429250426,
        "sender_full_name": "Christian K",
        "timestamp": 1711315966
    },
    {
        "content": "<p>In your proof of Lemma 2.20 in the blueprint, instead of using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>cos</mi><mo>⁡</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\cos n, \\sin n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>π</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>π</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\cos (\\sqrt{2} \\pi n), \\sin (\\sqrt{2} \\pi n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">πn</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">πn</span><span class=\"mclose\">))</span></span></span></span>. You can prove that these points are distinct without knowing anything about the irrationality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>.</p>",
        "id": 429250592,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711316089
    },
    {
        "content": "<p>I'm already using this, the blueprint is not up to date (and in german, I'm sorry <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> ). <br>\n(<a href=\"https://github.com/Bergschaf/banach-tarski/blob/dbea2f85e1c8a6df9bd4d1b1e024a66b5b4ba545/banach_tarski/Equidecomposable/Equi_Kreis.lean#L9\">def A : Set r_3 := {w : r_3 | ∃ n : {x : ℕ | x &gt; 0}, w = ![Real.cos (n * sq_2),Real.sin (n * sq_2),0]} -- TODO)</a></p>",
        "id": 429250992,
        "sender_full_name": "Christian K",
        "timestamp": 1711316301
    },
    {
        "content": "<p>I tried to prove <a href=\"https://github.com/Bergschaf/banach-tarski/blob/dbea2f85e1c8a6df9bd4d1b1e024a66b5b4ba545/banach_tarski/Equidecomposable/Rotations.lean#L7\">here</a> that the points are distinct, but the proof is incomplete.</p>",
        "id": 429251078,
        "sender_full_name": "Christian K",
        "timestamp": 1711316392
    },
    {
        "content": "<p>That's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\cos (\\sqrt{2} n), \\sin (\\sqrt{2} n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>. In order to know that those points are distinct, you need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mi mathvariant=\"normal\">/</mi><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\pi / \\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> is irrational. If you use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>π</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mi>π</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\cos (\\sqrt{2} \\pi n), \\sin (\\sqrt{2} \\pi n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">πn</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">πn</span><span class=\"mclose\">))</span></span></span></span> instead, it should be easier.</p>",
        "id": 429251194,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711316411
    },
    {
        "content": "<p>You can use this: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Trigonometric/Angle.html#Real.Angle.cos_sin_inj\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Trigonometric/Angle.html#Real.Angle.cos_sin_inj</a></p>",
        "id": 429251293,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711316517
    },
    {
        "content": "<p>Ok, I overlooked the difference. How long do you think will the irrationality of Pi take to get into the mathlib? Does it make sense to change this or should I just wait?</p>",
        "id": 429251349,
        "sender_full_name": "Christian K",
        "timestamp": 1711316535
    },
    {
        "content": "<p>At the rate it's going, months</p>",
        "id": 429251370,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711316558
    },
    {
        "content": "<p>I don't think there's any point in waiting</p>",
        "id": 429251403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711316588
    },
    {
        "content": "<p>And this: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Trigonometric/Angle.html#Real.Angle.angle_eq_iff_two_pi_dvd_sub\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Trigonometric/Angle.html#Real.Angle.angle_eq_iff_two_pi_dvd_sub</a></p>\n<p>I recommend writing the proof down on paper before trying to put it in Lean.</p>",
        "id": 429251435,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711316621
    },
    {
        "content": "<p>Ok, I'll try to do it this way. But I'll have to do this together with my team mate, she is much better with mathematics than I am. In the meantime, I'll look into generalizing the equidecomposability. Apart from being not general enough, is the  <a href=\"https://github.com/Bergschaf/banach-tarski/blob/master/banach_tarski/Equidecomposable/Def.lean#L151\">definition of equidecomposablility</a> correct?</p>",
        "id": 429251737,
        "sender_full_name": "Christian K",
        "timestamp": 1711316859
    },
    {
        "content": "<p>As it is, the definition is not correct. One problem is that you are using the general linear group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">GL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\">L</span></span></span></span> instead of the orthogonal group.</p>\n<p>One solution is to package the translation and rotation into a single affine isometry: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/AffineIsometry.html#AffineIsometry\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/AffineIsometry.html#AffineIsometry</a>. This should also make everything easier and cleaner to state. </p>\n<p>It would also be nice if the definition of equidecomposability could be generalized to any normed affine space, rather than just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 429252114,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711317111
    },
    {
        "content": "<p>Finally, as <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>  said, it is probably preferable not to use a List of sets to define equidecomposability. Lists are annoying to work with. Instead, you can use a term <code>parts_X : Finset (Set r_3)</code>, which satisfies the hypotheses <code>Pairwise (Disjoint on parts_X)</code> (which means the parts are disjoint) and <code>⋃₀ parts_X = X</code> (which means the union of the parts is <code>X</code>).</p>",
        "id": 429252640,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711317542
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finpartition#doc\">docs#Finpartition</a></p>",
        "id": 429252842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711317622
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Partition/Finpartition.html#Finpartition\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Partition/Finpartition.html#Finpartition</a></p>",
        "id": 429252993,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711317669
    },
    {
        "content": "<p>Ah, yes, that is better. Thanks.</p>",
        "id": 429253025,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711317708
    },
    {
        "content": "<p>By the way, I said earlier that orbits are not in mathlib. I was wrong. They actually are: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.orbit#doc\">docs#MulAction.orbit</a>. You should use this definition rather than your own.</p>\n<p>In order to use this definition of orbits, you need to tell Lean that the group you are working with (in this case, the group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>) acts on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>. You can do this by creating a local instance of <code>MulAction</code>.  Doing so will also allow you to use the notation <code>M • v</code> for applying a transformation to a vector.</p>",
        "id": 429253972,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711318357
    },
    {
        "content": "<p>One more thing.</p>\n<p>I suggested using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.orthogonalGroup#doc\">docs#Matrix.orthogonalGroup</a> for your more specific computations. However, what you really want is the <em>special</em> orthogonal group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">SO_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. You are going to run into trouble at Lemma 2.10 if you try to use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">GL_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>O</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">O_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>I would recommend defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">SO_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> before proceeding with your blueprint. This would be a nice thing to have in mathlib to begin with. Ideally, you could also define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SO(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">SO</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> for any finite-dimensional inner product space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, but it'd also be fine to leave that for another time (in my opinion).</p>",
        "id": 429257219,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711320603
    },
    {
        "content": "<p>A few comments are suggesting that equidecomposable should be defined for more general vector spaces than Euclidean space. Shouldn't it be defined for general group actions?</p>",
        "id": 429435943,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1711380010
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">specialOrthogonalGroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">orthogonalGroup</span> <span class=\"n\">n</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">Matrix.det</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Could I define SO as a subtype of the O, with the determinant 1? (inspired by <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup</a>)</p>",
        "id": 429607511,
        "sender_full_name": "Christian K",
        "timestamp": 1711443133
    },
    {
        "content": "<p>PR -&gt; <a href=\"https://github.com/leanprover-community/mathlib4/pull/11708\">https://github.com/leanprover-community/mathlib4/pull/11708</a></p>",
        "id": 429799243,
        "sender_full_name": "Christian K",
        "timestamp": 1711524776
    },
    {
        "content": "<p>I think it might be better to define it as the intersection with the special linear group, rather than nesting the subtypes.</p>",
        "id": 429811797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711530179
    },
    {
        "content": "<p>That doesn't seem to work out of the box, because the special linear group is defined as a subtype of Matrix.</p>",
        "id": 429828182,
        "sender_full_name": "Christian K",
        "timestamp": 1711535515
    },
    {
        "content": "<p>At the very least, I think it is important that you put a group structure on it. This will be done automatically if you define the special orthogonal group as the kernel of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.detMonoidHom#doc\">docs#Matrix.detMonoidHom</a>.</p>\n<p>While you're at it, you can define the special unitary group as well (which has the same definition).</p>",
        "id": 429954644,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711575904
    },
    {
        "content": "<p>The special orthogonal group is a bit thorny to define in general.  It is okay to use the kernel of determinant, when in odd rank, or if you are willing to assume 2 is invertible.  Otherwise, it is better to define it as the kernel of the Dickson invariant when rank is even.  A scheme-theoretic summary is on the middle-to-bottom of page 3 of <a href=\"https://math.stanford.edu/~conrad/252Page/handouts/O(q).pdf\">B. Conrad's notes on orthogonal groups</a>.  Since you will be working in rank 3, it wouldn't hurt to limit the definition to odd rank.</p>",
        "id": 429961018,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1711579253
    },
    {
        "content": "<p>Thanks for the remark.</p>",
        "id": 429964826,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711581446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">specialUnitaryGroup</span> <span class=\"o\">:=</span>  <span class=\"bp\">@</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">Matrix.unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Matrix.detMonoidHom</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is the problem with this Definition? <a href=\"https://github.com/leanprover-community/mathlib4/blob/0c959a52085a76a3a5ad8ca06092834bc8b0980c/Mathlib/LinearAlgebra/UnitaryGroup.lean#L232\">here on Github</a></p>\n<p>Lean says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">detMonoidHom</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But earlier in the file, this is defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coeMatrix</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>To me this looks like that  <code>↥(unitaryGroup n α)</code> should be the same as <code>(Matrix n n α) </code>. But why isn't this the case?</p>",
        "id": 430157001,
        "sender_full_name": "Christian K",
        "timestamp": 1711657666
    },
    {
        "content": "<p>A general matrix isn't unitary so these two types aren't the same in any reasonable sense</p>",
        "id": 430181717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711671211
    },
    {
        "content": "<p>As far as I know, lean doesn't coerce types in the contravariant position i.e. if <code>A</code> coerces to <code>B</code>, then a function <code>B → C</code> doesn't coerce to a function from <code>A → C</code>.</p>",
        "id": 430183948,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711672936
    },
    {
        "content": "<p>You have <code>(unitaryGroup n α).subtype</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.subtype#doc\">docs#Submonoid.subtype</a>), which has type <code>↥(unitaryGroup n α) →* Matrix n n α</code>.</p>\n<p>You can compose this with the determinant homomorphism <code>Matrix.detMonoidHom</code>, which has type <code>Matrix n n α →* α</code>.</p>\n<p>This will get you the term of type <code>↥(unitaryGroup n α) →* α</code> that you need.</p>",
        "id": 430198466,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711684681
    },
    {
        "content": "<p>So, I was oversimplifying a little when I said to just take the kernel of the determinant homomorphism. You need to restrict that homomorphism to the unitary group first.</p>",
        "id": 430198656,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711684806
    },
    {
        "content": "<p>Actually, the easier way to do that is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.restrict#doc\">docs#MonoidHom.restrict</a>.</p>",
        "id": 430199214,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711685225
    },
    {
        "content": "<p>Ok thank you very much, i defined the special unitary group like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">specialUnitaryGroup</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.restrict</span> <span class=\"n\">Matrix.detMonoidHom</span>\n                                                <span class=\"o\">(</span><span class=\"n\">Matrix.unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The special unitary group is now a subgroup of the unitary group.<br>\nBut now, lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>in this <a href=\"https://github.com/leanprover-community/mathlib4/blob/c326c43b11c32012b88b45dd0e61fc301403b25b/Mathlib/LinearAlgebra/UnitaryGroup.lean#L216\">lemma</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_specialUnitaryGroup_iff</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">Matrix.specialUnitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>why?</p>",
        "id": 430223637,
        "sender_full_name": "Christian K",
        "timestamp": 1711702406
    },
    {
        "content": "<p>By default, if <code>H : Subgroup G</code> then it only makes sense to ask <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">x\\in H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> has type <code>G</code>. In type theory each term has a <em>unique</em> type, you can't just be flexible and say that the type of x is a matrix ring and a unitary group and lots of other things as well.</p>",
        "id": 430253613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711717634
    },
    {
        "content": "<p>There are basic techniques which you use to move between these things, but they need to be applied.</p>",
        "id": 430253739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711717699
    },
    {
        "content": "<p>I understand the confusion as <code>A ∈ Matrix.unitaryGroup n α</code> works due to the fact that <code>unitaryGroup n α</code> is a <code>Submonoid</code> of <code>Matrix n n α</code>.</p>",
        "id": 430254146,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711717911
    },
    {
        "content": "<p>Also your <code>coeMatrix</code> implementation is nonsense as <code>aesop</code> is pulling in the matrix <code>A</code>.</p>",
        "id": 430257535,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711719555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean/near/430253739\">said</a>:</p>\n<blockquote>\n<p>There are basic techniques which you use to move between these things, but they need to be applied.</p>\n</blockquote>\n<p>As you probably have noticed, I'm not very familiar with these techniques. Where can i learn more about rhis?</p>",
        "id": 430276343,
        "sender_full_name": "Christian K",
        "timestamp": 1711727449
    },
    {
        "content": "<p>You might want to read the first few chapters of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> and learn about subtypes</p>",
        "id": 430335246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711757159
    },
    {
        "content": "<p>With this definition of the special unitary group, the theorem <code>mem_specialUnitaryGroup_iff</code> looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">specialUnitaryGroup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.restrict</span> <span class=\"n\">Matrix.detMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">Matrix.unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_specialUnitaryGroup_iff</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">Matrix.unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">property</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">Matrix.specialUnitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Eq.to_iff</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is this acceptable?</p>",
        "id": 430391810,
        "sender_full_name": "Christian K",
        "timestamp": 1711806668
    },
    {
        "content": "<p>Probably you can use <code>\\&lt;A,h\\&gt;</code> for the LHS and the proof is probably just <code>by rfl</code>. </p>\n<p>In general I'm very unclear about how we're going to manage all these classical groups like special linear, orthogonal and unitary groups.</p>",
        "id": 430409531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711822500
    },
    {
        "content": "<p>I simplified the proofs and I created this theorem which makes creating an instance of SO way easier: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">specialOrthogonalGroup.mkOfDetEqOne</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">specialOrthogonalGroup</span> <span class=\"n\">n</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">A</span><span class=\"o\">,(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_orthogonalGroup_iff'</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h1</span><span class=\"o\">)⟩,</span><span class=\"n\">h2</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(Inspired by <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/GeneralLinearGroup.html#Matrix.GeneralLinearGroup.mkOfDetNeZero\">GL.mkOfDetNeZero</a>)</p>",
        "id": 430410052,
        "sender_full_name": "Christian K",
        "timestamp": 1711823088
    },
    {
        "content": "<p>This is nice. I have just a few comments.</p>\n<ul>\n<li>This should be a <code>def</code> rather than a <code>theorem</code>. Something should only be a <code>theorem</code> if its type is a proposition. The reason is that Lean does not unfold <code>theorem</code>s, only <code>def</code>s. See here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#working-with-propositions-as-types\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#working-with-propositions-as-types</a></li>\n<li>There's no need to write the words <code>by</code> and <code>exact</code> right next to each other. <code>by</code> enters tactic mode, and <code>exact</code> is the way to insert a proof term into a tactic block. So in a way, they are inverses of each other, and you can get rid of both of them. See here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html</a></li>\n</ul>",
        "id": 430454276,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1711868007
    },
    {
        "content": "<p>Ok thank you, CI already told me about the first one and I fixed the second one. Would be nice if you could review the <a href=\"https://github.com/leanprover-community/mathlib4/pull/11708\">PR</a></p>",
        "id": 430460592,
        "sender_full_name": "Christian K",
        "timestamp": 1711874680
    },
    {
        "content": "<p>I think this definition unfortunately conflicts with the remark <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> made, which might cause problems later.</p>",
        "id": 430706935,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712030731
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean/near/429961018\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Banach.20Tarski.20Paradox.20in.20Lean/near/429961018</a></p>",
        "id": 430706958,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712030753
    },
    {
        "content": "<p>I do not know the best way to get around this problem.</p>",
        "id": 430707029,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712030785
    },
    {
        "content": "<p>I'm not sure if this would work, but what about a Typeclass like <code>OddFintype</code>. It could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OddFintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OddFintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--`Matrix.specialUnitaryGroup` is the group of unitary `n` by `n` matrices where the determinant</span>\n<span class=\"sd\">is 1-/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">specialUnitaryGroup</span> <span class=\"o\">[</span><span class=\"n\">OddFintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.restrict</span> <span class=\"n\">detMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n</code></pre></div>",
        "id": 430794363,
        "sender_full_name": "Christian K",
        "timestamp": 1712065697
    },
    {
        "content": "<p>But it seems like this would require an <code>OddFin</code> structure that only allows odd ranks.... Is there a smarter, easier way?</p>",
        "id": 430797883,
        "sender_full_name": "Christian K",
        "timestamp": 1712066636
    },
    {
        "content": "<p>I regret the direction this conversation went after my comment, which I wrote without thinking enough about the context.</p>\n<p>You are working with the group of rigid rotations of a real 3-space, which is a group of independent interest.  While it is possible to formulate it as a special case of a special orthogonal group, it might be better to define groups like <code>rigidRotation n</code> as a group of real rank <code>n</code> matrices satisfying your requirements.  Then you can avoid the mess of arbitrary commutative rings, arbitrary quadratic forms, Dickson invariants, odd numbers, and so on, that are completely disconnected from your goals.  Someone with more specialized expertise can make the connection with special orthogonal groups in the future (say, after we figure out how to formalize linear algebraic groups).</p>",
        "id": 431797395,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1712509977
    },
    {
        "content": "<p>I think there is independent interest also in the group of linear isometries of a real inner product space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, otherwise known as \"the orthogonal group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>\". It moreover looks to me that this is not strictly a special case of the linear algebraic group, since infinite-dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> make sense. (The special orthogonal group is then the subgroup of orientation preserving linear isometries, which makes sense in finite dimensions, at least.)</p>\n<p>In other words, maybe two independent definitions are in place anyway, and then for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>=</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">V=\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with the standard inner product we can <em>later</em> show that the (special) orthogonal group in the above sense coincides with the (special) orthogonal group in the linear algebraic group sense (distinct definitions).</p>",
        "id": 431798755,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1712510600
    },
    {
        "content": "<p>Hmmm... The Mathlib-appropriate definition of orthogonal group in the \"linear isometries\" -sense should probably be a special case of groups of linear maps preserving an arbitrary bilinear form, though... This would include groups of interest to physicists such as the <a href=\"https://en.wikipedia.org/wiki/Lorentz_group\">Lorentz group</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1,3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span>. And maybe bi-semilinear forms for the good measure, since linear isometries of complex inner product spaces (a.k.a. unitary transformations) are also interesting. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>I believe these would not be terrible to define, but let me try to avoid derailing the original interesting conversation another time...</p>",
        "id": 431799699,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1712511048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> I am glad that you made that comment. I certainly learned something from it.</p>\n<p>I should take some responsibility for the direction that this conversation headed. I got stuck on \"more generality is good\" and didn't consider the trade-offs.</p>",
        "id": 431807581,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712517085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearIsometryEquiv.instGroup#doc\">docs#LinearIsometryEquiv.instGroup</a> already exists.</p>",
        "id": 431821565,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1712528676
    },
    {
        "content": "<p>It might still pay off to define <code>rigidRotation n</code> in terms of existing API, because then the specialized API doesn't have to be built 100% by hand, but can be (partially) obtained by specializing the general API.</p>",
        "id": 431912806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712568735
    },
    {
        "content": "<p>I just remembered that the sphere-eversion project also formalised a construction of three-dimensional rotations <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/Analysis/InnerProductSpace/Rotation.lean\">here</a>. Basically, given an axis of rotation and angle, they construct the corresponding rotation (as a smooth map), using the cross product.</p>\n<p><span class=\"user-mention\" data-user-id=\"652766\">@Christian K</span> What kind of results do you need about rotations; is the above useful?<br>\n(I think the code is mostly good style; one proof broke over the last six month, but should be easy to fix. Ping me if you need help with <em>that</em>. I'm not sure if this would need to be generalised before going into mathlib.)</p>",
        "id": 432006108,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1712591168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span>  To be honest, I don't really understand the return type of the <code>rot</code>Function, what does this Syntax mean? <code>E →L[ℝ] E</code></p>",
        "id": 432164338,
        "sender_full_name": "Christian K",
        "timestamp": 1712650852
    },
    {
        "content": "<p>That's a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap#doc\">docs#ContinuousLinearMap</a> .</p>",
        "id": 432175550,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712654005
    },
    {
        "content": "<p>You should hopefully be able to hover over an instance of notation in Lean code and see what it represents. If the documentation doesn't pop up, this means that someone forgot something and a PR would be welcome :-)</p>",
        "id": 432184735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712656117
    },
    {
        "content": "<p>The special Orthogonal Group and the special unitary group are in the mathlib now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/11708#issuecomment-2073873279\">https://github.com/leanprover-community/mathlib4/pull/11708#issuecomment-2073873279</a></p>",
        "id": 435279880,
        "sender_full_name": "Christian K",
        "timestamp": 1713996241
    },
    {
        "content": "<p>yep, now they just need some API.</p>",
        "id": 435280004,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713996290
    }
]