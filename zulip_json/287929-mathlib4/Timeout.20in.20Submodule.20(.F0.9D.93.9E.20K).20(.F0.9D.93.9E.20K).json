[
    {
        "content": "<p>Lean cannot synthesize <code>Module (𝓞 K) (𝓞 K)</code> without an increase of heartbeats. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- Timeout</span>\n</code></pre></div>\n<p>Is it something to worry about?</p>",
        "id": 406825469,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702063847
    },
    {
        "content": "<p>My experience in FLT regular is that <code>𝓞 K</code> is usually very slow to work with, and I use <code>[IsIntegralClosure B A K]</code> whenever possible. And we also had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">inst_ringOfIntegersAlgebra</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toModule</span>\n</code></pre></div>\n<p>which would for example make <code>Submodule (𝓞 K) (𝓞 K)</code> instant.</p>",
        "id": 406833688,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702067661
    },
    {
        "content": "<p>Looking at the trace of the output without these hacks, I guess things would also improve if the ordered-algebraic classes or topological-algebraic classes were scoped. But this might be controversial.</p>",
        "id": 406834038,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702067846
    },
    {
        "content": "<p>What kind of classes is it looking for? If it's <code>CovariantClass</code>/<code>ContravariantClass</code>, I might have a speedup to offer.</p>",
        "id": 406834400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702068019
    },
    {
        "content": "<p>I'm referring to these<br>\n<a href=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\">image.png</a><br>\nThough I'm not sure these are the culprit yet.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\"></a></div>",
        "id": 406834759,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702068225
    },
    {
        "content": "<p>Oh yeah no. Those are fast and sturdy and very very useful everywhere.</p>",
        "id": 406835168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702068432
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance.tryResolve</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000000</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- Timeout</span>\n</code></pre></div>\n<p>There is a <code>[12.650751s] ✅ IsDomain ↥(𝓞 K) ≟ IsDomain ↥(𝓞 K)</code>, which looks like lean is having a trouble unifying <br>\n<code>Subalgebra.toCommRing</code> with <code>SubringClass.toRing</code>.<br>\nMaybe <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> knows what's going on?</p>",
        "id": 406836606,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702069126
    },
    {
        "content": "<p>Oh that's a big issue indeed, worth looking into. Don't know from the top of my head what's going wrong here, the defeq cache is a lot more robust nowadays so I assume it's not the same equality being tested exponentially often, right?</p>",
        "id": 406848322,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702074515
    },
    {
        "content": "<p>Should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.ringOfIntegers#doc\">docs#NumberField.ringOfIntegers</a> irreducible?</p>",
        "id": 406849270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702075033
    },
    {
        "content": "<p>You can get away with just <code>set_option synthInstance.maxHeartbeats 50000</code> if using <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>",
        "id": 407573308,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702417141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/406849270\">said</a>:</p>\n<blockquote>\n<p>Should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.ringOfIntegers#doc\">docs#NumberField.ringOfIntegers</a> irreducible?</p>\n</blockquote>\n<p>If that just means replacing <code>def</code> by <code>irreducible_def</code> in the definition of <code>ringOfIntegers</code>, then it does not help much... It still get a timeout when I try <code>#synth Module (𝓞 K) (𝓞 K)</code></p>",
        "id": 407693806,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702463276
    },
    {
        "content": "<p>Andrew just reminded me of this issue in their FLT-regular talk at Lean Together 2024. I think the relevant part of the instance trace is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">838419</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865673</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥?</span><span class=\"n\">m.9046</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865389</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865353</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865339</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865321</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">865221</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">Function.Injective.ring</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">↑↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n          <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">941348</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.8348</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>The thing taking all of the time is checking <code>IsDomain ↥(𝓞 K) ≟ IsDomain ↥(𝓞 K)</code>, something which looks obvious but the problem is that one of the ring structures is coming from <code>CommSemiring.toSemiring</code> and the other from <code>Ring.toSemiring</code>, and typeclass inference has a habit of sometimes exploding with these kinds of question. The 4.5 seconds is just breaking down into many many tiny goals which then keep exploding again, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>                                  [delta] [0.566770s] ✅ AddGroupWithOne.zsmul =?= AddGroupWithOne.zsmul ▼\n                                    [] [0.566496s] ✅ Function.Injective.addGroupWithOne Subtype.val (_ : Function.Injective fun a =&gt; ↑a) (_ : ↑0 = ↑0)\n                                          (_ : ↑1 = ↑1)\n                                          (_ : ∀ (x x_1 : ↥(Subalgebra.toSubring (𝓞 K))), ↑(x + x_1) = ↑(x + x_1))\n                                          (_ : ∀ (x : ↥(Subalgebra.toSubring (𝓞 K))), ↑(-x) = ↑(-x))\n                                          (_ : ∀ (x x_1 : ↥(Subalgebra.toSubring (𝓞 K))), ↑(x - x_1) = ↑(x - x_1))\n                                          (_ : ∀ (x : ↥(Subalgebra.toSubring (𝓞 K))) (x_1 : ℕ), ↑(x_1 • x) = ↑(x_1 • x))\n                                          (_ : ∀ (x : ↥(Subalgebra.toSubring (𝓞 K))) (x_1 : ℤ), ↑(x_1 • x) = ↑(x_1 • x))\n                                          (_ : ∀ (x : ℕ), ↑↑x = ↑↑x)\n                                          (_ :\n                                            ∀ (x : ℤ),\n                                              ↑↑x =\n                                                ↑↑x) =?= Function.Injective.addGroupWithOne Subtype.val\n                                          (_ : Function.Injective fun a =&gt; ↑a) (_ : ↑0 = ↑0) (_ : ↑1 = ↑1)\n                                          (_ : ∀ (x x_1 : ↥(𝓞 K)), ↑(x + x_1) = ↑(x + x_1))\n                                          (_ : ∀ (x : ↥(𝓞 K)), ↑(-x) = ↑(-x))\n                                          (_ : ∀ (x x_1 : ↥(𝓞 K)), ↑(x - x_1) = ↑(x - x_1))\n                                          (_ : ∀ (x : ↥(𝓞 K)) (x_1 : ℕ), ↑(x_1 • x) = ↑(x_1 • x))\n                                          (_ : ∀ (x : ↥(𝓞 K)) (x_1 : ℤ), ↑(x_1 • x) = ↑(x_1 • x))\n                                          (_ : ∀ (x : ℕ), ↑↑x = ↑↑x) (_ : ∀ (x : ℤ), ↑↑x = ↑↑x) ▶\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> do you understand how to fix these kinds of problems nowadays?</p>",
        "id": 412343433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704980117
    },
    {
        "content": "<p>This seems to be a minimal hack which \"fixes\" the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">Algebra.toModule</span> <span class=\"c1\">-- makes it quick; 1000 not good enough</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 412343983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704980310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/407573308\">said</a>:</p>\n<blockquote>\n<p>You can get away with just <code>set_option synthInstance.maxHeartbeats 50000</code> if using <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>\n</blockquote>\n<p>This is the structure flattening I was talking about. This alone does not solve the problem though.</p>",
        "id": 412346636,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704981184
    },
    {
        "content": "<p>Not the main issue, but I was surprised to run into this in the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n      [Meta.synthInstance] ❌ Field ℤ\n        [Meta.synthInstance] result &lt;not-available&gt; (cached)\n</code></pre></div>",
        "id": 412355331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704983645
    },
    {
        "content": "<p>See also <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.02klzzwxh.3A0000.03.20takes.200.2E25s.20to.20fail.21\">#mathlib4 &gt; <code>example (p : P) : Q := p</code> takes 0.25s to fail!</a></p>",
        "id": 412355988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704983835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/412215092\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Getting flashbacks</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">130315</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subsemiring.toLinearOrderedSemiring</span> <span class=\"n\">to</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">130257</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">CliffordAlgebra.even</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"bp\">↥?</span><span class=\"n\">m.163688</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000011</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000005</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000005</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n<span class=\"bp\">```</span>\n</code></pre></div>\n<p>etc...</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>",
        "id": 412356298,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704983916
    },
    {
        "content": "<p>Here's the fix which demotes the bad instance rather than promotes the good one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">909</span><span class=\"o\">]</span> <span class=\"n\">Subalgebra.module'</span> <span class=\"c1\">-- 910 no good</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 412357680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704984289
    },
    {
        "content": "<p>Is that searching over all <code>A</code>?</p>",
        "id": 412358458,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704984491
    },
    {
        "content": "<p>It is committing to <code>R = ℤ</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">module'</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R'</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R'</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">S.toSubmodule.module'</span>\n</code></pre></div>\n<p>and then trying everything to get <code>SMul K ℤ</code></p>",
        "id": 412371911,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704988356
    },
    {
        "content": "<p>As a quick fix it sounds like a decent idea to lower the priority of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.module%27#doc\">docs#Subalgebra.module'</a>, since the \"default\" instance is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.module#doc\">docs#Subalgebra.module</a></p>",
        "id": 412373415,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704988853
    },
    {
        "content": "<p><del>I find it weird though that there is this free parameter that becomes <code>ℤ</code>: in <code>module'</code> every parameter is specified by the expected type.</del></p>",
        "id": 412373901,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704989011
    },
    {
        "content": "<p>In the process of now of <code>priority := low</code></p>",
        "id": 412374192,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704989079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/412373901\">said</a>:</p>\n<blockquote>\n<p><del>I find it weird though that there is this free parameter that becomes <code>ℤ</code>: in <code>module'</code> every parameter is specified by the expected type.</del></p>\n</blockquote>\n<p>Nevermind, we get <code>R = ℤ</code> because <code>𝓞 K : Subalgebra ℤ K</code>.</p>",
        "id": 412374539,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704989174
    },
    {
        "content": "<p>Should this even be an instance?</p>",
        "id": 412374541,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704989175
    },
    {
        "content": "<p>I believe there are a few uses where we have a tower of ring extensions and want to make a subalgebra to put something in between the top. So I think yes, it should be an instance.</p>",
        "id": 412374934,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704989297
    },
    {
        "content": "<p>I've seen other places where this pattern is a performance hit</p>",
        "id": 412375116,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704989354
    },
    {
        "content": "<p>I'll try de-instancing it on my machine and seeing how much breaks.</p>",
        "id": 412375176,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704989378
    },
    {
        "content": "<p>Yeah, I took the easy way out :)</p>",
        "id": 412375242,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704989396
    },
    {
        "content": "<p>Well, success for the example. I'll bench next.</p>",
        "id": 412377136,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704989954
    },
    {
        "content": "<p>At least the following files rely on the instance:</p>\n<ul>\n<li><a href=\"https://tqft.net/mathlib4files/Mathlib/Algebra/Module/Submodule/Localization\">file#Mathlib/Algebra/Module/Submodule/Localization</a></li>\n<li><a href=\"https://tqft.net/mathlib4files/Mathlib/RingTheory/Ideal/Operations\">file#Mathlib/RingTheory/Ideal/Operations</a></li>\n<li><a href=\"https://tqft.net/mathlib4files/Mathlib/LinearAlgebra/Basis/VectorSpace\">file#Mathlib/LinearAlgebra/Basis/VectorSpace</a><br>\nAnd the build stopped at 2741/4118 so about 1/3 of Mathlib depends transitively on these files.</li>\n</ul>",
        "id": 412380217,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704990928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9655\">#9655</a> is on the benchmark queue so maybe that will be enough</p>",
        "id": 412380458,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704990994
    },
    {
        "content": "<p>No change with performance overall - up for review</p>",
        "id": 412387731,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1704993307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , what happens if those 3 files are added a local instance?</p>",
        "id": 416771961,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705668986
    },
    {
        "content": "<p>Actually it turns out I disabled the wrong instance: <code>Submodule.module'</code> instead of <code>Subalgebra.module'</code>. According to <a href=\"https://github.com/leanprover-community/mathlib4/tree/uninstance-Subalgebra-module-tower\">branch#uninstance-Subalgebra-module-tower</a> on my machine, it is totally fine to remove this instance altogether!</p>",
        "id": 417292063,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1705948569
    },
    {
        "content": "<p>I think this is prudent since the integers will end up satisfying the constraints often</p>",
        "id": 417292276,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705948656
    },
    {
        "content": "<p>I occasionally come back to this question. Here is a summary of the issue (or at least, one of the issues):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"c1\">-- #synth SMul (𝓞 K) (𝓞 K) -- times out</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">70000</span> <span class=\"k\">in</span> <span class=\"c1\">-- fails at 60000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- fails without instance maxHeartbeats bump</span>\n</code></pre></div>\n<p>This kind of failure makes working with integers of number fields very difficult. There are other variants, e.g. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is also a number field and a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra, then <code>SMul (𝓞 K) (𝓞 L)</code> also takes forever, even though <code>Algebra (𝓞 K) (𝓞 L)</code> is fast. </p>\n<p>What I've discovered whilst sitting jetlagged in a hotel in Singapore at 5am is that the problem is the following: Because <code>𝓞 K</code> is actually a term of type <code>Subalgebra \\Z K</code>, the goal is really <code>SMul ↥(𝓞 K) ↥(𝓞 K)</code>. Typeclass inference can find 15 or so instances which apply, but among them are the deadly instances <code>Submonoid.smul</code>, <code>Subsemiring.smul </code>, and the poorly-named <code>Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra</code> which should really be called <code>Subalgebra.smul</code>. The type of <code>Submonoid.smul</code> is basically <code>[SMul M' α] (S : Submonoid M') : SMul (↥S) α</code> and you can now guess what the others are. These do look good syntactically for a goal of <code>SMul ↥(𝓞 K) ↥(𝓞 K)</code>, but they are deadly because they leave a goal of the form <code>SMul K (𝓞 K)</code> and this takes 2.5 seconds to fail on my machine.</p>\n<p>So now I realise that this is the same problem as <code>#synth SMul ℂ ℝ</code> that we saw in <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20prefers.20CharP.2Ecast_eq_zero.20over.20Nat.2Ecast_zero/near/432760180\">another thread</a>, although this is even worse because it takes even longer to give up. </p>\n<p>In this situation it is extremely difficult to steer typeclass inference away from ever running into the goal <code>SMul K (𝓞 K)</code>, so the question is whether it is possible to make it fail quickly. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">70000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- fails after thousands of lines of nonsense</span>\n</code></pre></div>",
        "id": 434870656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713829916
    },
    {
        "content": "<p>Thanks for looking at this. If you want a concrete example to work on, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11792\">#11792</a> there is a discussion about a rather slow file.</p>",
        "id": 434897252,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713844387
    },
    {
        "content": "<p>BTW, is there a simple way of profiling a file? I mean, <code>set_option profiler true</code> gives information about any single declaration, I would like to have the total.</p>",
        "id": 434897460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713844455
    },
    {
        "content": "<p>If you do <code>lake build &lt;Module&gt;</code> in the terminal (on a file containing <code>set_option profiler true</code> near the beginning), it also prints a summary at the end.</p>",
        "id": 434941186,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713864037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/434870656\">said</a>:</p>\n<blockquote>\n<p>In this situation it is extremely difficult to steer typeclass inference away from ever running into the goal <code>SMul K (𝓞 K)</code>, so the question is whether it is possible to make it fail quickly.</p>\n</blockquote>\n<p>You could try to remove the <code>instance</code> attribute locally from the instance leading to the problematic <code>SMul K (𝓞 K)</code> search (or reduce its priority). You could possibly also try to increase the priority of the instance you want to trigger. Or you could make (local) shortcut instances for <code>SMul (𝓞 K) (𝓞 K)</code>and <code>SMul (𝓞 K) (𝓞 L)</code>.</p>\n<p>I've been working on one of the very slow Mathlib files to see if I can speed it up, and I'll report on this soon somewhere here. Stay tuned!</p>",
        "id": 434941833,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713864246
    },
    {
        "content": "<p>I believe there's a better solution: Replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ringOfIntegers</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">integralClosure</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ringOfIntegers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">integralClosure</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 434950109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713867083
    },
    {
        "content": "<p>Then your TC goals will be <code>Submodule (𝓞 K) (𝓞 K)</code> rather than <code>Submodule ↥(𝓞 K) ↥(𝓞 K)</code> and will match many less instances.</p>",
        "id": 434950285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713867141
    },
    {
        "content": "<p>Of course, this comes at the cost of <code>𝓞 K</code> not being a <code>Subalgebra</code> anymore, but the coercion to <code>Type _</code> of one.</p>",
        "id": 434950387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713867189
    },
    {
        "content": "<p>I was also thinking about this... I will try to see how annoying it is.</p>",
        "id": 434951935,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713867779
    },
    {
        "content": "<p>Another approach that we could try is to give the <code>↥</code> coercion a different name for each setlike, instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetLike.instCoeSortType#doc\">docs#SetLike.instCoeSortType</a>.</p>",
        "id": 434969542,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713874058
    },
    {
        "content": "<p>Wouldn't Lean still try to unfold them?</p>",
        "id": 434970315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713874325
    },
    {
        "content": "<p>I mean like we already do for <code>coe</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coeSort</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MySubobject</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">MySubobject</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">coeSort</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 434970427,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713874373
    },
    {
        "content": "<p>(Presumably using a <code>@[coeSort]</code> attribute to do delaboration.)</p>",
        "id": 434970477,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713874395
    },
    {
        "content": "<p>Then the discrimination tree can index on <code>MySubobject.coeSort</code> and we don't have the billion candidate instances.</p>",
        "id": 434970544,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713874425
    },
    {
        "content": "<p>Oh sorry, I misunderstood. Yes, that sounds reasonable.</p>",
        "id": 434971046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713874592
    },
    {
        "content": "<p>One drawback of my idea is that all the instances on <code>Subtype</code> have to be copied over manually: <code>LE</code>, <code>Coe</code>, <code>Mul</code>, ...</p>",
        "id": 434973727,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713875466
    },
    {
        "content": "<p>Yeah, I don't see this working out. For example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulMemClass.subtype#doc\">docs#MulMemClass.subtype</a> must use the generic <code>CoeSort</code> instance, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsemigroup.topEquiv_toMulHom#doc\">docs#Subsemigroup.topEquiv_toMulHom</a> must use the specific. We're definitely going to get type errors this way.</p>",
        "id": 434976603,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713876403
    },
    {
        "content": "<p>I think I'll try out Yaël's plan instead. Defining <code>RingOfIntegers</code> as a <code>Type</code> instead of a <code>Subalgebra</code> is probably the least destructive alternative.</p>",
        "id": 434976964,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713876517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/434941833\">said</a>:</p>\n<blockquote>\n<p>You could try to remove the <code>instance</code> attribute locally from the instance leading to the problematic <code>SMul K (𝓞 K)</code> search (or reduce its priority).</p>\n</blockquote>\n<p>There are multiple problematic instances (three).</p>\n<blockquote>\n<p>You could possibly also try to increase the priority of the instance you want to trigger. </p>\n</blockquote>\n<p>This all seems so brittle. </p>\n<blockquote>\n<p>Or you could make (local) shortcut instances for <code>SMul (𝓞 K) (𝓞 K)</code>and <code>SMul (𝓞 K) (𝓞 L)</code>.</p>\n</blockquote>\n<p>Yes, probably this is what I'd do if I actually ran into this in practice. Basically the problem is that there are many misleading instances of the from <code>SMul \\u A \\uB</code>.</p>",
        "id": 434992529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713880941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/434976964\">said</a>:</p>\n<blockquote>\n<p>I think I'll try out Yaël's plan instead. Defining <code>RingOfIntegers</code> as a <code>Type</code> instead of a <code>Subalgebra</code> is probably the least destructive alternative.</p>\n</blockquote>\n<p>Seems to work fine! I didn't get totally to the end of fixing, feel free to take over <a href=\"https://github.com/leanprover-community/mathlib4/tree/RingOfInteger_Type\">branch#RingOfInteger_Type</a>.</p>",
        "id": 435023511,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713889989
    },
    {
        "content": "<p>Great! I will have a look tomorrow morning (morning in Singapore)</p>",
        "id": 435023763,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713890065
    },
    {
        "content": "<p>Note that quite a bit of the difficulty comes from deciding to replace the coercion <code>(𝓞 K) → K</code> with <code>algebraMap (𝓞 K) K</code>. Since both are in use at different places this seemed like a good opportuinity to standardize.</p>",
        "id": 435023811,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713890086
    },
    {
        "content": "<p>Fixed some of the style</p>",
        "id": 435027786,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713891352
    },
    {
        "content": "<p>I won't work on it more soon</p>",
        "id": 435027806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713891361
    },
    {
        "content": "<p>It builds now and the example above is much, much, much better.</p>",
        "id": 435087271,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713918516
    },
    {
        "content": "<p>Wow, thanks!!</p>",
        "id": 435087825,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713919026
    },
    {
        "content": "<p>Most of the work was done already :)</p>",
        "id": 435087841,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713919046
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib4/pull/12386\">#12386</a> just to test</p>",
        "id": 435088159,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713919314
    },
    {
        "content": "<p>It doesn't lint yet</p>",
        "id": 435088402,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713919504
    },
    {
        "content": "<p>Yep, I fixed the errors</p>",
        "id": 435088502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713919588
    },
    {
        "content": "<p>The bench results are very good!</p>",
        "id": 435093603,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713923870
    },
    {
        "content": "<p>I've marked <a href=\"https://github.com/leanprover-community/mathlib4/pull/12386\">#12386</a> \"awaiting review\". I hope I have added everybody as coauthor, but I am not sure I did it in the right way, so don't hesitate to make any modification.</p>",
        "id": 435097802,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713926741
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I don't how to make you the main author, if you want to open another PR this is if course perfectly fine)</p>",
        "id": 435098097,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713926900
    },
    {
        "content": "<p>Hmmm... I'm wondering how often we should do this. Maybe it's a design pattern we should use elsewhere too.</p>",
        "id": 435098843,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713927321
    },
    {
        "content": "<p>I'm thinking of, for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=elementalStarAlgebra#doc\">docs#elementalStarAlgebra</a></p>",
        "id": 435098899,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713927360
    },
    {
        "content": "<p>I don't know, but in practice everybody working with ring of integers noticed it is sometimes a pain.</p>",
        "id": 435099701,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713927749
    },
    {
        "content": "<p>Woohoo, that's seemingly the first time I got a good idea wrt performance :)</p>",
        "id": 435126201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713943141
    },
    {
        "content": "<p>I would like to do the same to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=circle#doc\">docs#circle</a> not because of performance issues but because we never use it as a submonoid (and, like, it's mathematically a subgroup)</p>",
        "id": 435126529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713943252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/435098097\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> I don't how to make you the main author, if you want to open another PR this is if course perfectly fine)</p>\n</blockquote>\n<p>Don't worry about attribution too much: being listed as a co-author is useful for finding the changes later, otherwise it's Yaël's idea with Matt's and Riccardo's fixes so there is no one author.</p>",
        "id": 435143385,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1713949275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/435098843\">said</a>:</p>\n<blockquote>\n<p>Hmmm... I'm wondering how often we should do this. Maybe it's a design pattern we should use elsewhere too.</p>\n</blockquote>\n<p>I think part of the reason this is so bad is that Lean is led repeatedly to find some instance of a class on <code>ℤ</code> to make progress. But then <code>ℤ</code> matches almost everything.</p>",
        "id": 435168155,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713958369
    },
    {
        "content": "<p>Yes, Algebra K (O K) can lead quickly to Algebra K Z</p>",
        "id": 435265552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713989790
    }
]