[
    {
        "content": "<p>Lean accepts all 3 of <code>Π i, X i</code>, <code>∀ i, X i</code>, and <code>(i : ι) -&gt; X i</code>. Do we have any official preference in Mathlib?</p>",
        "id": 431813958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712522048
    },
    {
        "content": "<p>My preference:</p>\n<ol>\n<li>If it's a proposition, use <code>∀ i, X i</code></li>\n<li>If it's thought of as a product of types (like say you're working with the product of a family of groups), you can use <code>Π i, X i</code></li>\n<li>If you're writing a dependent function, use <code>(i : ι) -&gt; X i</code>, it's more convenient, it's more clearly a function type, and it makes it easy to switch to and from being dependent.</li>\n</ol>\n<p>There's also sigma types, with <code>(i : ι) × X i</code> and <code>Σ i : ι, X i</code>. I think the first is clearer, making it much more obvious that it's a pair, and it also is easy to switch it between a non-dependent product and a dependent product.</p>",
        "id": 431815583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712523160
    },
    {
        "content": "<p>What about <code>[∀ i, TopologicalSpace (X i)]</code> vs <code>[Π i, TopologicalSpace (X i)]</code>?</p>",
        "id": 431824612,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712531719
    },
    {
        "content": "<p>Should we change it everywhere?</p>",
        "id": 431824825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712531932
    },
    {
        "content": "<p>I agree that this one is trickier. Technically speaking it’s data, on the other hand I think using forall makes it closer to what one could say on paper.</p>",
        "id": 431824938,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712532035
    },
    {
        "content": "<p>Kyle's list also fits my exact preferences.</p>",
        "id": 431832377,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712539392
    },
    {
        "content": "<p>Should we add it to <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a>?</p>",
        "id": 431855604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712551094
    },
    {
        "content": "<p>I thought <code>Π i, X i</code> was disallowed in lean4?</p>",
        "id": 431973057,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1712583541
    },
    {
        "content": "<p>We added it back in Mathlib (I think ? Maybe earlier)</p>",
        "id": 431974152,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712583920
    },
    {
        "content": "<p><code>(i : ι) -&gt; X i</code> is a weird non-mathematical notation, so I would be in favour of using it only when a type-ascription is necessary. It's otherwise unnecessarily wordy</p>",
        "id": 432343852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712698096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> What do you mean by \"if you're writing a dependent function\"? What's a good example?</p>",
        "id": 432349500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712700058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> We use notation that isn't natural for mathematicians here and there (e.g., a linear algebra book would talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>⊕</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\oplus F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>×</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\times F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>)</p>",
        "id": 432349772,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712700176
    },
    {
        "content": "<p>Regardless of mathematicality, it forces you to write out the type of the binder even when it can be inferred from context, which makes it a deal-breaker to me</p>",
        "id": 432652695,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712824157
    },
    {
        "content": "<p>(not with <code>(i : _) -&gt; X i</code>, but obviously that's still uglier than either of the other two spellings)</p>",
        "id": 432655829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712825211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coding.20style.3A.20.60.CE.A0.20i.2C.20X.20i.60.20vs.20.60.E2.88.80.20i.2C.20X.20i.60.20vs.20.60.28i.20.3A.20.CE.B9.29.20-.3E.20X.20i.60/near/432349500\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"if you're writing a dependent function\"?</p>\n</blockquote>\n<p>I'm thinking about families of elements vs functions. They're the same thing, but mathematically we write the first as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> but the second as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 432658896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712826215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> That made me think about whether <code>(i :) -&gt; X i</code> would make sense to have. We already have <code>(i :)</code> is a typeless type ascription.</p>",
        "id": 432659070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712826261
    },
    {
        "content": "<p>I don't think we want that; binders are not type ascriptions so there's no obligation to be consistent, and the notation itself seems pretty ugly anyway.</p>",
        "id": 432662488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712827405
    },
    {
        "content": "<p>The fact that they use the same symbol (<code>:</code>) suggests that they are similar, which (imho) should imply that they are consistent</p>",
        "id": 432715651,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712844892
    },
    {
        "content": "<p>i suppose the notation being ugly suggests that <code>(i :)</code> shouldn't be used as a type ascription either...</p>",
        "id": 432716059,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712844997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> has marked this topic as resolved.</p>",
        "id": 433107978,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713075620
    },
    {
        "content": "<p>What... I don't even know how I did that in the app</p>",
        "id": 433108017,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713075706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as unresolved.</p>",
        "id": 433109090,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713076672
    }
]