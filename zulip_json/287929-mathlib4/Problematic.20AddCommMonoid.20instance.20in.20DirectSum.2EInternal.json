[
    {
        "content": "<p>I noticed that the <code>def grade₁_equiv</code> below goes through, unless I <code>import Mathlib</code>. I bisected the problem to an instance in <code>Mathlib.Algebra.DirectSum.Internal</code> that's sufficient to cause the errors below. If the section between the two rows of dashes is commented out, the errors go away.</p>\n<p><del>Should <code>AddCommMonoid.ofSubmonoidOnSemiring</code> only be made a local instance where needed?</del><br>\nWhat's the usual way to fix this kind of problem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">grade₁</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">ExteriorAlgebra.ι</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">grade</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">grade₁</span> <span class=\"n\">V</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">grade₁_eq</span> <span class=\"o\">:</span> <span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">grade₁</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">pow_one</span> <span class=\"n\">_</span>\n<span class=\"kd\">def</span> <span class=\"n\">grade₁_equiv'</span> <span class=\"o\">:</span> <span class=\"n\">grade₁</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">ofLeftInverse</span> <span class=\"n\">ι_leftInverse</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"c1\">-- fun i =&gt; Submodule.addCommMonoid (grade V i)</span>\n\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n<span class=\"c1\">-- from `Mathlib.Algebra.DirectSum.Internal`:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">AddCommMonoid.ofSubmonoidOnSemiring</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddSubmonoidClass</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"c1\">-- fun i =&gt; AddCommMonoid.ofSubmonoidOnSemiring (grade V) i</span>\n\n<span class=\"c1\">-- The instances are propositionally equal</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule.addCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">AddCommMonoid.ofSubmonoidOnSemiring</span> <span class=\"o\">(</span><span class=\"n\">grade</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- (succeeds, but \"by with_reducible rfl\" fails)</span>\n<span class=\"c1\">--------------------------------------------------------------------------------</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grade₁_equiv</span> <span class=\"o\">:</span> <span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">grade₁_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">grade₁_equiv'</span> <span class=\"n\">V</span>\n<span class=\"c1\">-- tactic 'rewrite' failed, motive is not type correct</span>\n<span class=\"c1\">-- V : Type u_1</span>\n<span class=\"c1\">-- inst¹ : AddCommGroup V</span>\n<span class=\"c1\">-- inst : Module ℝ V</span>\n<span class=\"c1\">-- ⊢ ↥(grade V 1) ≃ₗ[ℝ] V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grade₁_equiv_2</span> <span class=\"o\">:</span> <span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">grade₁_eq</span> <span class=\"n\">V</span> <span class=\"bp\">▸</span> <span class=\"n\">grade₁_equiv'</span> <span class=\"n\">V</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   grade₁_equiv' V</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   @LinearEquiv ℝ ℝ Real.semiring Real.semiring (RingHom.id ℝ) (RingHom.id ℝ)</span>\n<span class=\"c1\">--     (_ : RingHomInvPair (RingHom.id ℝ) (RingHom.id ℝ)) (_ : RingHomInvPair (RingHom.id ℝ) (RingHom.id ℝ)) (↥(grade₁ V))</span>\n<span class=\"c1\">--     V (AddCommMonoid.ofSubmonoidOnSemiring LinearMap.range (ι ℝ)) AddCommGroup.toAddCommMonoid</span>\n<span class=\"c1\">--     (Submodule.module (grade₁ V)) inst : Type u_1</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   @LinearEquiv ℝ ℝ Real.semiring Real.semiring (RingHom.id ℝ) (RingHom.id ℝ)</span>\n<span class=\"c1\">--     (_ : RingHomInvPair (RingHom.id ℝ) (RingHom.id ℝ)) (_ : RingHomInvPair (RingHom.id ℝ) (RingHom.id ℝ)) (↥(grade₁ V))</span>\n<span class=\"c1\">--     V (AddCommMonoid.ofSubmonoidOnSemiring (grade V) 1) AddCommGroup.toAddCommMonoid (Submodule.module (grade₁ V))</span>\n<span class=\"c1\">--     inst : Type u_1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ExteriorAlgebra</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 420048055,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707226432
    },
    {
        "content": "<p>Are you aware of the grading file for ExteriorAlgebra?</p>",
        "id": 420070348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707232698
    },
    {
        "content": "<p>Yes.</p>",
        "id": 420072251,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707233243
    },
    {
        "content": "<p>I think you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">grade₁_equiv</span> <span class=\"o\">:</span> <span class=\"n\">grade</span> <span class=\"n\">V</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">grade₁_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≪≫ₗ</span> <span class=\"n\">grade₁_equiv'</span> <span class=\"n\">V</span>\n</code></pre></div>",
        "id": 420076658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707234461
    },
    {
        "content": "<p>Using <code>rw</code> for data is usually a bad idea unless you have no other option</p>",
        "id": 420076688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707234472
    },
    {
        "content": "<p>Great, thanks. I had found that proof. (Sorry I didn't mention it. It was in an earlier draft of my question, but I cut it for brevity.) I thought the instance \"problem\" was still worth asking about. Maybe it won't be an issue. I'll see how I get on.</p>",
        "id": 420079093,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707235125
    }
]