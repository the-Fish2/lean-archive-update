[
    {
        "content": "<p>When I want to simplify some term in the category of types, because of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.types_comp_apply#doc\">docs#CategoryTheory.types_comp_apply</a>, <code>simp</code> often turns the term in something that it can't work with afterwards. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">⟶</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Types.pullbackIsoPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- does not work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">⟶</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Types.pullbackIsoPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- manually rewriting to apply the necessary lemma</span>\n  <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">Types.pullbackIsoPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span>  <span class=\"bp\">≫</span> <span class=\"n\">pullback.fst</span><span class=\"o\">)</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- rw with this explicit lemma (using simp here undoes the above line)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Types.pullbackIsoPullback_inv_fst</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>How can I circumvent that? Can I locally disable usage of <code>types_comp_apply</code>? (which does not help if the statement is already in the applied form)<br>\nOr should the simp lemmas in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Shapes.Types#doc\">docs#CategoryTheory.Limits.Shapes.Types</a> be formulated in the applied form?</p>",
        "id": 420701148,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707500577
    },
    {
        "content": "<p>The structured answer is that we are supposed to use the \"elementwise\" tag to generate good simp lemmas when working in concrete categories. But in reality, I have also found working in the category of types to be quite annoying at time, for essentially this reason.</p>",
        "id": 420701621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707500761
    },
    {
        "content": "<p>Where would I use the \"elementwise\" tag? On <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Types.pullbackIsoPullback#doc\">docs#Types.pullbackIsoPullback</a> ?</p>",
        "id": 420701850,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707500835
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwise\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwise</a></p>",
        "id": 420702094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707500917
    },
    {
        "content": "<p>Personally I think we should redefine the category of types along the following lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BundledFunction</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">BundledFunction</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">BundledFunction</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">g.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.toFun</span>\n</code></pre></div>",
        "id": 420702442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707501060
    },
    {
        "content": "<p>Can you explain how that would solve this issue?</p>",
        "id": 420703026,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707501283
    },
    {
        "content": "<p>It would provide a layer of separation that distinguishes between morphisms and functions. So if you have a morphism <code>f</code> in <code>Type u</code>, the function would be <code>f.toFun</code>. In most cases where I've been annoyed by this the issue seemed that lean can't distinguish between when <code>f</code> should be a morphism and when it should be a function. This approach would add a syntactic separation between the two.</p>",
        "id": 420703493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707501478
    },
    {
        "content": "<p>We had a similar issue with morphisms in the category of sheaves being defined as natural transformations, and making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Sheaf.Hom#doc\">docs#CategoryTheory.Sheaf.Hom</a> made it much better</p>",
        "id": 420703633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707501524
    },
    {
        "content": "<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">elementwise</span><span class=\"kd\">]</span>\n</code></pre></div>\n<p>to <code>pullbackIsoPullback_inv_fst</code> strangely yields this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Limits.Types.pullbackIsoPullback_inv_fst_apply.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Types.pullbackCone</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pullback.fst</span> <span class=\"o\">((</span><span class=\"n\">Types.pullbackConeIsoPullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv.hom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>which says something about <code>Types.pullbackConeIsoPullback f g</code> instead of <code>Types.pullbackIsoPullback f g</code>. Is this expected?</p>",
        "id": 420703765,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707501582
    },
    {
        "content": "<p>this might be a bug in the elementwise attribute. probably one should apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.headBeta#doc\">docs#Lean.Expr.headBeta</a> at some point</p>",
        "id": 420703973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707501636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Simp.20normal.20form.20in.20category.20of.20types/near/420703493\">said</a>:</p>\n<blockquote>\n<p>It would provide a layer of separation that distinguishes between morphisms and functions. So if you have a morphism <code>f</code> in <code>Type u</code>, the function would be <code>f.toFun</code>. In most cases where I've been annoyed by this the issue seemed that lean can't distinguish between when <code>f</code> should be a morphism and when it should be a function. This approach would add a syntactic separation between the two.</p>\n</blockquote>\n<p>Makes sense, would you still want a <code>types_comp_apply</code> style lemma? If yes, it would probably not solve this issue, right?</p>",
        "id": 420704181,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707501718
    },
    {
        "content": "<p>Yes, there would still be such lemmas so you can use the simplifier to go back and forth between morphisms and functions.</p>",
        "id": 420706067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707502466
    },
    {
        "content": "<p>So also with your approach, we would need to tag everything as <code>elementwise</code> to have it work with <code>types_comp_apply</code>?</p>",
        "id": 420706294,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707502571
    },
    {
        "content": "<p>It's possible that elementwise wouldn't be needed anymore, but I don't know. I think the only way to see if this is a good solution is to try it out and see if things become easier!</p>",
        "id": 420706628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707502725
    },
    {
        "content": "<p>FWIW I think it would make sense to do similar things for other \"bundled\" categories like <code>Top</code>, <code>GroupCat</code>, etc.</p>",
        "id": 420706744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707502782
    },
    {
        "content": "<p>Especially in <code>TopCat</code> I found that lean often gets confused by the fact that morphisms are <em>defined</em> as terms of <code>C(X,Y)</code>.</p>",
        "id": 420706880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707502816
    },
    {
        "content": "<p>There's an <code>elementwise_of%</code> term elaborator for transforming lemmas by the way, but it doesn't do a final <code>simp</code> on the LHS and RHS. (<span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <code>@[elementwise]</code> is supposed to do <code>simp</code> on its result, so I'm not sure why the RHS is <code>(fun p ↦ (↑p).1) x</code>.)</p>",
        "id": 420707111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707502923
    },
    {
        "content": "<p>I am more irritated about the appearance of <code>Types.pullbackConeIsoPullback</code> instead of <code>Types.pullbackIsoPullback</code>. Or can this be circumvented by using <code>elementwise_of</code>?</p>",
        "id": 420707318,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707503014
    },
    {
        "content": "<p>I'm guessing it's being caused by <code>@[elementwise]</code> doing <code>simp</code> and there's some simp lemma doing that transformation. The reason for <code>simp</code> by the way is that <code>@[simp]</code> lemmas need a LHS in simp normal form.</p>\n<p><code>elementwise_of%</code> should help you circumvent this, though I don't know if it will give you a lemma in a usable form.</p>",
        "id": 420707630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707503148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Simp.20normal.20form.20in.20category.20of.20types/near/420707630\">said</a>:</p>\n<blockquote>\n<p>I'm guessing it's being caused by <code>@[elementwise]</code> doing <code>simp</code> and there's some simp lemma doing that transformation. The reason for <code>simp</code> by the way is that <code>@[simp]</code> lemmas need a LHS in simp normal form.</p>\n<p><code>elementwise_of%</code> should help you circumvent this, though I don't know if it will give you a lemma in a usable form.</p>\n</blockquote>\n<p>This does indeed generate the correct lemma. Can I tag <code>pullbackIsoPullback_inv_fst</code> somehow like for the <code>elementwise</code> attribute or do I have to write the lemma myself and use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">elementwise_of</span><span class=\"bp\">%</span> <span class=\"n\">pullbackIsoPullback_inv_fst</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as the proof?</p>",
        "id": 420708549,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707503519
    },
    {
        "content": "<p>I am confused by this line in the docstring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">elementwise</span> <span class=\"n\">nosimp</span><span class=\"kd\">]</span> <span class=\"n\">to</span> <span class=\"n\">not</span> <span class=\"n\">use</span> <span class=\"n\">simp</span> <span class=\"n\">on</span> <span class=\"n\">both</span> <span class=\"n\">sides</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">generated</span> <span class=\"kd\">lemma</span>\n</code></pre></div>\n<p>If I do this, the result is even worse, so apparently there is still some rewriting going on that is beyond <code>CategoryTheory.coe_comp</code> and <code>CategoryTheory.coe_id</code>?</p>",
        "id": 420709251,
        "sender_full_name": "Christian Merten",
        "timestamp": 1707503789
    }
]