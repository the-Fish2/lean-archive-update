[
    {
        "content": "<p>Is there a reason why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.fact_zero_lt_one#doc\">docs#Real.fact_zero_lt_one</a> is not (globally) an instance? </p>\n<p>Lots of lemmas in Fourier theory require this, because almost every lemma about <code>AddCircle</code> has <code>[Fact (0 &lt; T)]</code> among its hypotheses. So there are something like 8 different files which make <code>Real.fact_zero_lt_one</code> into a local instance. Is there any reason for not doing it globally?</p>",
        "id": 433061585,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713027568
    },
    {
        "content": "<p>My understanding is that when the type class system tries to find a Fact insurance, it needs to look at all the Fact instances, so each new global instance slows down all Fact arguments</p>",
        "id": 433061960,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713027863
    },
    {
        "content": "<p>Two notes from the documentation:</p>\n<blockquote>\n<p>In particular, this class is not intended for turning the type class system<br>\ninto an automated theorem prover for first order logic.</p>\n</blockquote>\n<blockquote>\n<p>In most cases, we should not have global instances of <code>Fact</code>; typeclass search only reads the head<br>\nsymbol and then tries any instances, which means that adding any such instance will cause slowdowns<br>\neverywhere. We instead make them as lemmata and make them local instances as required.</p>\n</blockquote>",
        "id": 433062391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713028330
    },
    {
        "content": "<p>That said, you can see that there are global instances in the docgen for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fact#doc\">docs#Fact</a> that are similar to <code>0 &lt; 1</code> in spirit, so maybe that concrete fact is justifiable as a <code>Fact</code> instance.</p>",
        "id": 433062436,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713028401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/why.20isn't.20.60Real.2Efact_zero_lt_one.60.20an.20instance.3F/near/433062391\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>In most cases, we should not have global instances of <code>Fact</code>; typeclass search only reads the head<br>\nsymbol and then tries any instances, which means that adding any such instance will cause slowdowns<br>\neverywhere. We instead make them as lemmata and make them local instances as required.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>Just out of curiousity, where does this second quote come from? It's not familiar to me. </p>\n<p>I'm wondering which is the lesser evil: a specific <code>Fact</code> that <code>0 &lt; 1</code> in the reals, or a generic instance which will match any <code>LinearOrderedRing</code>. (The case of <code>Rat</code> is also used, e.g. in the code for injective resolutions of groups.)</p>",
        "id": 433062566,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713028547
    },
    {
        "content": "<p>Was this note written before typeclass synthesis used a discrimination tree? I don't think it's true in general that it only filters by the head symbol</p>",
        "id": 433062640,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713028628
    },
    {
        "content": "<p>Search for <code>library_note \"fact non-instances\"</code>. Unfortunately this doesn't appear in the docgen yet (so it's not <em>really</em> in the documentation, but at least it's a docstring).</p>",
        "id": 433062646,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713028640
    },
    {
        "content": "<p>And yeah, it probably hasn't been updated since discrimination trees. Lean 3 only used the head symbol.</p>",
        "id": 433062669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713028661
    },
    {
        "content": "<blockquote>\n<p>And yeah, it probably hasn't been updated since discrimination trees. Lean 3 only used the head symbol.</p>\n</blockquote>\n<p>So does this mean that making <code>Real.fact_zero_lt_one</code> a global instance will no longer cause a general slowdown? What about more generally </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instFactZeroLTOne</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">zero_lt_one</span><span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>which would also avoid local-instancing the <code>‚Ñö</code> case in several places?</p>",
        "id": 433064218,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713029884
    },
    {
        "content": "<p>Can you make a PR and <code>!bench</code> it, to see if indeed it doesn't do any harm?</p>",
        "id": 433065481,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1713030892
    },
    {
        "content": "<p>I'm benchmarking the general version for LinearOrderedRings at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12115\">#12115</a>, and the real-number only version as part of <a href=\"https://github.com/leanprover-community/mathlib4/pull/12020\">#12020</a>.</p>",
        "id": 433070369,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713034718
    },
    {
        "content": "<p>These are indeed legacy design decisions from the Lean 3 era. It is good and interesting to revisit them.</p>",
        "id": 433070665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713034936
    }
]