[
    {
        "content": "<p>Currently, <code>Real.rpow</code> with real number literals does not simplify.  <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> suggested adding a lemma to fix this, but it has downsides due to the <code>no_index</code> thing apparently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- This does not work, as `norm_num` doesn't handle `rpow` with literals -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">failure</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>  <span class=\"c1\">-- Doesn't close the goal</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Make `x ^ (7 : ℝ)` simplify to `x ^ (7 : ℕ)` (when literals are involved) -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Real.rpow_ofNat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nat.AtLeastTwo</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Real.rpow_nat_cast</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- Success, since we have `Real.rpow_ofNat` now -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">success</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>  <span class=\"c1\">-- Works!</span>\n</code></pre></div>\n<p>Is there an alternate way to do this without downsides, and would this be worth adding to Mathlib?</p>",
        "id": 416658620,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705616165
    },
    {
        "content": "<p>What's the downside of that spelling?</p>",
        "id": 416659735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705616726
    },
    {
        "content": "<p>That's the standard way to write <code>OfNat</code> lemmas at the moment</p>",
        "id": 416659749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705616735
    },
    {
        "content": "<p>Ah, then maybe it's fine.  Alex said (something like) the <code>no_index</code> part made it match on any <code>rpow</code> and use up a bit of time on each rpow-ish simp.</p>",
        "id": 416659857,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705616782
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8828\">#8828</a> is the tracking issue for teaching <code>norm_num</code> about rpow; it's probably not too bad to implement, since the (badly-translated) code is already there commented out</p>",
        "id": 416659911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705616816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Real.2Erpow_ofNat.60.3A.20simplify.20.60x.20.5E.20.287.20.3A.20.E2.84.9D.29.60.20to.20.60x.20.5E.20.287.20.3A.20.E2.84.95.29.60/near/416659857\">said</a>:</p>\n<blockquote>\n<p>Ah, then maybe it's fine.  Alex said (something like) the <code>no_index</code> part made it match on any <code>rpow</code> and use up a bit of time on each rpow-ish simp.</p>\n</blockquote>\n<p>There's a Lean4 issue about <code>simp</code> making a mess around <code>OfNat</code>, <a href=\"https://github.com/leanprover/lean4/pull/2867\">lean4#2867</a></p>",
        "id": 416660010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705616871
    },
    {
        "content": "<p>(I'll mention the one-line core change <a href=\"https://github.com/leanprover/lean4/pull/3060\">lean4#3060</a> again, since I think it will make it slightly easier to write correct norm_num extensions)</p>",
        "id": 416660184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705616950
    },
    {
        "content": "<p>Yeah I think this is worth adding. I wouldn't be surprised if there is some breakage, but imo the benefits of having <code>rpow x 2</code> simp to the usual squaring definitely outweigh the downsides in most scenarios.</p>",
        "id": 416661085,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705617401
    },
    {
        "content": "<p>I think we already have this <code>ofNat</code> lemma for <code>zpow</code> anyway, so we may as well be consistent</p>",
        "id": 416661152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705617434
    },
    {
        "content": "<p>The lemma you want is probably already in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8006\">#8006</a></p>",
        "id": 416661283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705617487
    },
    {
        "content": "<p>But I think it's fine to cherry-pick just the results you need from that PR if you want them merged quickly, rather than waiting for everything to be fixed at once</p>",
        "id": 416661396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705617550
    },
    {
        "content": "<p>No hurry on my end; I have it locally until then (<a href=\"https://github.com/girving/ray/blob/a0cfb54eaf933fa79cad2e563dde4d513bf2b5b7/Ray/Misc/Real.lean#L112\">https://github.com/girving/ray/blob/a0cfb54eaf933fa79cad2e563dde4d513bf2b5b7/Ray/Misc/Real.lean#L112</a>).</p>",
        "id": 416661873,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705617786
    },
    {
        "content": "<p>I opened a PR with a norm_num extension for rpow: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9893\">#9893</a></p>",
        "id": 417125082,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705874040
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 417126075,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705874932
    }
]