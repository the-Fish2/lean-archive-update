[
    {
        "content": "<p>Currently <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.algebra#doc\">docs#Equiv.algebra</a> is defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toAlgebra%27#doc\">docs#RingHom.toAlgebra'</a>. This leads to a conflict with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a>. Namely the induced module instance by <code>toAlgebra</code> from the algebra instance coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.algebra#doc\">docs#Equiv.algebra</a> is not defeq to the module instance coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.TransferInstance</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod1</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.addCommMonoid</span><span class=\"bp\">;</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">e.module</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod2</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.addCommMonoid</span><span class=\"bp\">;</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.semiring</span>\n  <span class=\"o\">(</span><span class=\"n\">e.algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toModule</span>\n\n<span class=\"c1\">-- this fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.addCommMonoid</span>\n  <span class=\"o\">(</span><span class=\"n\">mod1</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mod2</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I suggest to redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.algebra#doc\">docs#Equiv.algebra</a> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.ofModule#doc\">docs#Algebra.ofModule</a> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Equiv.algebra'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">semiring</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.semiring</span> <span class=\"n\">e</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">e.module</span> <span class=\"n\">R</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">Algebra.ofModule</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"k\">show</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">e.ringEquiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">ringEquiv_apply</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"k\">show</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">e</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Algebra.mul_smul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod3</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.addCommMonoid</span><span class=\"bp\">;</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.semiring</span>\n  <span class=\"o\">(</span><span class=\"n\">e.algebra'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toModule</span>\n\n<span class=\"c1\">-- this works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.addCommMonoid</span>\n  <span class=\"o\">(</span><span class=\"n\">mod1</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mod3</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Any objections?</p>",
        "id": 426829970,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710540604
    },
    {
        "content": "<p>Since no one objected: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11419\">#11419</a></p>",
        "id": 426887558,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710592227
    },
    {
        "content": "<p>I asked bors to merge this. It would be nice to record your example as a issue. <span class=\"user-mention\" data-user-id=\"648495\">@Christian Merten</span> can you do this?</p>",
        "id": 427072185,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710669471
    },
    {
        "content": "<p>I take this thread as an opportunity to ask about how one should understand the comments to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoid.nsmulRec#doc\">docs#AddMonoid.nsmulRec</a> (“Multiplication by a natural number. Set this to nsmulRec unless Module diamonds are possible.”) and  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddGroup.zsmulRec#doc\">docs#AddGroup.zsmulRec</a> (“Use instead n • a, which has better definitional behavior.”) when one wishes to define a module structure on a type, in my case, with respect to a <code>CommRing</code>. (It seems that something changed in a recent modification of mathlib. )</p>\n<ul>\n<li>One first has to define an <code>AddCommMonoid</code> or an <code>AddCommGroup</code> structure on it. Which one is preferable?</li>\n<li>Should one set the field <code>nsmul</code> and <code>zsmul</code> to <code>nsmulRec</code> and <code>zsmulRec</code> or is it better to first define the <code>smul</code>field, and define <code>nsmul n a</code> as <code>n • x</code>? and similarly for <code>zsmul n a</code>?</li>\n</ul>",
        "id": 427083476,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710672487
    },
    {
        "content": "<p>It's better to define smul first and use that if possible; zsmulRec and nsmulRec are for the case where you don't expect to work with modules on your type at all, or at least don't want to think about them yet</p>",
        "id": 427089240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710674010
    },
    {
        "content": "<p>I don't really understand your first question</p>",
        "id": 427089297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710674033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427072185\">said</a>:</p>\n<blockquote>\n<p>I asked bors to merge this. It would be nice to record your example as a issue. <span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> can you do this?</p>\n</blockquote>\n<p>A test in instance_diamonds.lean might be more natural than an issue? Or did you have something more general in mind?</p>",
        "id": 427089570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710674097
    },
    {
        "content": "<p>A test is ok also but I didn't think about fixing the diamond completely itself only enough to note that the PR was the preferred way to transfer given how everything else transferred (eg <code>SMul</code>)</p>",
        "id": 427091359,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710674546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427072185\">said</a>:</p>\n<blockquote>\n<p>I asked bors to merge this. It would be nice to record your example as a issue. <span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> can you do this?</p>\n</blockquote>\n<p>I am confused, are you suggesting to record this as a closed issue?</p>",
        "id": 427095664,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710675756
    },
    {
        "content": "<p>The diamond still exists (in the aether). We are just taking the non-diamond path for this particular instance. It would be good to not forget the diamond still exists and even better if it gets fixed itself.</p>",
        "id": 427110577,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710679818
    },
    {
        "content": "<p>Are you suggesting that we stick a warning on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toAlgebra#doc\">docs#RingHom.toAlgebra</a> that says \"do not use this if you can avoid it, it creates instance diamonds\"?</p>",
        "id": 427112170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710680261
    },
    {
        "content": "<p>I am suggesting recording the example above for now as an issue. I didn’t have time to pinpoint the exact issue of why there is a diamond.</p>",
        "id": 427127694,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710684376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427089297\">said</a>:</p>\n<blockquote>\n<p>I don't really understand your first question</p>\n</blockquote>\n<p>To get a module, an add comm monoid with an smul is enough, and one may get the add comm group afterwards. Is it safe to do so, or should one define them all, in a specific order?</p>",
        "id": 427140661,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710687870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427127694\">said</a>:</p>\n<blockquote>\n<p>I am suggesting recording the example above for now as an issue. I didn’t have time to pinpoint the exact issue of why there is a diamond.</p>\n</blockquote>\n<p>The diamond is from RingHom.toAlgebra, which creates a diamond by design</p>",
        "id": 427142224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710688286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> , can you give a bit more context about what instance you're constructing? Do you have an example in a branch somewhere that is what you're referring to?</p>",
        "id": 427142586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710688383
    },
    {
        "content": "<p>It's the definition of polynomial maps, in the project <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> and are doing.</p>",
        "id": 427142885,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710688458
    },
    {
        "content": "<p><a href=\"https://github.com/AntoineChambert-Loir/DividedPowers4/blob/0275b395b29d66f679c1c6ba84dd0d206eb38bfd/DividedPowers/PolynomialMap/Basic.lean#L236\">https://github.com/AntoineChambert-Loir/DividedPowers4/blob/0275b395b29d66f679c1c6ba84dd0d206eb38bfd/DividedPowers/PolynomialMap/Basic.lean#L236</a></p>",
        "id": 427143205,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710688549
    },
    {
        "content": "<p>Do you care about polynomial maps over additive monoids?</p>",
        "id": 427143428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710688598
    },
    {
        "content": "<p>If not, you can skip the <code>AddCommMonoid</code> instance and just define the AddCommGroup instance</p>",
        "id": 427143614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710688653
    },
    {
        "content": "<p>The sequence I recommend is:</p>\n<ul>\n<li>Provide a <code>Zero</code> and <code>Add</code> instance</li>\n<li>Provide a <code>SMul</code> instance</li>\n<li>Provide an <code>AddCommGroup</code> instance that uses the earlier smul for nsmul and zsmul</li>\n<li>Provide a <code>Module</code> instance</li>\n</ul>",
        "id": 427144106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710688773
    },
    {
        "content": "<p>I think your question maybe stems from trying to merge step 1 with 3 and 2 with 4, and ending up with a dependency chain you can't untangle</p>",
        "id": 427145370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710689090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427143428\">said</a>:</p>\n<blockquote>\n<p>Do you care about polynomial maps over additive monoids?</p>\n</blockquote>\n<p>Ultimately I will, just because the theory works, but for the moment it doesn't because a lot of stuff is incompletely done in mathlib (direct limits, eg).</p>",
        "id": 427145709,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710689169
    },
    {
        "content": "<p>I think in your example you can do steps 3 and 4 by pulling back the structure from functions</p>",
        "id": 427146747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710689428
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.injective.addCommGroup#doc\">docs#Function.injective.addCommGroup</a> etc)</p>",
        "id": 427146833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710689450
    },
    {
        "content": "<p>No I don't, polynomial maps don't have such a natural injective map to functions (or they have, but one has to take a very large ring, such as <code>MvPolynomial  M R</code>, which does not make a very natural proof).</p>",
        "id": 427150312,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710690369
    },
    {
        "content": "<p>Isn't <code>toFun</code> that map?</p>",
        "id": 427150852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710690513
    },
    {
        "content": "<p>It is indexed by all rings in the universe u.</p>",
        "id": 427150898,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710690532
    },
    {
        "content": "<p>Sure, it's not a function with the domain you're thinking of, but all the matters for lifting the structure is the codomain</p>",
        "id": 427151010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710690560
    },
    {
        "content": "<p><del>Yes, I understand.</del> <del>No, I don't. For <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.addCommGroup#doc\">docs#Function.Injective.addCommGroup</a> to work, the domain has to look like a kind of additive group, with a zero, an addition, a subtraction.</del> Maybe I do.</p>",
        "id": 427151097,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710690582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427142224\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427127694\">said</a>:</p>\n<blockquote>\n<p>I am suggesting recording the example above for now as an issue. I didn’t have time to pinpoint the exact issue of why there is a diamond.</p>\n</blockquote>\n<p>The diamond is from RingHom.toAlgebra, which creates a diamond by design</p>\n</blockquote>\n<p>I understand the tension between the two pieces of data in <code>Algebra</code> but </p>\n<ol>\n<li>I don't see any clear preference for one over the other in the library. (Maybe I am not looking hard enough.)</li>\n<li>Any structure constructor that creates diamonds by design should probably be minimized or eliminated.</li>\n</ol>",
        "id": 427660251,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710843925
    },
    {
        "content": "<p>Ad 2. Probably not, because 1) if you don't provide it, users will implement one, and diamonds will appear that were not predicted. 2) it will be possible to work on the design so that diamonds disappear.</p>",
        "id": 427660571,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710844035
    },
    {
        "content": "<p>Not sure I agree but also </p>\n<ol start=\"3\">\n<li><code>Algebra</code> should unbundle the function and still extend <code>SMul</code></li>\n</ol>",
        "id": 427663620,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710845062
    },
    {
        "content": "<p>I think <code>RingHom.toAlgebra</code> is a hack in the same way that <code>Module.semiringToRing</code> is; in rare cases there are no diamonds that could exist, so it's convenient.</p>",
        "id": 427664710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710845478
    },
    {
        "content": "<p>So what am I supposed to do if in the middle of a proof I construct a ring hom from R to A and from this point on in the proof I want A to be an R-algebra?</p>",
        "id": 427692076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710854312
    },
    {
        "content": "<p>In my understanding, as long as there is no <code>Module R A</code> floating around, you are safe to use <code>RingHom.toAlgebra</code>. And if there already is a <code>Module R A</code> there should be no need to construct a ring hom (as long as that module instance is compatible with the multiplication of course).</p>",
        "id": 427692851,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710854541
    },
    {
        "content": "<p>I'm a bit confused. What if I <em>did</em> just construct the ring hom and I already have a module instance?</p>",
        "id": 427693076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710854621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20diamond.20in.20Equiv.2ETransferInstance/near/427692076\">said</a>:</p>\n<blockquote>\n<p>So what am I supposed to do if in the middle of a proof I construct a ring hom from R to A and from this point on in the proof I want A to be an R-algebra?</p>\n</blockquote>\n<p>You build the <code>Algebra</code> instance by hand, without using <code>RingHom.toAlgebra</code></p>",
        "id": 427693356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710854710
    },
    {
        "content": "<p>So you alredy have an existing <code>Module R A</code> and then construct a new ring hom <code>R</code> to <code>A</code>? I think in this case you throw away your ring hom, use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.ofModule#doc\">docs#Algebra.ofModule</a>.</p>",
        "id": 427693381,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710854720
    },
    {
        "content": "<p>In a proof at worst you can always prove by hand that there is no diamond, can't you? I mean, the two structures are maybe not definitionally equal, but they're surely propositionally equal (otherwise you have another problem)</p>",
        "id": 427693407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710854727
    },
    {
        "content": "<p>Riccardo is right, but you can get the correct defeqs in the situation Kevin is talking about</p>",
        "id": 427693643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710854800
    },
    {
        "content": "<p>NB: right now there are issues with not-reducibly defeq instances all around <code>Algebra</code> Be sure to specify the function by hand</p>",
        "id": 427726643,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710856660
    },
    {
        "content": "<p>28 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Performance.20issues.20with.20Function.2EInjective.2E.24typeclass\">#mathlib4 &gt; Performance issues with Function.Injective.$typeclass</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 427836906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710897574
    }
]