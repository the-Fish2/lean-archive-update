[
    {
        "content": "<p>Hi, I'm trying to get the following proof to work, but I'm probably missing some insight in how to work with cardinals. I need to show basic stuff, but because Lean interprets '1' and '2' as cardinals, I can't really get everything to work properly. Any pointers / ways to get the code to work? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CountableInter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Cardinal</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Filter.ofCardinalInter</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">sInter_empty</span> <span class=\"n\">α</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">mk_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">empty_subset</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- I need 0 &lt; 2 here, which is apperently hard in Cardinal world?</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"n\">h_mono</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"n\">sInter_pair</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">▸</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert_subset_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">singleton_subset_iff.2</span> <span class=\"n\">ht</span><span class=\"o\">⟩)</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_insert</span><span class=\"o\">]</span> <span class=\"c1\">-- is this really the way to go?</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this becomes weird to prove, as it interprets '1' and '2' as cardinals...</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- can be solved by_cases, but is ugly</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">this</span> <span class=\"n\">hc</span>\n</code></pre></div>",
        "id": 430144799,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711652241
    },
    {
        "content": "<p>I believe the first <code>sorry</code> can be solved with <code>simp only [mk_fintype]; norm_cast</code></p>",
        "id": 430150412,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711654753
    },
    {
        "content": "<p>This was the cleanest way I found to prove <code>#({s, t} : Set (Set α)) ≤ 2</code>. I'm sure someone can come up with something more clever.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_insert</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk_fintype</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 430152483,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711655686
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 430153004,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711655913
    },
    {
        "content": "<p>You found a missing lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Cardinal.mk_insert_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">#↑</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_insert</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk_insert_le</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 430154013,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711656300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Easy.20cardinal.20question/near/430154013\">said</a>:</p>\n<blockquote>\n<p>You found a missing lemma:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Cardinal.mk_insert_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">#↑</span><span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">#↑</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_insert</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">({</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk_insert_le</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Do you want me to squeeze it in with my PR that I’m working on, or will you add this?</p>",
        "id": 430155994,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711657183
    },
    {
        "content": "<p>If so, what file should it go in? Probably the same as Cardinal.mk_insert?</p>",
        "id": 430156132,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711657248
    },
    {
        "content": "<p>I can add it</p>",
        "id": 430156611,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711657456
    },
    {
        "content": "<p>great, thanks!</p>",
        "id": 430156902,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711657612
    }
]