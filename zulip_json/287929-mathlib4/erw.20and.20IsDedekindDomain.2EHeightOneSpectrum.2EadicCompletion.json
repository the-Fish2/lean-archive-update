[
    {
        "content": "<p>Finite adele rings don't really have a lot of love right now in mathlib and I need to use them for FLT so I'm trying to get on top of what's going on in the relevant files. When trying to write some code extending the API for these objects, I got myself into a situation where <code>rw</code> failed and <code>erw</code> worked, but if I wrote <code>change &lt;copy the goal here&gt;</code> beforehand then <code>rw</code> suddenly worked again. I've managed to debug this...to a certain extent.</p>\n<p>In <code>Mathlib/RingTheory/DedekindDomain/AdicValuation.lean</code> there's the definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsDedekindDomain.HeightOneSpectrum.adicCompletion#doc\">docs#IsDedekindDomain.HeightOneSpectrum.adicCompletion</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adicCompletion</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"n\">v.adicValued.toUniformSpace</span>\n</code></pre></div>\n<p>On lines 431 to 432 of that file, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c1\">-- This used to be `rw`, but we need `erw` after leanprover/lean4#2644</span>\n      <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>We can take this apart as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- ⊢ Valued.v (↑K ((algebraMap R K) r)) ≤ 1</span>\n      <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and <code>erw</code> fails if you change it to <code>rw</code>. (NB That <code>↑K</code> in the goal is pretty weird, but this is a coercion issue unrelated to what I want to talk about here; this is a coercion <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.Completion.coe%27#doc\">docs#UniformSpace.Completion.coe'</a> which takes an explicit input and the input is being displayed explicitly. )</p>\n<p>OK so here's a fix to make that <code>erw</code> into a <code>rw</code>: just <code>change</code> the goal to itself :-/</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"c1\">-- ⊢ Valued.v (↑K ((algebraMap R K) r)) ≤ 1</span>\n      <span class=\"n\">change</span> <span class=\"n\">Valued.v</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n      <span class=\"c1\">-- ⊢ Valued.v (↑K ((algebraMap R K) r)) ≤ 1</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- now works fine</span>\n</code></pre></div>\n<p>With <code>pp.all</code> on of course there _is_ a difference (quite a large one), and the main difference is that, for reasons unknown to me, the <code>change</code> line is unfolding <code>IsDedekindDomain.HeightOneSpectrum.adicCompletion</code>. Indeed, this works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum.adicCompletion</span> <span class=\"c1\">-- no visible effect on goal</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- now works fine</span>\n</code></pre></div>\n<p>I don't know why <code>change</code> is choosing to do this, but it occurred to me that this might be evidence that if we want to avoid <code>erw</code> then perhaps <code>IsDedekindDomain.HeightOneSpectrum.adicCompletion</code> should be an <code>abbrev</code> rather than a <code>def</code>. So I tried making this change, and the consequences are:</p>\n<p>1) The <code>erw</code> around line 431 can be changed back to a <code>rw</code>;<br>\n2) the porting note around line 438 (\"this proof used to be X\") -- the original proof X now works again;<br>\n3) The <code>erw</code> on line 445 can be changed to a <code>rw</code> (except that this <code>erw</code> is now going to be deleted completely because of point (2));<br>\n4) The porting notes \"added <code>dsimp</code>\" on lines 461 and 466 or so can now be deleted;<br>\nand, unfortunately<br>\n5) the instance at the end of the file breaks :-(</p>\n<p>The issue at the end of the file is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adicCompletionIntegers</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>used to work, but now fails. Here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adicCompletionIntegers</span> <span class=\"o\">:</span> <span class=\"n\">ValuationSubring</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Valued.v.valuationSubring</span>\n</code></pre></div>\n<p>So here are some proposals:</p>\n<p>1) Leave <code>IsDedekindDomain.HeightOneSpectrum.adicCompletion</code> as a <code>def</code>, add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adicCompletion_def</span> <span class=\"o\">:</span> <span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"n\">v.adicValued.toUniformSpace</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and then add in a bunch of <code>simp_rw [adicCompletion_def]</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_adicCompletionIntegers</span><span class=\"o\">,</span> <span class=\"n\">adicCompletion_def</span><span class=\"o\">,</span> <span class=\"n\">Valued.valuedCompletion_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(you need <code>simp_rw</code> not <code>rw</code> because the <code>adicCompletion</code> is buried in the term, and the motive isn't type correct if you just <code>rw</code>). </p>\n<p>2) Make it an <code>abbrev</code>, get nice clean code, delete some porting notes, and then deal with the fact that even though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fails (?!). This can be fixed with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.id</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>but this is perhaps indicative of something not being OK.</p>\n<p>Any suggestions?</p>",
        "id": 439380909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716064162
    },
    {
        "content": "<p>Thinking about this a bit more, I'm minded to go for the <code>abbrev</code> approach and try and debug the typeclass instance failure. The trace for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ✅ Algebra A A ▼\n  [] new goal Algebra A A ▼\n    [instances] #[Algebra.id, inst✝²]\n  [] ❌ apply inst✝² to Algebra A A ▶\n  [] ✅ apply Algebra.id to Algebra A A ▶\n  [] result Algebra.id A\n</code></pre></div>\n<p>However the trace for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>is this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] 💥 Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n      (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▼\n  [] new goal Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▼\n    [instances] #[Algebra.id, UniformSpace.Completion.algebra, UniformSpace.Completion.algebra', IsDedekindDomain.HeightOneSpectrum.AdicCompletion.algebra', IsDedekindDomain.HeightOneSpectrum.instAlgebraAdicCompletion, inst✝¹]\n  [] ❌ apply inst✝¹ to Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▶\n  [] ❌ apply IsDedekindDomain.HeightOneSpectrum.instAlgebraAdicCompletion to Algebra\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▶\n  [] 💥 apply IsDedekindDomain.HeightOneSpectrum.AdicCompletion.algebra' to Algebra\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▶\n</code></pre></div>\n<p>My reading of that trace is: \"there are 6 ways that Lean can think of as feasible for finding this instance; the one which works (<code>Algebra.id</code>) is the most fundamental and is hence tried last because of design decisions which I am still not 100% sure that I buy, and of the five other ways, the first two fail and then the third one explodes (what the heck does <code>💥</code> mean and how is it different from <code>❌</code>?) and for some reason we can never recover from the explosion and try the other two instances including the one which would have worked.\"</p>",
        "id": 439381681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716065019
    },
    {
        "content": "<p>Is the explosion \"ran out of heartbeats\"?</p>",
        "id": 439381913,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716065311
    },
    {
        "content": "<p>The error is <code>failed to synthesize\n  Algebra (adicCompletion K v) (adicCompletion K v)</code> (as opposed to \"please bump up heartbeats\").</p>\n<p>Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ExtendToLocalization</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.ValuedField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.TypeTags</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsDedekindDomain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intValuationDef</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">Associates.mk</span> <span class=\"n\">v.asIdeal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">Associates.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_valuation_ne_zero'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v.intValuationDef</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The `v`-adic valuation on `R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">intValuation</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">v.intValuationDef</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add_le_max'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.intValuation.extendToLocalization</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.mem_compl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">v.int_valuation_ne_zero'</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩)</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adicValued</span> <span class=\"o\">:</span> <span class=\"n\">Valued</span> <span class=\"n\">K</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Valued.mk'</span> <span class=\"n\">v.valuation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">adicCompletion</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"n\">v.adicValued.toUniformSpace</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AdicCompletion.algebra'</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439382386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716065911
    },
    {
        "content": "<p>If you don't like the sorried data in <code>AdicCompletion.algebra'</code>, then another approach is to open the file <code>Mathlib/RingTheory/DedekindDomain/AdicValuation.lean</code>, change <code>def adicCompletion := </code> on line 336 to <code>abbrev adicCompletion :=</code> and then observe that <code>#synth Algebra (adicCompletion K v) (adicCompletion K v)</code> doesn't work at the end of the file just before the error, but does work before line 395 where the exploding <code>algebra'</code> instance is defined)</p>",
        "id": 439382636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716066217
    },
    {
        "content": "<p>It also fails on nightly-testing with what looks like the same failure, which is this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] 💥 Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n      (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▼\n  [] new goal Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▼\n    [instances] #[Algebra.id, UniformSpace.Completion.algebra, UniformSpace.Completion.algebra', IsDedekindDomain.HeightOneSpectrum.AdicCompletion.algebra', inst✝¹]\n  [] ❌ apply inst✝¹ to Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▶\n  [] 💥 apply IsDedekindDomain.HeightOneSpectrum.AdicCompletion.algebra' to Algebra\n        (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) ▼\n    [tryResolve] 💥 Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v)\n          (IsDedekindDomain.HeightOneSpectrum.adicCompletion K\n            v) ≟ Algebra ?m.391137 (IsDedekindDomain.HeightOneSpectrum.adicCompletion ?m.391140 ?m.391144) ▼\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▼\n        [] new goal Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n        [] ❌ apply inst✝¹ to Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n        [] ❌ apply Algebra.id to Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▼\n        [] result &lt;not-available&gt; (cached)\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n      [] ❌ Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K ▶\n</code></pre></div>",
        "id": 439383074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716066743
    },
    {
        "content": "<p>The question is, why does it try <code>Algebra (IsDedekindDomain.HeightOneSpectrum.adicCompletion K v) K</code> so many times?</p>",
        "id": 439383097,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716066785
    },
    {
        "content": "<p>Just to be clear, I didn't truncate; it tries it that many times.</p>",
        "id": 439383104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716066807
    },
    {
        "content": "<p>(after it decided that such an instance is not available the first time round)</p>",
        "id": 439383108,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716066815
    },
    {
        "content": "<p>My understanding of this trace is: \"we need to find an Algebra instance, there are 5 ways to do it; the 5th one we'll try will work but we're not to know this yet; the first one fails, the second one explodes and we never recover, finishing by asking the same question 15 times\"</p>",
        "id": 439383213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716066928
    },
    {
        "content": "<p>This was supposed to be a question about the subtleties of <code>rw</code> v <code>erw</code> but I'm becoming convinced that the solution is just to change the <code>def</code> to an <code>abbrev</code> and then work around this issue somehow.</p>",
        "id": 439383310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716067050
    },
    {
        "content": "<p>With <code>set_option trace.Meta.synthPending true</code>, I see <code>[synthPending] synthPending ?m.8600</code> each time this is tried, but I have no idea what this means (there is no <code>?m8600</code> elsewhere in the output).</p>",
        "id": 439383376,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716067116
    },
    {
        "content": "<p>My feeling is that this is a bug in the instance synthesis algorithm.</p>",
        "id": 439383394,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716067147
    },
    {
        "content": "<p>It would be good to minimize this more. (I need to get some sleep, though.)</p>",
        "id": 439383453,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716067204
    },
    {
        "content": "<p>If you <code>set_option trace.Meta.isDefEq true</code>, you can see that the unification invoked by this instance does a lot of stuff, and throws an error in the end. In the type class resolution algorithm, there is one big <code>tryCatch</code> function on the outside, but there is no <code>tryCatch</code> around the individual <code>isDefEq</code> calls. It is for this reason that the error propagates all the way to the outside, and the other instances are not attempted.</p>",
        "id": 439389041,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716073890
    },
    {
        "content": "<p>I have it down to this but it's not going to get any smaller and it's still huge, it uses loads of algebra and loads of topology:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ExtendToLocalization</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.ValuedField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsDedekindDomain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intValuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"c1\">-- just 0 doesn't work</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add_le_max'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- this uses loads of algebra</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.intValuation.extendToLocalization</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">R</span> <span class=\"bp\">≤</span> <span class=\"n\">v.intValuation.supp.primeCompl</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this uses loads of topology</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">adicCompletion</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Valued.mk'</span> <span class=\"n\">v.valuation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AdicCompletion.algebra'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">-- set_option trace.Meta.isDefEq true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> what is this \"error in the end\"? Are you talking about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span>\n                                                              <span class=\"o\">(((</span><span class=\"n\">IsLocalization.toLocalizationMap</span> <span class=\"o\">(</span><span class=\"n\">nonZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n                                                                        <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sec</span>\n                                                                    <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span>\n                                                                <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                                                            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span>\n                                                              <span class=\"o\">(((</span><span class=\"n\">IsLocalization.toLocalizationMap</span>\n                                                                        <span class=\"o\">(</span><span class=\"n\">nonZeroDivisors</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">IsDedekindDomain.HeightOneSpectrum.adicCompletion</span>\n                                                                            <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n                                                                        <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sec</span>\n                                                                    <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span>\n                                                                <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 439390088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716075110
    },
    {
        "content": "<p>Hmmm, when setting <code>set_option trace.Meta.isDefEq.hint true</code>, the trace goes a bit further even.</p>",
        "id": 439390419,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716075465
    },
    {
        "content": "<p>It's possible to remove Classical and add decidable instances instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ExtendToLocalization</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.ValuedField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsDedekindDomain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intValuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"c1\">-- just 0 doesn't work</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add_le_max'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- this uses loads of algebra</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.intValuation.extendToLocalization</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">R</span> <span class=\"bp\">≤</span> <span class=\"n\">v.intValuation.supp.primeCompl</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this uses loads of topology</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">adicCompletion</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Valued.mk'</span> <span class=\"n\">v.valuation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AdicCompletion.algebra'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">--set_option trace.Meta.isDefEq true</span>\n<span class=\"c1\">--set_option trace.Meta.isDefEq.hint true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439390808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716075839
    },
    {
        "content": "<p>In the trace, I see at the end a [onFailure] trace node with the explode emoji, followed by two [hint] traces. Here is the code that must have thrown an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">unstuckMVar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">successK</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">failK</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getStuckMVar</span><span class=\"bp\">?</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"s2\">\"found stuck MVar {mkMVar mvarId} : {← inferType (mkMVar mvarId)}\"</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.synthPending</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n      <span class=\"n\">successK</span> <span class=\"n\">e</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">failK</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">failK</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">isDefEqOnFailure</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">withTraceNodeBefore</span> <span class=\"bp\">`</span><span class=\"n\">Meta.isDefEq.onFailure</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{t} =?= {s}\"</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">unstuckMVar</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.isExprDefEqAux</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">unstuckMVar</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.isExprDefEqAux</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">tryUnificationHints</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">tryUnificationHints</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>From this I conclude that the second call to <code>tryUnificationHints</code> throws an error.</p>\n<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tryUnificationHints</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.hint</span><span class=\"o\">]</span> <span class=\"s2\">\"{t} =?= {s}\"</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">config.unificationHints</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"k\">if</span> <span class=\"n\">t.isMVar</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">unificationHintExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">candidates</span> <span class=\"bp\">←</span> <span class=\"n\">hints.discrTree.getMatch</span> <span class=\"n\">t</span> <span class=\"n\">UnificationHints.config</span>\n  <span class=\"n\">for</span> <span class=\"n\">candidate</span> <span class=\"k\">in</span> <span class=\"n\">candidates</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">tryCandidate</span> <span class=\"n\">candidate</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"n\">return</span> <span class=\"n\">false</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">tryCandidate</span> <span class=\"n\">candidate</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"n\">withTraceNode</span> <span class=\"bp\">`</span><span class=\"n\">Meta.isDefEq.hint</span>\n      <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{exceptBoolEmoji ·} hint {candidate} at {t} =?= {s}\"</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>from the trace I conclude that tryCandidate is not called. The only function I see that could give an error is <code>hints.discrTree.getMatch</code>.</p>",
        "id": 439391094,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716076123
    },
    {
        "content": "<p>The tryCatch block that I was talking about earlier only catches the very specific error <code>throwIsDefEqStuck</code>. It just so happens to be that <code>DiscrTree.getMatch</code> is able to throw this error :)</p>",
        "id": 439391245,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716076311
    },
    {
        "content": "<p>Indeed I see this in the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.7891</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">IsDedekindDomain.HeightOneSpectrum.adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439391415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716076539
    },
    {
        "content": "<p>I don't know whether that is related or not</p>",
        "id": 439391478,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716076655
    },
    {
        "content": "<p>The expression being looked up the the <code>DiscrTree</code> during <code>tryUnificationHints</code> is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Decidable.rec</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span>\n          <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"o\">((</span><span class=\"n\">Associates.mk</span>\n                    <span class=\"bp\">?</span><span class=\"n\">m.8602.asIdeal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span>\n                <span class=\"o\">(</span><span class=\"n\">Associates.mk</span>\n                    <span class=\"o\">(</span><span class=\"n\">Ideal.span</span>\n                      <span class=\"o\">{((</span><span class=\"n\">IsLocalization.toLocalizationMap</span>\n                                <span class=\"o\">(</span><span class=\"n\">nonZeroDivisors</span>\n                                  <span class=\"o\">(</span><span class=\"n\">IsDedekindDomain.HeightOneSpectrum.adicCompletion</span>\n                                    <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n                                <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sec</span>\n                            <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">))))</span>\n    <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span>\n  <span class=\"o\">(((</span><span class=\"n\">IsLocalization.toLocalizationMap</span>\n            <span class=\"o\">(</span><span class=\"n\">nonZeroDivisors</span>\n              <span class=\"o\">(</span><span class=\"n\">IsDedekindDomain.HeightOneSpectrum.adicCompletion</span>\n                <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n            <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sec</span>\n        <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>And in the code for DiscrTree lookup, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">c</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConfig</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isDefEqStuckEx</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">e.hasExprMVar</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isRec</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">Meta.throwIsDefEqStuck</span>\n</code></pre></div>",
        "id": 439391917,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716077078
    },
    {
        "content": "<p>So that is what triggers the error</p>",
        "id": 439391973,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716077158
    },
    {
        "content": "<p>Note that recursors are unfolded if possible before lookup, so the fact that the recursor is still there means that it can't be unfolded due to metavariables.</p>",
        "id": 439392131,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716077303
    },
    {
        "content": "<p>Now I don't know what the correct fix for this bug is: do we put more <code>catchInternalId isDefEqStuckExceptionId</code> inside of type class synthesis, or do we put this in <code>tryUnificationHints</code>?</p>",
        "id": 439392263,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716077468
    },
    {
        "content": "<p>I think that this needs to move to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> now -- would you like to open a thread there asking for advice? You can explain what's going on far more coherently than me. I think I'll just work around this by adding an instance and press on.</p>",
        "id": 439392370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716077619
    },
    {
        "content": "<p>Update: I tried turning off unification hints, which gets rid of the bug. But then we get a deterministic time-out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ExtendToLocalization</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.ValuedField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">DiscreteValuation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsDedekindDomain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsDedekindDomain.HeightOneSpectrum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intValuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"n\">ℤₘ₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"c1\">-- just 0 doesn't work</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add_le_max'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- this uses loads of algebra</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℤₘ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.intValuation.extendToLocalization</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">R</span> <span class=\"bp\">≤</span> <span class=\"n\">v.intValuation.supp.primeCompl</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this uses loads of topology</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">adicCompletion</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Valued.mk'</span> <span class=\"n\">v.valuation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AdicCompletion.algebra'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">HeightOneSpectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v.adicCompletion</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">-- set_option trace.Meta.isDefEq true</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"s2\">\"#mysynth\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"n\">ha</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">elabSynth</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.withDeclName</span> <span class=\"bp\">`</span><span class=\"n\">_synth_cmd</span> <span class=\"k\">do</span>\n    <span class=\"n\">withConfig</span> <span class=\"o\">({</span><span class=\"bp\">·</span> <span class=\"k\">with</span> <span class=\"n\">unificationHints</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">term</span> <span class=\"n\">none</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">inst</span>\n    <span class=\"k\">let</span> <span class=\"n\">val</span>  <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">inst</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">val</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"n\">mysynth</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adicCompletion</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439394052,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716079346
    },
    {
        "content": "<p>My instinct is that you'll get more relevant eyes on this stuff if you open a new thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> .</p>",
        "id": 439394078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716079379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erw.20and.20IsDedekindDomain.2EHeightOneSpectrum.2EadicCompletion/near/439392370\">said</a>:</p>\n<blockquote>\n<p>I think I'll just work around this by adding an instance and press on.</p>\n</blockquote>\n<p>Alternatively, I assume that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">Algebra.id</span>\n</code></pre></div>\n<p>would also make it use the instance that is successful.</p>",
        "id": 439422210,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716108831
    },
    {
        "content": "<p>BTW, <code>Algebra.id</code> has default priority 1000, but it is the very first <code>Algebra</code> instance defined, so it is tried last among the default priority instances.</p>",
        "id": 439422380,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716108981
    },
    {
        "content": "<p>And probably a great one to have higher priority because it's likely to fail quickly when it doesn't apply</p>",
        "id": 439423500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716109933
    },
    {
        "content": "<p>I'm just now trying to see what the effect is: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13032\">#13032</a></p>",
        "id": 439423656,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716110131
    },
    {
        "content": "<p>build instructions: -113.839 * 10⁹ (-0.1%)<br>\nI had to set the priority back to default in two places, where proofs broke.</p>",
        "id": 439428805,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716115436
    },
    {
        "content": "<p>Note that it is not true that instances with the same priority are always first-in-last-out. This is only true for instances that get stored under the same index in the <code>DiscrTree</code>. Which index is retrieved first is a <code>DiscrTree</code> implementation detail. But the implementation is such that star-patterns end up being tried last (which I think is a good thing), and <code>Algebra.id</code> has a star pattern for all its arguments, so that is why it gets tried last.</p>",
        "id": 439435572,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716122420
    },
    {
        "content": "<p>Kevin has fixed the breakages without the need to restore default instance priority, and the effect is a net positive (if small compared to the total build). I'll add the \"awaiting review\" label to <a href=\"https://github.com/leanprover-community/mathlib4/pull/13032\">#13032</a>; let's see if there are further comments...</p>",
        "id": 439446996,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716133315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erw.20and.20IsDedekindDomain.2EHeightOneSpectrum.2EadicCompletion/near/439428805\">said</a>:</p>\n<blockquote>\n<p>build instructions: -113.839 * 10⁹ (-0.1%)<br>\nI had to set the priority back to default in two places, where proofs broke.</p>\n</blockquote>\n<p>Came here from Jovan's latest PR. Just to make sure: You are aware of the fact that build instructions are not at all deterministic for Lean and changes at this magnitude can also simply amount to noise yes? Lean's implementation contains a couple of things that do not have deterministic behavior in terms of instruction count at all so elaborating a Lean file twice does not have to yield the same instruction count.</p>",
        "id": 448139857,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719765992
    },
    {
        "content": "<p>Which things don't have deterministic behaviour, out of interest? I've seen count_heartbeats give different answers on the same declaration before and never understood why.</p>",
        "id": 448140344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719766265
    },
    {
        "content": "<p>And can you be more precise as to the (expected) relative size of the noise? That would be helpful in interpreting the <code>!bench</code> results.</p>",
        "id": 448141768,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719766815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erw.20and.20IsDedekindDomain.2EHeightOneSpectrum.2EadicCompletion/near/448140344\">said</a>:</p>\n<blockquote>\n<p>Which things don't have deterministic behaviour, out of interest? I've seen count_heartbeats give different answers on the same declaration before and never understood why.</p>\n</blockquote>\n<p>I'm not aware of all things that produce non deterministic behavior but I know one for sure. Some of the core routines that operate on <code>Expr</code> do build caches based on pointers modulo cache size. For example <code>forEachExprWhere</code> has this implementation for its cache.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">cacheSize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">USize</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">8192</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"sd\">/--</span>\n<span class=\"sd\">  Implements caching trick similar to the one used at `FindExpr` and `ReplaceExpr`.</span>\n<span class=\"sd\">  -/</span>\n<span class=\"w\">  </span><span class=\"n\">visited</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"w\">   </span><span class=\"c1\">-- Remark: our \"unsafe\" implementation relies on the fact that `()` is not a valid Expr</span>\n<span class=\"w\">  </span><span class=\"sd\">/--</span>\n<span class=\"sd\">  Set of visited subterms that satisfy the predicate `p`.</span>\n<span class=\"sd\">  We have to use this set to make sure `f` is applied at most once of each subterm that satisfies `p`.</span>\n<span class=\"sd\">  -/</span>\n<span class=\"w\">  </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HashSet</span><span class=\"w\"> </span><span class=\"n\">Expr</span>\n\n<span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">initCache</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">visited</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkArray</span><span class=\"w\"> </span><span class=\"n\">cacheSize</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"n\">lcProof</span><span class=\"w\"> </span><span class=\"o\">())</span>\n<span class=\"w\">  </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">ForEachM</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">ω</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">STWorld</span><span class=\"w\"> </span><span class=\"n\">ω</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadLiftT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ST</span><span class=\"w\"> </span><span class=\"n\">ω</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">StateRefT'</span><span class=\"w\"> </span><span class=\"n\">ω</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"n\">m</span>\n\n<span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">visited</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ForEachM</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">cacheSize</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">visited</span><span class=\"bp\">.</span><span class=\"n\">uget</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">lcProof</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">visited</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">visited</span><span class=\"bp\">.</span><span class=\"n\">uset</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">lcProof</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">false</span>\n</code></pre></div>\n<p>Now what can happen is that because all modern operating systems use ASLR and similar mechanisms to randomize addresses it might be that an <code>Expr</code> that was previously cached just happens to get evicted from the cache earlier on the next run and you end up doing different computation.  A similar mechanism is used in <code>Expr.replace</code>, potentially causing a result to be cached in one run but by coincidence not in another run.</p>\n<p>There are probably more things but this is at least a witness for the existence of non determinism.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erw.20and.20IsDedekindDomain.2EHeightOneSpectrum.2EadicCompletion/near/448141768\">said</a>:</p>\n<blockquote>\n<p>And can you be more precise as to the (expected) relative size of the noise? That would be helpful in interpreting the <code>!bench</code> results.</p>\n</blockquote>\n<p>I think the best way to figure that out for mathlib would be to simply rerun a !bench twice (or more) on the same commit and see how much your values are varying? All numbers I'm aware of are specific to the Lean compiler repository though there it is usually in the .x percent or lower. Other \"almost deterministic\" metrics like branch-misses do tend to vary low single digit percentages for example.</p>",
        "id": 448163904,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719775733
    },
    {
        "content": "<p>Definitely ignore anything under 0.5% variation in instruction count, and be skeptical of anything under 1%. Above 1% you're allowed to bring out the <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> right away. :-)</p>",
        "id": 448203406,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799825
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib4files/CategoryTheory/Limits/FilteredColimitCommutesFiniteLimit\">file#CategoryTheory/Limits/FilteredColimitCommutesFiniteLimit</a> has previously been identified as an example of a particularly nondeterministic file.</p>",
        "id": 448203620,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799886
    },
    {
        "content": "<p>It has been on my TODO list for too long to try to identify exactly what part of this file is so variable.</p>",
        "id": 448203702,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799910
    },
    {
        "content": "<p>If anyone would like to help out there that would be extremely helpful.</p>",
        "id": 448203735,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799920
    },
    {
        "content": "<p>We would <em>really</em> like to reduce this nondeterminism, because of course it makes optimisation hard. But we need better examples still for this.</p>",
        "id": 448203929,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799959
    },
    {
        "content": "<p>Note that Mathlib now has <code>count_heartbeats! in tac</code> which will run <code>tac</code> 10 times and report the variation.</p>",
        "id": 448204064,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719799997
    },
    {
        "content": "<p>I <em>hope</em> this is useful for understanding examples like this file (which it was written for, but then I haven't got back to).</p>",
        "id": 448204135,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719800019
    }
]