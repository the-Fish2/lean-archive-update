[
    {
        "content": "<p>What is the correct way to mix <code>to_additive</code> and alias, in particular relative to the autogenerated documentation? I could add the \"Alias of\" text manually to the docstring of the additive version, but it should really be autogenerated...</p>",
        "id": 418314611,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706288160
    },
    {
        "content": "<p>Also, how does <code>to_additive</code> react to <code>attr := deprecated some_mul_name</code>? Will the additive version be registered as <code>@[deprecated some_add_name]</code>?</p>",
        "id": 418314935,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706288271
    },
    {
        "content": "<p>I believe it should be, since parameters to <code>attr</code> are normally comma-separated</p>",
        "id": 418349073,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706302049
    },
    {
        "content": "<p>Yes, but the question is wether it additivizes the name that is passed as an argument to <code>deprecated</code></p>",
        "id": 418359162,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706307680
    },
    {
        "content": "<p>I just did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">deprecated</span><span class=\"o\">)</span> <span class=\"n\">AddMonoid.lcm_addOrder_eq_exponent</span><span class=\"kd\">]</span> <span class=\"c1\">-- 2024-01-26</span>\n<span class=\"n\">alias</span> <span class=\"n\">lcm_order_eq_exponent</span> <span class=\"o\">:=</span> <span class=\"n\">lcm_orderOf_eq_exponent</span>\n</code></pre></div>\n<p>which seemed to work</p>",
        "id": 418359717,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706307999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Alias.20and.20to_additive/near/418359162\">said</a>:</p>\n<blockquote>\n<p>Yes, but the question is wether it additivizes the name that is passed as an argument to <code>deprecated</code></p>\n</blockquote>\n<p>Arguments given to the <code>deprecated</code> attribute are not additivized, no. Just add the <code>attribute [deprecated ...]</code> afterwards.</p>",
        "id": 418815957,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1706613849
    },
    {
        "content": "<p>Oh, that's annoying. Would it be hard to make this \"just work(TM)\"?</p>",
        "id": 418821921,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706616251
    },
    {
        "content": "<p><code>to_additive</code> already uses a bunch of hacks to make it interact nicely with some common other attributes. It is indeed hard to make this work properly without redesigning the whole attribute system. We could add an additional hack to make it work specifically with the <code>deprecated</code> tactic, but I don't think that is the way to go.</p>",
        "id": 419010081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1706697101
    }
]