[
    {
        "content": "<p>I would've expected the following <code>SetLike</code> coercion to work, but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Opens</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.Opens</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span> <span class=\"bp\">#</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n<span class=\"k\">#check</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">#</span> <span class=\"n\">works</span>\n</code></pre></div>\n<p>Should I not have expected this behaviour?</p>",
        "id": 417123030,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705872376
    },
    {
        "content": "<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I suspect this is related to why the first <code>#check</code> isn't working.</p>",
        "id": 417123462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705872714
    },
    {
        "content": "<p>But shouldn't <em>that</em> work?</p>",
        "id": 417123584,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705872794
    },
    {
        "content": "<p>I believe this is a standard and really annoying problem: Lean doesn't know which <code>Set X</code> the coercion is supposed to land in. In lean 3 this would fail for <code>s : Finset alpha</code> too. Does it still fall in lean 4?</p>",
        "id": 417123604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705872810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instSetLikeOpens/near/417123584\">said</a>:</p>\n<blockquote>\n<p>But shouldn't <em>that</em> work?</p>\n</blockquote>\n<p>The point is that there might be a coercion to some <code>Set beta</code> for some other beta so I think lean won't just assume it's <code>Set alpha</code> you mean.</p>",
        "id": 417123714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705872891
    },
    {
        "content": "<p>I see. Slightly disappointing but no big deal.</p>",
        "id": 417123755,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705872930
    },
    {
        "content": "<p>Isn't that something that <code>@[default_instance]</code> is supposed to solve?</p>",
        "id": 417124786,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705873771
    }
]