[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dvd_iff</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>If this were the other way around it could be a <code>norm_cast</code> lemma, and then <code>norm_cast</code> would be able to remove those up-arrows (which I just wanted it to do I had a hypothesis <code> ↑D ∣ ↑M</code>). But it looks like it's mostly rewritten forwards. Can I add the backwards one and tag it? Or is there another trick? I prefer a tactic rather than having to remember the name of a lemma.</p>",
        "id": 437969681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715341931
    },
    {
        "content": "<p>You can tag it with <code>@[norm_cast]</code> already. <code>norm_cast</code> is smart</p>",
        "id": 437974234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715344202
    },
    {
        "content": "<p>But I agree it should be turned around regardless</p>",
        "id": 437974304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715344217
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_cast</span><span class=\"o\">:</span> <span class=\"n\">badly</span> <span class=\"n\">shaped</span> <span class=\"kd\">lemma</span><span class=\"o\">,</span> <span class=\"n\">lhs</span> <span class=\"n\">must</span> <span class=\"n\">contain</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"n\">one</span> <span class=\"n\">coe</span>\n  <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>'swhy I asked</p>",
        "id": 438076392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715399662
    },
    {
        "content": "<p>Hmm, it used to work in Lean 3</p>",
        "id": 438083096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715407448
    }
]