[
    {
        "content": "<p>I'm trying to make sense of the coercions in <a href=\"https://tqft.net/mathlib4files/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing\">file#Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing</a> and it's exposing my ignorance.</p>\n<p>In that file, <code>R_hat R K</code> is <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L68\">notation</a> for <code>FiniteIntegralAdeles R K</code>and by line 54 of the file we know this <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L54\">is a ring</a> (all rings are commutative in this question).  Also <code>K_hat R K</code> is <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L95\">notation</a> for <code>ProdAdicCompletions R K</code> and by line 87 we know <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L87\">this is a ring too</a>. A <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L99\">coercion</a> (of types) is defined between them on line 99, an <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L107C5-L107C21\">AddMonoidHom</a> is defined between them on line 107, a <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L120\">RingHom</a> on line 120 (no notation is used for some reason), <code>K_hat</code> is made into an algebra over <code>R_hat</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L157\">on line 157</a>, and it turns out that they're both R-algebras and an R-algebra hom is defined <a href=\"https://github.com/leanprover-community/mathlib4/blob/b00b6e0fb5ff8f20feb23194be8880e6bedffda1/Mathlib/RingTheory/DedekindDomain/FiniteAdeleRing.lean#L172C5-L172C15\">on line 172</a>. Are all these needed?</p>",
        "id": 442804336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717597870
    },
    {
        "content": "<p>Well, I would say that</p>\n<ul>\n<li>the ring structures are needed to even define the <code>RingHom</code> </li>\n<li>the different algebra structures are needed so that it is easy to walk around <code>ScalarTowers</code>: suppose you are in a field extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and you want to go from the finite integral adeles of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> to the adeles of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>, so you have two ways. Having all these instances explicit makes it easy to show that the two \"natural\" paths are the same.</li>\n<li>The AddMonoidHom could be packed inside the RingHom, but I think it is better to unpack them, since you help class instances when looking for things that are already true at AddMonoid level (like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>↦</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0\\mapsto 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6554em;vertical-align:-0.011em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>) avoiding a long type class search.</li>\n</ul>",
        "id": 442809710,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717599240
    },
    {
        "content": "<p>But do we really need to define a coercion and also an algebra structure? Is that how it works?</p>",
        "id": 442828270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717603448
    },
    {
        "content": "<p>Well, I think that the whole point is that there are three gadgets, the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=algebraMap#doc\">docs#algebraMap</a>, then the external multiplication that is linked to the previous by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.algebraMap_eq_smul_one#doc\">docs#Algebra.algebraMap_eq_smul_one</a> and (sometimes) a coercion that is the first field of the algebra map. Defining a coercion is only reasonable when the algebra map is injective, whereas the <code>smul</code> part is independent, so I think you cannot hope to get rid of the algebra map; and, on the other hand, in your setting you really <em>want</em> a coercion. So I am tempted to answer \"yes\" but I might be mathlib-biased.</p>",
        "id": 442834846,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717604884
    },
    {
        "content": "<p>I can get a coercion from an <code>Algebra</code> structure with <code>open scoped algebraMap</code> right? And I will probably want to <code>open scoped algebraMap</code> because there are many other rings and coercions involved. Will this lead to a diamond? Right now we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">v</span>\n</code></pre></div>\n<p>(this is really <code>{ coe := fun x v ↦ ↑(x v) }</code> and the up-arrow is <code>Subtype.val</code>, so it's a product of <code>Subtype.val</code>s), and also</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">ProdAdicCompletions</span><span class=\"bp\">.</span><span class=\"n\">algebraCompletions</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">FiniteIntegralAdeles</span><span class=\"bp\">.</span><span class=\"n\">Coe</span><span class=\"bp\">.</span><span class=\"n\">ringHom</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n</code></pre></div>\n<p>and after <code>open scoped algebraMap</code> we will have</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">scoped</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">coeHTCT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">CoeHTCT</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>I have no understanding of all this <code>coeHTCT</code> business.</p>",
        "id": 442894695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717621686
    },
    {
        "content": "<p>I guess one approach is that I can just soldier on and see what if anything breaks when I open the scope (which I will have to do for unrelated reasons).</p>",
        "id": 442895094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717621813
    },
    {
        "content": "<p>I think you're safe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Coe.coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CoeHTCT.coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 443118673,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717694942
    },
    {
        "content": "<p>In Lean 3 I would be happy with that argument but </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CoeHTCT</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">with_reducible</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 443129597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717698308
    },
    {
        "content": "<p>forget it...</p>",
        "id": 443131933,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717698849
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 443132024,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717698869
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CoeHTCT</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">with_reducible_and_instances</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>works. Don't ask me what the difference is, but I believe someone mentioned here on Zulip at somepoint that this is sufficient.</p>",
        "id": 443138206,
        "sender_full_name": "Christian Merten",
        "timestamp": 1717700548
    },
    {
        "content": "<p>Oh, and whenever \"someone\" finds the \"somepoint\", please post it here! I am very curious... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"point\" class=\"emoji emoji-1faf5\" role=\"img\" title=\"point\">:point:</span></p>",
        "id": 443138371,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717700610
    },
    {
        "content": "<p>OK, some updates after playing around a little bit: I have changed <code>instance Coe</code> to <code>def Coe</code> and the effect (after some fixing) is that</p>\n<ol>\n<li>I can find</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">--ProdAdicCompletions.algebraCompletions R K</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">CoeHTCT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- failed to synthetize</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- failed to synthetize</span>\n</code></pre></div>\n<p>which are both reasonable, as I have not <code>open scoped algebraMap</code></p>\n<ol start=\"2\">\n<li>If I <code>open scoped</code> it, I get</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">CoeHTCT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- algebraMap.coeHTCT (R_hat R K) (K_hat R K)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- failed to synthetize</span>\n</code></pre></div>\n<p>showing that the two are not \"really really\" equal.</p>\n<ol start=\"3\">\n<li>This <code>CoeHTCT</code> is really the <code>algebraCast</code>, and this works</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>Changing <code>rfl</code> to both <code>with_reducible rfl</code> or <code>with_reducible_and_instances_rfl</code> fails:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">with_reducible</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- The rfl tactic failed.</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K_hat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">with_reducible_and_instances</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- The rfl tactic failed.</span>\n</code></pre></div>",
        "id": 443161997,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717708091
    },
    {
        "content": "<p>The reason why I tested all this was because I wanted to try to get rid of the <code>Coe</code> instance, using only the algebra map and then benefitting of the <code>CoeHTCT</code>. The upshot is that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is not alone in having no understanding of all this <code>coeHTCT</code> business.</p>",
        "id": 443162285,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717708222
    },
    {
        "content": "<p>I have just decided to plough on and see what happens.</p>\n<p>My next question is: if I have four commutative rings in a commutative square (with all the arrows being <code>Algebra</code> maps), say A -&gt; B -&gt; D and A -&gt; C -&gt; D, and if I have some subring D' of D containing the image of B and C, and I promote D' to a type, and I define [Algebra B D'] and [Algebra C D'] then should I also make IsScalarTower X Y Z for (X,Y,Z) in (A,B,D'),(A,D',D),(B,D',D),(A,C,D'),(C,D',D)? Again I'm just experimenting and seeing what I'll need. Here A=R, B=K, C=R-hat, D=prod_v K_v and D' is the finite adeles.</p>",
        "id": 443168165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717711010
    },
    {
        "content": "<p>The second, third and fourth should follow from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsScalarTower.subalgebra%27#doc\">docs#IsScalarTower.subalgebra'</a></p>",
        "id": 443168657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717711266
    },
    {
        "content": "<p>But I confess I am not writing down the diagrams, so something could be the wrong way around.</p>",
        "id": 443168746,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1717711314
    },
    {
        "content": "<p>They don't because finite adeles are a definition and it's not reducible because of all the trouble we had when we tried that with integer rings.</p>\n<p>I don't object to adding them! I just don't know if I need them. I was going to find out by only adding them when I need them, but I've proved them all.</p>",
        "id": 443217843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717740293
    }
]