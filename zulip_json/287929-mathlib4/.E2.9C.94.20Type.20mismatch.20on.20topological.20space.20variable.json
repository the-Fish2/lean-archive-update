[
    {
        "content": "<p>I'm currently working on something similar to the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/MetricSpace/Perfect.html#Perfect.exists_nat_bool_injection\">docs#Perfect.exists_nat_bool_injection</a> in my own file <a href=\"/user_uploads/3121/zdUv5v02_zYgKkl_BksZThwc/Splitting.lean\">Splitting.lean</a>. However, I'm running into trouble on lines 117 and 124, where I am getting the errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">hanti</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ClosureAntitone</span> <span class=\"n\">Bool</span> <span class=\"n\">α</span> <span class=\"n\">D</span> <span class=\"n\">tα</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ClosureAntitone</span> <span class=\"n\">Bool</span> <span class=\"n\">α</span> <span class=\"n\">D</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">tα</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">UniformSpace.toTopologicalSpace</span>\n</code></pre></div>\n<p>I'm not really sure what this means or how to fix it. For reference, both of these files use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/MetricSpace/CantorScheme.html\">docs#CantorScheme</a>. Could I get some help (and perhaps some general advice on how to work with these topological space variables)?</p>",
        "id": 423839466,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709133078
    },
    {
        "content": "<p>See if you really need <code>t\\a</code>.</p>",
        "id": 423844560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709134501
    },
    {
        "content": "<p>If I remove <code>tα</code>, then I get this error when I assert <code>[BorelSpace α]</code> (which I do need).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 423845124,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709134655
    },
    {
        "content": "<p>If so, try and prove the two are equal using <code>rfl</code>. If it works, try <code>by with_reducible_and_instances rfl</code>. If that works, scratch your head. </p>\n<p>If not, <code>set_option trace.Meta.isDefEq true in</code> above the proof and expand the info view tree to see where unification gets stuck</p>",
        "id": 423845367,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709134713
    },
    {
        "content": "<p>(Caveat: on mobile so can’t actually look at code but) usually </p>\n<ul>\n<li>an automatic default argument stuck in or</li>\n<li>some definition is not reducible so Lean won’t unfold it to keep checking</li>\n</ul>",
        "id": 423846165,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709134941
    },
    {
        "content": "<p>I tried those and got to \"scratch my head\" :)</p>",
        "id": 423847056,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709135174
    },
    {
        "content": "<p>There is also a more subtle defeq dance around <code>UniformSpace</code>’s that others might know better</p>",
        "id": 423847084,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709135185
    },
    {
        "content": "<p>You can't have both <code>[MetricSpace α]</code> and <code>[TopologicalSpace α]</code>, as the former implies the latter</p>",
        "id": 423847199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709135219
    },
    {
        "content": "<p>If part of your code needs one, and part needs the other, then you should group things into <code>section</code>s</p>",
        "id": 423847259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709135233
    },
    {
        "content": "<p>Adding more and more assumptions as the file gets longer doesn't work</p>",
        "id": 423847299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709135243
    },
    {
        "content": "<p>And that’s why you look at the code :)</p>",
        "id": 423848912,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709135716
    },
    {
        "content": "<p>Yep, that fixed it. Thanks!</p>",
        "id": 423849428,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709135878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"530359\">Connor Gordon</span> has marked this topic as resolved.</p>",
        "id": 423849486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709135885
    }
]