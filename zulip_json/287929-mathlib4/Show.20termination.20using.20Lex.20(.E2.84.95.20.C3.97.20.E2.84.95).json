[
    {
        "content": "<p>I'm trying to use <code>Lex (ℕ × ℕ)</code> for showing termination.  But it doesn't work the way I thought it would. Is there a way to make it work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aggr</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span> <span class=\"k\">then</span> <span class=\"n\">n</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.tail</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_pos_of_ne_nil</span> <span class=\"n\">nil</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">ne_zero_of_lt</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span>\n          <span class=\"n\">Nat.pred_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns.tail</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">termination_by</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ns</span><span class=\"o\">)</span>\n\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">ns</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">finiteBy</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toLex</span> <span class=\"o\">(</span><span class=\"n\">ns.length</span><span class=\"o\">,</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aggr'</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span> <span class=\"k\">then</span> <span class=\"n\">n</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finiteBy</span> <span class=\"o\">(</span><span class=\"n\">List.tail</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finiteBy</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_pos_of_ne_nil</span> <span class=\"n\">nil</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">ne_zero_of_lt</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finiteBy</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"n\">List.headD_eq_head</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">Prod.Lex.lt_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span>\n          <span class=\"n\">Nat.pred_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns.tail</span> <span class=\"c1\">-- failed to prove termination, suggests proving `False`</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">finiteBy</span> <span class=\"n\">ns</span>\n\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">ns</span>\n</code></pre></div>\n<p>Of course in this mwe it doesn't really make sense to use <code>finiteBy</code> instead of <code>length</code>, but in my real use case I need lexicographical ordering.</p>",
        "id": 426886799,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1710591549
    },
    {
        "content": "<p>I don't think you need to use <code>Lex</code> explicitly, just use <code>termination_by (ns.lengh, ns.headD 0)</code> maybe?</p>",
        "id": 426886931,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710591669
    },
    {
        "content": "<p><code>termination_by (ns.lengh, ns.headD 0)</code> doesn't seem to use lexicographical ordering, here is a mwe that shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aggr''</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span> <span class=\"k\">then</span> <span class=\"n\">n</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">head_zero</span> <span class=\"o\">:</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.tail</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_pos_of_ne_nil</span> <span class=\"n\">nil</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">ne_zero_of_lt</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span>\n          <span class=\"n\">Nat.pred_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns.tail</span> <span class=\"c1\">-- This works</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">ns'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ns.headD</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">::</span> <span class=\"n\">ns.tail</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ns'.length</span> <span class=\"bp\">=</span> <span class=\"n\">ns.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold_let</span> <span class=\"n\">ns'</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_pos_of_ne_nil</span> <span class=\"n\">nil</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">ne_zero_of_lt</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Nat.succ_pred</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.headD_eq_head</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span>\n          <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ns'.headD</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold_let</span> <span class=\"n\">ns'</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.headD_cons</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.headD_eq_head</span><span class=\"bp\">?</span><span class=\"o\">]</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns'</span> <span class=\"c1\">-- termination fails here</span>\n  <span class=\"n\">termination_by</span> <span class=\"o\">(</span><span class=\"n\">ns.length</span><span class=\"o\">,</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">ns</span>\n</code></pre></div>",
        "id": 426888189,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1710592826
    },
    {
        "content": "<p>Hmm, it is using the lexicographic ordering, but the the problem is that the  default <code>decreasing_tactic</code> is not complete:</p>\n<p>It uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.Lex.right#doc\">docs#Prod.Lex.right</a>, but in your case you need the more general <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.Lex.right%27#doc\">docs#Prod.Lex.right'</a>. You can make progress with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_wf</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right'</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aggr''</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span> <span class=\"k\">then</span> <span class=\"n\">n</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">head_zero</span> <span class=\"o\">:</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.tail</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_pos_of_ne_nil</span> <span class=\"n\">nil</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">ne_zero_of_lt</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">List.length_tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span>\n          <span class=\"n\">Nat.pred_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns.tail</span> <span class=\"c1\">-- This works</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">ns'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ns.headD</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">::</span> <span class=\"n\">ns.tail</span>\n      <span class=\"n\">go</span> <span class=\"n\">n.succ</span> <span class=\"n\">ns'</span> <span class=\"c1\">-- termination fails here</span>\n  <span class=\"n\">termination_by</span> <span class=\"o\">(</span><span class=\"n\">ns.length</span><span class=\"o\">,</span> <span class=\"n\">ns.headD</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_wf</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right'</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_eq</span>\n        <span class=\"n\">exact</span> <span class=\"n\">RelSeries.fromListChain'.proof_1</span> <span class=\"n\">ns</span> <span class=\"n\">nil</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.pred_lt</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">head_zero</span>\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">ns</span>\n</code></pre></div>\n<p>(the odd lemma is picked up by <code>appy?</code> – <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> )</p>",
        "id": 426897891,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710601279
    }
]