[
    {
        "content": "<p>I was reminded of this again today: <a href=\"#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419670355\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/MeasurableDiv.20for.20Complex.20and.20Real.20types/near/419670355</a></p>\n<p>I wrote it off at the time, but I wonder if the UX can/should be improved here? (if intended behavior, no problem, otherwise I'd be interested to learn how to fix this!)</p>\n<p>In PNT+ I've put the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: why do we need to bump this?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableMul₂</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 430719856,
        "sender_full_name": "llllvvuu",
        "timestamp": 1712038869
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 430720546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712039274
    },
    {
        "content": "<p>The one from the linked message still works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableDiv₂</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p><a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0A%0Ainstance%20%3A%20MeasurableDiv%E2%82%82%20%E2%84%82%20%3A%3D%20inferInstance%0Ainstance%20%3A%20MeasurableDiv%E2%82%82%20%E2%84%9D%20%3A%3D%20inferInstance%0A\">https://live.lean-lang.org/#code=import%20Mathlib%0A%0Ainstance%20%3A%20MeasurableDiv%E2%82%82%20%E2%84%82%20%3A%3D%20inferInstance%0Ainstance%20%3A%20MeasurableDiv%E2%82%82%20%E2%84%9D%20%3A%3D%20inferInstance%0A</a></p>\n<blockquote>\n<p>failed to synthesize<br>\n  MeasurableDiv₂ ℂ<br>\n(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached</p>\n</blockquote>\n<p>I'm not well-versed in reading synthInstance traces but it looks like a maybe a wide search or a search that's getting stuck on non-true goals like <code>DiscreteMeasurableSpace</code>?</p>",
        "id": 430720834,
        "sender_full_name": "llllvvuu",
        "timestamp": 1712039429
    }
]