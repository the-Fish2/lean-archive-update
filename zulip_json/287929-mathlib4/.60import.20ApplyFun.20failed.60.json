[
    {
        "content": "<p>I'd like to use the <code>apply_fun</code> tactic in one of my imports, but I'm getting </p>\n<p><code>import Mathlib.Tactic.ApplyFun failed, environment already contains 'Mathlib.Tactic.maybeProveInjective._closed_1._cstage2' from Mathlib.Tactic.applyFun</code></p>\n<p>I've tracked the other importing file down to <code>Mathlib.Data.ZMod.Basic</code>, but I'm not entirely sure what I should _do_ with that information now -- is this a bug in my code, a bug in Mathlib I can do something about, or some fundamental limitation? I would be fairly surprised if it were the last and we just couldn't import a tactic twice, but maybe there's something I'm supposed to be doing to sanitize my own import that I'm not?</p>",
        "id": 447898787,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719621193
    },
    {
        "content": "<p>It sounds like you might be on a case-insensitive filesystem? If so, that would let you import <code>Mathlib.Tactic.applyFun</code> and <code>Mathlib.Tactic.ApplyFun</code> as if they were different modules. (This confusion should be fixed in <a href=\"https://github.com/leanprover/lean4/pull/4538\">lean4#4538</a>)</p>",
        "id": 447901376,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623283
    },
    {
        "content": "<p>replacing <code>import Mathlib.Tactic.ApplyFun</code> with <code>import Mathlib.Tactic.applyFun</code> didn't do anything, if that's what you mean?</p>",
        "id": 447901509,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623421
    },
    {
        "content": "<p>I mean to be sure that every time you import it, it should consistently be <code>Mathlib.Tactic.ApplyFun</code></p>",
        "id": 447901561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623509
    },
    {
        "content": "<p>(The error message is suggesting that there is a <code>Mathlib.Tactic.applyFun</code> somewhere.)</p>",
        "id": 447901648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623561
    },
    {
        "content": "<p>At the moment, it's only imported in file A (which is then imported into file B); in file A I can swap between <code>import Mathlib.Tactic.applyFun</code> and <code>import Mathlib.Tactic.ApplyFun</code> without changing the <code>import error</code> in file B</p>",
        "id": 447901657,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60import.20ApplyFun.20failed.60/near/447901648\">said</a>:</p>\n<blockquote>\n<p>(The error message is suggesting that there is a <code>Mathlib.Tactic.applyFun</code> somewhere.)</p>\n</blockquote>\n<p>Yes, near as I can tell that place is in some transitive import via <code>Mathlib.Data.ZMod.Basic</code></p>",
        "id": 447901712,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623639
    },
    {
        "content": "<p>What are more details about your project? Or are you in mathlib itself?</p>",
        "id": 447901824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623744
    },
    {
        "content": "<p>If it's a project, could you please do a case-sensitive search for <code>Mathlib.Tactic.applyFun</code> to make sure you don't have it written like this anywhere in your project?</p>",
        "id": 447901982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623836
    },
    {
        "content": "<p>This is my much delayed but approaching completion <code>ambivalent def</code> or <code>tfai_def</code> (name subject to change) project, which terminates in basically being a variant of <code>opaque</code> that defines a symbol in such a way that makes it semantically obvious that a number of definitions are equivalent</p>",
        "id": 447901988,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623842
    },
    {
        "content": "<p>Whether or not case sensitivity is on, the line <code>import Mathlib.Tactic.applyFun</code> appears only in three files, one of which is commented out and one of which is never itself imported</p>",
        "id": 447902070,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623912
    },
    {
        "content": "<p>the last place is the file I refer to as file A above</p>",
        "id": 447902085,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623927
    },
    {
        "content": "<p>Please change these all to ApplyFun</p>",
        "id": 447902089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719623929
    },
    {
        "content": "<p>... sure, I guess</p>",
        "id": 447902122,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719623957
    },
    {
        "content": "<p>nope</p>",
        "id": 447902230,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719624046
    },
    {
        "content": "<p>... though</p>",
        "id": 447902241,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719624052
    },
    {
        "content": "<p>You might also need to rebuild. There's a chance that somehow oleans are stale</p>",
        "id": 447902263,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719624067
    },
    {
        "content": "<p>yeah, that was my thought</p>",
        "id": 447902269,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719624077
    },
    {
        "content": "<p>one sec</p>",
        "id": 447902272,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719624078
    },
    {
        "content": "<p>rebuilding did it<br>\nthanks</p>",
        "id": 447902421,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1719624178
    }
]