[
    {
        "content": "<p>It looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_Icc_eq_integral_Ioo#doc\">docs#MeasureTheory.integral_Icc_eq_integral_Ioo</a> is incorrectly named, as it actually equals an <code>Ico</code> integral, not an <code>Ioo</code>. If someone can give <code>enricozb</code> github permissions I can make a PR.</p>",
        "id": 419151616,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706748761
    },
    {
        "content": "<p>I wonder how hard it would be to scan the codebase for these mistakes</p>",
        "id": 419152098,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706749042
    },
    {
        "content": "<p>I'll try something tomorrow to see if I can't programmatically spot more of these mistakes</p>",
        "id": 419152118,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706749065
    },
    {
        "content": "<p>Would you be using some kind of heuristic? Not sure how I'd classify \"these mistakes\".</p>",
        "id": 419152309,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706749196
    },
    {
        "content": "<p>I'm thinking of splitting the theorem name into pieces, then looking at common words like <code>ge</code>, <code>subset</code>, <code>union</code>, <code>Ioo</code>, and checking that the type or hypotheses do mention them</p>",
        "id": 419152953,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706749659
    },
    {
        "content": "<p>ah, that makes sense to me. I think after filtering out some \"too common\" words, like \"of\", this would probably be decently robust</p>",
        "id": 419153231,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706749882
    },
    {
        "content": "<p>good idea</p>",
        "id": 419153236,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706749887
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> I don't have access to my 2FA at the moment, so can't send an invite.</p>",
        "id": 419159505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706753979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256383\">@Enrico Borba</span>, I've sent you an invitation.</p>",
        "id": 419159688,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706754101
    },
    {
        "content": "<p>Is there anything to do after opening a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10149\">#10149</a>)?</p>",
        "id": 419161744,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706755371
    },
    {
        "content": "<p>Label as <code>awaiting-review</code>, and it doesn't hurt after CI passes to verify that it appears on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a>.</p>",
        "id": 419161780,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706755401
    },
    {
        "content": "<p>Fix CI. :-)</p>",
        "id": 419161792,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706755409
    },
    {
        "content": "<p>It looks like we already have the \"Ico\" lemma elsewhere, so you should change the statement, not the name here.</p>",
        "id": 419161842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60integral_Icc_eq_integral_Ioo.60.20typo.3F/near/419161780\">said</a>:</p>\n<blockquote>\n<p>Label as <code>awaiting-review</code></p>\n</blockquote>\n<p>Also add relevant topic labels. E.g., <code>t-analysis</code> and/or <code>t-measure-probability</code> in this case.</p>",
        "id": 419161932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755495
    },
    {
        "content": "<p>For a PR of this size, adding <code>easy</code> label can speed up review process.</p>",
        "id": 419161969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755519
    },
    {
        "content": "<p>Oh whoops, let me take a closer look</p>",
        "id": 419162083,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706755568
    },
    {
        "content": "<p>Also, I fixed the title&amp;description.</p>",
        "id": 419162114,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755589
    },
    {
        "content": "<p>Everything above the line goes to the commit message.</p>",
        "id": 419162140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755614
    },
    {
        "content": "<p>Thanks for the help there. On my local mathlib it looks like the proof can remain unchanged</p>",
        "id": 419162219,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706755680
    },
    {
        "content": "<p>And I made a suggestion on Github, so you can just accept it.</p>",
        "id": 419162223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755681
    },
    {
        "content": "<p>Yep did so. Out of curiosity was it obvious to you that the proof wouldn't have to change at all?</p>",
        "id": 419162313,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706755721
    },
    {
        "content": "<p>Once I read it, yes.</p>",
        "id": 419162368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755761
    },
    {
        "content": "<p>But I have several years of experience with Lean.</p>",
        "id": 419162388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706755778
    },
    {
        "content": "<p>That is reassuring context haha</p>",
        "id": 419162406,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706755794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> has marked this topic as resolved.</p>",
        "id": 419165502,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706757617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20.60integral_Icc_eq_integral_Ioo.60.20typo.3F/near/419153231\">said</a>:</p>\n<blockquote>\n<p>ah, that makes sense to me. I think after filtering out some \"too common\" words, like \"of\", this would probably be decently robust</p>\n</blockquote>\n<p><code>X_of_Y</code> means that the declaration should contain <code>&lt;thing described by Y&gt; -&gt; &lt;thing described by X&gt;</code>.</p>",
        "id": 419185119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706771135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20.60integral_Icc_eq_integral_Ioo.60.20typo.3F/near/419185119\">said</a>:</p>\n<blockquote>\n<p><code>X_of_Y</code> means that the declaration should contain <code>&lt;thing described by Y&gt; -&gt; &lt;thing described by X&gt;</code>.</p>\n</blockquote>\n<p>I'm aware, I'm just unsure of how rigorous this hypothetical check would be. If we're checking definitions \"as strings\" against their names, would we just check for any presence of <code>-&gt;</code> if the definition contains the word \"of\"?</p>\n<p><span class=\"user-mention\" data-user-id=\"380890\">@Emilie (Shad Amethyst)</span> , if you end up trying something, can you just post in this thread (I'm not sure where to watch out for stuff like this), i'm curious what the false negative rate will be like.</p>",
        "id": 419237655,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706791210
    },
    {
        "content": "<p>I can, yeah.</p>\n<p>I don't think <code>of</code> would be a very interesting keyword to look out for: <code>of_X</code> can be omitted if the rest of the name is enough to distinguish it, or the theorem could be named <code>X.thing</code>, so really the only information I can get from <code>X_of_Y</code> is that I don't need to look at the return type for whether <code>Y</code> is mentionned and that there is some argument (exceptions to the latter are rare enough that it's not worth checking for).</p>\n<p>So for instance, if someone wrote <code>lt_of_le</code> but the type is <code>a &lt; b → a ≤ b</code>, then the <code>of_le</code> part would be out of place since it's only mentionned in the return type, and that's something I can try to check for. But if someone just named this theorem <code>lt_le</code>, then I can't programmatically say anything about it.</p>",
        "id": 419252512,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1706796196
    }
]