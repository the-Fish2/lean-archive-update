[
    {
        "content": "<p>I've found two particularly slow examples recently. Neither of these instances should be inferred, but they take too many heartbeats to fail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 19118 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CovariantClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 20115 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For the first example, I tried to remove some redundant instances in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9252\">#9252</a>. At the beginning the build failed. I realized that Lean tries to search for an instance that contains a metavariable. I found a similar example at <a href=\"#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type</a>, but instead of getting a <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span>, I got a <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>. I think it's because the TC search wasn't failing fast enough, so I added some meaningless high-priority instances, and then the build succeeded. Of course that didn't really solve the problem, and Lean still made a lot of attempts that seem unnecessary to me.</p>\n<p>I don't think I have enough TC knowledge to continue to understand these two examples, so I'd like to show them to someone who knows more about TC.</p>",
        "id": 410274010,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703759270
    },
    {
        "content": "<p>I think we should turn all uses of <code>CovariantClass</code>/<code>ContravariantClass</code> into custom structures. With the current situation, all new instances slow down all existing uses.</p>",
        "id": 410274722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703759549
    },
    {
        "content": "<p>As in, a new typeclass for each operator and relation?</p>",
        "id": 410280847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703762821
    },
    {
        "content": "<p>Yes, exactly. There is only two operators and two relations we care about, so that makes 4 new typeclasses.</p>",
        "id": 410291600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703769114
    },
    {
        "content": "<p>IIUC, this actually might help me out with the typeclass I need to define for <code>OrderedSemifield</code>(see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ordered.20group.20with.20zero\">here</a> for discussion) because right now if I try to extend <code>PosMulMono</code> etc. I get errors that they are not structures.</p>",
        "id": 410323300,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703785053
    },
    {
        "content": "<p>The solution there is to not use <code>extends</code> and just create a <code>OrderedSemifield.toPosMulMono</code> instance after the clsas</p>",
        "id": 410324309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703785694
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 21265 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CovariantClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 20349 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>on <a href=\"https://github.com/leanprover-community/mathlib4/tree/f09d5297\">branch#f09d5297</a>.<br>\nAnd now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 15897 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CovariantClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 20014 heartbeats</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">infer_instance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>on <a href=\"https://github.com/leanprover-community/mathlib4/tree/45bd0a21\">branch#45bd0a21</a></p>\n<p><a href=\"https://github.com/leanprover/lean4/pull/4003\">lean4#4003</a> didn't completely resolve the first example. I checked the TC search and found that the instance parameters are not syntactically the same in duplicate attempts. Can <del>this difference</del> instance parameters be ignored during TC searches? If it's possible, TC searches might be several times faster than before (at least in my first example). Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b0</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b1</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b2</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b3</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b4</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b5</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b6</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"n\">b7</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">n.succ</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">B</span> <span class=\"mi\">7</span> <span class=\"c1\">-- (deterministic) timeout at `typeclass`</span>\n</code></pre></div>\n<p>(My naive thought is that (most of the time?) the definition of the instance parameter doesn't matter during TC searches, so maybe it's ok to do this (in most cases)......)</p>",
        "id": 436774716,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1714683036
    },
    {
        "content": "<p>After modifying the TC search the first example takes only less than 2000 heartbeats and shake found some unused imports. But the whole Mathlib is not significantly faster...</p>",
        "id": 438140816,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715469658
    },
    {
        "content": "<p>At least the good news is Mathlib builds successfully after the modification. Where is the modified TC search code?</p>",
        "id": 438143969,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715473772
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12810\">#12810</a> looks significant faster?</p>",
        "id": 438147338,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715477536
    },
    {
        "content": "<p>That's because <code>bump/nightly-2024-05-09</code> is faster than <code>master</code>.</p>",
        "id": 438149998,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715480720
    },
    {
        "content": "<p>I haven't found the reason why <code>Mathlib.LinearAlgebra.Semisimple</code> is faster. <span class=\"user-mention\" data-user-id=\"566171\">@Meow</span>  implemented something like <a href=\"https://github.com/leanprover/lean4/pull/4003\">lean4#4003</a> and this advantage disappeared when I removed it.</p>",
        "id": 438150109,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715480865
    },
    {
        "content": "<p>Removing some instances also speeds up the first example, but it needs a hack to work... See <a href=\"https://github.com/leanprover-community/mathlib4/pull/9252\">#9252</a></p>",
        "id": 438152465,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715483884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/TC.20slowness/near/438140816\">said</a>:</p>\n<blockquote>\n<p>and shake found some unused imports.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12830\">#12830</a></p>",
        "id": 438153815,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1715485693
    },
    {
        "content": "<p>Currently the first example is 10262 heartbeats. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/13124\">#13124</a>, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"n\">count_heartbeats</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">-- Used 3826 heartbeats</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It's not as good as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12810\">#12810</a>, but it's still faster and does not need to modify Lean4.</p>",
        "id": 440359121,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716481919
    },
    {
        "content": "<p>There are still some unnecessary duplicate checks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsLeftCancelAdd</span><span class=\"bp\">.</span><span class=\"n\">addLeftStrictMono_of_addLeftMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsCancelAdd</span><span class=\"bp\">.</span><span class=\"n\">toIsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">instIsCancelAdd</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">OrderedAddCommGroup</span><span class=\"bp\">.</span><span class=\"n\">to_covariantClass_left_le</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toCovariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftMono_of_addLeftReflectLT</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedCancelAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toContravariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftReflectLT_of_addLeftMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">OrderedAddCommGroup</span><span class=\"bp\">.</span><span class=\"n\">to_covariantClass_left_le</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toCovariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftMono_of_addLeftReflectLT</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">AddGroup</span><span class=\"bp\">.</span><span class=\"n\">addLeftReflectLT_of_addLeftStrictMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsLeftCancelAdd</span><span class=\"bp\">.</span><span class=\"n\">addLeftStrictMono_of_addLeftMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsCancelAdd</span><span class=\"bp\">.</span><span class=\"n\">toIsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">instIsCancelAdd</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">IsCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">IsLeftCancelAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">AddLeftStrictMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">OrderedAddCommGroup</span><span class=\"bp\">.</span><span class=\"n\">to_covariantClass_left_le</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toCovariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftMono_of_addLeftReflectLT</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedCancelAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toContravariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftReflectLT_of_addLeftMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">OrderedAddCommGroup</span><span class=\"bp\">.</span><span class=\"n\">to_covariantClass_left_le</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedAddCommMonoid</span><span class=\"bp\">.</span><span class=\"n\">toCovariantClassLeft</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">addLeftMono_of_addLeftReflectLT</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftMono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">AddGroup</span><span class=\"bp\">.</span><span class=\"n\">addLeftReflectLT_of_addLeftStrictMono</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddLeftReflectLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 440367274,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1716484957
    }
]