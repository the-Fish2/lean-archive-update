[
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos_eq_one_iff#doc\">docs#Real.cos_eq_one_iff</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_zero_iff#doc\">docs#Complex.cos_eq_zero_iff</a></p>",
        "id": 417539742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706048603
    },
    {
        "content": "<p>Which one should we prefer? <code>∃ k, f k = a</code> agrees with the definitions of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.range#doc\">docs#Set.range</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image#doc\">docs#Set.image</a> while <code>∃ k, a = f k</code> lets us do <code>rintro ⟨k, hk⟩; rw [hk]</code></p>",
        "id": 417539889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706048661
    },
    {
        "content": "<p>IMHO, if we agree on <code>∃ k, a = f k</code>, then we should redefine <code>Set.image</code>, <code>Set.image2</code>, <code>Set.range</code> and change lemmas for things like <code>Finset.mem_map</code>.</p>",
        "id": 417540542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706049004
    },
    {
        "content": "<p>Or we can migrate to <code>PMOD</code> in this case and postpone the decision.</p>",
        "id": 417540638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706049045
    },
    {
        "content": "<p>I spent some time thinking about where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in NNG should be defined as <code>∃ c, b = a + c</code> or <code>∃ c, a + c = b</code> and in some sense I never did make up my mind; the argument for <code>a + c = b</code> is \"more complicated thing on the left\", but in practice one seemed to want to rewrite the b into a+c more often than the converse.</p>",
        "id": 417542553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706050066
    },
    {
        "content": "<p><code>rintro ⟨k, hk⟩; rw [hk]</code> is a fairly weak argument since we can do <code>rintro ⟨k, rfl⟩</code> in that case anyway</p>",
        "id": 417545696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051657
    },
    {
        "content": "<p>But that's not an argument to prefer the other order</p>",
        "id": 417545717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051671
    },
    {
        "content": "<p>Not if <code>a</code> is an expression.</p>",
        "id": 417545738,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706051679
    },
    {
        "content": "<p>Ah, so this is really <code>∃ k, f k = g x</code> vs <code>∃ k, g x = f k</code>? That is, it's about the bound variable <code>k</code> not the free variable <code>a</code>?</p>",
        "id": 417546086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051865
    },
    {
        "content": "<p>When you apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos_eq_one_iff#doc\">docs#Real.cos_eq_one_iff</a>, the angle can be an expression (but quite often it's a variable, so you can use <code>rfl</code>).</p>",
        "id": 417546279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706051965
    },
    {
        "content": "<p>I've been working towards unifying things with the <code>∃ a, f a = b</code> spelling.</p>",
        "id": 417593569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706084255
    },
    {
        "content": "<p>This matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.range#doc\">docs#Set.range</a></p>",
        "id": 417593590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706084263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> asked me to change <a href=\"https://github.com/leanprover-community/mathlib4/pull/9878\">#9878</a> to <code>∃ a, b = f a</code> (and other lemmas in that file use <code>∃ a, b = f a</code>).</p>",
        "id": 417593852,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706084351
    },
    {
        "content": "<p>I can do it but I don't want to change in one direction, then change back.</p>",
        "id": 417593931,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706084387
    },
    {
        "content": "<p>I disagree with Sébastien here</p>",
        "id": 417594057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706084437
    },
    {
        "content": "<p>I have no opinion here.</p>",
        "id": 417594137,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706084488
    },
    {
        "content": "<p>My general reason is that, most often, you will rewrite <code>b</code> as <code>f a</code> in the next lines (unless you can use an <code>obtain ... rfl</code>), and rewrites are more natural from left to right. Although for this particular PR the specific reason is that almost every statement in the file is already in that direction (see for instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos_eq_zero_iff#doc\">docs#Real.cos_eq_zero_iff</a>), so better follow the convention in the file. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , if you have a good argument to change directions, I am perfectly ready to change my mind!</p>",
        "id": 417596425,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706085568
    },
    {
        "content": "<p>I think my main argument is that mathlib overwhelmingly uses <code>f a = b</code> instead of <code>b = f a</code> (won't be too noticeable with grep because many of those uses are hidden behind <code>Set.range</code> and <code>Set.image</code>), and as mentioned above the rewriting argument is quite weak since you usually just use <code>rfl</code> anyway.</p>",
        "id": 417596834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085748
    },
    {
        "content": "<p>I think you would find a PR changing everything to <code>b = f a</code> extremely painful, while changing everything to <code>f a = b</code> should be much easier.</p>",
        "id": 417596919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085795
    },
    {
        "content": "<p>In the past, I've been several times unhappy with the way <code>Set.range</code> is defined, because it gives you an equality in the wrong direction and prevents us from using <code>simp {contextual := tt}</code> (in which you can't really reverse the direction).</p>",
        "id": 417597000,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706085830
    },
    {
        "content": "<p>There's also an argument about occurrence order, although I'm not sure how to articulate it best right now.</p>",
        "id": 417597016,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085838
    },
    {
        "content": "<p>PR painfullness is not really an argument: if something is better, then there is pain once when doing the change, and then happiness forever after -- and I'd be willing to make the PR. As you say, since one uses <code>rfl</code> anyway most of the time, it shouldn't make a big difference.</p>",
        "id": 417597359,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706085990
    },
    {
        "content": "<p>I'm certainly willing to see you try!</p>",
        "id": 417597683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706086114
    },
    {
        "content": "<p>Note: if we decide to swap LHS with RHS in <code>Set.range</code> etc, then I can do it too.</p>",
        "id": 417597770,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706086149
    },
    {
        "content": "<p>But not before we get pre-approval from a few maintainers.</p>",
        "id": 417597820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706086174
    },
    {
        "content": "<p>As I said above, in the NNG thread the reason that I went for b=a+c in the end was that it was very common to want to then immediately replace b's by a+c's and it sounds like Sébastien is saying the same thing.</p>",
        "id": 417606296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088936
    },
    {
        "content": "<p>I've also waffled about this a bit (I think I might be to blame for the definition of <code>Set.range</code>) and I think I prefer the <code>∃ k, a = f k</code> ordering because of the way it interacts with simp and rw as mentioned above</p>",
        "id": 417609504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706089998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> defined <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.range#doc\">docs#Set.range</a> in mathlib3 commit 2e8bd34884e5cdfae3068958a003b2c5b660d388</p>",
        "id": 417609911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706090146
    },
    {
        "content": "<p>where did <code>image</code> come from though? I'm sure <code>range</code> was designed to match it</p>",
        "id": 417610207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706090236
    },
    {
        "content": "<p>actually these definitions might date back to <span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> 's original formalization from library_dev</p>",
        "id": 417610504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706090326
    },
    {
        "content": "<p>Found <code>image</code> in commit ad26c7c93c18186b8354688bb48ba1f71874a4e1 of lean2. It says \"feat(library/standard/data/quotient): import quotient from lean 0.1\"</p>",
        "id": 417610941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706090435
    },
    {
        "content": "<p>I don't know where are the sources of lean 0.1</p>",
        "id": 417610973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706090444
    },
    {
        "content": "<p>But these last few messages are off-topic</p>",
        "id": 417611054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706090467
    },
    {
        "content": "<p>Note that leanprover/lean contains the leanprover/lean2 commits</p>",
        "id": 417611549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706090619
    },
    {
        "content": "<p>and my understanding was that it goes all the way back to 0.1</p>",
        "id": 417611606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706090635
    },
    {
        "content": "<p>my guess is that this was a commit to lean 2 borrowing semi-abandoned parts of the lean 0.1 sources which had been removed from the repo</p>",
        "id": 417612082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706090791
    },
    {
        "content": "<p>Let me have a go at switching the order in <code>Set.image</code> and <code>Set.range</code>, to see how bad it is.</p>",
        "id": 417617149,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706092525
    },
    {
        "content": "<p>This is not going to be easy I suspect...</p>",
        "id": 417619869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706093501
    },
    {
        "content": "<p>IMHO this is the sort of thing that a computer should be able to do. If this change is made I think the corresponding commit could be a good challenge to a CS person: generate this algorithmically.</p>",
        "id": 417620195,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706093626
    },
    {
        "content": "<p>It's not so algorithmic: who would have guessed that the definition of <code>Surjective</code> should be fixed similarly, and that some simp lemmas should be generalized? (I'm at file 3/4000, essentially, but I hope things will get better then).</p>",
        "id": 417623020,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706094656
    },
    {
        "content": "<p>The idea of just switching the call order in everything referencing Set.range should be algorithmically feasible</p>",
        "id": 417623608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706094877
    },
    {
        "content": "<p>I shouldn't have used the word \"algorithmically\" but I still think this is the sort of thing we should show to CS people as a challenge. If I'm right that it is achievable it would be hugely valuable.</p>",
        "id": 417623747,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706094943
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.exists_rep#doc\">docs#Quot.exists_rep</a> goes in the \"wrong\" direction. Not sure it's going to be easy to change this one in core...</p>",
        "id": 417633119,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706098631
    },
    {
        "content": "<p>We could always create a Mathlib <code>Quot.exists_rep'</code>, pending an update to core.</p>",
        "id": 417634726,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706099278
    },
    {
        "content": "<p>That's what I've done in my branch.</p>",
        "id": 417636062,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706099797
    },
    {
        "content": "<p>Since my name came up, I'll add a historical note: in the early versions of Lean, I ported libraries from Isabelle, SSReflect / Mathematical components, and other places, and of course made up a lot.    Rob and Floris also contributed a lot to the early libraries. Just as we are now, we were making it up as we went.</p>",
        "id": 417686434,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1706114825
    },
    {
        "content": "<p>I've made the experiment, and it's not conclusive (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/9968\">#9968</a>, with roughly 1400 files compiling correctly): some back arrows and some <code>.symm</code> disappear when using lemmas on surjective functions or points in the range, but new ones are needed when proving that a function is surjective or that something belongs to the range. All in all, I'd say it's 50%/50%, so probably not worth investing more time into it.</p>",
        "id": 417710688,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706123639
    },
    {
        "content": "<p>Should we then keep on unifying towards <code>∃ a, f a = b</code> as I was doing so far?</p>",
        "id": 417975230,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706135499
    },
    {
        "content": "<p>... and what should I do with <a href=\"https://github.com/leanprover-community/mathlib4/pull/9878\">#9878</a>?</p>",
        "id": 417999629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706150972
    },
    {
        "content": "<p>Why not use <code>AddCommGroup.ModEq</code>?</p>",
        "id": 418018492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706165657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.88.83.20k.2C.20f.20k.20.3D.20a.60.20vs.20.60.E2.88.83.20k.2C.20a.20.3D.20f.20k.60/near/417975230\">said</a>:</p>\n<blockquote>\n<p>Should we then keep on unifying towards <code>∃ a, f a = b</code> as I was doing so far?</p>\n</blockquote>\n<p>I'd say yes, and maybe even add a sentence about that to the style guide?</p>",
        "id": 418019342,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706166295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.88.83.20k.2C.20f.20k.20.3D.20a.60.20vs.20.60.E2.88.83.20k.2C.20a.20.3D.20f.20k.60/near/417999629\">said</a>:</p>\n<blockquote>\n<p>... and what should I do with <a href=\"https://github.com/leanprover-community/mathlib4/pull/9878\">#9878</a>?</p>\n</blockquote>\n<p>Keep the spelling you used (i.e., <code>∃ k : ℤ, k * (2 * π) = x</code>), and maybe adjust the rest of the file to this convention?</p>",
        "id": 418019417,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706166354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.88.83.20k.2C.20f.20k.20.3D.20a.60.20vs.20.60.E2.88.83.20k.2C.20a.20.3D.20f.20k.60/near/418019417\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.88.83.20k.2C.20f.20k.20.3D.20a.60.20vs.20.60.E2.88.83.20k.2C.20a.20.3D.20f.20k.60/near/417999629\">said</a>:</p>\n<blockquote>\n<p>... and what should I do with <a href=\"https://github.com/leanprover-community/mathlib4/pull/9878\">#9878</a>?</p>\n</blockquote>\n<p>Keep the spelling you used (i.e., <code>∃ k : ℤ, k * (2 * π) = x</code>), and maybe adjust the rest of the file to this convention?</p>\n</blockquote>\n<p>I suggest that we merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/9878\">#9878</a> first, then I make a separate PR with style changes.</p>",
        "id": 418066726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706184861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.E2.88.83.20k.2C.20f.20k.20.3D.20a.60.20vs.20.60.E2.88.83.20k.2C.20a.20.3D.20f.20k.60/near/418018492\">said</a>:</p>\n<blockquote>\n<p>Why not use <code>AddCommGroup.ModEq</code>?</p>\n</blockquote>\n<p>I won't work on this until this option wins in the poll (I know that many people voted before the option got there).</p>",
        "id": 418066852,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706184907
    },
    {
        "content": "<p>Where is the poll?</p>",
        "id": 418122564,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706201609
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417013969\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417013969</a></p>",
        "id": 418137020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706206135
    }
]