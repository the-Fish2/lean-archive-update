[
    {
        "content": "<p>Hi, I've noticed that a few results for (regular) cardinals seem to be missing that I needed for <a href=\"https://github.com/leanprover-community/mathlib4/pull/11758\">#11758</a>. I've added them in the file where I needed them for now, but I feel that there must be a better place for them. They are analogous results to some results in <code>Data/Set/Countable</code>, but we do not have a dedicated file for <code>Cardinal</code> for these purposes, as far as I could tell. Should I store them in  <code>SetTheory/Cardinal/Cofinality</code> for now? (As they require <code>Regular</code> cardinals?)</p>\n<p>If there's interest I could set up some more API for regular cardinals (just the usual iUnion/sUnion/bUnion stuff). In this case, would we like a separate file like <code>Data/Set/Countable</code>, or should I place it in <code>SetTheory/Cardinal/Cofinality</code> as well? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CountableInter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"c1\">-- Some cardinality related lemmas that I needed</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin_from_regular</span> <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.IsRegular</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat_lt_aleph0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.IsRegular.aleph0_le</span> <span class=\"n\">hreg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_iUnion_iff</span> <span class=\"o\">{</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.IsRegular</span> <span class=\"n\">c</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk_le_mk_of_subset</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">subset_iUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk_sUnion_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Cardinal.mul_lt_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.IsRegular.aleph0_le</span> <span class=\"n\">hreg</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">Cardinal.mk_range_le</span> <span class=\"n\">hι</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Cardinal.iSup_lt_of_isRegular</span> <span class=\"n\">hreg</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">Cardinal.mk_range_le</span> <span class=\"n\">hι</span>\n      <span class=\"n\">simpa</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cardinal.biUnion_iff</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.IsRegular</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">biUnion_eq_iUnion</span><span class=\"o\">,</span> <span class=\"n\">cardinal_iUnion_iff</span><span class=\"o\">,</span> <span class=\"n\">SetCoe.forall'</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hreg</span>\n</code></pre></div>",
        "id": 430244335,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711712897
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 430244691,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711713114
    },
    {
        "content": "<p>Btw, you can use <code>#find_home Cardinal.biUnion_iff</code> to see where it might fit (or <code>#find_home!</code>)</p>",
        "id": 430246130,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711713837
    },
    {
        "content": "<p>Oops, I forgot that was the use-case for that one. It looks like I guessed the right directory!</p>",
        "id": 430246697,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711714089
    },
    {
        "content": "<p>I've moved the auxiliary ones to <code>SetTheory/Cardinal/Cofinality</code> in my PR and modified their style to match that one. I can add more API in the future if that is preferred.</p>",
        "id": 430249027,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711715401
    }
]