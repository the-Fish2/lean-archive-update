[
    {
        "content": "<p>I am currently defining the statements for theorems I will be proving the next weeks, Addition, Multiplication, <a href=\"https://github.com/bernborgess/lean-cutting-planes/blob/main/LeanCuttingPlanes/Rules/Division.lean\">Division</a> for Pseudo Booleans:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">FinVec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ceildiv</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">-- Division</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- c : ℕ</span>\n<span class=\"c1\">-- c &gt; 0</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i (ceil(a i / c) * l i) ≥ ceil(A / c)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Division</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"n\">as</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ceildiv</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ceildiv</span> <span class=\"n\">c</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note the <code>ceildiv</code> that I defined for the division and ceiling.<br>\nThe problem is when declaring this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">h2z</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Division</span> <span class=\"mi\">2</span> <span class=\"n\">h2z</span> <span class=\"n\">ha</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>That should work, but i am getting the error in the exact line:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)\n</code></pre></div>\n<p>What is probably causing it? How can I avoid it? Appreciate any pointers :)</p>",
        "id": 434809375,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713807776
    },
    {
        "content": "<p>By the way, the definition of PBProp is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBInequality</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBProp</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">PBInequality</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"n\">const</span>\n</code></pre></div>",
        "id": 434809794,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713807906
    },
    {
        "content": "<p>Apparently the implicit FinVec is causing the timeout. Is there a long search happening to infer that <code>as := ![2,2]</code> from <code>ha : PBProp ![2,2] 2</code>? How can I aid it?</p>",
        "id": 434827886,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713813483
    },
    {
        "content": "<p>Next time, please ask your question using a single <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBInequality</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBProp</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">PBInequality</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ceildiv</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Division</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"n\">as</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ceildiv</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ceildiv</span> <span class=\"n\">c</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">h2z</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">1</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Division</span> <span class=\"mi\">2</span> <span class=\"n\">h2z</span> <span class=\"n\">ha</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Another fix is to replace <code>def PBProp</code> by <code>irreducible_def PBProp</code>.<br>\nNot quite sure why the <code>exact</code> is timing out while the <code>convert</code> is succeeding. Presumably it doesn't see that <code>map (ceildiv 2) ![3, 4]</code> is the same as <code>![2,2]</code>  and then starts unfolding <code>PBProp</code> and reducing <code>PBInequality</code> with variable <code>xs</code>...</p>",
        "id": 434852742,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713822310
    },
    {
        "content": "<p>It definetly is helping! Thanks a lot!<br>\nDo I lose anything by using <code>irreducible_def</code> tho? I'll replace it whenever it's possible.</p>",
        "id": 434856272,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713823748
    },
    {
        "content": "<p>Apparently I did lose something:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBInequality</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"n\">irreducible_def</span> <span class=\"n\">PBProp</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">PBInequality</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PBProp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">PBInequality</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">xs</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">reduce</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.NonNeg.mk</span> <span class=\"mi\">2</span>\n    <span class=\"n\">done</span>\n  <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">proof</span><span class=\"o\">⟩</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  invalid constructor ⟨...⟩, expected type must be an inductive type</span>\n<span class=\"cm\">  PBProp ![3, 4]</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 434857382,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713824168
    }
]