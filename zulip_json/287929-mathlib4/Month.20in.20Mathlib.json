[
    {
        "content": "<p>This is some not-so-advanced warning that I will write the Month in Mathlib blogpost for May. Please reply to this thread with cool things you have done/heard about that made it to master this month!</p>",
        "id": 440990328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716885275
    },
    {
        "content": "<p>I will personally mention two projects of mine</p>\n<ul>\n<li>Roth's theorem on arithmetic progressions</li>\n<li>The import untangling of low level files</li>\n</ul>",
        "id": 440990571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716885365
    },
    {
        "content": "<p>Do linter/CI changes count? Would performance improvements count?<br>\nMust they have been landed or is there also some mention of in-progress items? I compiled a list of those for the past weeks as I'm exhilarated by the movement on this front, let me know to what extent this is in scope.</p>",
        "id": 440992369,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716885971
    },
    {
        "content": "<p>In the past I think we only listed PRs that were merged in that particular month</p>",
        "id": 440992579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716886040
    },
    {
        "content": "<p>Thanks for volunteering! Could that be a \"last few months in Mathlib\", since there were no other recent blog posts of that type? It's ok if you don't want to: I understand that it would increase the amount of work you need to do.<br>\nIf that's fine, then <a href=\"https://github.com/leanprover-community/mathlib4/pull/10603\">#10603</a> might be worth mentioning (landed April 16).</p>\n<p>Also the recent work of <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> on Fourier transform should probably be mentioned. It would be good if we manage to merge the final PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12144\">#12144</a> before the end of the month.</p>",
        "id": 440992647,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1716886070
    },
    {
        "content": "<p>I'm happy to cover previous months too, but I would rather do that in several Months in Mathlib than trying to lump everything together. What do people think?</p>",
        "id": 440992992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716886193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/440992579\">said</a>:</p>\n<blockquote>\n<p>In the past I think we only listed PRs that were merged in that particular month</p>\n</blockquote>\n<p>+- a few days</p>",
        "id": 440993113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716886228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/440992369\">said</a>:</p>\n<blockquote>\n<p>Do linter/CI changes count?</p>\n</blockquote>\n<p>Anything that changes people's experience using mathlib is worth mentioning. Eg I will definitely mention <a href=\"https://github.com/leanprover-community/mathlib4/pull/13271\">#13271</a></p>",
        "id": 440993581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716886392
    },
    {
        "content": "<p>Light condensed sets landed in May: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11586\">#11586</a></p>",
        "id": 440994225,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716886611
    },
    {
        "content": "<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/d082b61f37e419aed0b5a1e3d3a2ac4169cff2e6\">feat: Lie algebra root spaces are 1-dimensional</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12937\">mathlib4#12937</a>) was May.</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/b2107489eea4dbc183c364d0ec4c15945cc607d8\">feat(Algebra/Category/ModuleCat): the category of presheaves of modules is abelian</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12721\">mathlib4#12721</a>)</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/a9502f00a7abd7a09a2db74992f6f296fdf8e93b\">Eisenstein series uniform convergence</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10377\">mathlib4#10377</a>)</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/5602b56c4973aaa10197529824fa3d0148756be6\">feat(Condensed): light condensed objects</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11586\">mathlib4#11586</a>)</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/f09d52971e23abcb8e4228a476524c5f7f9bdfac\">feat(Algebra/Lie): existence of Cartan subalgebras</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12297\">mathlib4#12297</a>)</p>",
        "id": 440994518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716886696
    },
    {
        "content": "<p>Some PRs that got several reactions in the rss channel: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12917\">#12917</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12937\">#12937</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10377\">#10377</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12619\">#12619</a></p>",
        "id": 440995212,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1716886910
    },
    {
        "content": "<p>Also the Month in Mathlib blog post can't go into much detail about anything, so we should take the habit of writing longer blog posts about specific topics more often.</p>",
        "id": 440996253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716887249
    },
    {
        "content": "<blockquote>\n<p>feat(Algebra/Lie/Weights): The root system of a lie algebra. (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13307\">mathlib4#13307</a>)</p>\n</blockquote>",
        "id": 441052030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716906201
    },
    {
        "content": "<p>Btw my timeline for this blogpost is that my exams end on the 10th of June, so hopefully I'll have a draft ready (at least for May, don't know about earlier months) by mid-June.</p>",
        "id": 441052610,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716906384
    },
    {
        "content": "<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/7ef3ea2aade0a6a84c5e48831a81b2f36a0858e4\">feat: port <code>cc</code> tactic (3/3)</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5938\">mathlib4#5938</a>)</p>\n<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span> did a heroic porting effort for getting the <code>cc</code> tactic into Lean 4</p>",
        "id": 441072567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716912774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/443425304\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/cce8437ae54afddaaf6bc9c0aadc6b6000326c8d\">feat: the derived category of an abelian category</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11806\">mathlib4#11806</a>)</p>\n<p>The derived category of an abelian category is defined and it is shown that it is a triangulated category.</p>\n<p>Co-authored-by: Joël Riou &lt;37772949+joelriou@users.noreply.github.com&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/joelriou\">joelriou</a> <a href=\"https://github.com/leanprover-community/mathlib4/commit/cce8437ae54afddaaf6bc9c0aadc6b6000326c8d\">(commit)</a></p>\n</blockquote>",
        "id": 443426022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717823367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/443289202\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/b4911b22a10c9f351458621d3b613dd43eaad39c\">feat: Define Hamiltonian paths and cycles</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7102\">mathlib4#7102</a>)</p>\n<p>Co-authored-by: Bhavik Mehta &lt;<a href=\"mailto:bhavikmehta8@gmail.com\">bhavikmehta8@gmail.com</a>&gt;<br>\nCo-authored-by: Linus Sommer<br>\nCo-authored-by: Lode Vermeulen</p>\n<p>Co-authored-by: Lode &lt;<a href=\"mailto:lode685@gmail.com\">lode685@gmail.com</a>&gt;<br>\nCo-authored-by: Linus &lt;95619282+linus-md@users.noreply.github.com&gt;<br>\nCo-authored-by: Bhavik Mehta &lt;<a href=\"mailto:bhavikmehta8@gmail.com\">bhavikmehta8@gmail.com</a>&gt;<br>\nCo-authored-by: Doga Can Sertbas &lt;<a href=\"mailto:dogacan.sertbas@gmail.com\">dogacan.sertbas@gmail.com</a>&gt;<br>\nCo-authored-by: Yaël Dillies &lt;<a href=\"mailto:yael.dillies@gmail.com\">yael.dillies@gmail.com</a>&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/LodeVermeulen\">LodeVermeulen</a> <a href=\"https://github.com/leanprover-community/mathlib4/commit/b4911b22a10c9f351458621d3b613dd43eaad39c\">(commit)</a></p>\n</blockquote>",
        "id": 443445113,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1717838085
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"522053\">@Rishi Mehta</span> somehow got dropped from the list of authors there!</p>",
        "id": 443470292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717854315
    },
    {
        "content": "<p>I wonder why did that happen, even though Rishi is the author of the PR</p>",
        "id": 443526887,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1717883834
    },
    {
        "content": "<p>Also the <code>Author: </code> of the commit, so no need to be listed in a <code>Co-authored-by: </code> line.</p>",
        "id": 443527121,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717884024
    },
    {
        "content": "<p>He's not the author of the commit the bors merged; this is a bug in bors that affects any PR whose first commit is by a different author to the PR</p>",
        "id": 443531316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717887195
    },
    {
        "content": "<p>This one? (He <em>is</em> the author of the PR, in this case.)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>merge-base<span class=\"w\"> </span>--is-ancestor<span class=\"w\"> </span>b4911b22<span class=\"w\"> </span>origin/master<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>git<span class=\"w\"> </span>log<span class=\"w\"> </span>-n1<span class=\"w\"> </span>b4911b22\n</code></pre></div>",
        "id": 443534010,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717889520
    },
    {
        "content": "<p>A few more CI-related changes which could be worth mentioning:</p>\n<ul>\n<li>the <code>globalAttributeIn</code> linter, which removes a foot-gun (and uncovered a few bugs in mathlib)</li>\n<li>the <code>mk_all</code> script which has landed; can use this locally (draw-back: seems to not work in Windows yet, for reasons unrelated to this script)</li>\n<li>all occurrences of the <code>refine'</code> tactic have been removed: in almost all cases, use <code>refine</code> or <code>apply</code> instead</li>\n</ul>",
        "id": 443581006,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717928362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span>, is <code>refine'</code> linted against now? I couldn't figure it out from a quick zuliping</p>",
        "id": 444422771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718271370
    },
    {
        "content": "<p>Not yet, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12058/commits/e776b05247cabe47f92358af5cc71c82744319d0\">this</a> has passed lint just now.</p>",
        "id": 444424981,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718272095
    },
    {
        "content": "<p>Oh okay, will change the phrasing then!</p>",
        "id": 444425226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718272188
    },
    {
        "content": "<p>The linter is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11884\">#11884</a>, I just merged master.</p>\n<p>It has no mechanism to test whether a replacements of <code>refine'</code> with <code>refine</code> could work (I implemented that logic to an autocorrecting branch).  I am not sure whether a linter that actually enforces no use <em>at all</em> of <code>refine'</code> is desired, though.</p>",
        "id": 444427343,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718272838
    },
    {
        "content": "<p>I have now opened <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a>. I'm off until this evening, so feel free to help out!</p>",
        "id": 444434336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718275005
    },
    {
        "content": "<p>Please at this stage <strong>do not remove</strong> any PR link from the file, but only move the interesting ones from the list at the bottom into the categories at the top</p>",
        "id": 444434549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718275094
    },
    {
        "content": "<p>Might mention FLT starting up</p>",
        "id": 444434680,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718275158
    },
    {
        "content": "<p>Sure. What were the FLT-related PRs in May?</p>",
        "id": 444439190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718276864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, could you write the paragraph about your work on derived categories? I tried writing something but there are so many PRs of yours and I know so little about the maths that it's probably terribly written.</p>",
        "id": 444439659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718276984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> and <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> should we have a paragraph about functional calculus or is it too early?</p>",
        "id": 444443526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718278219
    },
    {
        "content": "<p>I am also surprised there is not more analytic number theory, and Coxeter group stuff, but maybe this wasn’t in May or is not finished.</p>",
        "id": 444443988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718278405
    },
    {
        "content": "<p>What about <a href=\"https://github.com/leanprover-community/mathlib4/pull/12923\">#12923</a> for instance?</p>",
        "id": 444445439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718278931
    },
    {
        "content": "<p>If it's okay, I'll probably write a separate blog post about the continuous functional calculus, but also some of it landed in June.</p>",
        "id": 444447991,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718279774
    },
    {
        "content": "<p>A separate blog post is much more than ok, it would be great!</p>",
        "id": 444448073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718279803
    },
    {
        "content": "<p>But we could still have a line in a monthly recap linking to the separate blog post. That can be in June of course if there are June PRs involved.</p>",
        "id": 444448197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718279844
    },
    {
        "content": "<p>Yes. Even if you are planning to write a more detailed, please add a recap to Month in Mathlib so that it stays somewhat exhaustive.</p>",
        "id": 444494826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718292798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/444439659\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span>, could you write the paragraph about your work on derived categories? I tried writing something but there are so many PRs of yours and I know so little about the maths that it's probably terribly written.</p>\n</blockquote>\n<p>I have added a suggestion of paragraph. I hope the syntax is ok.</p>",
        "id": 444520616,
        "sender_full_name": "Joël Riou",
        "timestamp": 1718299685
    },
    {
        "content": "<p>Thanks Joël and Oliver for contributing the paragraphs! <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span>, I would greatly appreciate a paragraph about the Fourier transform if you have time <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 444570026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718315893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519559\">@Dagur Asgeirsson</span>, could you write the paragraph about condensed sets <a href=\"https://github.com/leanprover-community/blog/pull/76/files#diff-c2c7e37a7f2e91b8f8ed39a61c763e815f82272a9f8c72d3aa8d0b368adaef0eR46-R52\">here</a>?</p>",
        "id": 444624007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718345026
    },
    {
        "content": "<p>Argh! The <code>monthly-blog.sh</code> script returns all PRs closed since the start of the month, but <em>not</em> until the end of the month. So I accidentally caught a bunch of June PRs <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 444630086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718347408
    },
    {
        "content": "<p>If anybody knows sed, here are the two lines that caused me trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"w\"> </span><span class=\"c1\">--pretty=oneline --abbrev-commit --since=\"1 ${monthnames_uc[$month]} $year\" | tac |</span>\n<span class=\"n\">sed</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">s</span><span class=\"bp\">|\\</span><span class=\"o\">([</span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"bp\">*\\</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"o\">(</span><span class=\"bp\">.*\\</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">#\\</span><span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"bp\">*\\</span><span class=\"o\">))</span><span class=\"bp\">|*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#\\</span><span class=\"mi\">3</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/\\</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"mi\">2</span><span class=\"bp\">|'</span>\n</code></pre></div>",
        "id": 444630247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718347446
    },
    {
        "content": "<p>That sed command seems to select:</p>\n<ul>\n<li>[chars not separated by space] -- call it \\1, the short hash</li>\n<li>a space</li>\n<li>anything else until a space -- call it \\2, the PR title</li>\n<li>#[numbers] -- call it \\3, the PR number</li>\n</ul>",
        "id": 444630631,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718347581
    },
    {
        "content": "<p>Isn't <code>--since=\"1 ${monthnames_uc[$month]}</code> the problem?</p>",
        "id": 444630898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718347675
    },
    {
        "content": "<p>After that, it recombines it (from the second <code>|</code>, so the output should be</p>\n<h1>[PR #(numbers in \\3)]...</h1>",
        "id": 444630903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718347679
    },
    {
        "content": "<p>I was looking just at <code>sed</code>, let me run the git command</p>",
        "id": 444630992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718347721
    },
    {
        "content": "<p>If as a result you can tell me how many PRs there were in May that would be great</p>",
        "id": 444631151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718347819
    },
    {
        "content": "<p>Give me a minute, I will be back soon!</p>",
        "id": 444631177,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718347839
    },
    {
        "content": "<p>Where is the script?  I do not know what monthnames_uc is.</p>",
        "id": 444631743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/blog\">https://github.com/leanprover-community/blog</a></p>",
        "id": 444631823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718348154
    },
    {
        "content": "<p>I see, so you want to put an upper time limit, not just a lower time limit, correct?</p>",
        "id": 444632246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348331
    },
    {
        "content": "<p>There is an <code>--until</code> flag, let me implement it!</p>",
        "id": 444632498,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348419
    },
    {
        "content": "<p>git log --since \"MAY 1 2014\" --until \"MAY 31 2014\"</p>\n<p>is this what you want, but wrapped in a script?</p>",
        "id": 444632615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348459
    },
    {
        "content": "<p>Ten years later, but yes <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 444632732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718348506
    },
    {
        "content": "<p>Oh, yes!  I just copy pasted</p>",
        "id": 444632752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348521
    },
    {
        "content": "<p>That should be easy and I do not think that we need those hand-rolled arrays of month names</p>",
        "id": 444632831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718348541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519559\">@Dagur Asgeirsson</span>, tiny update that I accidentally asked you to write a paragraph about a bunch of PRs that landed in June. Please carefully check when the PRs you are talking about landed</p>",
        "id": 444633086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718348645
    },
    {
        "content": "<p>Could this be what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">mm</span><span class=\"o\">=</span><span class=\"m\">05</span>\n<span class=\"nv\">yy</span><span class=\"o\">=</span><span class=\"m\">2024</span>\ngit<span class=\"w\"> </span>log<span class=\"w\">  </span>--pretty<span class=\"o\">=</span>oneline<span class=\"w\"> </span>--abbrev-commit<span class=\"w\"> </span>--since<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$yy</span><span class=\"s2\">-</span><span class=\"nv\">$mm</span><span class=\"s2\">-01\"</span><span class=\"w\"> </span>--until<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$yy</span><span class=\"s2\">-</span><span class=\"nv\">$mm</span><span class=\"s2\">-</span><span class=\"k\">$(</span>date<span class=\"w\"> </span>-d<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$mm</span><span class=\"s2\">/1 + 1 month - 1 day\"</span><span class=\"w\"> </span><span class=\"s2\">\"+%d\"</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 444634139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349058
    },
    {
        "content": "<p>(and then the rest of the pipe, this should select PRs from yy-mm-01 until yy-mm-(however number of days mm has))</p>",
        "id": 444634239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349095
    },
    {
        "content": "<p>Can you run that and tell what the last PR you get is and roughly how many PRs there are?</p>",
        "id": 444634343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718349127
    },
    {
        "content": "<p>last commit:<br>\nac59a83c23 chore: fix formatting of many misplaced \"by\"s (<a href=\"https://github.com/leanprover-community/mathlib4/pull/13204\">#13204</a>)</p>\n<p>652 commits in total</p>",
        "id": 444634463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349185
    },
    {
        "content": "<p>Interesting. You seem to be missing</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13391\">PR #13391</a> :: feat(Algebra/Lie/InvariantForm): Lie algebras with a nondegenerate invariant form are semisimple</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13380\">PR #13380</a> :: feat(Data/Set/Finite): Infinite.nontrivial</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12624\">PR #12624</a> :: feat(Algebra/Homology): morphisms of cochain complexes that are degreewise epi with an injective kernel</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12638\">PR #12638</a> :: feat(Algebra/Homology): consequences of the homology sequence</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13386\">PR #13386</a> :: feat(CategoryTheory): surjective-injective factorizations in concrete categories</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13408\">PR #13408</a> :: chore(CategoryTheory/Sites): remove unused variable</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13265\">PR #13265</a> :: feat(Algebra/Lie): Killing Lie algebras are semisimple</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13398\">PR #13398</a> :: feat(AlgebraicGeometry/StructureSheaf): add two useful lemmas</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13324\">PR #13324</a> :: feat(CategoryTheory/Sites): locally bijective morphisms of presheaves</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13322\">PR #13322</a> :: feat: add the definition of <code>OrzechProperty</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13389\">PR #13389</a> :: feat: add API for additive characters</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13411\">PR #13411</a> :: feat(CategoryTheory): surjective/injective factorizations in concrete categories</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13402\">PR #13402</a> :: chore(test/linarith): remove stray variables from guard_msgs</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13273\">PR #13273</a> :: feat(NumberTheory/LSeries): Riemann zeta as special case of Hurwitz</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13286\">PR #13286</a> :: chore: remove most of the material on BitVec</li>\n</ul>",
        "id": 444634701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718349282
    },
    {
        "content": "<p>Maybe something about the timezone?</p>",
        "id": 444634860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718349352
    },
    {
        "content": "<p>Yes, I was going to suggest a timezone issue as well...</p>\n<p>Are there more commits at the beginning in mine?</p>",
        "id": 444634969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349376
    },
    {
        "content": "<p>These should be the first commits of the month, in chronological order</p>\n<p>8390a31684 chore(CategoryTheory/MorphismProperty): Use le instead of subset (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12520\">#12520</a>)<br>\n154a87cdc7 refactor(Condensed): redefine condensed abelian groups as condensed <code>ℤ</code>-modules (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12510\">#12510</a>)<br>\n9481bfd671 chore: remove simp from Finset.filter_congr_decidable (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12576\">#12576</a>)<br>\n1079fe3f2f chore: update to <a href=\"https://github.com/leanprover/std4/pull/769\">leanprover/std4#769</a> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12476\">#12476</a>)<br>\n7e5c6cb413 chore: remove @[simp] from Fintype.card_fun (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12577\">#12577</a>)<br>\nd24a65801b feat(Order/Minimals, Order/RelIso/Set): four <code>RelIso</code> lemmas (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12558\">#12558</a>)<br>\n6fa9d2b59c chore: missing <code>DecidableEq (DirectSum _ _)</code> instance (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12491\">#12491</a>)<br>\n4fce67d33a perf(AG.RingHomProperties): less defeq abuse (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12563\">#12563</a>)<br>\nbd932a420f chore: adaptations to lean 4.8.0 (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12578\">#12578</a>)<br>\nf09d52971e feat(Algebra/Lie): existence of Cartan subalgebras (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12297\">#12297</a>)</p>",
        "id": 444635058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349418
    },
    {
        "content": "<p>Yes indeed. Mine start</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12583\">PR #12583</a> :: chore: adaptations to lean 4.8.0</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12573\">PR #12573</a> :: chore: Rename <code>Finset.inter_sdiff</code> to <code>Finset.inter_sdiff_assoc</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12574\">PR #12574</a> :: chore: Rename <code>Dart.is_adj</code> to <code>Dart.adj</code></li>\n</ul>",
        "id": 444635099,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718349438
    },
    {
        "content": "<p>Ok, so maybe there should also be a timezone-normalization filter.</p>",
        "id": 444635146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349459
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"w\">  </span><span class=\"c1\">--pretty=oneline --abbrev-commit --since \"$yy-$mm-01T00:00:00Z\" --until \"$yy-$mm-$(date -d \"$mm/1 + 1 month - 1 day\" \"+%d\")T23:59:59Z\"</span>\n</code></pre></div>",
        "id": 444635659,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718349621
    },
    {
        "content": "<p>Can you try running it with</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">TZ</span><span class=\"o\">=</span>UTC<span class=\"w\"> </span>git<span class=\"w\"> </span>log<span class=\"w\">  </span>--pretty<span class=\"o\">=</span>oneline<span class=\"w\"> </span>--abbrev-commit<span class=\"w\"> </span>--since<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$yy</span><span class=\"s2\">-</span><span class=\"nv\">$mm</span><span class=\"s2\">-01\"</span><span class=\"w\"> </span>--until<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$yy</span><span class=\"s2\">-</span><span class=\"nv\">$mm</span><span class=\"s2\">-</span><span class=\"k\">$(</span>date<span class=\"w\"> </span>-d<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$mm</span><span class=\"s2\">/1 + 1 month - 1 day\"</span><span class=\"w\"> </span><span class=\"s2\">\"+%d\"</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>for me the output seems unchanged.</p>",
        "id": 444635661,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/444635661\">said</a>:</p>\n<blockquote>\n<p><code>TZ=UTC git log  --pretty=oneline --abbrev-commit --since \"$yy-$mm-01\" --until \"$yy-$mm-$(date -d \"$mm/1 + 1 month - 1 day\" \"+%d\")\"</code></p>\n</blockquote>\n<p>That also misses <a href=\"https://github.com/leanprover-community/mathlib4/pull/13286\">#13286</a> and others for me</p>",
        "id": 444635846,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718349691
    },
    {
        "content": "<p>Ok, sorry, I have to take care of some non-Lean stuff for a few hours: I will look at this thread when I am back to help out further, if there is the need!</p>",
        "id": 444636322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718349810
    },
    {
        "content": "<p>I fixed (I hope) the script, could I get permission to push to branches of the blog repo to make a PR?</p>\n<p>Alternatively, I can post here the diff in the file.</p>",
        "id": 444674960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718362959
    },
    {
        "content": "<p>Alternatively you can open a PR and I will merge it</p>",
        "id": 444675192,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363061
    },
    {
        "content": "<p>You mean a PR from a fork?</p>",
        "id": 444675234,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363085
    },
    {
        "content": "<p>(I was going via the mathlib approach, but I guess I could do it from a fork...)</p>",
        "id": 444675269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363100
    },
    {
        "content": "<p>Yeah, CI considerations don't apply here</p>",
        "id": 444675388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363149
    },
    {
        "content": "<p>I created a PR, I think.</p>",
        "id": 444675465,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363176
    },
    {
        "content": "<p>Actually, I do not see it: I wonder what I did.</p>",
        "id": 444675610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363244
    },
    {
        "content": "<p>Oh I see <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> has <a href=\"https://github.com/leanprover-community/blog/pull/48\">blog#48</a> open for improvements to the script</p>",
        "id": 444676500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363543
    },
    {
        "content": "<p>Ok, I eventually managed to actually open a PR!</p>",
        "id": 444676556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363564
    },
    {
        "content": "<p>Feel free to use either that one, or Moritz's.</p>",
        "id": 444676578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363575
    },
    {
        "content": "<p>I still don't see it here: <a href=\"https://github.com/leanprover-community/blog/pulls\">https://github.com/leanprover-community/blog/pulls</a> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 444676669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363611
    },
    {
        "content": "<p>Ok, sorry, earlier I opened a PR to my own fork, now I should have opened it to the blog.</p>",
        "id": 444677162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718363732
    },
    {
        "content": "<p>Damiano, while you are here, could I please request that the PRs are automatically sorted by <code>t-</code> labels? As in put all the PRs tagged with <code>t-algebra</code> (and nothing else) in a bulleted list starting with <code>Algebra.</code> (or <code>algebra</code> if you don't want to figure out the labels -&gt; subject names mapping), everything tagged with <code>t-order</code> (and nothing else) in a bulleted list starting with <code>Order.</code>, everything tagged with <code>t-algebra</code> and <code>t-order</code> (and nothing else) in a bulleted list starting with <code>Algebra &amp; Order.</code>, etc...</p>",
        "id": 444677737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363867
    },
    {
        "content": "<p>This would help a lot with writing the blogpost, I hope</p>",
        "id": 444677868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718363891
    },
    {
        "content": "<p>Let me try, but I do not know where the tag information is.</p>",
        "id": 444680253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718364674
    },
    {
        "content": "<p>(Also, today I have live things going on intermittently, so I disappear and reapper!)</p>",
        "id": 444680299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718364696
    },
    {
        "content": "<p>I think Moritz's version of the script will more easily be adapted to get the label information since it directly calls the github API</p>",
        "id": 444680514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718364771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span>, would you be happy to write a short paragraph <a href=\"https://github.com/leanprover-community/blog/pull/76/files#diff-c2c7e37a7f2e91b8f8ed39a61c763e815f82272a9f8c72d3aa8d0b368adaef0eR23-R27\">here</a>?</p>",
        "id": 444776362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718394297
    },
    {
        "content": "<p>I am now done sorting the PRs in <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a> by subject and by who I think should be writing the paragraph (sometimes I gave up and wrote <code>Misc</code>). It would great if the relevant people commented on the PR with their paragraphs. If I have written your name down, feel free to move the paragraph across subjects, to drop some of the PRs from the list I have provided or to put someone else on the job.</p>",
        "id": 444797336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718402889
    },
    {
        "content": "<p>I don't want to mass ping, so I will wait a few days for things to happen organically before chasing people down/badly writing paragraphs myself.</p>",
        "id": 444797411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718402930
    },
    {
        "content": "<p>(It's <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a>)</p>",
        "id": 444799386,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718403720
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a> ready, or is there still something to polish? It would be better to post it before the end of June, as a blog post on what happened in May in Mathlib.</p>",
        "id": 446905281,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1719326905
    },
    {
        "content": "<p>Per my message above, I am waiting for person <code>X</code> to turn</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">    </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">    </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"n\">B</span>\n</code></pre></div>\n<p>into a short paragraph about <code>A</code> and <code>B</code></p>",
        "id": 446909096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719327744
    },
    {
        "content": "<p>(well in fact I was planning on chasing people up earlier but I spent the last few days being quite sick and I am just recovering now)</p>",
        "id": 446909296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719327794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> <span class=\"user-mention\" data-user-id=\"695266\">@Mitchell Lee</span> <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> If I see correctly, all your names fall under Yael's message above. You can help them write \"This month in mathlib\" by writing a few sentences about your sequence of PRs. (No worries if you don't have time to do so - in case you do, this contribution is, I understand, very much appreciated. If you're not sure what to write, see <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/444797336\">this message</a> and find where <a href=\"https://github.com/leanprover-community/blog/pull/76/files\">https://github.com/leanprover-community/blog/pull/76/files</a> mentions your name.)</p>",
        "id": 446911233,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719328175
    },
    {
        "content": "<p>AFAICT, these are the main people \"missing\". I believe <code>Oliver Nash</code> already wrote a paragraph, so their name with PR list can be removed.</p>",
        "id": 446911580,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719328228
    },
    {
        "content": "<p>Sorry, I missed this. I don't have any reasonable PR for May (hoping to have flt3 done soon, but the preliminary PRs are  not so interesting I think).</p>",
        "id": 446914774,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1719328868
    },
    {
        "content": "<p>Will do today</p>",
        "id": 446924203,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719330959
    },
    {
        "content": "<p>Hello, I am taking a look right now</p>",
        "id": 446985725,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1719346566
    },
    {
        "content": "<p>I've added something about my Hurwitz-zeta PR's.</p>",
        "id": 446991424,
        "sender_full_name": "David Loeffler",
        "timestamp": 1719348262
    },
    {
        "content": "<p>I wrote something short about vertex operators.</p>",
        "id": 447002611,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1719351351
    },
    {
        "content": "<p>I wrote a bit about the continuous functional calculus. I also included <a href=\"https://github.com/leanprover-community/mathlib4/pull/13541\">#13541</a>, which was technically merged in early June, but it morally goes with the rest. If you want to remove it, just delete the last sentence from that paragraph.</p>",
        "id": 447007226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719353251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> thanks for this by the way! This is a heroic month in Mathlib blog post.</p>",
        "id": 447008880,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1719353749
    },
    {
        "content": "<p>I've done my paragraph! Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> for writing all this, and <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> for the ping!</p>",
        "id": 447025741,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719360688
    },
    {
        "content": "<p>The true lesson learned is that the best work is the work done by others <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span></p>",
        "id": 447042824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719367514
    },
    {
        "content": "<p>I will look at the suggestions sometime tomorrow hopefully and then it should be mergeable?</p>",
        "id": 447043014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719367577
    },
    {
        "content": "<p>I also think I now have the insight I need to run Month in Mathlib for June better. I will be unavailable until the 4th of July, so expect plenty of notifications on the 5th. <span aria-label=\"notifications\" class=\"emoji emoji-1f514\" role=\"img\" title=\"notifications\">:notifications:</span></p>",
        "id": 447043228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719367698
    },
    {
        "content": "<p>I have put in some comments. Thank you!</p>",
        "id": 447054611,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1719373062
    },
    {
        "content": "<p>can <a href=\"https://github.com/leanprover-community/mathlib4/pull/9317\">#9317</a> be included in the June post?</p>",
        "id": 447246123,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719415779
    },
    {
        "content": "<p>I am removing the following non-formatted entries. If a category theorist finds that outrageous, please shout!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12206</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12206</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">functoriality</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">Comma</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12797</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12797</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">chore</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">fix</span><span class=\"w\"> </span><span class=\"n\">hasFiniteLimits_of_hasLimitsOfSize</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">10094</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">10094</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comonoid</span><span class=\"w\"> </span><span class=\"n\">objects</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"n\">objects</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">opposite</span><span class=\"w\"> </span><span class=\"n\">category</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12649</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12649</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Abelian</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span><span class=\"w\"> </span><span class=\"n\">lemmas</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12625</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12625</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">refactor</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Adjunction</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">uniqueness</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">adjoints</span><span class=\"w\"> </span><span class=\"n\">independent</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">opposites</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12801</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12801</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">chore</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">generalise</span><span class=\"w\"> </span><span class=\"n\">universes</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">extensive</span><span class=\"w\"> </span><span class=\"n\">sheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12839</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12839</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Galois</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">prorepresentability</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">functors</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11701</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11701</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Monoidal</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">curried</span><span class=\"w\"> </span><span class=\"n\">associator</span><span class=\"w\"> </span><span class=\"n\">isomorphism</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12909</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12909</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">classes</span><span class=\"w\"> </span><span class=\"ss\">`ReflectsFiniteLimits</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">friends</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12803</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12803</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">hypercovers</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12927</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12927</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">adjunction</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">Over</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">Over</span><span class=\"bp\">.</span><span class=\"n\">baseChange</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12374</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12374</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">sheaves</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">localization</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12980</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12980</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">moving</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">adjunctions</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">categories</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"ss\">`CategoryTheory.Adjunction.Over</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12841</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12841</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">coyoneda</span><span class=\"w\"> </span><span class=\"kn\">lemma</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12332</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12332</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">functors</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">preserves</span><span class=\"w\"> </span><span class=\"n\">sheafification</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12785</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12785</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">transport</span><span class=\"w\"> </span><span class=\"n\">Kan</span><span class=\"w\"> </span><span class=\"n\">extensions</span><span class=\"w\"> </span><span class=\"n\">via</span><span class=\"w\"> </span><span class=\"n\">equivalences</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13189</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13189</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">containing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">covering</span><span class=\"w\"> </span><span class=\"n\">presieve</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">covering</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"n\">Grothendieck</span><span class=\"w\"> </span><span class=\"n\">topology</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13006</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13006</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Action</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">continuous</span><span class=\"w\"> </span><span class=\"n\">actions</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12631</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12631</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Localization</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">resolutions</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">localizer</span><span class=\"w\"> </span><span class=\"n\">morphisms</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13320</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13320</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">LeftExact</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">weaken</span><span class=\"w\"> </span><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">assumptions</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13318</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13318</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">properties</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13371</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13371</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">extensive</span><span class=\"w\"> </span><span class=\"n\">topology</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">subcanonical</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13331</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13331</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">MorphismProperty</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">factorization</span><span class=\"w\"> </span><span class=\"kn\">axiom</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13223</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13223</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">functors</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"ss\">`ℕ</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12929</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12929</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">refactor</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">FullyFaithful</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13386</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13386</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"bp\">-</span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">factorizations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13324</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13324</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">bijective</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13411</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13411</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"bp\">/</span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">factorizations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12857</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12857</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">forgetful</span><span class=\"w\"> </span><span class=\"n\">functor</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"ss\">`Mon_</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"ss\">`C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">monoidal</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"ss\">`C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">braided</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11719</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11719</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Grothendieck</span><span class=\"w\"> </span><span class=\"n\">topology</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11489</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11489</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cohomology</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">presheaf</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">groups</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">degree</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 447983536,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719672154
    },
    {
        "content": "<p>I am removing the following non-formatted entries. If a category theorist finds that outrageous, please shout!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12206</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12206</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">functoriality</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">Comma</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12797</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12797</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">chore</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">fix</span><span class=\"w\"> </span><span class=\"n\">hasFiniteLimits_of_hasLimitsOfSize</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">10094</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">10094</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comonoid</span><span class=\"w\"> </span><span class=\"n\">objects</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"n\">objects</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">opposite</span><span class=\"w\"> </span><span class=\"n\">category</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12649</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12649</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Abelian</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span><span class=\"w\"> </span><span class=\"n\">lemmas</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12625</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12625</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">refactor</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Adjunction</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">uniqueness</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">adjoints</span><span class=\"w\"> </span><span class=\"n\">independent</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">opposites</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12801</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12801</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">chore</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">generalise</span><span class=\"w\"> </span><span class=\"n\">universes</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">extensive</span><span class=\"w\"> </span><span class=\"n\">sheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12839</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12839</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Galois</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">prorepresentability</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">functors</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11701</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11701</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Monoidal</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">curried</span><span class=\"w\"> </span><span class=\"n\">associator</span><span class=\"w\"> </span><span class=\"n\">isomorphism</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12909</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12909</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">classes</span><span class=\"w\"> </span><span class=\"ss\">`ReflectsFiniteLimits</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">friends</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12803</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12803</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">hypercovers</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12927</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12927</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">adjunction</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">Over</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">Over</span><span class=\"bp\">.</span><span class=\"n\">baseChange</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12374</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12374</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">sheaves</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">localization</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12980</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12980</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">moving</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">adjunctions</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">categories</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"ss\">`CategoryTheory.Adjunction.Over</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12841</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12841</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">coyoneda</span><span class=\"w\"> </span><span class=\"kn\">lemma</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12332</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12332</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">functors</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">preserves</span><span class=\"w\"> </span><span class=\"n\">sheafification</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12785</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12785</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">transport</span><span class=\"w\"> </span><span class=\"n\">Kan</span><span class=\"w\"> </span><span class=\"n\">extensions</span><span class=\"w\"> </span><span class=\"n\">via</span><span class=\"w\"> </span><span class=\"n\">equivalences</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13189</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13189</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">containing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">covering</span><span class=\"w\"> </span><span class=\"n\">presieve</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">covering</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"n\">Grothendieck</span><span class=\"w\"> </span><span class=\"n\">topology</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13006</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13006</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Action</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">continuous</span><span class=\"w\"> </span><span class=\"n\">actions</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12631</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12631</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Localization</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">resolutions</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">localizer</span><span class=\"w\"> </span><span class=\"n\">morphisms</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13320</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13320</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">LeftExact</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">weaken</span><span class=\"w\"> </span><span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">assumptions</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13318</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13318</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">properties</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13371</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13371</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">extensive</span><span class=\"w\"> </span><span class=\"n\">topology</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">subcanonical</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13331</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13331</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">MorphismProperty</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">factorization</span><span class=\"w\"> </span><span class=\"kn\">axiom</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13223</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13223</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">functors</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"ss\">`ℕ</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12929</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12929</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">refactor</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">FullyFaithful</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13386</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13386</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"bp\">-</span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">factorizations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13324</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13324</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">bijective</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">13411</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">13411</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"bp\">/</span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">factorizations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"n\">categories</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">12857</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">12857</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">forgetful</span><span class=\"w\"> </span><span class=\"n\">functor</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"ss\">`Mon_</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"ss\">`C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">monoidal</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"ss\">`C</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">braided</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11719</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11719</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">morphisms</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">presheaves</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">locally</span><span class=\"w\"> </span><span class=\"n\">injective</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Grothendieck</span><span class=\"w\"> </span><span class=\"n\">topology</span>\n<span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">PR</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"mi\">11489</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">11489</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">feat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cohomology</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">presheaf</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">groups</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">degree</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 447983554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719672178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span>, <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, should May MiM mention EDS?</p>",
        "id": 447983561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719672189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span>, <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, should May MiM mention EDS?</p>",
        "id": 447983584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719672233
    },
    {
        "content": "<p>Mathlib only has basic definitions since the main proof is still in a PR... so probably not?</p>",
        "id": 447984183,
        "sender_full_name": "David Ang",
        "timestamp": 1719672481
    },
    {
        "content": "<p>Okay, thanks for the info!</p>",
        "id": 447984314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719672529
    },
    {
        "content": "<p>Should we make it May-June? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 447988598,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719674648
    },
    {
        "content": "<p>Oh no, I'm basically done now!</p>",
        "id": 447988723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719674695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span>, sorry I keep pinging you (please write less interesting stuff <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span>). Do you think <a href=\"https://github.com/leanprover-community/mathlib4/pull/9405\">#9405</a> is worth mentioning (at a skim, it seems worth mentioning to me)? If so, can you please write a bullet point about it/incorporate it in an existing bullet point?</p>",
        "id": 447989061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719674817
    },
    {
        "content": "<p>Actually, given that it goes with <a href=\"https://github.com/leanprover-community/mathlib4/pull/9405\">#9405</a> and was merged at the very end of May, I suggest we make it part of June</p>",
        "id": 447989529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719674983
    },
    {
        "content": "<p>Please still write a paragraph, but don't add it to <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a>. I'll tell you when I open the June MiM PR</p>",
        "id": 447989669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719675028
    },
    {
        "content": "<p>Sure I guess. Before this we had an API for affine coordinates (equations, operations, points, group law), and this PR (along with the 5 others it depends on) develops the analogous API for Jacobian coordinates (by reducing difficult computations to the affine case). I don't know how long you want me to write but this is the gist of it.</p>",
        "id": 447990018,
        "sender_full_name": "David Ang",
        "timestamp": 1719675206
    },
    {
        "content": "<p>Thanks for organising all this btw!</p>",
        "id": 447990146,
        "sender_full_name": "David Ang",
        "timestamp": 1719675256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/447990018\">said</a>:</p>\n<blockquote>\n<p>I don't know how long you want me to write but this is the gist of it.</p>\n</blockquote>\n<p>Basically long enough that people don't have to plough through Zulip to understand the context, why it is important and how it happened</p>",
        "id": 447990301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719675347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, there are many PRs in <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a> which I think you are competent to write about (grep for your name). Can you have a look, ditch the uninteresting ones and write a paragraph about the interesting ones? If you don't have time, please say so and I will try to do the aforementiond myself</p>",
        "id": 447992035,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719676214
    },
    {
        "content": "<p>I actually do have a little time right now --- I'll rewrite the Lie theory paragraph to include these PRs.</p>",
        "id": 448000793,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1719680033
    },
    {
        "content": "<p>OK done. I also added some names since I see that is what others have done in this blog PR (my previous version of this paragraph had omitted names since this seemed to be the style in the blog back in 2022).</p>",
        "id": 448002554,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1719680666
    },
    {
        "content": "<p>Oh, this was not a conscious decision. If people want the names gone, I'll remove them again.</p>",
        "id": 448020198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719690210
    },
    {
        "content": "<p>Okay, I have done what I would like to be the final edits. Please review <a href=\"https://github.com/leanprover-community/blog/pull/76\">blog#76</a> ! In the absence of opposition, I will merge the PR at around <time datetime=\"2024-06-30T18:00:00Z\">2024-06-30T20:00:00+02:00</time></p>",
        "id": 448021399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719690910
    },
    {
        "content": "<p>This looks great! I hope that the community figures out a way of continuing to create informative posts like this. I think it's a good advert for mathlib and also an indication that the maths we're doing is becoming more serious.</p>",
        "id": 448026946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719692645
    },
    {
        "content": "<p>Merged! Let's start June now</p>",
        "id": 448302798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719833361
    },
    {
        "content": "<p>Thanks a lot for doing this!!</p>\n<p>Looking at the post itself I think there is a small problem with titles, right? I mean, the first <code>Algebra</code> should be bigger than the rest.</p>",
        "id": 448303501,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1719833574
    },
    {
        "content": "<p>You're right, the headers are all wrong. Investigating</p>",
        "id": 448303835,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719833657
    },
    {
        "content": "<p>I think you need to use 4 spaces instead of 2.</p>",
        "id": 448309595,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719835183
    },
    {
        "content": "<p>Or <code>*</code> instead of <code>#...#</code>?</p>",
        "id": 448310377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719835393
    },
    {
        "content": "<p>I'm using <code>*</code> already</p>",
        "id": 448310914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719835554
    },
    {
        "content": "<p>Yes, I wonder whether <code>Algebra</code> should have a <code>#...#</code>, instead of a <code>*</code> to make it a header.</p>",
        "id": 448311169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719835614
    },
    {
        "content": "<p>And then, withing each <code>#</code>-block, you use regular <code>*</code> for the lists.</p>",
        "id": 448311280,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719835648
    },
    {
        "content": "<p>Ah! Sorry, I read your message the wrong way around. I followed whatever was done in the previous posts, see eg <a href=\"https://leanprover-community.github.io/blog/posts/this-month-in-mathlib-oct-and-nov-2022\">https://leanprover-community.github.io/blog/posts/this-month-in-mathlib-oct-and-nov-2022</a></p>",
        "id": 448311461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719835695
    },
    {
        "content": "<p>Oh, I see.  There, they indent more then inner list and use <code>-</code> instead of <code>*</code> for the inner one.  I would not expect that to make a difference, but...</p>",
        "id": 448311908,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719835828
    },
    {
        "content": "<p>I'm sure it needs 4 spaces rather than 2 because the <code>*</code> with 4 spaces in the post rendered correctly.</p>",
        "id": 448312042,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719835867
    },
    {
        "content": "<p>I think there is one last problem.<br>\nThere should be double nested points, for example the two points under:</p>\n<blockquote>\n<p>Thanks to the reviews by Thomas Bloom, a long sequence of three years old material by Yaël Dillies and Bhavik Mehta culminating in Roth's theorem on arithmetic progressions was finally merged:</p>\n</blockquote>\n<p>These points need 8 spaces instead of 6.</p>",
        "id": 448322001,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719838415
    },
    {
        "content": "<p>Yes, I have just fixed this as well</p>",
        "id": 448322456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719838514
    },
    {
        "content": "<p>It still looks like this:<br>\n<a href=\"/user_uploads/3121/K72h2mNP49LvP0DjKJdgWh-5/image.png\">image.png</a><br>\nThe spaces at <a href=\"https://github.com/leanprover-community/blog/blob/4b18921ffa0e88620d5cd7cb1b0b9d12c47cea4e/docs/posts/month-in-mathlib-may-2024/index.md?plain=1#L49\">line 49</a> are 6 instead of 8.<br>\nDo you want me to PR a fix?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K72h2mNP49LvP0DjKJdgWh-5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/K72h2mNP49LvP0DjKJdgWh-5/image.png\"></a></div>",
        "id": 448324900,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719839061
    },
    {
        "content": "<p>Sorry, I am still fighting the train wifi to open a PR</p>",
        "id": 448325103,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719839127
    },
    {
        "content": "<p>Should finally be fixed</p>",
        "id": 448325892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719839334
    },
    {
        "content": "<p>Ugh, there is still something wrong and I don't know how to fix it. <span class=\"user-mention\" data-user-id=\"580947\">@Rida Hamadani</span>, if you're interested, go look at the paragraph starting with \"APAP already contains\". It swallowed the following bullet points somehow.</p>",
        "id": 448335371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719841543
    },
    {
        "content": "<p>I'm hoping <a href=\"https://github.com/leanprover-community/blog/pull/80\">blog#80</a> will fix this, but I'm not totally sure!</p>",
        "id": 448341358,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719842387
    },
    {
        "content": "<p>I'm referring to this stack exchange answer for the proposed solution:<br>\n<a href=\"https://stackoverflow.com/a/42168153\">https://stackoverflow.com/a/42168153</a></p>",
        "id": 448341572,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719842425
    },
    {
        "content": "<p>What's the change to the last line? I can't see it</p>",
        "id": 448344955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719843117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Month.20in.20Mathlib/near/448344955\">said</a>:</p>\n<blockquote>\n<p>What's the change to the last line? I can't see it</p>\n</blockquote>\n<p>I only added 2 empty lines, this is very weird. I tried copying the old last line and pasting it instead of the new last line, but the commit turned out to be an empty commit (see <a href=\"https://github.com/leanprover-community/blog/pull/80/commits/62515ca96aa9021ec1d2fc5a434dfbbde5460db4\">here</a>).</p>",
        "id": 448345237,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719843195
    },
    {
        "content": "<p>Oh that must be because you have a different CR/CRLF setting. Are you on Windows by any chance?</p>",
        "id": 448346478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719843529
    },
    {
        "content": "<p>Yes! Will this cause any problems after merging?</p>",
        "id": 448346646,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719843571
    },
    {
        "content": "<p>Don't think so, but you should take the opportunity to learn about how git handles line endings: <a href=\"https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings\">https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings</a></p>",
        "id": 448347442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719843739
    },
    {
        "content": "<p>Try running <code>git config --global core.autocrlf true</code> and saving the file again.</p>",
        "id": 448347686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719843808
    },
    {
        "content": "<p>Oops, it seems that I've done a mistake while trying to fix the issue with the last line, and now <a href=\"https://github.com/leanprover-community/blog/pull/80\">blog#80</a> looks very weird, is there an easy fix to this or should I close it and open a new one?</p>",
        "id": 448351727,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719844777
    },
    {
        "content": "<p>I've closed <a href=\"https://github.com/leanprover-community/blog/pull/80\">blog#80</a> and created <a href=\"https://github.com/leanprover-community/blog/pull/82\">blog#82</a>. Sorry about this, I find git confusing.</p>",
        "id": 448356112,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1719845875
    },
    {
        "content": "<p>Thanks to everyone who has worked on this Month in Mathlib report; great reading, and very very useful as a snapshot of the activity in Mathlib. Looking forward to June :-)</p>\n<p>I noticed two small typos, perhaps one of you who have access can fix?<br>\nIn the Analysis section, around line 31 in last commit, 'Stone-Weiertrass' should be 'Stone-Weierstrass' (missing 2nd s).<br>\nIn the \"General library maintainance\" section (around line 79), the title should be \"General library maintenance\".</p>\n<p>Thanks again to everyone who wrote all this!</p>",
        "id": 448423356,
        "sender_full_name": "Oisin McGuinness",
        "timestamp": 1719863552
    },
    {
        "content": "<p>Thanks for the report! You are free to open a PR to <code>leanprover-community/blog</code>, which I will merge. Else I will fix this next time I'm on a train, in a bit less than a day</p>",
        "id": 448426746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719864474
    }
]