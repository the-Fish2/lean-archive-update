[
    {
        "content": "<p>Declaring a <code>FinVec</code> can be easily done via the <code>![]</code> syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, when using the <code>#check</code>, the dependent FinVec size is \"raw\" in the Nat notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">v</span> <span class=\"c1\">-- v (a✝ : Fin (Nat.succ (Nat.succ 0))) : ℕ</span>\n</code></pre></div>\n<p>Is there a way to tell <code>#check</code> to reduce the <code>Nat.succ</code>s for more convenient reading? It will be useful for longer vectors.</p>",
        "id": 434055374,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713449164
    },
    {
        "content": "<p>To be clear, I would expect to be able to read:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">v</span> <span class=\"c1\">-- v (a✝ : Fin 2) : ℕ</span>\n</code></pre></div>",
        "id": 434055696,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713449257
    },
    {
        "content": "<p><code>#check</code>'s job is to tell you what the type actually is, not to reduce it to something that it isn't</p>",
        "id": 434122473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713454398
    },
    {
        "content": "<p>You can fix this with <code>`def v : Fin 2 -&gt; ℕ  := ![1,2]</code></p>",
        "id": 434123134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713454448
    },
    {
        "content": "<p>Ok! I have seen some config declarations like <code>set_option autoImplicit false</code> or <code>set_option tactic.hygienic false</code> before, but I think it's better that check will not do anything unexpected.</p>",
        "id": 434218714,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1713465661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 434218739,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713465672
    },
    {
        "content": "<p>Those settings don't affect <code>check</code>, they effect what is actually happening</p>",
        "id": 434223644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713467875
    },
    {
        "content": "<p>Currently <code>![x, y]</code> is elaborated as <code>vec_cons x (vec_cons y vec_nil)</code> which has the type with <code>succ</code>s that you are annyed with. If we instead elaborated it as <code>@id (Fin 2  -&gt; R) (vec_cons x (vec_cons y vec_nil)</code> then <code>#check</code> would show the right type. The problem is you now have this <code>id</code> floating around that either gets in the way of rewrites, or disappears and restores the behavior that you were seeing before mid-proof.</p>",
        "id": 434223948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713468023
    },
    {
        "content": "<p>I had considered making a pretty printer option to make terms like <code>Nat.succ (Nat.succ 0)</code> pretty print as <code>2</code>, but it seemed like it could lead to some annoying-to-debug issues, since <code>OfNat.ofNat Nat.zero</code> and <code>Nat.zero</code> are sometimes observably different.</p>",
        "id": 434224821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713468403
    }
]