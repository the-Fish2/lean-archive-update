[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Iso</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Initial</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exercise_10</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i_end</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'_end</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">i_end</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">i'_end</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Iso</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n</code></pre></div>\n<p>In this example, I am trying to prove there is an isomorphism between the two objects but when I use constructor there is this autoParam (?hom ≫ ?inv = 𝟙 i) _auto✝ goal that gets created and I don't know what this is saying? What do I have to do?</p>",
        "id": 429268544,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711329954
    },
    {
        "content": "<p>First, when defining data, if you want to do it in tactic mode it's usually <code>fconstructor</code> is better since it doesn't reorder the goals.</p>\n<p>The <code>autoParam</code> corresponds to fields that Lean will try to solve using a tactic. You can ignore everything but the <code>?hom ≫ ?inv = 𝟙 i</code> (<code>unfold autoParam</code> removes it completely).</p>\n<p>But, I would use a <code>where</code> to define the data.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exercise_10</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i_end</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'_end</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">i_end</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">i'_end</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Iso</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Notice also, <code>def</code> instead of <code>theorem</code> since an <code>Iso</code> is data, not a proof.)</p>",
        "id": 429268864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711330225
    },
    {
        "content": "<p>You can generate that by putting <code>:= _</code> where that where was. Then a blue lightbulb pops up in VS Code for a code action, and you can do \"generate maximal skeleton\".</p>\n<p>Once you define <code>hom</code> and <code>inv</code>, you can try your luck and delete the remaining fields to see if that auto-param tactic will auto-solve them.</p>",
        "id": 429268997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711330278
    },
    {
        "content": "<p>Thanks, it was not able to solve it automatically because aesop couldn't figure out that a \\gg b = i_end and b \\gg a = i'_end. Maybe if I defined by exercise better it could or maybe this proof is necessary to prove that i and i' are isomoprhic</p>",
        "id": 429269552,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711330729
    },
    {
        "content": "<p>This doesn't make a real difference, but there is no need for the new names <code>i_end</code> and <code>i'_end</code>: you can just call those entities by their existing names <code>𝟙 i</code> and <code>𝟙 i'</code>.</p>",
        "id": 429269837,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711330865
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Iso.2Elean.20autoParam.20Question/near/429269837\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent\">#mathlib4 &gt; synthesis failure on non-preferred parent</a> by <span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span>.</p>",
        "id": 429269863,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711330887
    },
    {
        "content": "<p>I thought that i \\hom i was not necessarily the identity morphism (but it is a left identity) so I made those hypotheses what do you think</p>",
        "id": 429270156,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711331156
    },
    {
        "content": "<p>The following seems equally expressive to me, and it is solvable in the same way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exercise_10</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i'</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">i'</span> <span class=\"bp\">⟶</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Iso</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 429270419,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711331319
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Initial</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">exercise_10</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i_end</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'_end</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">⟶</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exercise_10</span>  <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Initial</span> <span class=\"n\">i'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Iso</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fconstructor</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">autoParam</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Initial.unique</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≫</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">autoParam</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Initial.unique</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">exercise_10</span>\n</code></pre></div>",
        "id": 429270492,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711331388
    },
    {
        "content": "<p>Note that <code>i_end</code> and <code>i'_end</code> are unused.</p>",
        "id": 429270580,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711331443
    },
    {
        "content": "<p>so you only have to assume there is a map between i and i'</p>",
        "id": 429270624,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711331483
    },
    {
        "content": "<p>I would say your definition of <code>Initial</code> is wrong: it needs to assert existence as well as uniqueness.</p>",
        "id": 429270764,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711331631
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Initial</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">⟶</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I agree with you. I want something like to that gives a hom between the object I give it and i. Do you knokw how?</p>",
        "id": 429270992,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711331798
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import Mathlib</p>\n<p>set_option autoImplicit true</p>\n<p>open CategoryTheory Limits</p>\n<p>namespace exercise_10</p>\n<p>variable [Category C] {X Y : C}</p>\n<p>def exercise_10 (hX : IsInitial X) (hY : IsInitial Y) : Iso X Y where<br>\n  hom := <a href=\"http://hX.to\">hX.to</a> Y<br>\n  inv := <a href=\"http://hY.to\">hY.to</a> X</p>\n<p>end exercise_10</p>\n</div></div>",
        "id": 429271021,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711331824
    },
    {
        "content": "<p>I'm trying to find where <a href=\"http://IsInitial.to\">IsInitial.to</a> is defined in Mathlib, but I can't</p>",
        "id": 429271666,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711332220
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsInitial.to#doc\">docs#CategoryTheory.Limits.IsInitial.to</a></p>",
        "id": 429272019,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711332406
    },
    {
        "content": "<p>You should just be able to press F12 with you cursor on the <code>to</code>?</p>",
        "id": 429272027,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711332417
    },
    {
        "content": "<p>Ah, I clicked into the Cocone thank you</p>",
        "id": 429272099,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711332475
    },
    {
        "content": "<p>Is there any way to define in my way without a cocone? I don't know what a cocone is yet</p>",
        "id": 429272885,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711332957
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Iso</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Terminal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">exercise_9_and_10</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exercise_9</span> <span class=\"o\">(</span><span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">IsInitial</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≫</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hi.hom_ext</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">≫</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exercise_10</span>  <span class=\"o\">(</span><span class=\"n\">hi</span><span class=\"o\">:</span><span class=\"n\">IsInitial</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi'</span><span class=\"o\">:</span><span class=\"n\">IsInitial</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Iso</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">hi.to</span> <span class=\"n\">i'</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">hi'.to</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">exercise_9_and_10</span>\n</code></pre></div>",
        "id": 429274633,
        "sender_full_name": "Mason McBride",
        "timestamp": 1711334095
    }
]