[
    {
        "content": "<p>Hey, hoping someone could take a look at the error I'm getting.</p>\n<p>I've done a complete formalization of the simply typed lambda calculus, with a proof of type soundness. As my next step I wanted to attempt the formalization of cartesian closed categories as a model of the STLC. I've started as follows:</p>\n<p>Here is the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Syntax</span>\n<span class=\"c1\">-- Types - base type is booleans, then we add arrow and product types</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ty_Bool</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ty_Arrow</span> <span class=\"o\">:</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ty_Prod</span> <span class=\"o\">:</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span>\n\n<span class=\"c1\">-- Terms - variables, applications, abstractions, pairs, projections, true/false</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_abs</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_pair</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_proj1</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_proj2</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_true</span> <span class=\"o\">:</span> <span class=\"n\">tm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tm_false</span> <span class=\"o\">:</span> <span class=\"n\">tm</span>\n\n<span class=\"c1\">-- Custom notation</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"&lt;{\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">99</span> <span class=\"s2\">\"}&gt;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"n\">S</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" -&gt; \"</span> <span class=\"n\">T</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty.Ty_Arrow</span> <span class=\"n\">S</span> <span class=\"n\">T</span>\n<span class=\"kd\">notation</span> <span class=\"n\">S</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" × \"</span> <span class=\"n\">T</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty.Ty_Prod</span> <span class=\"n\">S</span> <span class=\"n\">T</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"λ\"</span> <span class=\"n\">x</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_abs</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">y</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\" Bool \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty.Ty_Bool</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\" true \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_true</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\" false \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_false</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">t</span> <span class=\"s2\">\", \"</span> <span class=\"n\">t'</span> <span class=\"s2\">\"⟩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_pair</span> <span class=\"n\">t</span> <span class=\"n\">t'</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"π₁ \"</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_proj1</span> <span class=\"n\">u</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"π₂ \"</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_proj2</span> <span class=\"n\">u</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">99</span> <span class=\"s2\">\" ∘ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.tm_app</span>\n</code></pre></div>\n<p>And here is my start to defining the categorical semantics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--- Rough first sketch to start setting up categories, following Abramsky.</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">LambdaCalc.syntax</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Closed.Cartesian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.Closed</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Limits.HasFiniteProducts</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CartesianClosed</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"c1\">-- C is a CCC</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- B is an object in C</span>\n\n<span class=\"c1\">-- Semantic assignment for types</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">semantic_translation_ty</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">T</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ty.Ty_Bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"c1\">-- Booleans assigned to object B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ty.Ty_Arrow</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ty</span> <span class=\"n\">T₁</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ty</span> <span class=\"n\">T₂</span><span class=\"o\">)</span> <span class=\"c1\">-- Arrow types assigned to exponentials</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ty.Ty_Prod</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Limits.prod</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ty</span> <span class=\"n\">T₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ty</span> <span class=\"n\">T₂</span><span class=\"o\">)</span> <span class=\"c1\">-- Product types assigned to binary products</span>\n\n<span class=\"c1\">-- Typing contexts are lists of String, Type pairs</span>\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Adding assignment to context</span>\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"n\">v</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">update</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- Semantic assignment for contexts, empty context gets assigned the terminal object and non empty contexts get assigned to binary products recursively</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">semantic_translation_ctx</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"bp\">Γ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Limits.terminal</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Limits.prod</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ty</span> <span class=\"n\">hd.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">semantic_translation_ctx</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n<span class=\"c1\">-- not understanding this error, semantic_translation_ty is defined to take an element of type Ty,</span>\n<span class=\"c1\">-- but this error complains that I've given it an element of type Ty while it is expecting Type : Type 1.</span>\n<span class=\"c1\">-- Why is Lean expecting this?</span>\n</code></pre></div>\n<p>In my function semantic_translation_ctx, in the recursive case, the argument \"hd.2\" to the call to semantic_translation_ty gives the error:<br>\n \"application type mismatch<br>\n@semantic_translation_ty hd.2<br>\nargument<br>\nhd.2<br>\nhas type<br>\nty : Type<br>\nbut is expected to have type<br>\nType : Type 1\"</p>\n<p>It seems as though everything should type check. A context is of type List( String x Ty) (where Ty is the type of types in my STLC). Thus hd.2 has type Ty. Further, semantic_translation_ty is defined to take an input of element Ty, and outputs an object of C. So when I call semantic_translation_ty hd.2, I'm not sure why it would expect a different type.</p>",
        "id": 432575177,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1712778843
    },
    {
        "content": "<p>The lines <code>variable (C : Type)</code> and <code>(B : C)</code>  mean that <code>semantic_translation_ty</code> takes explicit <code>C</code>  and <code>B</code> arguments, (try <code>#check semantic_translation_ty</code>) .  You probably want <code>semantic_translation_ty C B hd.2</code> I guess?</p>",
        "id": 432577401,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712779782
    },
    {
        "content": "<p>Thanks for your reply! I've defined <code>semantic_translation_ty</code> to take an element of type ty, and return an object in C. It doesn't take <code>C</code> and <code>B</code> as arguments.</p>",
        "id": 432578068,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1712780102
    },
    {
        "content": "<p>Well how does the function know which <code>C</code> it will land in if that isn't provided as an argument? They are arguments of the function defined in your code I assure you</p>",
        "id": 432579758,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712780850
    },
    {
        "content": "<p>Ah, I see what you're saying, C B hd.2 did the trick. Thank you!</p>",
        "id": 432580359,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1712781107
    }
]