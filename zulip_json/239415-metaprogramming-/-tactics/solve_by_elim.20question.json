[
    {
        "content": "<p>This is probably a question for <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> but everybody is welcome to answer. Consider the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- have : ∃ k, n = 2*k := by solve_by_elim only [(by assumption : ∃ k, n = 2*k)] --fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I would expect the first line to succeed given the success of the next two lines. But it fails. I guess this is due to things <code>solve_by_elim</code> needs to do to handle backtracking without unintended metavar instantiation. But is there a way around this?</p>",
        "id": 416894026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705707318
    },
    {
        "content": "<p>The context is that for a teaching tactic I want a version of <code>solve_by_elim</code> where you give additional facts that should be proven by a tactic instead of directly giving additional proofs.</p>",
        "id": 416894286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705707367
    },
    {
        "content": "<p>Of course the fact the tactic I'm using is <code>assumption</code> is only for the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 416894358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705707383
    },
    {
        "content": "<p>I am aware that I could have a loop creating the relevant <code>have</code>, but I'd like to know whether there is a simpler way.</p>",
        "id": 416894498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705707419
    }
]