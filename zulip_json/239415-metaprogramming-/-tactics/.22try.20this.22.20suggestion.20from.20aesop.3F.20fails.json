[
    {
        "content": "<p>Is it expected that <code>aesop?</code> suggestions can sometimes fail? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Positive.Field</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PosReal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ+\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PosReal</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myTacGen</span> <span class=\"o\">:</span> <span class=\"n\">Aesop.TacGen</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"s2\">\"exact ⟨val - f { val := val, property := property }, fun a ha =&gt; by simpa⟩\"</span><span class=\"o\">,</span>\n            <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"o\">)]</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"mi\">90</span><span class=\"bp\">%</span> <span class=\"n\">myTacGen</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">usa2023_p2b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">two_pos</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">solution_set</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x.val</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span>\n  <span class=\"n\">foo</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">   Returns the following, which does not actually work:</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  Try this:</span>\n<span class=\"cm\">    simp_all only [Subtype.forall, exists_and_left]</span>\n<span class=\"cm\">    unhygienic with_reducible aesop_destruct_products</span>\n<span class=\"cm\">    apply Exists.intro</span>\n<span class=\"cm\">    apply And.intro</span>\n<span class=\"cm\">    on_goal 2 =&gt; exact ⟨val - f { val := val, property := property }, fun a ha =&gt; by simpa⟩</span>\n<span class=\"cm\">    exact property</span>\n<span class=\"cm\">   ```</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>I reported this on github as <a href=\"https://github.com/leanprover-community/aesop/issues/125\">https://github.com/leanprover-community/aesop/issues/125</a>.</p>",
        "id": 436042533,
        "sender_full_name": "David Renshaw",
        "timestamp": 1714396573
    },
    {
        "content": "<p>That is not expected, thanks for the report! If the example could be de-Mathlibified with reasonable effort, I'd be even more grateful.</p>",
        "id": 436319228,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714497266
    }
]