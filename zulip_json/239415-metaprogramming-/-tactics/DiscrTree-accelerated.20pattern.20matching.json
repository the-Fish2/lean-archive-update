[
    {
        "content": "<p>Say I have a large number of (pattern, function) pairs, something like <code>[(Q($a + $b), fun a b =&gt; …), (Q(exp $z), fun z =&gt; …)]</code>.  If the list is known, one could write this as an explicit pattern match.  What’s the right way to do if I have a large number of (pattern, function) pairs constructed programmatically, and want DiscrTree acceleration?</p>",
        "id": 424854773,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709640532
    },
    {
        "content": "<p>You can make a discrimination tree where you index  the patterns (with the variables as metavariables). Then when matching with some expression, you look up the expression in the discrimination tree, which gives you a short list of candidates. And then you check each of those candidates in the usual way with unification. You could use my <code>RefinedDiscrTree</code>, but I presume that the patterns are going to be quite simple, so then the default <code>DiscrTree</code> should do the job just as well.</p>",
        "id": 425690213,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709993732
    },
    {
        "content": "<p>If the patterns have a particular order in which they need to be tried, then you should be careful to remember for each pattern what the index is, so that you can put them back in the original order after the <code>DiscrTree</code> lookup.</p>",
        "id": 425690564,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709993989
    },
    {
        "content": "<p>Thanks, that makes sense!</p>",
        "id": 425690788,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709994196
    }
]