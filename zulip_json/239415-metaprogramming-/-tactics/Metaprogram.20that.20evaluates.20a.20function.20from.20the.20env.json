[
    {
        "content": "<p>Hi all,</p>\n<p>I'm trying to write a metaprogram that accomplishes what the title suggests. Namely, I want to evaluate functions from the environment. Here's a possible skeleton:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Expected behavior:</span>\n<span class=\"cm\">#eval baz `foo 1 -- 2</span>\n<span class=\"cm\">#eval baz `bar 1 -- 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there an established way to do this? I can think of some hacky approach where I extract the value of the constant associated to the name from the environment as an <code>Expr</code>, and do something with that, but I feel like this is not the best way to go about this. Anyone have any hints?</p>",
        "id": 427976951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954329
    },
    {
        "content": "<p>I have not looked at this yet, but <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> just introduced <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.elabEvalExpr#doc\">docs#Mathlib.Meta.elabEvalExpr</a>: does it help?</p>",
        "id": 427977799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710954561
    },
    {
        "content": "<p>oh, nice, yes I think I can make that work.</p>",
        "id": 427977995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954622
    },
    {
        "content": "<p>or at least extract some code from the implementation</p>",
        "id": 427978031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954632
    },
    {
        "content": "<p>You probably still have to combine it with some <code>Environment.find?</code>, though.</p>",
        "id": 427978081,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710954651
    },
    {
        "content": "<p>yeah, that's not the problem</p>",
        "id": 427978117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954661
    },
    {
        "content": "<p>oh, but that gives the result as an Expr, which is fine if I'm trying to write an elaborator, but maybe not if I want to use the actual value in another metaprogram.</p>",
        "id": 427978205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954694
    },
    {
        "content": "<p>so in that case the signature would be <code>CoreM Expr</code>, and not <code>CoreM Nat</code>.</p>",
        "id": 427978341,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954731
    },
    {
        "content": "<p>Oh, then you may have to use <code>evalExpr</code>, or whatever it is called...</p>",
        "id": 427978557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710954810
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.evalExpr#doc\">docs#Lean.Meta.evalExpr</a></p>",
        "id": 427978604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954823
    },
    {
        "content": "<p>Yes, that will do it! Thanks!</p>",
        "id": 427978729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710954853
    },
    {
        "content": "<p>To be honest, every time that I thought that I needed evalExpr, I realized that I was better off not using it...</p>",
        "id": 427978792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710954869
    },
    {
        "content": "<p>well, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkNatLit</span> <span class=\"n\">input</span><span class=\"o\">]</span>\n  <span class=\"n\">Lean.Meta.evalExpr</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">baz</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">baz</span> <span class=\"bp\">`</span><span class=\"n\">bar</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 427979387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710955078
    },
    {
        "content": "<p>but in MetaM, which is fine.</p>",
        "id": 427979405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710955083
    },
    {
        "content": "<p>From a recent paper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">runFunctionOn</span> <span class=\"o\">(</span><span class=\"n\">function</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">myFun</span> <span class=\"bp\">←</span> <span class=\"n\">evalConst</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Name.mkSimple</span> <span class=\"n\">function</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">myFun</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runFunctionOn</span> <span class=\"s2\">\"foo\"</span> <span class=\"mi\">1</span> <span class=\"c1\">-- returns 3</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runFunctionOn</span> <span class=\"s2\">\"baz\"</span> <span class=\"mi\">1</span> <span class=\"c1\">-- fails with error message: unknown declaration baz</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runFunctionOn</span> <span class=\"s2\">\"bar\"</span> <span class=\"mi\">1</span> <span class=\"c1\">-- crashes Lean</span>\n</code></pre></div>",
        "id": 427981154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710955653
    },
    {
        "content": "<p>Which paper?</p>",
        "id": 427982523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710956084
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/F-PX_oZgWItCfAJy_c2CxsmC/verbose_paper.pdf\">verbose_paper.pdf</a></p>",
        "id": 427982920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710956192
    },
    {
        "content": "<p>I should put this on arXiv.</p>",
        "id": 427983080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710956241
    },
    {
        "content": "<p>It’s recent almost as in “a recent Mathlib”, it was written two days ago.</p>",
        "id": 427983220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710956278
    },
    {
        "content": "<p>I can’t tell you where it is submitted because it’s a secret, although I heard that crypto people can sometimes break secret through timing attacks.</p>",
        "id": 427983462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710956338
    },
    {
        "content": "<p>I think I can run a timing attack on your secret :)</p>",
        "id": 427984263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710956567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Metaprogram.20that.20evaluates.20a.20function.20from.20the.20env/near/427983462\">said</a>:</p>\n<blockquote>\n<p>I can’t tell you where it is submitted because it’s a secret, although I heard that crypto people can sometimes break secret through timing attacks.</p>\n</blockquote>\n<p>Or by looking at the metadata (e.g. layout) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 428174810,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711039818
    },
    {
        "content": "<p>21 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Metaprogram.20that.20evaluates.20a.20function.20from.20the.20env\">#metaprogramming / tactics &gt; Metaprogram that evaluates a function from the env</a> by <span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span>.</p>",
        "id": 428211253,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711052761
    },
    {
        "content": "<p>Oh my god wait I moved the wrong thread</p>",
        "id": 428211337,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1711052782
    },
    {
        "content": "<p>23 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/setm.20development.20thread\">#metaprogramming / tactics &gt; setm development thread</a> by <span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span>.</p>",
        "id": 428211424,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711052815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Metaprogram.20that.20evaluates.20a.20function.20from.20the.20env/near/428174810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Metaprogram.20that.20evaluates.20a.20function.20from.20the.20env/near/427983462\">said</a>:</p>\n<blockquote>\n<p>I can’t tell you where it is submitted because it’s a secret, although I heard that crypto people can sometimes break secret through timing attacks.</p>\n</blockquote>\n<p>Or by looking at the metadata (e.g. layout) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>Yes, as we can see it's for the very prestigious CVIT conference on Very Important Topics</p>",
        "id": 428221877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711056925
    }
]