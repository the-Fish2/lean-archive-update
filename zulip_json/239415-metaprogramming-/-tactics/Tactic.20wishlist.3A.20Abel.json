[
    {
        "content": "<p>The tactic wishlist has an entry for supporting muliplicative structures in the abel tactic, could I work on this? <a href=\"https://github.com/leanprover-community/mathlib4/issues/10361\">https://github.com/leanprover-community/mathlib4/issues/10361</a></p>",
        "id": 434486489,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1713605907
    },
    {
        "content": "<p>I think so.</p>\n<p>Do you have a plan for how to support multiplicative structures? I would suggest making a new tactic that takes an equation for multiplicative structures and converts it into one for additive structures (using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Additive#doc\">docs#Additive</a>) and then making another tactic, maybe call it <code>mabel</code>, that applies this new tactic and then runs <code>abel</code>. The goal here is (1) to make small composable tactics that could be useful on their own and (2) to re-use <code>abel</code> without needing to re-implement any of its functionality, which makes maintenance much easier.</p>",
        "id": 434520980,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713635161
    },
    {
        "content": "<p>I think that the name of the tactic alone is a great reason for working on this. I'm still disappointed that we don't have <code>ratify</code>.</p>",
        "id": 434521300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713635402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Tactic.20wishlist.3A.20Abel/near/434520980\">said</a>:</p>\n<blockquote>\n<p>Do you have a plan for how to support multiplicative structures?</p>\n</blockquote>\n<p>My initial idea was to build on the abel tactic directly by updating the parser and adding the normalisation rules for the multiplicative case. I think your idea is much more sensible</p>",
        "id": 434521616,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1713635647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Tactic.20wishlist.3A.20Abel/near/434521300\">said</a>:</p>\n<blockquote>\n<p>I think that the name of the tactic alone is a great reason for working on this. I'm still disappointed that we don't have <code>ratify</code>.</p>\n</blockquote>\n<p>You can easily declare an alias for rify (AFAIR, we have it).</p>",
        "id": 435104025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713930473
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13442\">https://github.com/leanprover-community/mathlib4/pull/13442</a> I wrote this draft this morning</p>",
        "id": 441895065,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1717242587
    },
    {
        "content": "<p>I need to support the <code>mabel at h</code> syntax but I don't know how to do this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">to_additive</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"to_additive\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span>\n</code></pre></div>\n<p>results in <code>unknown parser declaration/category/alias 'location'</code></p>",
        "id": 441895304,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1717242724
    }
]