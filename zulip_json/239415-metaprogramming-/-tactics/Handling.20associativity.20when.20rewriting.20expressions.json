[
    {
        "content": "<p>At a high level I know which expressions I'd like to apply theorems  to and I also have the corresponding <code>Expr</code> data but they sometimes might be associated in the wrong way in the goal. So if I have a rule <code>a + b = a'</code> and the expression <code>a + (b + c)</code> I'd like to rewrite this to <code>a' + c</code>. Is there a solution to this?</p>\n<p>My specific use case is for composition of morphisms/linear maps. I don't care about the association of the resulting goal but I need to be able to apply a theorem regardless of the association. For morphisms in a category, I'm aware of <code>reassoc_of%</code> and it works fairly well but using it blindly fails on cases such as this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T.map</span> <span class=\"o\">(</span><span class=\"n\">T.η.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">T.μ.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Monad.η</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">T.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Monad.μ</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reassoc_of</span><span class=\"bp\">%</span> <span class=\"n\">T.left_unit</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">T.left_unit</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I could take the implementation of <code>reassoc_of%</code> and write something similar for composing linear maps but I think it would have the same issue. What I want is a way to go from <code>Expr</code> and a theorem then apply it with these expressions while ignoring associativity.</p>\n<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> have you dealt with this in your graphical rewriter?/Do you have any insight?</p>",
        "id": 426100003,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1710241303
    },
    {
        "content": "<p>No, unfortunately I haven't dealt with rewrites up to associativity or commutativity.  This seems tricky to implement.</p>",
        "id": 426113109,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1710246227
    },
    {
        "content": "<p>You could take a look at how <code>prod_assoc%</code> is implemented and do something similar.</p>",
        "id": 426123362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710249583
    },
    {
        "content": "<p>mathlib(3) also had <code>assoc_rw</code>. Did that ever make it into lean4?</p>",
        "id": 426136316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710253287
    },
    {
        "content": "<p>I mentioned <code>rw_assoc</code> in <a href=\"#narrow/stream/287929-mathlib4/topic/better.20rw_assoc/near/419335377\">this thread</a> last month but nobody said \"yes it's there\". By the way <span class=\"user-mention\" data-user-id=\"601198\">@Sam Ezeh</span> I was also thinking about bialgebras and Hopf algebras when I asked that question. Some Imperial undergrads have made a lot of progress with Hopf algebras and their relation to group functors and group schemes.</p>",
        "id": 426217923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710280033
    }
]