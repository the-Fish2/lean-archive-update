[
    {
        "content": "<p>I am trying to extend a <code>macro_rules</code> I wrote by adding some logic about expected types (see <a href=\"#narrow/stream/113488-general/topic/.7Bx.20.E2.88.88.20s.20.7C.20p.20x.7D.20notation.20for.20finset\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.7Bx.20.E2.88.88.20s.20.7C.20p.20x.7D.20notation.20for.20finset</a> ). Hence I need to use an <code>elab</code> instead. However, I don't even know what the <code>elab</code> corresponding to my <code>macro_rules</code> should be!</p>",
        "id": 428146166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711032225
    },
    {
        "content": "<p>Could someone explain me how to turn a <code>macro_rules</code> into an <code>elab</code>? I would be happy with a translation of this example from the metaprogramming book:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" RXOR \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">RXOR</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myName</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" RXOR \"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- What goes here?</span>\n</code></pre></div>",
        "id": 428146439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711032284
    },
    {
        "content": "<p>Is this close enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" RXOR \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">RXOR</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myName</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" RXOR \"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">l</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">r</span> <span class=\"n\">none</span>\n  <span class=\"n\">Meta.mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428147864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711032600
    },
    {
        "content": "<p>Hmm, I was hoping I could keep using the quotations...</p>",
        "id": 428148115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711032661
    },
    {
        "content": "<p>Can you translate the <code>macro_rules</code> from this message? <a href=\"#narrow/stream/113488-general/topic/.7Bx.20.E2.88.88.20s.20.7C.20p.20x.7D.20notation.20for.20finset/near/428138832\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.7Bx.20.E2.88.88.20s.20.7C.20p.20x.7D.20notation.20for.20finset/near/428138832</a></p>",
        "id": 428148216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711032690
    },
    {
        "content": "<p>This should also work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myName</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" RXOR \"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"bp\">||</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 428148612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711032787
    }
]