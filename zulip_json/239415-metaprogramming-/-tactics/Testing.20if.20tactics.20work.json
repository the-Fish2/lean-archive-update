[
    {
        "content": "<p>I need to test whether a tactic sequence can run and close a goal programmatically. I am trying to do this using <code>Elab.runTactic</code> but it seems to fail. The following is a minimal example: the first statement uses the same tactics in the interpreter and the other tries in a meta-function giving an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">eg₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Nat.zero</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq.mpr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat.zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">True.intro</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"w\"> </span><span class=\"n\">Tactic</span><span class=\"w\"> </span><span class=\"n\">Parser.Tactic</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">chkTacticSeq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"o\">)(</span><span class=\"n\">tacs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">``tacticSeq</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">try</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mvar</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">mkFreshExprMVar</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">MetavarKind.syntheticOpaque</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Elab.runTactic</span><span class=\"w\"> </span><span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">tacs</span>\n<span class=\"w\">    </span><span class=\"n\">return</span>\n<span class=\"w\">  </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"Error: {e.toMessageData}\"</span>\n\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">testEg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabType</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Nat.zero</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq.mpr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat.zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat.succ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">True.intro</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">chkTacticSeq</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">pf</span>\n\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">testEg</span><span class=\"w\"> </span><span class=\"c\">/-</span><span class=\"cm\"> Error: application type mismatch</span>\n<span class=\"cm\">  Eq.mpr (congrArg (fun _a ↦ sorryAx Prop true) h✝)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  congrArg (fun _a ↦ sorryAx Prop true) h✝</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  sorryAx Prop true = sorryAx Prop true : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  False = True : Prop -/</span>\n</code></pre></div>",
        "id": 441169310,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716961992
    },
    {
        "content": "<p>Any help is appreciated.</p>",
        "id": 441169319,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716962001
    },
    {
        "content": "<p>I am using similar code quite a lot, and this seems to be something to do with the <code>intro</code> tactics specifically.</p>",
        "id": 441170602,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716962714
    },
    {
        "content": "<p>I'm not at lean now, but the sorryAx look like lean made up some syntax that it did not understand from your code.  Could using <code>mkIdent</code> profusely help?</p>",
        "id": 441178421,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716966487
    },
    {
        "content": "<p>In fact, try doing just one <code>intro</code> but with <code>intro $(mkIdent `a)</code> (untested).</p>",
        "id": 441179253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716966807
    },
    {
        "content": "<p>when I run your code I get the following message, in addition to the mentioned type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">CoreM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">auxiliary</span><span class=\"w\"> </span><span class=\"n\">declaration</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">created</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">declaration</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">available</span>\n</code></pre></div>\n<p>I believe it's complaining that <code>match</code> can't construct the auxiliary definition because the declaration name is not set</p>",
        "id": 441180341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716967249
    },
    {
        "content": "<p>The other issue is that even if you do have a declaration name set, <code>runTactic</code> is in MetaM and does not propagate the setting. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">runTactic</span><span class=\"w\"> </span><span class=\"n\">mvar</span><span class=\"bp\">.</span><span class=\"n\">mvarId!</span><span class=\"w\"> </span><span class=\"n\">tacs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">withDeclName</span><span class=\"w\"> </span><span class=\"ss\">`foo</span><span class=\"w\"> </span><span class=\"n\">testEg</span>\n</code></pre></div>",
        "id": 441181220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716967574
    },
    {
        "content": "<p>For the same goal, I am trying to construct an argument <code>(motive := motive)</code> for a term. How do I do this. Stuff like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n<span class=\"bp\">```</span><span class=\"w\">  </span><span class=\"n\">did</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">work</span>\n</code></pre></div>",
        "id": 441193173,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716971906
    }
]