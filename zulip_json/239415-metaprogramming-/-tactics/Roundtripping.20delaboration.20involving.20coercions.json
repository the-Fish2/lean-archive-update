[
    {
        "content": "<p>The term <code>0 ≤ (↑n : Int)</code> delaborates as <code>0 ≤ ↑n</code>, which then re-elaborates as <code>0 ≤ n</code>, so the coercion is lost (even with <code>pp.analyze</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">withLocalDeclD</span><span class=\"w\"> </span><span class=\"ss\">`n</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">``Nat</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">↑$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">`n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">delabed</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">withOptions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">analyze</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">delab</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"delaborated: {delabed}\"</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">type'</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"n\">delabed</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"re-elaborated: {type'}\"</span>\n<span class=\"w\">    </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"defeq: {← isDefEq type type'}\"</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">delaborated: 0 ≤ ↑n</span>\n\n<span class=\"cm\">re-elaborated: 0 ≤ n</span>\n\n<span class=\"cm\">defeq: false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is this considered a bug? And is there anything I can do to make the delaborator print the type ascription? cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>\n<p>Context: I use the delaborator to generate tactic scripts in <code>aesop?</code> and this behaviour came up in one of my tests.</p>",
        "id": 441704504,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717161454
    },
    {
        "content": "<p>I think that could be considered to be a bug in <code>pp.analyze</code>.</p>\n<p>There should probably also be a <code>pp</code> option to print type ascriptions for coercions as well. (<code>pp.analyze</code> would then interact with this option.)</p>",
        "id": 441747406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717172213
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4315\">lean4#4315</a>. Thanks!</p>",
        "id": 441783782,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717182585
    }
]