[
    {
        "content": "<p>Here's (arguably) a bug which may be difficult to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span> <span class=\"k\">in</span>  <span class=\"c1\">-- Shows that `destructProducts` is the culprit</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unused</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enableSimp</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>  <span class=\"c1\">-- Ban `simp` so `destructProducts` has time to fire</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">unused</span>  <span class=\"c1\">-- unused {bad : ℕ × ℕ} {n : ℕ} {p q : ℕ → Prop} (pq : ∀ (n : ℕ), p n → q n) (pn : p n) : q n</span>\n</code></pre></div>\n<p>I'm using <code>aesop</code> to close a lemma <code>unused</code> that makes no mention of bad, and bad doesn't occur in the final proof.  However, during <code>aesop</code>'s search, it uses <code>destructProducts</code> to take <code>bad</code> apart into components, and <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span>, now the first argument of <code>unused</code> is <code>{bad : ℕ × ℕ}</code>.</p>",
        "id": 420834326,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707600896
    },
    {
        "content": "<p>yeah, in Lean 3 we used to avoid parameters, but in Lean 4 there is an argument for avoiding variables :-(</p>",
        "id": 420834511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707601085
    },
    {
        "content": "<p>Turns out I use that implicit variable in exactly one lemma in the original file. <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 420834641,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707601217
    },
    {
        "content": "<p>I probably don't need it.</p>",
        "id": 420834648,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707601235
    },
    {
        "content": "<p>But I'll file this as an aesop issue in any case.</p>",
        "id": 420834682,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707601284
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/aesop/issues/104\">https://github.com/leanprover-community/aesop/issues/104</a></p>",
        "id": 420834800,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707601425
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a> is the tracking issue for variable issues</p>",
        "id": 420836844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707603435
    },
    {
        "content": "<p>I'm afraid I can't do anything about this atm. When Aesop runs, it has no way to distinguish variables from other hyps in the context afaik.</p>",
        "id": 421058025,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707750985
    },
    {
        "content": "<p>No worries, fine to ignore and then changes to general implicit variable handling will eventually fix it.</p>",
        "id": 421058528,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707751102
    }
]