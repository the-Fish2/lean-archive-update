[
    {
        "content": "<p>Here's a fun issue I just hit during the lean/mathlib upgrade:</p>\n<p>I was using <code>ring_nf</code> to close the goal:</p>\n<p><code>2 ^ (62 + -2 ^ 63) = 2 ^ (62 - 2 ^ 63)</code></p>\n<p>where the outer powers are <code>zpow</code>.  Before upgrading, this worked fine, as <code>norm_num</code> didn't understand <code>zpow</code>.  But now it hangs forever, since <code>norm_num</code> does understand <code>zpow</code> and tries to do the full evaluation. :)</p>\n<p>The fix is just to use <code>apply congr_arg₂ _ rfl</code> first, and it's very reasonable that this now fails, but I thought it was worth reporting for amusement value.</p>",
        "id": 420096976,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707240044
    },
    {
        "content": "<p>I'm surprised that it doesn't hit a timeout.</p>",
        "id": 420104251,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707242479
    },
    {
        "content": "<p>It’s doing single clock ticks that take ages.</p>",
        "id": 420104490,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707242540
    },
    {
        "content": "<p>Perhaps we should add logic that bails early if the result is obviously going to be too big (like, requiring more bits than are possible to represent in memory).</p>",
        "id": 420105503,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707242902
    }
]