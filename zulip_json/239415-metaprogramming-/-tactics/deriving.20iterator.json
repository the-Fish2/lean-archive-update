[
    {
        "content": "<p>Or ForIn or whatever the typeclass is called. inspired by <a href=\"https://docs.rs/derive_more/latest/derive_more\">https://docs.rs/derive_more/latest/derive_more</a>. i want to tag an (iterable) field of my structure and use that as the underlying iterator.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LeviCivita</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- I want this as the  underlying iterator for `LeviCivita`</span>\n  <span class=\"n\">coeffs</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Rat</span> <span class=\"n\">Rat</span>\n</code></pre></div>",
        "id": 415961210,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705472819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ?</p>",
        "id": 416641109,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705608324
    },
    {
        "content": "<p>What should it derive?</p>",
        "id": 416668601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705621124
    },
    {
        "content": "<p>Could you make a non-working <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that shows what you expect to write and what definition/instance you want to have autogenerated?</p>",
        "id": 416668696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705621177
    },
    {
        "content": "<p>The expectation would be that if <code>c : LeviCivita</code> then <code>for x in c do ...</code> would be equivalent to <code>for x in c.coeffs do ...</code>.</p>",
        "id": 416672231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705623064
    },
    {
        "content": "<p>There's also <code>ForIn'</code> for the version you get membership proofs per iteration, but here's how you can copy a <code>ForIn</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"n\">A</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">forIn</span> <span class=\"n\">a.xs</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 416672797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705623316
    },
    {
        "content": "<p>Seems like it wouldn't be too hard to make a command that derives <code>ForIn</code> and <code>ForIn'</code> from a field.</p>",
        "id": 416673326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705623491
    }
]