[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Tactic.positivity</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">positivity</span>\n\n<span class=\"o\">[</span><span class=\"n\">Tactic.positivity</span><span class=\"o\">]</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">positivity</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.positivity</span><span class=\"o\">]</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">positivity</span> <span class=\"n\">of</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.positivity</span><span class=\"o\">]</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.positivity</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>How can I do something like \"run positivity but try linarith when you can't make it\"?</p>",
        "id": 431725136,
        "sender_full_name": "Casavaca",
        "timestamp": 1712458429
    },
    {
        "content": "<p>Are you looking for the <code>first</code> combinator?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Tactic.positivity</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">positivity</span> <span class=\"bp\">|</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 431729669,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1712463376
    },
    {
        "content": "<p>No. you totally missed the point.</p>",
        "id": 431737238,
        "sender_full_name": "Casavaca",
        "timestamp": 1712471185
    },
    {
        "content": "<p>Wish list: add option to <code>posivitity</code>, so that something like <code>positivity (??? := linarith)</code> is possible?</p>",
        "id": 431737379,
        "sender_full_name": "Casavaca",
        "timestamp": 1712471304
    },
    {
        "content": "<p>This is not currently possible</p>",
        "id": 431738910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712473005
    },
    {
        "content": "<p>Do you have more complicated statements than this that you would like to solve with a discharger?</p>",
        "id": 431738933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712473036
    },
    {
        "content": "<p>If not, there is thinking happening behind the scenes between <span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> and I to make your examples work out of the box</p>",
        "id": 433283672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713185707
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"489928\">@Casavaca</span></p>",
        "id": 433283684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713185712
    },
    {
        "content": "<p>Not necessarily. I remembered that in my case, it has more terms, but can be solved by <code>linarith only [h]</code> where h is in the context. Anyway, even if we can make positivity a little bit smarter, it would help.</p>",
        "id": 433453469,
        "sender_full_name": "Casavaca",
        "timestamp": 1713250350
    }
]