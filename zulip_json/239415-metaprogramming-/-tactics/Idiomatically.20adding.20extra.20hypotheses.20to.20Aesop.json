[
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib4/pull/10562\">bound tactic</a> supports registering extra hypotheses in a call as <code>bound [h0, h1 x]</code> similar to <code>linarith</code>.  However, this is handled in elaboration before getting to the aesop call, and I just realized that this breaks tactic script generation from <code>bound?</code> which calls ‘aesop?` as the hypotheses wouldn’t show up in script generation.</p>\n<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Is there a more idiomatic way of registering extra hypotheses, including hypotheses that are general terms?  The most important thing is that they participate in forward rules, in particular so that added <code>0 &lt; x</code> turn into <code>0 &lt;= x</code>.</p>",
        "id": 422099402,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708264483
    },
    {
        "content": "<p>For hypotheses, you should be able to do <code>aesop (add ... hyp)</code> as usual. Composite terms are not currently supported, but I'm implementing this now. (I've wanted to support this for some time.)</p>",
        "id": 422236861,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708350624
    },
    {
        "content": "<p>Ah, nice!  Is <code>hyp</code> mentioned in the README?  I don’t see it on a skim just now.</p>\n<p>What’s the ETA for composite terms?  I’d love to have it for <code>bound</code>.</p>",
        "id": 422237630,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708350857
    },
    {
        "content": "<p>There's one sentence about local hyps in the reference section of the README, but maybe I should stress this in the tutorial as well. ETA for composite terms tomorrow hopefully, but my estimates are always extremely optimistic.</p>",
        "id": 422239056,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708351286
    },
    {
        "content": "<p>Is it possible to put in the list of rule builders?</p>",
        "id": 422239269,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351338
    },
    {
        "content": "<p>That was the first (and second and third) places I looked. :)</p>",
        "id": 422239318,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351353
    },
    {
        "content": "<p>Tomorrow is terrific, even if it slips, as likely bound will take more time.  Is there an issue or PR so that I can register that bound depends on that?</p>",
        "id": 422239518,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351405
    },
    {
        "content": "<p>Actually, where’s that sentence?  Searching for “local hyp” finds nothing.</p>",
        "id": 422240144,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351586
    },
    {
        "content": "<p>Ah:</p>\n<blockquote>\n<p>The local set contains rules from (add ...) clauses.</p>\n</blockquote>\n<p>Unfortunately it doesn’t say what the syntax is.</p>",
        "id": 422240291,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351627
    },
    {
        "content": "<p>Wait, I’m confused: what can it be used for if composite terms aren’t allowed?  It can’t be a local thing, since that’s already a hypothesis.  And there are very few singleton global hypotheses that make sense to add, as most theorems have their own hypotheses.</p>",
        "id": 422240690,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708351745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Idiomatically.20adding.20extra.20hypotheses.20to.20Aesop/near/422239518\">said</a>:</p>\n<blockquote>\n<p>Tomorrow is terrific, even if it slips, as likely bound will take more time.  Is there an issue or PR so that I can register that bound depends on that?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/aesop/pull/110\">aesop#110</a>. Now I just need to remember to close it in the commit message. :)</p>",
        "id": 422242629,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708352326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Idiomatically.20adding.20extra.20hypotheses.20to.20Aesop/near/422240144\">said</a>:</p>\n<blockquote>\n<p>Actually, where’s that sentence?  Searching for “local hyp” finds nothing.</p>\n</blockquote>\n<blockquote>\n<p>The rule names can also refer to hypotheses in the goal context, but not all<br>\nbuilders support this.</p>\n</blockquote>",
        "id": 422242899,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708352405
    },
    {
        "content": "<p>I think the stuff with the <code>local</code> rule set is outdated actually...</p>",
        "id": 422242971,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708352427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Idiomatically.20adding.20extra.20hypotheses.20to.20Aesop/near/422240690\">said</a>:</p>\n<blockquote>\n<p>Wait, I’m confused: what can it be used for if composite terms aren’t allowed?  It can’t be a local thing, since that’s already a hypothesis.  And there are very few singleton global hypotheses that make sense to add, as most theorems have their own hypotheses.</p>\n</blockquote>\n<p>The <code>local</code> rule set used to contain everything that was added for that specific Aesop call. (I call these rules local.) And a local rule can be, but doesn't have to be, based on a local hypothesis.</p>",
        "id": 422243344,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708352529
    },
    {
        "content": "<p>Ah, I see: I misinterpreted.  “hyp” wasn’t syntax, but a name for an argument.  So a lot of the above conversation was confusion on my end.</p>\n<p>To restate: say I have a global identifier with no hypotheses (“foo”, say).  Is there an add syntax that has equivalent semantics to adding it as a hypothesis prior to starting Aesop?  My sense is no, because:</p>\n<ol>\n<li>If it’s an apply or norm rule, it won’t participate in forward rules.</li>\n<li>If it’s a forward rule it won’t work, as forward rules expect to have hypotheses over their own.</li>\n</ol>\n<p>Is (2) wrong, such that I could register a forward rule with no hypotheses that would immediately fire at the beginning of Aesop?</p>",
        "id": 422267729,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708359331
    },
    {
        "content": "<p>I think this is an independent feature from the composite term one.</p>",
        "id": 422270771,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708360062
    },
    {
        "content": "<p>The main thing I want relative to actually just adding it as a hypothesis prior to calling Aesop is participation in proof script generation via aesop?</p>",
        "id": 422272626,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708360489
    },
    {
        "content": "<p>I can remove the restriction that <code>forward</code> rules must have premises. (This is an artificial restriction, so I just need to delete two lines.) You can then register your constants as forward rules with no immediate premises. This is quite inefficient at the moment because the rule will fire for every goal, construct the new hypothesis and then realise that the hypothesis was already added. But with the new forward architecture that's in the works, this will become efficient.</p>\n<p>Alternatively, you could add the hypotheses yourself, generate the syntax of an <code>assert</code> tactic for each and combine these tactic syntaxes (is that a word?) with the script that Aesop generates.</p>",
        "id": 422476177,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708453308
    },
    {
        "content": "<p>That restriction does seem useful to catch mistakes, so I’ll leave it to your judgement.  The alternative would be a new rule builder that does this specific thing.</p>\n<p>For now I might just strip <code>bound?</code>’s support for hypotheses.</p>",
        "id": 422493101,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708459677
    },
    {
        "content": "<p>I've now removed the restriction on <code>forward</code> rules.</p>",
        "id": 422714925,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708554480
    },
    {
        "content": "<p>Thank you!  Is there something I can follow for when they won't be slow?</p>",
        "id": 422715024,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708554510
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/aesop/pull/111\">aesop#111</a></p>",
        "id": 422715387,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708554686
    },
    {
        "content": "<p>I've also implemented composite terms in local rules and, as a bonus, nice syntax for adding tactics. So you can now write <code>(add safe (h x))</code>, where <code>h</code> and <code>x</code> may be hypotheses, and <code>(add safe (by norm_num))</code>. The parentheses are mandatory.</p>",
        "id": 422715598,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708554789
    },
    {
        "content": "<p>The tactic syntax is cool.</p>",
        "id": 422715647,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708554825
    },
    {
        "content": "<p>In the process, I've had to make a backwards-incompatible syntax change: the <code>rule_sets</code> clauses are now written <code>(rule_sets := [...])</code> instead of <code>(rule_sets [...])</code>.</p>",
        "id": 422715743,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708554865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Idiomatically.20adding.20extra.20hypotheses.20to.20Aesop/near/422715024\">said</a>:</p>\n<blockquote>\n<p>Thank you!  Is there something I can follow for when they won't be slow?</p>\n</blockquote>\n<p>I should say that unless you have many complex forward rules, the current implementation is probably still fast enough. It's the Python of forward reasoning tactics.</p>",
        "id": 422716025,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708555046
    },
    {
        "content": "<p>I should probably switch <code>bound</code> to it now then.  Or rather, not now, but as soon as it hits main mathlib.  What's the typical ETA for that?</p>",
        "id": 422716141,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708555106
    },
    {
        "content": "<p>Usually there are only 1 or 2 extra hypotheses at most (zero is most common), so it is probably just fine.</p>",
        "id": 422716177,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708555131
    },
    {
        "content": "<p>Actually I'll know immediately when that change lands in Mathlib, since I'll have to do the := change.  Useful signal! :)</p>",
        "id": 422717745,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708556038
    },
    {
        "content": "<p>I'll do the Aesop bump for Mathlib soon-ish.</p>",
        "id": 422786214,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708597283
    },
    {
        "content": "<p>There's now also a command <code>add_aesop_rules</code> that can be used to add tactics or composite expressions to global rule sets. Mathlib bump is in progress.</p>",
        "id": 422866158,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708622376
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 424610565,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709544415
    }
]