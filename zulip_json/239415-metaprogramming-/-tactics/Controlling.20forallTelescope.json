[
    {
        "content": "<p>Do we have a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallTelescope#doc\">docs#Lean.Meta.forallTelescope</a> which only \"telescopes\" the first <code>n</code> of the parameters?</p>",
        "id": 433560853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284285
    },
    {
        "content": "<p>Oh, I guess it's just <code>forallTelescopeReducingAuxAux (reducing := false) (maxFVars? := some n) type k</code></p>",
        "id": 433561121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284372
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallMetaBoundedTelescope#doc\">docs#Lean.Meta.forallMetaBoundedTelescope</a> should do it :)</p>",
        "id": 433561299,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713284413
    },
    {
        "content": "<p>I think you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallBoundedTelescope#doc\">docs#Lean.Meta.forallBoundedTelescope</a> ?</p>",
        "id": 433561360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284439
    },
    {
        "content": "<p>(Something with <code>AuxAux</code> seems like something you shouldn't be using!)</p>",
        "id": 433561449,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284467
    },
    {
        "content": "<p>Ah, yes, mentally duplicated the <code>Meta</code>â€¦</p>",
        "id": 433561452,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713284469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Controlling.20forallTelescope/near/433561449\">said</a>:</p>\n<blockquote>\n<p>(Something with <code>AuxAux</code> seems like something you shouldn't be using!)</p>\n</blockquote>\n<p>Yeah, I know, I just took a peek at the code for <code>forallTelescope</code>.</p>",
        "id": 433561505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284493
    },
    {
        "content": "<p>Note that <code>forallBoundedTelescope</code> reduces too, just like <code>forallTelescopeReducing</code></p>",
        "id": 433561558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284513
    },
    {
        "content": "<p>hmm... I see, so we don't have a non-<code>AuxAux</code> version that does not reduce?</p>",
        "id": 433561666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284540
    },
    {
        "content": "<p>If you don't want it to reduce, it's up to you to give it an appropriate bound.</p>",
        "id": 433561718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713284559
    },
    {
        "content": "<p>aha ok.</p>",
        "id": 433561757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284570
    },
    {
        "content": "<p>In practice my bound is <code>1</code>, and I'm matching the expr on a <code>forallE</code>, so I think I should be ok.</p>",
        "id": 433561840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713284593
    },
    {
        "content": "<p>I think if you're matching a single <code>forallE</code>, maybe <code>Meta.withLocalDecl</code> with <code>instantiate1</code> suffices?</p>",
        "id": 433575131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713289233
    },
    {
        "content": "<p><code>forallTelescope</code> seems to be doing an awful lot of work for the case that is \"I have one variable, please just introduce it without checking reducibility or anything\"</p>",
        "id": 433575243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713289283
    },
    {
        "content": "<p>It does turn out that there's something special about the telescope functions that <code>withLocalDecl</code> doesn't do, which I haven't appreciated until recently, and that's maintain the local instance cache.</p>",
        "id": 433575722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713289472
    },
    {
        "content": "<p>I added a quick entry to <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas\">https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas</a></p>\n<p>I haven't observed this issue in practice yet, but it's good to know about I think. I feel like I need to review a bunch of my metaprograms...</p>",
        "id": 433576589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713289847
    }
]