[
    {
        "content": "<p>I have a widget that has a User Interface accompanied with JavaScript code. In response to the user interacting with the interface, I'd like to write tactics into the Lean editor.</p>\n<p>Currently when the user interacts with the interface, I use JavaScript to send an RPC call to the lean server and I handle this in Lean. The JavaScript successfully receives \"0\" as a response but nothing changes in the editor. I want \"sorry\" to appear as a new line. And,  in the future, I'd like to construct other tactics and insert them into the editor as well.</p>\n<p>I've listed my attempt at doing this below with <code>Lean.Elab.runTactic event.goal.mvarId (← `(tactic | sorry))</code>. What is the correct way of doing what I want to do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ClickEvent</span> <span class=\"n\">where</span>\n  <span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">Widget.InteractiveGoal</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">RpcEncodable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">clickRpc</span> <span class=\"o\">(</span><span class=\"n\">event</span> <span class=\"o\">:</span> <span class=\"n\">ClickEvent</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RequestM</span> <span class=\"o\">(</span><span class=\"n\">RequestTask</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RequestM.asTask</span> <span class=\"k\">do</span>\n    <span class=\"n\">event.goal.ctx.val.runMetaM</span> <span class=\"o\">{}</span> <span class=\"k\">do</span>\n      <span class=\"n\">event.goal.mvarId.withContext</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">md</span> <span class=\"bp\">←</span> <span class=\"n\">event.goal.mvarId.getDecl</span>\n        <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">md.lctx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">sanitizeNames.run'</span> <span class=\"o\">{</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)}</span>\n        <span class=\"n\">Meta.withLCtx</span> <span class=\"n\">lctx</span> <span class=\"n\">md.localInstances</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.runTactic</span> <span class=\"n\">event.goal.mvarId</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n        <span class=\"n\">return</span> <span class=\"o\">()</span>\n      <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Server</span> <span class=\"n\">RequestM</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">server_rpc_method</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">handleClick</span> <span class=\"o\">(</span><span class=\"n\">params</span> <span class=\"o\">:</span> <span class=\"n\">ClickEvent</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RequestM</span> <span class=\"o\">(</span><span class=\"n\">RequestTask</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">clickRpc</span> <span class=\"n\">params</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nx\">React</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">RpcContext</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s1\">'@leanprover/infoview'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">DEBUG_ELEMENT_ID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"debug-textarea\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">initialiseDebug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"nx\">DEBUG_ELEMENT_ID</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">textArea</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">\"textarea\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nx\">textArea</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">DEBUG_ELEMENT_ID</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">textArea</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"nx\">DEBUG_ELEMENT_ID</span><span class=\"p\">).</span><span class=\"nx\">textContent</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nx\">text</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s2\">\"\\n\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">rs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">RpcContext</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">initialiseDebug</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"click: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"nx\">i</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"s2\">\"handleClick\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">first</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"nx\">second</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"nx\">goal</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">goal</span>\n<span class=\"w\">        </span><span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">response</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"completed: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">))).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">debug</span><span class=\"p\">(</span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)));</span>\n<span class=\"w\">    </span><span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"k\">default</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 424991467,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1709690588
    },
    {
        "content": "<p>I've never written a widget before, but I understood from Patrick Massot that you can use the widget api to do this. Maybe look at the source of the <code>calc</code> widget, it should not contain any explicit JavaScript<br>\nI understand that this is not the most helpful reply, since I'm a complete noob on this topic. But I hope it gets the conversation started</p>",
        "id": 425002611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709698088
    },
    {
        "content": "<p>The <code>calc</code> widget was really useful, thank you! I noticed it relied on the SelectPanelUtils helper which itself uses the VSCode EditorContext from inside TypeScript/JavaScript. I mimicked this and I now send a request from JavaScript to my Lean RPC handler, the handler's response contains the text I'd like to insert into the editor and I write JavaScript that receives this response to send this modification to VSCode using the EditorContext API</p>",
        "id": 425012527,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1709704301
    },
    {
        "content": "<p>I'm happy that I've gotten something working but this is fairly convoluted, my next question is if there's a better way to do this?</p>",
        "id": 425012684,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1709704400
    },
    {
        "content": "<p>Look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Tactic.TryThis.addSuggestion#doc\">docs#Lean.Meta.Tactic.TryThis.addSuggestion</a> if you haven't already. If I understand correctly, this doesn't do exactly what you want, but it's close.</p>",
        "id": 425050767,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709720246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Enter.20text.20into.20the.20editor.20given.20InteractiveGoal/near/425050767\">said</a>:</p>\n<blockquote>\n<p>Look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Tactic.TryThis.addSuggestion#doc\">docs#Lean.Meta.Tactic.TryThis.addSuggestion</a> if you haven't already. If I understand correctly, this doesn't do exactly what you want, but it's close.</p>\n</blockquote>\n<p>This helps as well, thank you! it does something slightly different but after reading the source code for this and \"MakeEditLink\" I can use the same technique for repositioning the cursor after inserting text in JS</p>",
        "id": 425606045,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1709931461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601198\">Sam Ezeh</span> has marked this topic as resolved.</p>",
        "id": 425606063,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709931468
    },
    {
        "content": "<p>Just in case it is helpful, here is my implementation of a similar framework for tactic suggestions and insertions: <a href=\"https://github.com/Human-Oriented-ATP/lean-tactics/blob/main/MotivatedMoves/ForMathlib/TacticSuggestionPanel.lean\">https://github.com/Human-Oriented-ATP/lean-tactics/blob/main/MotivatedMoves/ForMathlib/TacticSuggestionPanel.lean</a>.</p>",
        "id": 425650788,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1709962081
    },
    {
        "content": "<p>That's helpful, thank you! The SelectInsertConv example you reference is also really useful. One of the issues I'm having is that if there are two instances of the same expression then my widget sometimes rewrites the wrong one. I did a bit of manual experimentation and I think I can rewrite my widget to use conv with an <code>enter</code> command that uses the position of the expression in the goal</p>",
        "id": 425698654,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1710000820
    },
    {
        "content": "<p>I faced the same issue as well. It turns out that the <code>rw</code> tactic also accepts a configuration that can be used to specify which occurrence of the pattern to rewrite, and I wrote a function to deduce the correct occurrence from the selection: <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405360088\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405360088</a>.</p>",
        "id": 425699074,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1710001162
    },
    {
        "content": "<p>That's great! Thank you! I'm definitely going to use your technique</p>",
        "id": 426043985,
        "sender_full_name": "Sam Ezeh",
        "timestamp": 1710211039
    }
]