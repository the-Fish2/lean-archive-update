[
    {
        "content": "<p>For the <a href=\"https://github.com/leanprover-community/mathlib4/pull/10562\">bound tactic</a>, at the moment I'm manually assigning <code>safe apply</code> aesop priorities based on how many hypotheses rules have (it's better to have fewer hypotheses, and to have more of them be nonnegativity/positivity rather than general inequalities).  I realized I could do this automatically by making a <code>bound</code> attr such that labeling something <code>bound</code> will read the type, compute a priority, and call aesop.</p>\n<p>What's the cleanest way to do this?  Options seem to be</p>\n<ol>\n<li>Do a macro attr similar to <code>continuity</code>, though then I'm not sure how one runs general code (I need to pattern match on the type signature of the decl corresponding to the name).</li>\n<li>Register an attr that runs code, and then do the general code thing ending in an attribute call.  However, there are <em>a lot</em> of APIs for making attrs, and I'm not sure which one is the right one for me.</li>\n</ol>",
        "id": 422312147,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708380019
    },
    {
        "content": "<p>I figured this out: registerBuiltinAttr works great, and it let me massively cleanup lemma registration for <code>bound</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10562/commits/5f598bc73b679f6fcc7e9ac5dbb5136434b44ba7\">https://github.com/leanprover-community/mathlib4/pull/10562/commits/5f598bc73b679f6fcc7e9ac5dbb5136434b44ba7</a>.</p>",
        "id": 422466945,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708450058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> has marked this topic as resolved.</p>",
        "id": 422467553,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708450228
    },
    {
        "content": "<p>I think your approach is probably the cleanest. You can also run code in a macro, but only in the very restricted <code>MacroM</code> monad. This monad doesn't allow environment lookups, so you couldn't have run your priority heuristic.</p>",
        "id": 422474490,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708452721
    }
]