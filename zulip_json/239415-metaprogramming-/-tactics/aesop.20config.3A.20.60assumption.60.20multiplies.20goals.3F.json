[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Quot</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">EqvGen.refl</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"mi\">30</span><span class=\"bp\">%</span> <span class=\"n\">destruct</span><span class=\"o\">]</span> <span class=\"n\">EqvGen.symm</span>\n\n<span class=\"sd\">/--A class representing antisymmetry \"up to\" some equivalence relation</span>\n<span class=\"sd\">`eqv`. That is, if `rel x y` and `rel y x`, then `eqv x y`.</span>\n\n<span class=\"sd\">As with `Quot`, `eqv` need not actually be an equivalence relation, in which</span>\n<span class=\"sd\">case `AntiSymmUpTo eqv rel` is equivalent to `AntisymmUpTo (EqvGen eqv) rel`-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">AntisymmUpTo</span> <span class=\"o\">(</span><span class=\"n\">eqv</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span><span class=\"o\">:</span> <span class=\"n\">semiOutParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>  <span class=\"n\">where</span>\n  <span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">destruct</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">antisymm_upto_eqv</span> <span class=\"o\">{</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">AntisymmUpTo</span> <span class=\"n\">ε</span> <span class=\"n\">rel</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">EqvGen</span> <span class=\"n\">ε</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">antisymm</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n  <span class=\"kd\">variable</span>\n    <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AntisymmUpTo</span> <span class=\"n\">eqv</span> <span class=\"n\">rel</span><span class=\"o\">]</span>\n  <span class=\"kd\">variable</span>\n    <span class=\"o\">{</span><span class=\"n\">l_ty</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)}</span>\n    <span class=\"o\">{</span><span class=\"n\">εv</span>   <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">relv</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AntisymmUpTo</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">εv</span> <span class=\"n\">relv</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">forall_in_pair'</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 432485096,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712749633
    },
    {
        "content": "<p>XY: I would <em>like</em> to solve this problem by getting typeclass search working; unfortunately, the only thing that makes <code>simp_all</code> reliably work is <code>outParam</code> when only one matching instance is in scope, and it's entirely reasonable for multiple different <code>rel</code>s to generate the same <code>eqv</code>. Moving the <code>outParam</code> to <code>eqv</code> did occur to me as a solution, but that breaks the moment I allow type-dependent relations like <code>relv</code> and <code>εv</code> in the MWE whose types are compatible with <code>rel</code> and <code>eqv</code>. I'm not entirely sure <em>why</em> -- the infoview will tell me quite directly that it can't synthesize an <code>AntisymmUpTo eqv rel</code> even when all parameters are provided and there's an instance in the infoview -- but that appears to be the case.</p>",
        "id": 432485699,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712749840
    },
    {
        "content": "<p>I'm trying to work around that problem by using <code>aesop</code> instead of <code>simp_all</code>, using forward reasoning from the existence of instances and relevant hypotheses to get around instance-search failures. Unfortunately, that also fails, and I'm having trouble figuring out what to do about it.</p>",
        "id": 432486032,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712749960
    },
    {
        "content": "<p>Tracing <code>aesop</code> in the above, I notice that <code>aesop</code> repeatedly manages to reduce the state in various subgoals to things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">fwd_1</span> <span class=\"o\">:</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">EqvGen</span> <span class=\"n\">eqv</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>which it naturally tries to close by <code>assumption</code>. But when it does, <code>assumption</code> somehow spawns anywhere from one to three new goals, some of which are just duplicates of old goals. So, it makes negative progress for a while before realizing it's not getting anywhere and giving up (before even trying unsafe rules like <code>EqvGen.symm</code>, which I intended to be a workaround.)</p>",
        "id": 432486470,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712750104
    },
    {
        "content": "<p>Is there anything more I can do to make <code>aesop</code> cooperate here?</p>",
        "id": 432486584,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712750149
    },
    {
        "content": "<p>EDIT: Found a minor bug in the MWE, the second <code>AntisymmUpTo</code> instance was bugging out because it couldn't infer its implicit type. Fixing that at least makes it so that <code>apply</code> and <code>specialize</code> can find the instance when I pin it down all the way to <code>AntisymmUpTo eqv rel</code>, but it still can't infer the right instance from <code>AntisymmUpTo ?eqv rel</code> or the like on its own.</p>",
        "id": 432490302,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712751327
    }
]