[
    {
        "content": "<p>I'd like to write an <code>elab_rule</code> that says: try to elaborate a particular syntax, if it fails (which is likely to happen at the typed level, usually due to typeclass synthesis failure), <code>throwUnsupportedSyntax</code> instead of reporting to the user that it failed. </p>\n<p>The idea is that I'll have multiple such <code>elab_rule</code>s as a series of fallbacks; if <code>elabTerm</code> did what I want by default the whole rule would be as simple as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">PLower</span>\n  <span class=\"sd\">/--Attempt to lower a `Type` to a semantically equivalent `Prop`.</span>\n<span class=\"sd\">  `↧T` is equivalent to `Nonempty T`.</span>\n<span class=\"sd\">  `↧f` when `f : α₁ → α₂ → ⋯ → β` is equivalent to `λ a₁ a₂ ⋯ ↦ Nonempty (f a₁ a₂ ⋯)`.</span>\n\n<span class=\"sd\">  In particular, `↧(· ≅ ·)` is equivalent to `λ x y ↦ Nonempty (x ≅ y)`.-/</span>\n  <span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"↧\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"n\">ty</span>\n  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∘</span> <span class=\"bp\">$</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"n\">ty</span>\n  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"bp\">⇃</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∘</span> <span class=\"bp\">↿$</span><span class=\"n\">T</span><span class=\"o\">)))</span> <span class=\"n\">ty</span>\n<span class=\"n\">endPLower</span>\n</code></pre></div>\n<p>where <code>⇃</code> is a near-synonym of <code>HasUncurry</code> I'm still writing that recursively re-curries a function out of a product-like type. <code>HasUncurry</code> will only have a relevant instance if <code>$T</code> is a function or <code>FunLike</code>, so ...</p>",
        "id": 433173795,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1713136703
    },
    {
        "content": "<p>the relevant expression is expected to be a function which <code>Qq</code> seems to have trouble with and the other options for matching on functions seem very opaque, so that road is proving troublesome; I'm hoping there's a simple alternative I don't know about.</p>",
        "id": 433173812,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1713136751
    },
    {
        "content": "<p>I'm aware of <code>trySynthInstanceQ</code> and am currently working on that approach, but that approach is unfortunately <em>also</em> giving me grief &gt;.&gt;;</p>",
        "id": 433173916,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1713136871
    },
    {
        "content": "<p>I didn't test it, but I expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutErrToSorry</span> <span class=\"k\">do</span> <span class=\"n\">try</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"n\">none</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>\n<p>Note that you don't need <code>&lt;= ty</code> since each of these are <code>Prop</code>. Plus, <code>&lt;= ty</code> causes it to <em>require</em> an expected type.</p>",
        "id": 433176414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713139492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">((</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">T</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutErrToSorry</span> <span class=\"k\">do</span>\n        <span class=\"n\">try</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">((</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∘</span> <span class=\"bp\">↿$</span><span class=\"n\">T</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n        <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↧$</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutErrToSorry</span> <span class=\"k\">do</span>\n        <span class=\"n\">try</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"bp\">⇃</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∘</span> <span class=\"bp\">↿$</span><span class=\"n\">T</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n        <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n\n  <span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"bp\">↧</span><span class=\"n\">f</span>\n  <span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"bp\">↧</span><span class=\"n\">α</span>\n  <span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"bp\">↧</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"bp\">↧</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≃</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"k\">#check</span> <span class=\"bp\">↧</span><span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≃</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Beautiful. Thanks a ton, I've been wrestling with this for two days now.</p>",
        "id": 433176735,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1713139838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> has marked this topic as resolved.</p>",
        "id": 433176896,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713140041
    }
]