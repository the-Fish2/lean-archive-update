[
    {
        "content": "<p>What's the preferred way to \"consume\" a <code>let</code> in a <code>Lean.Expr</code>? For example, I would like the expr associated to <code>let x := 2; x</code> to become <code>2</code>. Is there something I'm not seeing that prevents such a function from existing?</p>",
        "id": 432957357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712945581
    },
    {
        "content": "<p>depending on exactly how rigidly you want to do that and only that, you can match on the expr to see if it is <code>.letE val type body</code> and then return <code>body.instantiate1 val</code></p>",
        "id": 432958262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712945753
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.unfoldFVars#doc\">docs#Mathlib.Tactic.unfoldFVars</a> may get you close.</p>",
        "id": 432958677,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712945829
    },
    {
        "content": "<p>E.g., this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.DefEqTransformations</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>  <span class=\"c1\">-- `2 = 2`</span>\n    <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">xv</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">unfoldFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xv.fvarId</span><span class=\"o\">]</span> <span class=\"n\">tgt</span><span class=\"o\">)</span>\n  <span class=\"n\">dsimp</span>\n</code></pre></div>",
        "id": 432960609,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712946507
    },
    {
        "content": "<p>Thanks for the answers!</p>",
        "id": 432977901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712954068
    },
    {
        "content": "<p>As a case study for what Mario said, the way whnf handles it is exactly that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">config.zeta</span> <span class=\"k\">then</span> <span class=\"n\">go</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">b.instantiate1</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 432987215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712958631
    }
]