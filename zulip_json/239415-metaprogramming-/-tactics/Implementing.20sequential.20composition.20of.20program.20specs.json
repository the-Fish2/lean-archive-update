[
    {
        "content": "<p><em>Reposting this from \"new members\" topic.</em></p>\n<p>I'd like to implement a new operator for sequential composition of program specifications.<br>\nIt's written as <code>S ; R</code> where <code>S</code> and <code>R</code> are boolean expressions representing specifications.</p>\n<p>Both <code>S</code> and <code>R</code> can use variables with pre-state <code>σ</code> and post-state <code>σ'</code> values.<br>\nThe sequential composition is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span> <span class=\"bp\">;</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">σ''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">σ'</span> <span class=\"bp\">↦</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">σ''</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"bp\">↦</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">σ''</span>\n</code></pre></div>\n<p>Essentially, it checks if there exist intermediate state <code>σ''</code> such that both <code>S</code> and <code>R</code> hold after substituting these intermediate states for their respective variables in <code>S</code> and <code>R</code>.</p>\n<p>For example, if <code>x</code> and <code>y</code> are variables of <code>S</code> and <code>R</code>, then <code>S ; R</code> should be rewritten as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">∃</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">↦</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span>\n<span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">x''</span><span class=\"o\">,</span> <span class=\"n\">y''</span> <span class=\"n\">for</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">x''</span><span class=\"o\">,</span> <span class=\"n\">y''</span> <span class=\"n\">for</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've been exploring using macros to achieve this, but I'm stuck on how to rename variable names inside the terms <code>S</code> and <code>R</code>.<br>\nAny suggestions or guidance would be greatly appreciated!</p>",
        "id": 424941565,
        "sender_full_name": "Vlad",
        "timestamp": 1709666660
    },
    {
        "content": "<p>Here what I've got so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">compose_seq</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"s2\">\" ;; \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">21</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elab_compose_seq</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">type</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">;;</span> <span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">R</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">S</span> <span class=\"n\">none</span>\n    <span class=\"c1\">-- TODO:</span>\n    <span class=\"c1\">-- get all primed variables in R and replace them with double-primed variables</span>\n    <span class=\"c1\">-- get all unprimed variables in S and replace them with double-primed variables</span>\n    <span class=\"n\">return</span> <span class=\"c1\">-- Exists expression with double-primed bound variables</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 425405696,
        "sender_full_name": "Vlad",
        "timestamp": 1709850021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as resolved.</p>",
        "id": 425992454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710184554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as unresolved.</p>",
        "id": 425995094,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710185574
    }
]