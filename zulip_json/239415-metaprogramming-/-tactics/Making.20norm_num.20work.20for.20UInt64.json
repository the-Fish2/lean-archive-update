[
    {
        "content": "<p>How would one make <code>norm_num</code> work for <code>UInt64</code>?  In particular, I'd like it to be able to do things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>In this case of course <code>rfl</code> works, but often I have things like <code>(64 : UInt64).toNat</code> in the middle of larger expressions.</p>",
        "id": 409904300,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703504737
    },
    {
        "content": "<p>you can do <code>rw [show (64 : UInt64).toNat = 64 by rfl]</code></p>",
        "id": 409919524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703517192
    },
    {
        "content": "<p>Yes, I know how to do it laboriously.  The question is whether I can make a nice tactic do it.</p>",
        "id": 409921001,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703518078
    },
    {
        "content": "<p>Often I have expressions with a few different numbers like this (127.toNat, etc.).</p>",
        "id": 409921106,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703518141
    },
    {
        "content": "<p>Maybe we should have a simp lemma that says <code>(OfNat.ofNat n : UInt64).toNat = OfNat.ofNat n &amp;&amp;&amp; (1 &lt;&lt; 64 - 1)</code>?</p>",
        "id": 410572085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703969268
    },
    {
        "content": "<p>I'm a little worried about rules like that since it seems like <code>norm_num</code> would happily simplify that to <code>ofNat n &amp;&amp;&amp; 18446744073709551615</code></p>",
        "id": 410572256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703969431
    },
    {
        "content": "<p>But <code>n</code> will be a numeral so that will simplify all the way?</p>",
        "id": 410572298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703969504
    },
    {
        "content": "<p>it still seems like a wasteful approach, I dislike proofs about N bit integers where the proof work gets larger for larger <code>N</code></p>",
        "id": 410572381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703969596
    },
    {
        "content": "<p>A norm_num extension that works directly on terms of the form <code>(OfNat.ofNat n : UInt64).toNat</code> seems better (without the detour through <code>&amp;&amp;&amp;</code>)</p>",
        "id": 410572475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703969692
    }
]