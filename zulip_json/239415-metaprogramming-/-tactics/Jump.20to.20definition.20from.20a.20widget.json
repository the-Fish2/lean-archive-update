[
    {
        "content": "<p>Do we have any examples of widgets that implement a jump-to-definition functionality?</p>",
        "id": 437887505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715289073
    },
    {
        "content": "<p>This code mimics the <code>#check</code> command and allows hovering over and clicking on the argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstWithInfos</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">ι</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Syntax</span>\n</code></pre></div>",
        "id": 438532568,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1715677559
    },
    {
        "content": "<p>Thanks for this! But to clarify, I was referring to widgets in the sense of <code>ProofWidgets</code>. Namely, I want to figure out how to jump to definition from the infoview, from within a widget written in javascript.</p>",
        "id": 438569605,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715691129
    },
    {
        "content": "<p>IIUC the code is in <a href=\"https://github.com/leanprover/vscode-lean4/blob/master/lean4-infoview/src/infoview/interactiveCode.tsx\">interactiveCode</a>.</p>",
        "id": 438575713,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715692989
    },
    {
        "content": "<p>It makes use of <code>SelectableLocation</code> etc. and is called from <code>InteractiveCode</code> in <a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Component/Basic.lean\">ProofWidgets.Component.Basic</a>.</p>",
        "id": 438576631,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715693227
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 438577192,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715693347
    },
    {
        "content": "<p>Yep, the <code>InteractiveCode</code> and <code>InteractiveExpr</code> components are displayed in exactly the same way that expressions in the tactic state are, so go-to-definition should work there.</p>",
        "id": 438725475,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1715749822
    },
    {
        "content": "<p>Is there an example of <code>InteractiveCode</code> anywhere?</p>",
        "id": 439122250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715904059
    },
    {
        "content": "<p>There are some in the proofwidgets repo</p>",
        "id": 439122354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715904114
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Demos/ExprPresentation.lean\">https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Demos/ExprPresentation.lean</a></p>",
        "id": 439122578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715904244
    },
    {
        "content": "<p>Some are as tsx, and some are as Lean DSL that mimics tsx, so they are easy to follow either in js or lean.</p>",
        "id": 439122801,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715904386
    },
    {
        "content": "<p>Maybe I should be clearer; if I just elaborated some <code>Syntax</code> (say, a tactic), how can I display that same syntax (with infotrees) in the widget view? The examples only show how to display an <code>Expr</code>.</p>",
        "id": 439167668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715931056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MessageData.ofPPFormat#doc\">docs4#Lean.MessageData.ofPPFormat</a> (and, if <a href=\"https://github.com/leanprover/lean4/pull/3929\">lean4#3929</a> is merged, <code>MessageData.ofFormatWithInfos</code>), any <code>Format</code> object annotated with bits of <code>Elab.Info</code> can be displayed interactively (e.g. using <a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Component/Basic.lean#L81\">ProofWidgets.InteractiveMessage</a>). However, note that:</p>\n<ul>\n<li>only <code>TermInfo</code> and <code>FieldInfo</code> nodes are supported by the infoview; anything else might produce some unexpected behaviour</li>\n<li>there doesn't seem to be a function to pretty-print a tactic with info nodes: there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.ppTactic#doc\">docs4#Lean.PrettyPrinter.ppTactic</a> which produces a <code>Format</code>; you can still display that, but it wouldn't be interactive</li>\n</ul>",
        "id": 439281928,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1715974731
    },
    {
        "content": "<p>The interactive display in the infoview uses different data structures than hovers/go-to-definitions/etc in the editor, so the sets of functionality are not equivalent.</p>",
        "id": 439282208,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1715974891
    }
]