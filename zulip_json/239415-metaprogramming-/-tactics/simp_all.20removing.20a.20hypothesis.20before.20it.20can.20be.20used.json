[
    {
        "content": "<p>Here is an example which I'd hope <code>simp_all</code> could resolve, but which does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simp_all_test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- simp only [s, true_implies] at h; simp only [h]  -- Works, as the conclusion of h stays</span>\n  <span class=\"c1\">-- simp at h  -- Changes h to True due to Nat.mod_succ_eq_iff_lt</span>\n  <span class=\"n\">simp_all</span>  <span class=\"c1\">-- h disappears, so can't be used to simplify the goal</span>\n  <span class=\"gr\">sorry</span>  <span class=\"c1\">-- I wish we didn't get here</span>\n</code></pre></div>\n<p>Ideally <code>simp_all</code> would use <code>s</code> to simplify <code>h</code> to <code>t % 64 = t</code>, then use that to simplify and thus close the goal.  But unfortunately there is a simp lemma <code>Nat.mod_succ_eq_iff_lt</code> which causes <code>simp at h</code> to turn <code>h</code> into <code>True</code>, rather than into a useful hypothesis.</p>\n<p>Is there a convenient way to get around this?</p>\n<p>(This is a minimized version of <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Forward.20chaining.20with.20.60aesop.60/near/405526750\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Forward.20chaining.20with.20.60aesop.60/near/405526750</a>.)</p>",
        "id": 409738677,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703355630
    },
    {
        "content": "<p>Possibly everything is working fine except that <code>Nat.mod_succ_eq_iff_lt</code> is a weird lemma to be marked as simp?</p>",
        "id": 409738797,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703355734
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_succ_eq_iff_lt#doc\">docs#Nat.mod_succ_eq_iff_lt</a></p>",
        "id": 409738844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703355796
    },
    {
        "content": "<p><code>attribute [-simp] Nat.mod_succ_eq_iff_lt</code> does fix it.</p>",
        "id": 409739251,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703356134
    },
    {
        "content": "<p>Why not just <code>simp [Nat.mod_eq_of_lt, *]</code>?</p>",
        "id": 409739392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703356259
    },
    {
        "content": "<p>Because actually what I did originally was call <code>aesop</code>, and one of my useful hypotheses disappeared along the way.  I'm trying to do either <code>aesop</code> or call <code>split_ifs</code> and get ~10 different branches that can each be closed with <code>simp_all</code>.</p>\n<p>That is, this is a minimization of the <code>aesop</code> thread at <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Forward.20chaining.20with.20.60aesop.60/near/405526750\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Forward.20chaining.20with.20.60aesop.60/near/405526750</a>.</p>",
        "id": 409739488,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703356336
    },
    {
        "content": "<p>Then I would hope that your useful hypothesis was not that useful and that instead you were missing a simp lemma (or another lemma should be simp).</p>",
        "id": 409739623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703356453
    },
    {
        "content": "<p>Well, in this case the useful hypothesis is an application of <code>Nat.mod_eq_of_lt</code>, as in the MWE.  But as far as I know I can't mark that as <code>simp</code>, because it has a hypothesis.  What would be the fix I should apply then?</p>",
        "id": 409740120,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703356958
    },
    {
        "content": "<p>Nonono, simp does handle lemmas with preconditions!</p>",
        "id": 409740147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703356986
    },
    {
        "content": "<p>Ah, that's useful to know!  Should <code>Nat.mod_eq_of_lt</code> be <code>simp</code>?</p>",
        "id": 409740178,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703357035
    },
    {
        "content": "<p>I <em>think</em> it's sensible, but there might surprises.</p>",
        "id": 409740250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703357079
    },
    {
        "content": "<p>Sorry, I had forgotten about this thread (or rather, the original Aesop thread). As a workaround, you can erase the simp lemma from Aesop's simp calls as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simp_all_test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">simp</span> <span class=\"n\">Nat.mod_succ_eq_iff_lt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409744177,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1703360790
    },
    {
        "content": "<p>In this case adding <code>Nat.mod_eq_of_lt</code> is better as Yael points out, and I’ll do that at file-level for now.</p>",
        "id": 409744206,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703360865
    }
]