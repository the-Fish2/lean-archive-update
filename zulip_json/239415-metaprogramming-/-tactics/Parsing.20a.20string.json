[
    {
        "content": "<p>I don't fully understand how parsing works and all, but can I somehow feed some <code>String</code> to a parser to get a new syntax object from it?</p>\n<p>Concretely, I'm trying to modify an interpolated string before feeding it back to <code>s!</code>. I had hoped this would be cleaner than duplicating all of the backend of <code>s!</code>. Is that possible?</p>\n<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"t!\"</span> <span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">interpStr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"…replace it with this {1+1}\"</span>\n    <span class=\"c1\">-- TODO: try to parse `key` and feed it to `s!` below</span>\n    <span class=\"k\">let</span> <span class=\"n\">modified</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">interpolatedStrKind</span> <span class=\"o\">:=</span> <span class=\"n\">interpStr</span>\n    <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">modified</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">t</span><span class=\"bp\">!</span><span class=\"s2\">\"starting with this {1+2}…\"</span>\n</code></pre></div>",
        "id": 422668775,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708535946
    },
    {
        "content": "<p>I'd hope this could print <code>…replace it with this 2</code> in the infoview.</p>",
        "id": 422668896,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708535988
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.runParserCategory#doc\">docs#Lean.Parser.runParserCategory</a> is useful for this?</p>",
        "id": 422670800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708536584
    },
    {
        "content": "<p>There isn't too much code you need for processing an <code>interpolatedStr(term)</code>. The idea is that the underlying Syntax is an array of strings or terms, and you can loop through them and do whatever processing you want, depending on which of the two it is.</p>\n<p>If you want more examples, the first two functions in the Basic file in <a href=\"#narrow/stream/270676-lean4/topic/Internationalization/near/402576630\">this message</a> show some processing. That creates a separate term, but you could have the output be another <code>interpolatedStrKind</code>.</p>",
        "id": 422685103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708541882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I indeed took your code there as inspiration<span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> but I'd like to use .po files for the translation part. I have the creation of that .po file down fine, but now I need to parse it again to get the translations into lean. And that's where I thought the easiest would be to just re-parse the translated string as an interpolated string.</p>",
        "id": 422710680,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708552381
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, got it working :)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>working example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"t!\"</span> <span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/-- Parse a string as an interpolated string.</span>\n\n<span class=\"sd\">Modified from `Lean.Parser.runParserCategory`.</span>\n<span class=\"sd\"> -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">runInterpolatedStrParser</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;input&gt;\"</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">interpolatedStrKind</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{input}</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">interpolatedStrFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">andthenFn</span> <span class=\"n\">whitespace</span> <span class=\"o\">(</span><span class=\"n\">categoryParserFnImpl</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ictx</span> <span class=\"o\">:=</span> <span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">p.run</span> <span class=\"n\">ictx</span> <span class=\"o\">{</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">getTokenTable</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkParserState</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.hasError</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">(</span><span class=\"n\">s.toErrorMsg</span> <span class=\"n\">ictx</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">input.atEnd</span> <span class=\"n\">s.pos</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.ok</span> <span class=\"o\">⟨</span><span class=\"n\">s.stxStack.back</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">((</span><span class=\"n\">s.mkError</span> <span class=\"s2\">\"end of input\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toErrorMsg</span> <span class=\"n\">ictx</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">interpStr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"…replace it with this {1+1}\"</span>\n\n    <span class=\"k\">match</span> <span class=\"n\">runInterpolatedStrParser</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">key</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">modified</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">modified</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">err</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">logError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Could not parse translated string: {err}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">input: {key}\"</span>\n        <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">interpStr</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">t</span><span class=\"bp\">!</span><span class=\"s2\">\"starting with this {1+2}…\"</span>\n</code></pre></div>\n</div></div>",
        "id": 422796839,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708601269
    }
]