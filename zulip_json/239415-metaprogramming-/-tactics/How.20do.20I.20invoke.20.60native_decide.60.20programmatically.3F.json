[
    {
        "content": "<p>I'm not sure how to call <code>native_decide</code> from tactic code. The following does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Meta</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"call_native_decide\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">runTactic</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">native_decide</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">setGoals</span><span class=\"w\"> </span><span class=\"n\">gs</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">native_decide</span><span class=\"w\">  </span><span class=\"c1\">-- Fine</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">call_native_decide</span><span class=\"w\">  </span><span class=\"c1\">-- auxiliary declaration cannot be created when declaration name is not available</span>\n</code></pre></div>",
        "id": 445226396,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718658758
    },
    {
        "content": "<p>There have been recent posts showing that <code>native_decide</code> is not that different from <code>sorry</code>: why do you want to use it?</p>",
        "id": 445227182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718659107
    },
    {
        "content": "<p>Because decide and rfl hit stack overflows, and I am experimenting with what things might be like once the faster interpreter is a thing or native_decide is fixed in the future.</p>",
        "id": 445227333,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718659189
    },
    {
        "content": "<p>If native_decide = sorry it seems like that is a bug and should be fixed, but I don’t see why that should block my experimentation. :)</p>",
        "id": 445227678,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718659256
    },
    {
        "content": "<p>No, as long as you are aware that whatever code you produce will not be safe, go right ahead! <code>sorry</code> is an incredibly useful tactic, after all!</p>",
        "id": 445227886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718659331
    },
    {
        "content": "<p>Saying <code>native_decide</code> is not different from <code>sorry</code> is an unfair characterization. If you trust the compiler, etc., then it only succeeds if the proposition is true.</p>",
        "id": 445229391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718660018
    },
    {
        "content": "<p>Trust concerns aside, anyone know how to invoke it from tactic code?</p>",
        "id": 445229547,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660109
    },
    {
        "content": "<p>I'm on mobile now, but I thought that there was a recent discussion about a proof of false using native_decide, no?</p>",
        "id": 445229552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718660110
    },
    {
        "content": "<p>Which is already fixed I believe.</p>",
        "id": 445229581,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660123
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/4306\">https://github.com/leanprover/lean4/issues/4306</a></p>",
        "id": 445229634,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660162
    },
    {
        "content": "<p>In general I expect the compiler folk to (1) be very motivated to fix <code>native_decide</code> bugs and (2) have little difficulty doing so in each case. Certainly there is a greater probability of these than bugs in the kernel, but I am aware of that risk.</p>",
        "id": 445229838,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660249
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.runTactic#doc\">docs#Lean.Elab.runTactic</a> doesn't pass in all the context you need.</p>\n<p>Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"call_native_decide\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">gs</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">evalTactic</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">native_decide</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span>\n</code></pre></div>",
        "id": 445229962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718660301
    },
    {
        "content": "<p>Ah, thanks for digging this up!  It was the discussion I had in mind and I had missed that it was resolved!</p>",
        "id": 445229986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718660320
    },
    {
        "content": "<p>Wonderful, thank you!</p>",
        "id": 445229990,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660322
    },
    {
        "content": "<p>You don't actually need to use <code>Tactic.run</code> here. It's just to make sure it only works on a single goal.</p>",
        "id": 445230004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718660332
    },
    {
        "content": "<p>In my original code I have several different mvars in scope.</p>",
        "id": 445230088,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718660380
    },
    {
        "content": "<p>Here's the final interval tactic: <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/An.20interval.20tactic.20for.20constant.20real.20inequalities/near/445456796\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/An.20interval.20tactic.20for.20constant.20real.20inequalities/near/445456796</a></p>",
        "id": 445457339,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1718743409
    }
]