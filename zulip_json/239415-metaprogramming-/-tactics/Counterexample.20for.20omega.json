[
    {
        "content": "<p>Is it possible to extract an integer counterexample when the tactic <code>omega</code> fails? Similarly as SMT solvers can output a solution when it exists. For example given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">11</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>\n<p>I would like <code>omega</code> to tell</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic omega failed, possible evaluation: a = 2\n</code></pre></div>\n<p>I have found the option</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.omega</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>but honestly, I don't understand much what is going on -- I know basics of linear programming, but not anything deeper, e.g. how to get from the domain of rational numbers to integers.</p>",
        "id": 410998868,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704281626
    },
    {
        "content": "<p>Iirc the omega test is capable of producing a counter example so if the omega tactic cant do it right now it should hopefully be possible to get there if someone puts in the effort.</p>",
        "id": 411000787,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704282657
    },
    {
        "content": "<p>It's in the roadmap, but not quite yet! Note that the current implementation of <code>omega</code> is still missing the \"dark and grey shadows\" part of the algorithm, so it is not a complete decision procedure, and can sometimes fail without identifying a counterexample.</p>\n<p>Once I put out a few more immediate fires I will improve the trace output for <code>omega</code>,  and hopefully not too long after that implement the dark and grey shadows, and from there provide counterexamples.</p>",
        "id": 411109961,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704332362
    },
    {
        "content": "<p>there is also the issue that counterexamples may not be true counterexamples because <code>omega</code> generalizes anything it doesn't understand to a variable, so it might e.g say that <code>sin x ^ 2 + cos x ^ 2 = 1</code> is false if you consider <code>sin x ^ 2 = 0</code> and <code>cos x ^ 2 = 0</code></p>",
        "id": 411110071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704332460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for clarifying the current state. I didn't know it is not a complete procedure yet. And of course I know the counterexample doesn't have to be a full counterexample, only a partial one suggesting that (in iProver's terminology) more refinement is needed.</p>",
        "id": 411115035,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704335900
    },
    {
        "content": "<p>I wonder how much this overlaps with <code>slim_check</code>. It's possible that in most small cases of this you can already get <code>slim_check</code> to give you a counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">11</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">slim_check</span>\n\n<span class=\"c1\">-- Found problems!</span>\n<span class=\"c1\">-- a := 2</span>\n<span class=\"c1\">-- guard: 4 &lt; 6</span>\n<span class=\"c1\">-- guard: 6 ≤ 11</span>\n<span class=\"c1\">-- guard: 2 &lt; 3</span>\n<span class=\"c1\">-- issue: false does not hold</span>\n<span class=\"c1\">-- (0 shrinks)</span>\n</code></pre></div>",
        "id": 411115639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704336359
    }
]