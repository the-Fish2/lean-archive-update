[
    {
        "content": "<p>Hi, </p>\n<p>I'm using the following metaprogramming code to process files in mathlib. It works smoothly for most files. But for <code>Mathlib/Data/Real/Basic.lean</code>, it often takes more than 10 minutes and &gt;64GB of memory. The most time-consuming part is <code>IO.processCommands inputCtx parserState commandState</code>.  Note that checking <code>Mathlib/Data/Real/Basic.lean</code> directly only takes a few seconds and ~300MB of memory. </p>\n<p>Anyone has ideas? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">System</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"s2\">\"Mathlib/Data/Real/Basic.lean\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"k\">let</span> <span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">Options.empty.setBool</span> <span class=\"bp\">`</span><span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n  <span class=\"n\">enableInitializersExecution</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">path.toString</span>\n\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Parsing header...\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Processing header...\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"n\">opts</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">¬</span><span class=\"n\">messages.hasErrors</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env.setMainModule</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">moduleNameOfFileName</span> <span class=\"n\">path</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"n\">opts</span> <span class=\"k\">with</span> <span class=\"n\">infoState.enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Processing commands...\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"n\">commandState</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Done!\"</span>\n</code></pre></div>\n<p>Steps to reproduce the problem:</p>\n<ol>\n<li>Clone a new copy of mathlib4.</li>\n<li>Create a new file named ProcessReal.lean with the content above.</li>\n<li>Build mathlib: <code>lake build</code></li>\n<li><code>lake env lean --run ProcessReal.lean</code></li>\n</ol>",
        "id": 420534142,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1707423174
    },
    {
        "content": "<p>I think it's because you're setting the option to be true, where you can just turn on infotrees in the info state and get the infotrees that way</p>",
        "id": 420534417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707423303
    },
    {
        "content": "<p>It looks like you're already doing that on line -4, so just get rid of the <code>let opts := ...</code> line and it shold be fine</p>",
        "id": 420534481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707423329
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Time</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">System</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"s2\">\".lake/packages/mathlib/Mathlib/Data/Real/Basic.lean\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"n\">enableInitializersExecution</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">path.toString</span>\n\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Parsing header...\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Processing header...\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"o\">{}</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">¬</span><span class=\"n\">messages.hasErrors</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env.setMainModule</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">moduleNameOfFileName</span> <span class=\"n\">path</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"o\">{}</span> <span class=\"k\">with</span> <span class=\"n\">infoState.enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"Processing commands...\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"n\">commandState</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">state.commandState.infoState.trees.size</span>\n\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>\n<p>results in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">time</span><span class=\"o\">:</span> <span class=\"mi\">7921</span><span class=\"n\">ms</span>\n<span class=\"n\">Test123.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n<span class=\"n\">Parsing</span> <span class=\"n\">header...</span>\n<span class=\"n\">Processing</span> <span class=\"n\">header...</span>\n<span class=\"n\">Processing</span> <span class=\"n\">commands...</span>\n<span class=\"mi\">198</span>\n</code></pre></div>",
        "id": 420535507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707423794
    },
    {
        "content": "<p>so now it takes about 8 seconds to elaborate the file, and you get all 198 info trees</p>",
        "id": 420535574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707423829
    },
    {
        "content": "<p>(Note that I changed the filepath)</p>",
        "id": 420535667,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707423859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> This works great! Thanks!</p>",
        "id": 420658446,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1707487349
    }
]