[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"c1\">-- A true lemma</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">right</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">tsub_tsub_eq_add_tsub_of_le</span> <span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">t0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- `omega` fails to prove it</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wrong</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>Result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">omega</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">-∞</span><span class=\"o\">,</span> <span class=\"mi\">63</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">63</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This happened to be the first thing I tried <code>omega</code> on. :)</p>",
        "id": 409899644,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703500936
    },
    {
        "content": "<p>Is <code>omega</code> missing that <code>0 &lt; t</code>?</p>",
        "id": 409900121,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703501272
    },
    {
        "content": "<p>Ah, possibly it thinks it can cancel the <code>t</code>s from both sides, which doesn't work since the subtraction saturates at 0.</p>",
        "id": 409900321,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703501471
    },
    {
        "content": "<p>I should say, I've since tried on a lot of other cases, and it's extremely useful! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 409903944,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703504465
    },
    {
        "content": "<p>What happens if you explicitly add <code>0 &lt; t</code> to the local context?</p>",
        "id": 409904879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703505165
    },
    {
        "content": "<p>^ Then it works.</p>",
        "id": 409904915,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703505195
    },
    {
        "content": "<p>Maybe open an issue then? I think Scott is on holiday for a while.</p>",
        "id": 409905013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703505262
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/issues/482\">https://github.com/leanprover/std4/issues/482</a></p>",
        "id": 409905331,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1703505510
    },
    {
        "content": "<p>Ideally, one would expect a tactic that can deal with non-equalities / proving equality. So for example it could prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">11</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>only that it goes beyond simple linear programming, rather something on top of that to case split <code>a ≠ 2</code> as <code>a &lt; 2 ∨ a &gt; 2</code> which goes towards SMT-solving (extension of SAT solving). It should be doable but it is not trivial.</p>",
        "id": 410997753,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704281054
    },
    {
        "content": "<p>This is not related to the issue just mentioned, but it seems that <code>omega</code> may not be ignoring <code>mdata</code> correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">omega</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 410999690,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704282086
    },
    {
        "content": "<p>is there any way to clear all <code>mdata</code> in the context? I've had many, many <code>omega</code> failures and maybe this is the root issue</p>",
        "id": 411000075,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704282303
    },
    {
        "content": "<p>It should be easy to write a <code>clear_mdata</code> tactic, but I think that it would be somewhat a hack, since <code>mdata</code> stores information that is actually useful for something.</p>",
        "id": 411000176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704282356
    },
    {
        "content": "<p>it'd be useful for debugging at least!</p>",
        "id": 411000286,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704282401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411000075\">said</a>:</p>\n<blockquote>\n<p>is there any way to clear all <code>mdata</code> in the context? I've had many, many <code>omega</code> failures and maybe this is the root issue</p>\n</blockquote>\n<p>Please report these as issues so we can track and fix them</p>",
        "id": 411001803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704283125
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/410345497\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/410345497</a></p>\n<p>my whinging is here, will open the Std issues in a sec</p>",
        "id": 411002111,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704283259
    },
    {
        "content": "<p>Oh, I realized that omega can deal with (a &lt; 2 or a &gt; 2), so the only trick is to replace non-equality with disjunction of two strict inequalities, I guess</p>",
        "id": 411002598,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704283426
    },
    {
        "content": "<p>Since Scott wrote most of the code, it would be best to whinge while he's not on holiday :)</p>",
        "id": 411003175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704283617
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/499\">std4#499</a>, <a href=\"https://github.com/leanprover/std4/pull/500\">std4#500</a> - some nice presents for when they're back :)</p>",
        "id": 411003354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704283676
    },
    {
        "content": "<p>Ok, I will wait with my question about a counterexample too. Now, to my understanding, the issues here are more about user experience that any algorithmic difficulty.  For example, the power question is about general coefficient evaluation.</p>",
        "id": 411004357,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704284116
    },
    {
        "content": "<p>I do think there's other stuff going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Omega</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- this line doesn't matter</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 411004977,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704284425
    },
    {
        "content": "<p>But what does this has anything to do with linear inequalities? It feels a bit like complaining that <code>omega</code> doesn't know that <code>(sin x)^2</code> is the same as <code>1-(cos x)^2</code></p>",
        "id": 411005581,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704284690
    },
    {
        "content": "<p>If we had a tactic that could deal with non-linear (in)equalities, like SMT-NIA, then understanding constant powers should be expected. On the other hand, non-linear problems are algorithmically much harder.</p>",
        "id": 411005979,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704284867
    },
    {
        "content": "<p>ah, my apologies! I thought that <code>omega</code> was a full decision procedure, not a linear one</p>",
        "id": 411006785,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704285225
    },
    {
        "content": "<p>(now that I think about it, a non-linear decision procedure is provably impossible...)</p>",
        "id": 411006827,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704285243
    },
    {
        "content": "<p>I thought <code>omega</code> was supposed to be complete?</p>",
        "id": 411006891,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704285271
    },
    {
        "content": "<p>It is complete within the realm of linear inequalities over integers (which is an NP-complete problem afaik)</p>",
        "id": 411006956,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704285309
    },
    {
        "content": "<p>non-linear problems (Diophantine equations) are generally undecidable</p>",
        "id": 411007108,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704285369
    },
    {
        "content": "<p>Omega is a decision procedure for Presburger arithmetic, which means in a complete implementation it can decide any first order sentence using addition on the naturals, this means that you can't deal with things like <code>n^2</code> only things like <code>4*n + 5*m</code> for fixed constants (as these can be expressed via a longer formula using only addition), hence the linear part.</p>",
        "id": 411007209,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704285444
    },
    {
        "content": "<p>over real closed fields it is decidable again, but with double-exponential performance</p>",
        "id": 411007226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285456
    },
    {
        "content": "<p>Uh, I thought Presburger arithmetic included multiplication. But of course that's bogus.</p>",
        "id": 411007362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704285515
    },
    {
        "content": "<p>I've long wanted to get an implementation of CAD in lean, but last I checked it was waiting on a bunch of results on permanents needed for a computable algebraic numbers implementation</p>",
        "id": 411007377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285524
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is undecidable again because we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>t</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi it}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span> which can let us emulate integers</p>",
        "id": 411007464,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704285552
    },
    {
        "content": "<p>Do we have algebraic numbers in mathlib yet? Surely we do</p>",
        "id": 411007530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgebraic#doc\">docs#IsAlgebraic</a></p>",
        "id": 411007774,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704285655
    },
    {
        "content": "<p>I see that but it's a proposition</p>",
        "id": 411007791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411007362\">said</a>:</p>\n<blockquote>\n<p>Uh, I thought Presburger arithmetic included multiplication. But of course that's bogus.</p>\n</blockquote>\n<p>Multiplication by constants but not by variables.</p>",
        "id": 411007795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704285667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411007464\">said</a>:</p>\n<blockquote>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is undecidable again because we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>t</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi it}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span> which can let us emulate integers</p>\n</blockquote>\n<p>Algebraically closed fields are decidable too, I believe the complexity should be the same as with real (sure not harder)</p>",
        "id": 411007834,
        "sender_full_name": "Mirek Olšák",
        "timestamp": 1704285688
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebraic.cardinal_mk_of_infinite#doc\">docs#Algebraic.cardinal_mk_of_infinite</a> uses the subtype so I don't think there's anything else</p>",
        "id": 411007847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704285699
    },
    {
        "content": "<p>is there a type of algebraic numbers over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> or as elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span></p>",
        "id": 411007869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411007464\">said</a>:</p>\n<blockquote>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">C</mi></mrow><annotation encoding=\"application/x-tex\">ℂ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">C</span></span></span></span> is undecidable again because we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>t</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2π it}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span> which can let us emulate integers</p>\n</blockquote>\n<p>But only integers with addition, right? You don't get multiplication because that would correspond to exponentiation.</p>",
        "id": 411008055,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704285793
    },
    {
        "content": "<p><code>AlgebraicCard.lean</code>'s module doc references <code>Liouville.is_transcendental</code> but I don't think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Liouville.is_transcendental#doc\">docs#Liouville.is_transcendental</a> exists</p>",
        "id": 411008096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285818
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Liouville.transcendental#doc\">docs#Liouville.transcendental</a> it seems</p>",
        "id": 411008197,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704285855
    },
    {
        "content": "<p>and I see it uses <code>Transcendental ℤ (x : ℝ)</code> in the statement, which is <code>¬IsAlgebraic ℤ (x : ℝ)</code>, so I guess that's all there is</p>",
        "id": 411008331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285925
    },
    {
        "content": "<p>Do we know the algebraic numbers are closed under addition and such?</p>",
        "id": 411008370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704285951
    },
    {
        "content": "<p>there are some basic results in the Algebraic file but not addition or ringness</p>",
        "id": 411008484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704286002
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAlgebraic.add#doc\">docs#IsAlgebraic.add</a> is not there, it seems</p>",
        "id": 411008506,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704286017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411007464\">said</a>:</p>\n<blockquote>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is undecidable again because we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>t</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi it}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span> which can let us emulate integers</p>\n</blockquote>\n<p>This by the way is the proof that although you can decide polynomial equations and inequalities using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, once you add exponentials or trig functions it becomes undecidable.</p>",
        "id": 411008727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704286134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove/near/411000286\">said</a>:</p>\n<blockquote>\n<p>it'd be useful for debugging at least!</p>\n</blockquote>\n<p>Here is a very simple-minded implementation of <code>clear_mdata</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Omega</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- removes the first layer of `mdata` from the main goal. -/</span>\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tacClearMData</span><span class=\"o\">)</span> <span class=\"s2\">\"clear_mdata\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">goal.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.getType''</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- works</span>\n  <span class=\"c1\">--omega  -- fails</span>\n  <span class=\"n\">clear_mdata</span>\n  <span class=\"n\">omega</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 411009284,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704286387
    },
    {
        "content": "<p>Is this the mdata thing again, or something else?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Omega</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">good</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">62</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">62</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">omega</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">62</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">62</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- Works</span>\n  <span class=\"c1\">--   `exact good h`</span>\n  <span class=\"c1\">-- Fails with</span>\n  <span class=\"c1\">--   `omega did not find a contradiction:`</span>\n  <span class=\"c1\">--   `[1] ∈ [0, 62]`</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 411264731,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704403998
    },
    {
        "content": "<p>Likely: using <code>clear_mdata</code> before the failing <code>omega</code>, makes the <code>omega</code> call work.</p>",
        "id": 411265098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704404179
    },
    {
        "content": "<p>Is there a bug already filed about the <code>mdata</code> issue?  I don't see one: <a href=\"https://github.com/leanprover/std4/issues?q=is%3Aissue+omega+mdata\">https://github.com/leanprover/std4/issues?q=is%3Aissue+omega+mdata</a></p>",
        "id": 411265992,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704404666
    },
    {
        "content": "<p>I didn't file any bug.  If someone did, it might be <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , but I do not know if he got around to it.</p>",
        "id": 411266519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704404964
    },
    {
        "content": "<p><code>mdata</code> bug: <a href=\"https://github.com/leanprover/std4/issues/509\">https://github.com/leanprover/std4/issues/509</a></p>",
        "id": 411266965,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704405168
    },
    {
        "content": "<p>I didn't file one for mdata, just for powers and for constants on the right</p>",
        "id": 411267149,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704405245
    },
    {
        "content": "<p>Btw, the <code>mdata</code> issue is very simple: if, inside a proof, you use a <code>have</code> or <code>let</code>, this changes the goal to a DefEq expression that begins with a \"metadata\" field.  If a tactic like <code>omega</code> does some matching on the goal and does not \"see through\" <code>mdata</code>, it will fail to identify what the target really is.</p>",
        "id": 411267652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704405519
    },
    {
        "content": "<p>The solution is typically to add a <code>← whnf</code> or a <code>consumeMData</code> or something similar.  I just do not have the time to figure out where it should go...</p>",
        "id": 411267972,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704405648
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover/std4/pull/510\">std4#510</a>.</p>",
        "id": 411296754,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704420574
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 411323063,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704440263
    }
]