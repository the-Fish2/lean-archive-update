[
    {
        "content": "<p>In the snippet below, the <code>Try these</code> suggestions are two separate commands that can replace <code>printMe</code>.</p>\n<p>How can I have a single <code>Try this</code> suggestion that prints both commands?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"printMe\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">s2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">]</span>\n    <span class=\"n\">Std.Tactic.TryThis.addSuggestions</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">))</span>\n\n<span class=\"n\">printMe</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  would like to have this suggestion:</span>\n<span class=\"cm\">def x1 := 1</span>\n<span class=\"cm\">def x2 := 2</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 422890865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708630464
    },
    {
        "content": "<p>I think I ran into this before too, and back then I settled with creating a tactic sequence and adding this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">cmd</span>\n</code></pre></div>\n<p>Dont know if there is a better solution by now.</p>\n<p>(edit: here <code>x : Array (Syntax.Tactic)</code>)</p>",
        "id": 422894264,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708631784
    },
    {
        "content": "<p>I am not sure that I understand your suggestion: if I use <code> `(tactic| ...)</code> then I cannot put a command there.</p>",
        "id": 422895356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708632204
    },
    {
        "content": "<p>my suggestion was to use the central dot <code>\\.</code> as it bundles a tactic sequence into a single tactic. But I see you are working with <code>command</code> instead, and I dont know rn on the phone how to change that snipped from <code>tactic</code> to <code>command</code>, sry</p>",
        "id": 422895779,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708632364
    },
    {
        "content": "<p>Ok, no worries, and thanks anyways!  I am indeed specifically interested in a command sequence, not a tactic sequence.</p>",
        "id": 422895885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708632409
    },
    {
        "content": "<p>You can use <code>mkNullNode</code> to create a sequence of commands, but this doesn't seem to be pretty printable</p>",
        "id": 422896037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708632478
    },
    {
        "content": "<p>Could we create a new parser? E.g. <code>syntax commandSeq := sepBy1IndentSemicolon(command)</code></p>",
        "id": 422896304,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708632587
    },
    {
        "content": "<p>Thomas, I had assumed that this was already available, since a lean file is exactly a sequence of commands, after all... but I am happy to try it out!</p>",
        "id": 422896452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708632637
    },
    {
        "content": "<p>Me too, but I couldn’t find it! :P Maybe I’m just missing it?</p>",
        "id": 422896500,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708632660
    },
    {
        "content": "<p>There’s probably a better combinator than <code>sepBy1Indent</code> for pretty printing, as this seems to leave an indent before each <code>def</code>. (I just grabbed the first thing that came to mind)</p>",
        "id": 422897012,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708632875
    },
    {
        "content": "<p>There's a parser somehow, but it creates a null node.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"printMe\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n        <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n        <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">printMe</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 422897015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708632876
    },
    {
        "content": "<p>This works, but with improvable prettyprinting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">commandSeq</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1IndentSemicolon</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"printMe\"</span> <span class=\"n\">ppLine</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">s2</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">commandSeq</span><span class=\"bp\">|</span>\n<span class=\"bp\">$</span><span class=\"n\">s1</span>\n<span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"c1\">--(s.map (↑))</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this:</span>\n<span class=\"cm\">  def x1 :=</span>\n<span class=\"cm\">    1</span>\n<span class=\"cm\">  def x2 :=</span>\n<span class=\"cm\">    2</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">printMe</span>\n</code></pre></div>",
        "id": 422897080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708632912
    },
    {
        "content": "<p>(I am not sure that the previous message conveys that I am very happy with the suggestions!  Even if they still require some work!)</p>",
        "id": 422897178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708632960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">commandSeq</span><span class=\"bp\">|</span>\n  <span class=\"kd\">def</span> <span class=\"n\">x1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"kd\">def</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gets rid of the semicolon, but not the lack of newline before the first <code>def</code>!</p>",
        "id": 422897290,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708632991
    },
    {
        "content": "<p>It would also be nice to not have <code>1</code> on a newline, but that seems to be just how <code>command</code> prettyprints anyway.</p>",
        "id": 422897360,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708633019
    },
    {
        "content": "<p>I guess that I would like a \"line-break separated sequence\".</p>",
        "id": 422897365,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708633021
    },
    {
        "content": "<p>Well, my intended case would have more likely a <code>lemma</code> rather than a <code>def</code>, so the line break after <code>:=</code> is not so bad.</p>",
        "id": 422897457,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708633063
    },
    {
        "content": "<p>I updated the snippet above using Kyle's line breaks.  Now, the formatting nit-pick is the indentation of <em>all</em> the lines.</p>",
        "id": 422897846,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708633246
    },
    {
        "content": "<p>Maybe the solution is creating a custom pretty printer for <code>commandSeq</code>—or better, a pretty printer for a <code>sepBy1Linebreak</code> combinator.</p>",
        "id": 422899540,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708633971
    },
    {
        "content": "<p>(By the way, the way to create a newline after \"Try this\" is to use <code>addSuggestion (header := \"Try this:\\n\")</code>!)</p>",
        "id": 422899866,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708634098
    },
    {
        "content": "<p>(Unrelated: It seems the coercions from <code>TSyntax</code> to <code>Suggestion</code> aren't working as I had hoped—I'd also like <code>Array (TSyntax _)</code> to coerce to <code>Array Suggestion</code>. I'll see if I can fix this...)</p>",
        "id": 422900283,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708634246
    },
    {
        "content": "<p>Thanks!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Try.20this.20with.20a.20sequence.20of.20commands/near/422900283\">said</a>:</p>\n<blockquote>\n<p>(Unrelated: It seems the coercions from <code>TSyntax</code> to <code>Suggestion</code> aren't working as I had hoped—I'd also like <code>Array (TSyntax _)</code> to coerce to <code>Array Suggestion</code>. I'll see if I can fix this...)</p>\n</blockquote>\n<p>Btw, how can I go from a <code>Array (TSyntax </code>command)<code> to a </code>TSyntax <code>commandSeq</code>?  I would like a <code>fold</code>-like operation, but I cannot make it work...</p>",
        "id": 422900520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708634337
    },
    {
        "content": "<p>Given <code>as : Array (TSyntax `command)</code>, <code> `(commandSeq|$as*)</code>seems to work! :)</p>",
        "id": 422901710,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708634862
    },
    {
        "content": "<p>Wow, awesome!</p>\n<p>Syntax is such a foreign concept for me...</p>",
        "id": 422901955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708634949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Try.20this.20with.20a.20sequence.20of.20commands/near/422900283\">said</a>:</p>\n<blockquote>\n<p>(Unrelated: It seems the coercions from <code>TSyntax</code> to <code>Suggestion</code> aren't working as I had hoped—I'd also like <code>Array (TSyntax _)</code> to coerce to <code>Array Suggestion</code>. I'll see if I can fix this...)</p>\n</blockquote>\n<p>Oh wait, they seem fine now. I wonder what was going wrong on my end; a second ago I was getting a red squiggle.</p>",
        "id": 422902335,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708635112
    },
    {
        "content": "<p>I found that they are <em>very</em> susceptible to imports.</p>",
        "id": 422902420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635135
    },
    {
        "content": "<p>Oh, really! What imports mess it up?</p>",
        "id": 422902450,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708635150
    },
    {
        "content": "<p>I could not figure it out...</p>",
        "id": 422902474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635161
    },
    {
        "content": "<p>But I also had the up-arrow give a squiggle and suddenly not give it anymore after messing with the imports.</p>",
        "id": 422902529,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635185
    },
    {
        "content": "<p>Ideally no up-arrow should be required (I'm not sure if this changes things?); what's odd is that I don't think I changed the imports between my red squiggle and the lack of it. But I did restart lean and mess with the lake folder...hmm.</p>",
        "id": 422902765,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708635279
    },
    {
        "content": "<p>Well, maybe the imports were not the cause for me either -- I simply did not understand what changed and assumed that it was the imports, where some coercion suddenly was available.</p>",
        "id": 422902900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635330
    },
    {
        "content": "<p>It could very well be! I could also be forgetting something I did to the imports. :P</p>",
        "id": 422903090,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708635394
    },
    {
        "content": "<p>Ok, I was messing around with this, since I wanted to have a \"deprecation helper\".  This is what I can achieve so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate</span> <span class=\"n\">to</span> <span class=\"n\">good_mul</span> <span class=\"n\">good_add</span>\n<span class=\"sd\">/-- I also have a doc-string -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"s2\">\"As do I\"</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">aDeprecatable_mul</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this:</span>\n<span class=\"cm\">/-- I also have a doc-string -/</span>\n<span class=\"cm\">  @[to_additive \"As do I\"]</span>\n<span class=\"cm\">  theorem aDeprecatable_mul : True :=</span>\n<span class=\"cm\">    .intro</span>\n<span class=\"cm\">  @[deprecated]</span>\n<span class=\"cm\">  alias aDeprecatable_add := good_mul</span>\n<span class=\"cm\">  @[deprecated]</span>\n<span class=\"cm\">  alias aDeprecatable_mul := good_add</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 422903531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635571
    },
    {
        "content": "<p>The idea is that you write <code>deprecate to</code> you then provide the new names, and then the command to deprecate.  The \"tool\" then prints for you the same command (ideally it would rename the declaration, but I have not gotten there yet) and also prints the aliases deprecating the old names in favor of the new ones.</p>",
        "id": 422903762,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635661
    },
    {
        "content": "<p>What is still missing:</p>\n<ul>\n<li>rename the old declarations with the new names;</li>\n<li>add a comment with today's date to the deprecations;</li>\n<li>improve the formatting of the <code>Try this</code> suggestion.</li>\n</ul>",
        "id": 422903877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708635708
    },
    {
        "content": "<p>Oh, handling the indentation might be easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">commandSeq</span> <span class=\"o\">:=</span> <span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">sepBy1IndentSemicolon</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><del>It looks like that also obviates the need for <code>header := \"Try this:\\n\"</code>—I'm not totally sure why.</del> Nevermind, I was using syntax with a line break. :P</p>",
        "id": 422906231,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708636696
    },
    {
        "content": "<p>(That probably suffices (re: indentation) for testing and such—but I think if this were to eventually be PR'd, we really should come up with the \"right\" combinator for a command sequence, which should not be so general as to allow <code>;</code>.)</p>",
        "id": 422907203,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708637148
    },
    {
        "content": "<p>I pushed what I have to <a href=\"https://github.com/leanprover-community/mathlib4/tree/adomani%2Fdeprecation_tool\">branch#adomani/deprecation_tool</a>.  Feel free to adapt: I'm done for the day!</p>",
        "id": 422907308,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708637182
    },
    {
        "content": "<p>By the way, I found why it is that <code>` </code>(...<code>)</code> supports a sequence of commands (like in my code block). It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Command.quot#doc\">docs#Lean.Parser.Command.quot</a></p>\n<p>I wonder if core should get a <code>commandSeq</code> parser and have this <code> `(...)</code> syntax return something with that kind rather than a null node?</p>",
        "id": 422907717,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708637332
    }
]