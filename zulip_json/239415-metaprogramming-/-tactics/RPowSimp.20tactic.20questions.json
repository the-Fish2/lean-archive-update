[
    {
        "content": "<p>I was playing around with the <code>RPowSimp</code> tactic from the \"Symmetric Project\" (from <a href=\"https://github.com/teorth/symmetric_project/blob/master/SymmetricProject/Tactic/RPowSimp.lean\">here</a>) and was wondering if the following applications were in scope: (These examples are lifted from the PNT+ project, where this kind of stuff arises all the time, in fact even with complex bases and exponents...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.exp</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ rexp s ^ (A * s⁻¹) = rexp A</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ t ^ (1 - σ) = t * t ^ (-σ)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Even if you add the 1st power on `t`, it still doesn't see it</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ t ^ (1 - σ) = t * t ^ (-σ)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For comparison, the following examples work, though sometimes when combined with other tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span>\n  <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ x ^ s * y ^ (-s) = y ^ (-s) * x ^ (- -s)</span>\n  <span class=\"n\">ring_nf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ x ^ (-s) * y ^ (- -s) = y ^ s * x ^ (-s)</span>\n  <span class=\"n\">ring_nf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ePos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">^</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">^</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rpow_simp</span> <span class=\"c1\">-- remains: ⊢ e ^ (s * A * s⁻¹) = e ^ A</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Perhaps this is a question for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ? (Is there an intention to contribute this tactic to Mathlib? If so, these may be useful test cases...) Thanks for your help!</p>",
        "id": 439087137,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1715887591
    },
    {
        "content": "<p>I don’t think we included anything with <code>exp</code> so I am not surprised those don’t work. Are you sure the others are always true even in edge cases?</p>",
        "id": 439087613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715887792
    },
    {
        "content": "<p>In any case this tactic was never polished and is clearly tested only on things that appeared in the project.</p>",
        "id": 439087741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715887831
    },
    {
        "content": "<p>Resuming work on this and PRing to Mathlib is still on my todo list but with low priority so it may never happen if there is no extra motivation.</p>",
        "id": 439087813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715887872
    },
    {
        "content": "<p>I think it would be quite useful (for PNT+) to have something like this, for what it's worth... (But of course it's well above my paygrade to make that happen...)</p>",
        "id": 439087861,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1715887901
    },
    {
        "content": "<p>Having a new project needing it is clearly rising the priority. The issue with the symmetric project is that Mario and I wrote the tactic when the project was already completed, because Terry told me such a tactic would have been useful.</p>",
        "id": 439088124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715888026
    },
    {
        "content": "<p>We can definitely try to ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> to see whether he wants to work on that.</p>",
        "id": 439088242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715888065
    }
]