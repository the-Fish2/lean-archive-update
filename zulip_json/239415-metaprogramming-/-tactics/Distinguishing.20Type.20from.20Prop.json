[
    {
        "content": "<p>If I have a <code>Lean.Expr</code> representing a type, how do I tell what the sort is?  I want to distinguish <code>Prop</code> types from <code>Type</code> types.</p>",
        "id": 422432572,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708440442
    },
    {
        "content": "<p>In particular, <code>Lean.Expr.isProp</code> doesn't do it, as that's for checking if the expr is literally <code>Prop</code>.</p>",
        "id": 422432633,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708440467
    },
    {
        "content": "<p>Is the issue that you want to pass <code>← inferType e</code> to <code>isProp</code>, maybe?</p>",
        "id": 422433839,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708440793
    },
    {
        "content": "<p>Ah, yep, that seems right.</p>",
        "id": 422434008,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708440838
    },
    {
        "content": "<p>(Otherwise, if you could give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, it would help me understand what the problem is! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 422434045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708440843
    },
    {
        "content": "<p>That trap gets me every time.</p>",
        "id": 422436337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708441395
    },
    {
        "content": "<p>Same here, which is why it was my first suggestion!</p>",
        "id": 422436958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708441556
    },
    {
        "content": "<p>The docstring for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.isProp#doc\">docs#Lean.Expr.isProp</a> is wrong, right?</p>",
        "id": 422437144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441608
    },
    {
        "content": "<p>There is a bogus \"a\" that changes the meaning to be the wrong thing</p>",
        "id": 422437175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441619
    },
    {
        "content": "<p>I mean, there can be many <code>sort 0</code>s if  you interpret identity as being literal residency in memory.  That might have been the thought process.</p>",
        "id": 422437299,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708441656
    },
    {
        "content": "<p>But yes, that was part of my confusion too.</p>",
        "id": 422437340,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708441668
    },
    {
        "content": "<p>On reflection, though, you can't tell without being in CoreM or MetaM, though, which is a clue.</p>",
        "id": 422437444,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708441691
    },
    {
        "content": "<p>Here is a self-contained example, in case it helps someone else who might stumble here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>  <span class=\"c1\">-- `(false, true)`</span>\n  <span class=\"k\">let</span> <span class=\"n\">tExpr</span>   <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">True</span> <span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">notProp</span> <span class=\"o\">:=</span> <span class=\"n\">tExpr.isProp</span>\n  <span class=\"k\">let</span> <span class=\"n\">isProp</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">tExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isProp</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{(notProp, isProp)}\"</span>\n</code></pre></div>",
        "id": 422437469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708441697
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3420\">lean4#3420</a> fixes the docstring</p>",
        "id": 422438008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441837
    },
    {
        "content": "<p>I think it's just a copy paste error where all the other functions are referring to families of values</p>",
        "id": 422438062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441850
    },
    {
        "content": "<p>(a constant, an element of the form $x, etc)</p>",
        "id": 422438107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Distinguishing.20Type.20from.20Prop/near/422438008\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/3420\">lean4#3420</a> fixes the docstring</p>\n</blockquote>\n<p>I wonder if I should try to <code>maintainer merge</code> it...</p>",
        "id": 422438180,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708441888
    },
    {
        "content": "<p>I wouldn't bother cluttering up the PR :-)</p>",
        "id": 422446285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708444026
    },
    {
        "content": "<p>FWIW, I quite like the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Not a prop\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">c.type</span>\n</code></pre></div>",
        "id": 422468799,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708450656
    },
    {
        "content": "<p>(no pun intended)</p>",
        "id": 422468852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708450681
    },
    {
        "content": "<p>Generally, you should prefer <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isProp#doc\">docs#Lean.Meta.isProp</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isProof#doc\">docs#Lean.Meta.isProof</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isType#doc\">docs#Lean.Meta.isType</a> over the ones in the <code>Lean.Expr</code> namespace, unless you know you don't have any metavariables or level parameter reductions to do.</p>",
        "id": 422472644,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708452084
    },
    {
        "content": "<p>Oh, I wasn't aware that <code>Meta.isProp</code> existed!</p>",
        "id": 422472990,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708452201
    },
    {
        "content": "<p>Should Expr.isProp be renamed, given it means something entirely unrelated to Meta.isProp ?</p>",
        "id": 422474983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708452872
    },
    {
        "content": "<p>(does it even compile to something more useful than the clearer <code>e == .sort .zero</code>?)</p>",
        "id": 422475096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708452917
    },
    {
        "content": "<p>I always get confused by both of them. I wonder if <code>Meta.isProp</code> could be renamed to something that makes it clear that <code>Meta.isProp p</code> is checking that <code>p</code> is a proposition, rather than being <code>Prop</code> itself.</p>\n<p>It could be split into <code>Meta.isProp</code> as a parallel to <code>Expr.isProp</code> and perhaps <code>Meta.isProposition</code>, which would be equivalent to <code>Meta.isProp (&lt;- inferType p)</code>.</p>",
        "id": 422476058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708453254
    },
    {
        "content": "<p>There's a strong precedent for <code>is</code> in the matching functions to mean that it really is, not is-a</p>",
        "id": 422476146,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708453296
    },
    {
        "content": "<p>An alternative name suggestion for <code>Meta.isProposition</code> is <code>Meta.isAProp</code></p>",
        "id": 422476189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708453312
    },
    {
        "content": "<p>If you do this renaming (which I'm a fan of), please post a big fat warning somewhere when the behaviour of <code>isProp</code> changes.</p>",
        "id": 422476442,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708453417
    },
    {
        "content": "<p>Let me say quickly that this thread reminded me to take care on which one to use here - I think if stuff isn't renamed, then docstrings pointing both to each other would be a good idea.</p>",
        "id": 424790663,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709611452
    }
]