[
    {
        "content": "<p>It's noted that <code>aesop_cat_nonterminal</code> should generally be used only for exploration. Fair enough; but usually the exploration tactics are <code>?</code> tactics that print a script or list of theorems used in the process. <code>aesop_cat_nonterminal</code> doesn't appear to, and <code>aesop_cat_nonterminal?</code> doesn't exist. I'm in a case where <code>aesop_cat</code> doesn't work (and <code>aesop_cat?</code> gives no advice), but <code>aesop_cat_nonterminal</code> produces a simplification that I don't know how to achieve myself. How can I trace its work?</p>",
        "id": 423217102,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708821780
    },
    {
        "content": "<p>You can use <code>aesop_cat?</code> directly. <code>aesop_cat_nonterminal</code> just disables the warning about Aesop not being able to fully solve the goal. I would argue <code>aesop_cat_nonterminal</code> should be removed anyway; it's a maintainability footgun.</p>",
        "id": 423480703,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708980448
    },
    {
        "content": "<p>Well, that's the thing; <code>aesop_cat?</code> just failed on me, whereas <code>aesop_cat_nonterminal</code> didn't. But unfortunately I lost my MWE in the meantime, so I'll have to find a new example to report.</p>",
        "id": 423813286,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1709125500
    },
    {
        "content": "<p>Ah, that's weird. If you're able to reconstruct the MWE, I'd be happy to take a look.</p>",
        "id": 423846279,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709134977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  Okay,  I ran into this again and turned it into a MWE.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Comonad</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Comonad</span> <span class=\"o\">(</span><span class=\"n\">extract</span> <span class=\"n\">extend</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">duplicate</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Comonad.extend</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">w</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">wα</span> <span class=\"o\">:=</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">extract</span><span class=\"o\">)</span> <span class=\"n\">wα</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instLawfulComonad</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Comonad</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">CategoryTheory.Comonad</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">inst</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span>\n    <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">w</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.map</span>\n    <span class=\"n\">δ'</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"bp\">↾</span><span class=\"n\">duplicate</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">aesop_cat</span><span class=\"bp\">?</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>aesop_cat?</code> fails and does nothing to the goal; <code>aesop?</code> fails to prove the goal but does simplify the goal, though without providing a script; <code>aesop_cat_nonterminal</code> gives a different (partial) simplification.</p>",
        "id": 425753848,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1710057557
    },
    {
        "content": "<p>Ideally, I'd like <code>aesop_cat?</code> and <code>aesop?</code> to provide a script even if they fail to solve the goal, to reproduce its work without calling <code>aesop</code> nonterminally</p>",
        "id": 425753981,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1710057658
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/113488-general/topic/non-finishing.20.60aesop.3F.60/near/404962767\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/non-finishing.20.60aesop.3F.60/near/404962767</a> help you?</p>",
        "id": 425833797,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710129958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/theorems.2Ftactic.20script.20used.20by.20aesop_cat_nonterminal/near/425753848\">said</a>:</p>\n<blockquote>\n<p><code>aesop_cat?</code> fails and does nothing to the goal; <code>aesop?</code> fails to prove the goal but does simplify the goal, though without providing a script; <code>aesop_cat_nonterminal</code> gives a different (partial) simplification.</p>\n</blockquote>\n<p>This is all as expected I'm afraid. <code>aesop?</code> (and thus <code>aesop_cat?</code>) currently provides a script only when it fully solves the goal. Changing this has been on my todo list for a while. <code>aesop_cat?</code> sets Aesop's <code>terminal</code> option, which instructs it to fail when it can't fully solve a goal. <code>aesop_cat_nonterminal</code> uses the <code>CategoryTheory</code> rule set (unlike <code>aesop?</code>) and so produces a different simplification.</p>",
        "id": 426713440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1710498302
    }
]