[
    {
        "content": "<p>Is there a tactic that does something similar to <code>convert_to</code>, but on a hypothesis? You would specify an existing hypothesis and a new type for it, and then goals are introduced to show the new type is equal to the current one for the hypothesis, and the type of the hypothesis in the context of the original goal is then replaced with the new type.</p>\n<p>If there is not an existing tactic for this, I would have suggested syntax like <code>convert h to α</code>, but that's ambiguous with the existing syntax since it could be interpreted as <code>convert (h to α)</code>.</p>\n<p>I guess another way of looking at this is as a version of <code>change α at h</code> but with the definitional equality constraint relaxed.</p>",
        "id": 447601320,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1719526705
    },
    {
        "content": "<p>There's not, but thanks for the suggestion — this is something I've wanted.</p>\n<p>Here's a PR with <code>convert_to newType at h</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/14253\">mathlib4#14253</a></p>",
        "id": 447906884,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719627338
    },
    {
        "content": "<p>Nice!</p>",
        "id": 447965514,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1719659124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409979\">Dylan Ede</span> has marked this topic as resolved.</p>",
        "id": 447965521,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719659129
    }
]