[
    {
        "content": "<p>I am trying to implement new commands but in the <em>metaprogramming lean4 book</em> most (if not all ?) examples of elaborations of commands only yield  <code>logInfo</code> messages.<br>\nIn my case, I would like to make various declarations (e.g. generated <code>def</code>s, defining types and functions, etc.) but I would also like to call other commands.<br>\nAs a simple example (of course trivial, just not for me), I would like to create a synonymous for <code>namespace</code>.</p>\n<p>E.g.  instead of writing :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MyNS</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">MyNS</span>\n</code></pre></div>\n<p>I would like to write :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">spacename</span> <span class=\"n\">MyNS</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">MyNS</span>\n</code></pre></div>\n<p>Of course it's silly but still, I would be happy if you can point me in the right direction.<br>\nAs a side note I would prefer to be directly at the <code>CommandElabM</code> level.</p>",
        "id": 411225782,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1704387282
    },
    {
        "content": "<p>In that case you can make a macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"spacename\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411228897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704388414
    },
    {
        "content": "<p>Here's an elaborator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"spacename\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n</code></pre></div>",
        "id": 411229086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704388478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/commands.20elaborating.20.2E.2E.2E.20commands/near/411229086\">said</a>:</p>\n<blockquote>\n<p>Here's an elaborator: ...</p>\n</blockquote>\n<p>Thank you very much ! (I need to learn more about the quotations ...)</p>",
        "id": 411328052,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1704443595
    }
]