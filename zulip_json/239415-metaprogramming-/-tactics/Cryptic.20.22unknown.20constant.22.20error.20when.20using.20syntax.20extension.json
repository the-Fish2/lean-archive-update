[
    {
        "content": "<p>Hello! I'm new to Lean but I've dived straight into metaprogramming. I'm interested in implementing \"staged compilation\" in the style of <a href=\"https://stax.strath.ac.uk/concern/theses/6w924c39c\">Toatie</a> (<a href=\"https://github.com/cramsay/toatie\">github</a>). To this end I've tried to make some syntax extensions to emulate the staging part of Toatie's type system. All was going well, until I hit a cryptic error message as detailed in the code below, which appears to be caused by the use of my new syntax, since a desugared version of the offending function (also presented below) does not encounter the error. Does anyone have any idea what is going on?</p>\n<p>Note that the code is necessarily split into two modules since environment extensions cannot be used in the same module they are defined in.</p>\n<p><strong>LeanHDL/StageExt.lean</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">EnvExtension</span>\n\n<span class=\"c1\">-- This extra environment state tracks the current syntactic staging \"depth\"</span>\n<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"n\">stageEnv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EnvExtension</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">registerEnvExtension</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getStage</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadEnv</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">stageEnv</span><span class=\"bp\">.</span><span class=\"n\">getState</span><span class=\"w\"> </span><span class=\"bp\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">getEnv</span>\n\n<span class=\"c1\">-- Executes `x` in an environment with the specified `stageEnv` value</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadFinally</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadEnv</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">withEnv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stageEnv</span><span class=\"bp\">.</span><span class=\"n\">setState</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p><strong>LeanHDL/Basic.lean</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">LeanHDL</span><span class=\"bp\">.</span><span class=\"n\">StageExt</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">  (Very) partial re-implementation in Lean of \"Toatie: functional hardware description with dependent types\" by Craig Ramsay</span>\n<span class=\"cm\">  https://stax.strath.ac.uk/concern/theses/6w924c39c</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Unlike in the paper, I've put stage tracking in the `Code` type itself</span>\n<span class=\"c1\">-- Ideally there should be no way of using this type except through the syntax defined below</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">«~»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">Syntax</span>\n<span class=\"w\">  </span><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ⟨_⟩</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"⟪\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"⟫\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"kd\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"bp\">⟫</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stageLit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">stage</span>\n<span class=\"w\">      </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">stageLit</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ⟦_⟧</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"o\">]</span><span class=\"bp\">»</span><span class=\"o\">)</span><span class=\"s2\">\"[|\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"|]\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"kd\">]</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"o\">]</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">]),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stageLit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">stage</span>\n<span class=\"w\">      </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">stageLit</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ˜_</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"~\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"kd\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stagePredLit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"bp\">.</span><span class=\"n\">pred</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">stagePredLit</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫».</span><span class=\"n\">hasFVar</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"Free variables not allowed when escaping to stage 0\"</span>\n<span class=\"w\">      </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"c1\">-- All of the following types and functions are direct translations from the examples in the paper</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">bitAdd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">BitPair</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Why does `addU` fail to compile with (only) the below error message?</span>\n\n<span class=\"cm\">   unknown constant 'addU.match_2'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">addU</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⟫</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">Unsigned</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">cin</span><span class=\"bp\">|</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ux</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uy</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">xbs</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">ux</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">ybs</span><span class=\"w\"> </span><span class=\"n\">yb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">uy</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">cin'</span><span class=\"w\"> </span><span class=\"n\">lsb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">bitAdd</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"w\"> </span><span class=\"n\">yb</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"o\">(</span><span class=\"n\">addU</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">xbs</span><span class=\"bp\">|</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">ybs</span><span class=\"bp\">|</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">cin'</span><span class=\"bp\">|</span><span class=\"o\">])</span>\n<span class=\"w\">    </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">congr</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Unsigned</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">lsb</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"o\">]</span>\n<span class=\"n\">termination_by</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">w</span>\n\n<span class=\"c1\">-- Yet this desugared version works</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">addU2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Bit</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">⟫</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟪</span><span class=\"n\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⟫</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">Unsigned</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"n\">cin</span><span class=\"bp\">|</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ux</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uy</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">xbs</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ux</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">ybs</span><span class=\"w\"> </span><span class=\"n\">yb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">uy</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">cin'</span><span class=\"w\"> </span><span class=\"n\">lsb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">bitAdd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cin</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"w\"> </span><span class=\"n\">yb</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">addU2</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">xbs</span><span class=\"bp\">|</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">ybs</span><span class=\"bp\">|</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|</span><span class=\"n\">cin'</span><span class=\"bp\">|</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">congr</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Unsigned</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">lsb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 442553463,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717513846
    },
    {
        "content": "<p>I think it might be relevant that the desugared version (<code>addU2</code>) did not need <code>termination_by w =&gt; w</code>, and that without that line for <code>addU</code>, the error message is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  addU\nwith errors\nstructural recursion failed, produced type incorrect term\n  unknown constant 'addU.match_2'\n</code></pre></div>\n<p>Is there any way of seeing what is being \"produced\" (in the sense of that error message) to see what is going wrong?</p>",
        "id": 442637383,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717538048
    },
    {
        "content": "<p>Bizarrely, I have found that if I place the definition for <code>addU2</code> above <code>addU</code>, <code>addU</code> compiles without error.</p>",
        "id": 442799617,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717596717
    },
    {
        "content": "<p>By the way, rather than <code>let stageLit := Lean.Syntax.mkNumLit $ toString stage</code> you should be able to write <code>let stageLit := quote stage</code> or, later, just <code> `(Code $(quote stage):num $ty) </code></p>",
        "id": 442850251,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717608517
    },
    {
        "content": "<p>Found the error: <code>withEnv</code> is way too strong, since it reverts the entire environment, not only your environment extension.</p>",
        "id": 442854042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717609658
    },
    {
        "content": "<p>This is a fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadFinally</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MonadEnv</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oldS</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">  </span><span class=\"n\">try</span>\n<span class=\"w\">    </span><span class=\"n\">setEnv</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">stageEnv</span><span class=\"bp\">.</span><span class=\"n\">setState</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">finally</span>\n<span class=\"w\">    </span><span class=\"n\">setEnv</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">stageEnv</span><span class=\"bp\">.</span><span class=\"n\">setState</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">oldS</span>\n</code></pre></div>",
        "id": 442854107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717609682
    },
    {
        "content": "<p>I also modified the main file, but it doesn't seem necessary for the fix. The main thing is for <code>~</code> notation being sure to instantiate metavariables and having it make progress on instance synthesis problems before doing the <code>hasFVar</code> test. It's possible you also want to check that <code>hasMVar</code> is false since that's another way fvars can slip in, but in the future.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ⟨_⟩</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"⟪\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"⟫\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"kd\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"bp\">⟪_⟫»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"bp\">⟫</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"o\">):</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ⟦_⟧</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"o\">]</span><span class=\"bp\">»</span><span class=\"o\">)</span><span class=\"s2\">\"[|\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"|]\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"kd\">]</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">|_|</span><span class=\"o\">]</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"o\">]),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"o\">):</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- The corresponding syntax in the toatie paper is ˜_</span>\n<span class=\"w\">  </span><span class=\"kn\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"~\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n<span class=\"w\">  </span><span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"kd\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"bp\">~_»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElab</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">ty?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getStage</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">withSynthesize</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Code</span><span class=\"bp\">.«~»</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ty?</span>\n<span class=\"w\">      </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">synthesizeSyntheticMVars</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">instantiateMVars</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫».</span><span class=\"n\">hasFVar</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"Free variables not allowed when escaping to stage 0\"</span>\n<span class=\"w\">      </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"bp\">«⟪</span><span class=\"n\">t</span><span class=\"bp\">⟫»</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 442854559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717609818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Cryptic.20.22unknown.20constant.22.20error.20when.20using.20syntax.20extension/near/442854042\">said</a>:</p>\n<blockquote>\n<p>Found the error: <code>withEnv</code> is way too strong, since it reverts the entire environment, not only your environment extension.</p>\n</blockquote>\n<p>Aha! D'oh. Seems obvious in hindsight! Thank you very much.</p>",
        "id": 442867959,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717614195
    },
    {
        "content": "<p>And thanks for the tip about free variables!</p>",
        "id": 442873724,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717615912
    },
    {
        "content": "<p>One thing I have noticed though, is that if I insert a <code>tryPostpone</code> near the end of <code>«elab ~_»</code>, it appears that the correct stage environment is forgotten by the time the elaborator is attempted again - i.e. it thinks it's in stage 0 when it isn't. Any idea why that would be?</p>",
        "id": 442887972,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717619880
    },
    {
        "content": "<p>Hmm, looks like there's not much I can do about that because only what's in <code>Lean.Elab.Term.SavedContext</code> is preserved for the postponed elaborator call. So I guess I need to do something to prevent any postponement from within the elaboration of <code>t</code>, <del>perhaps by catching postponement exceptions</del> using <code>withoutPostponing</code>.</p>",
        "id": 442889693,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1717620321
    },
    {
        "content": "<p>I found a solution to the postponing issue, which is to not use <code>EnvExtension</code>, and instead use <code>Lean.Option</code>, which <em>is</em> preserved in the <code>SavedContext</code>. The implementations of <code>getStage</code> and <code>withStage</code> then change to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">register_option</span><span class=\"w\"> </span><span class=\"n\">hdl</span><span class=\"bp\">.</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">defValue</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getStage</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getNat</span><span class=\"w\"> </span><span class=\"ss\">`hdl.stage</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">withStage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">withOptions</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"bp\">.</span><span class=\"n\">setNat</span><span class=\"w\"> </span><span class=\"ss\">`hdl.stage</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>The downside now is that a user could easily just <code>set_option hdl.stage 1</code> and break the guarantees. Not sure if there's a way around that.</p>",
        "id": 444451521,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1718280916
    },
    {
        "content": "<p>You don't have to register options, and in fact the <code>defVal</code> is not used by <code>getNat</code>.</p>\n<p>If you don't register the option, users can't <code>set_option</code>, and furthermore you can make it very untypeable by using <code>Name.num</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">hdlStageOptionName</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"n\">decl_name</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getStage</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getNat</span><span class=\"w\"> </span><span class=\"n\">hdlStageOptionName</span>\n</code></pre></div>",
        "id": 444488975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718291375
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 444493982,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1718292613
    }
]